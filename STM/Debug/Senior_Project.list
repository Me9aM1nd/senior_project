
Senior_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081a4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  080082b8  080082b8  000182b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008518  08008518  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08008518  08008518  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008518  08008518  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008518  08008518  00018518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800851c  0800851c  0001851c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  20000078  08008598  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08008598  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dbb2  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ac  00000000  00000000  0002dc53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  00030000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  00030bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019661  00000000  00000000  000316b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd50  00000000  00000000  0004ad11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087df6  00000000  00000000  0005aa61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2857  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003598  00000000  00000000  000e28a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800829c 	.word	0x0800829c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800829c 	.word	0x0800829c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dc6:	2afd      	cmp	r2, #253	; 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	; 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	; 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	; 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__gesf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295
 8001018:	e006      	b.n	8001028 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__lesf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpsf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001030:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	bf18      	it	ne
 800103a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800103e:	d011      	beq.n	8001064 <__cmpsf2+0x40>
 8001040:	b001      	add	sp, #4
 8001042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001046:	bf18      	it	ne
 8001048:	ea90 0f01 	teqne	r0, r1
 800104c:	bf58      	it	pl
 800104e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001052:	bf88      	it	hi
 8001054:	17c8      	asrhi	r0, r1, #31
 8001056:	bf38      	it	cc
 8001058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800105c:	bf18      	it	ne
 800105e:	f040 0001 	orrne.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	d102      	bne.n	8001070 <__cmpsf2+0x4c>
 800106a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800106e:	d105      	bne.n	800107c <__cmpsf2+0x58>
 8001070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001074:	d1e4      	bne.n	8001040 <__cmpsf2+0x1c>
 8001076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107a:	d0e1      	beq.n	8001040 <__cmpsf2+0x1c>
 800107c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_cfrcmple>:
 8001084:	4684      	mov	ip, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4661      	mov	r1, ip
 800108a:	e7ff      	b.n	800108c <__aeabi_cfcmpeq>

0800108c <__aeabi_cfcmpeq>:
 800108c:	b50f      	push	{r0, r1, r2, r3, lr}
 800108e:	f7ff ffc9 	bl	8001024 <__cmpsf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	bf48      	it	mi
 8001096:	f110 0f00 	cmnmi.w	r0, #0
 800109a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800109c <__aeabi_fcmpeq>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff fff4 	bl	800108c <__aeabi_cfcmpeq>
 80010a4:	bf0c      	ite	eq
 80010a6:	2001      	moveq	r0, #1
 80010a8:	2000      	movne	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmplt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffea 	bl	800108c <__aeabi_cfcmpeq>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmple>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffe0 	bl	800108c <__aeabi_cfcmpeq>
 80010cc:	bf94      	ite	ls
 80010ce:	2001      	movls	r0, #1
 80010d0:	2000      	movhi	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmpge>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffd2 	bl	8001084 <__aeabi_cfrcmple>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpgt>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffc8 	bl	8001084 <__aeabi_cfrcmple>
 80010f4:	bf34      	ite	cc
 80010f6:	2001      	movcc	r0, #1
 80010f8:	2000      	movcs	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_f2iz>:
 8001100:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001104:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001108:	d30f      	bcc.n	800112a <__aeabi_f2iz+0x2a>
 800110a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001112:	d90d      	bls.n	8001130 <__aeabi_f2iz+0x30>
 8001114:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001118:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800111c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001120:	fa23 f002 	lsr.w	r0, r3, r2
 8001124:	bf18      	it	ne
 8001126:	4240      	negne	r0, r0
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr
 8001130:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001134:	d101      	bne.n	800113a <__aeabi_f2iz+0x3a>
 8001136:	0242      	lsls	r2, r0, #9
 8001138:	d105      	bne.n	8001146 <__aeabi_f2iz+0x46>
 800113a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800113e:	bf08      	it	eq
 8001140:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001144:	4770      	bx	lr
 8001146:	f04f 0000 	mov.w	r0, #0
 800114a:	4770      	bx	lr

0800114c <dev_trace_send_byte_int>:

//------------------------------------------------------------------------------
//         Local functions
//------------------------------------------------------------------------------
void dev_trace_send_byte_int(UINT8 b)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
		UINT8 i; 

		for (i=0; i<8; i++)
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]
 800115a:	e015      	b.n	8001188 <dev_trace_send_byte_int+0x3c>
		{
				dev_gpio_set(&trace_spi[TRACE_SPI_MOSI], b & 0x80); 
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001162:	b2db      	uxtb	r3, r3
 8001164:	4619      	mov	r1, r3
 8001166:	480c      	ldr	r0, [pc, #48]	; (8001198 <dev_trace_send_byte_int+0x4c>)
 8001168:	f001 f8bc 	bl	80022e4 <dev_gpio_set>
//				dev_gpio_set(&trace_spi[TRACE_SPI_MOSI], b & 0x80); 
				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 1); 
 800116c:	2101      	movs	r1, #1
 800116e:	480b      	ldr	r0, [pc, #44]	; (800119c <dev_trace_send_byte_int+0x50>)
 8001170:	f001 f8b8 	bl	80022e4 <dev_gpio_set>
//				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 1); 
				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 0); 
 8001174:	2100      	movs	r1, #0
 8001176:	4809      	ldr	r0, [pc, #36]	; (800119c <dev_trace_send_byte_int+0x50>)
 8001178:	f001 f8b4 	bl	80022e4 <dev_gpio_set>
//				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 0); 
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_SCK].port, trace_spi[TRACE_SPI_SCK].pin, b & 0x80);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 1);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
			
				b = b << 1;
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	71fb      	strb	r3, [r7, #7]
		for (i=0; i<8; i++)
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	3301      	adds	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	2b07      	cmp	r3, #7
 800118c:	d9e6      	bls.n	800115c <dev_trace_send_byte_int+0x10>
		}
}
 800118e:	bf00      	nop
 8001190:	bf00      	nop
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000098 	.word	0x20000098
 800119c:	200000b8 	.word	0x200000b8

080011a0 <dev_trace_init>:

//------------------------------------------------------------------------------
//         Global functions
//------------------------------------------------------------------------------
UINT8 dev_trace_init(dev_trace_init_t* init)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
		UINT8 ret;


		ret = dev_gpio_init_simp(&trace_spi[TRACE_SPI_MOSI], init->mosi.port, init->mosi.pin, GPIO_MODE_OUTPUT_PP);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7899      	ldrb	r1, [r3, #2]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	881a      	ldrh	r2, [r3, #0]
 80011b0:	2301      	movs	r3, #1
 80011b2:	4827      	ldr	r0, [pc, #156]	; (8001250 <dev_trace_init+0xb0>)
 80011b4:	f001 f866 	bl	8002284 <dev_gpio_init_simp>
 80011b8:	4603      	mov	r3, r0
 80011ba:	73fb      	strb	r3, [r7, #15]
		if (ret) return TRACE_EERROR(ret);
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d007      	beq.n	80011d2 <dev_trace_init+0x32>
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	224e      	movs	r2, #78	; 0x4e
 80011c6:	4923      	ldr	r1, [pc, #140]	; (8001254 <dev_trace_init+0xb4>)
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 f873 	bl	80012b4 <dev_trace_get_error>
 80011ce:	4603      	mov	r3, r0
 80011d0:	e039      	b.n	8001246 <dev_trace_init+0xa6>
		ret = dev_gpio_init_simp(&trace_spi[TRACE_SPI_SCK], init->sck.port, init->sck.pin, GPIO_MODE_OUTPUT_PP);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	7999      	ldrb	r1, [r3, #6]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	889a      	ldrh	r2, [r3, #4]
 80011da:	2301      	movs	r3, #1
 80011dc:	481e      	ldr	r0, [pc, #120]	; (8001258 <dev_trace_init+0xb8>)
 80011de:	f001 f851 	bl	8002284 <dev_gpio_init_simp>
 80011e2:	4603      	mov	r3, r0
 80011e4:	73fb      	strb	r3, [r7, #15]
		if (ret) return TRACE_EERROR(ret);
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d007      	beq.n	80011fc <dev_trace_init+0x5c>
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	2250      	movs	r2, #80	; 0x50
 80011f0:	4918      	ldr	r1, [pc, #96]	; (8001254 <dev_trace_init+0xb4>)
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f85e 	bl	80012b4 <dev_trace_get_error>
 80011f8:	4603      	mov	r3, r0
 80011fa:	e024      	b.n	8001246 <dev_trace_init+0xa6>
		ret = dev_gpio_init_simp(&trace_spi[TRACE_SPI_NSS], init->nss.port, init->nss.pin, GPIO_MODE_OUTPUT_PP);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	7a99      	ldrb	r1, [r3, #10]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	891a      	ldrh	r2, [r3, #8]
 8001204:	2301      	movs	r3, #1
 8001206:	4815      	ldr	r0, [pc, #84]	; (800125c <dev_trace_init+0xbc>)
 8001208:	f001 f83c 	bl	8002284 <dev_gpio_init_simp>
 800120c:	4603      	mov	r3, r0
 800120e:	73fb      	strb	r3, [r7, #15]
		if (ret) return TRACE_EERROR(ret);
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d007      	beq.n	8001226 <dev_trace_init+0x86>
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	2252      	movs	r2, #82	; 0x52
 800121a:	490e      	ldr	r1, [pc, #56]	; (8001254 <dev_trace_init+0xb4>)
 800121c:	4618      	mov	r0, r3
 800121e:	f000 f849 	bl	80012b4 <dev_trace_get_error>
 8001222:	4603      	mov	r3, r0
 8001224:	e00f      	b.n	8001246 <dev_trace_init+0xa6>
//  HAL_GPIO_Init(trace_spi[TRACE_SPI_NSS].port, &GPIO_InitStruct);	
	
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_NSS].port, trace_spi[TRACE_SPI_NSS].pin, 1);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_SCK].port, trace_spi[TRACE_SPI_SCK].pin, 0);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
		dev_gpio_set(&trace_spi[TRACE_SPI_NSS], 1);
 8001226:	2101      	movs	r1, #1
 8001228:	480c      	ldr	r0, [pc, #48]	; (800125c <dev_trace_init+0xbc>)
 800122a:	f001 f85b 	bl	80022e4 <dev_gpio_set>
		dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 0);
 800122e:	2100      	movs	r1, #0
 8001230:	4809      	ldr	r0, [pc, #36]	; (8001258 <dev_trace_init+0xb8>)
 8001232:	f001 f857 	bl	80022e4 <dev_gpio_set>
		dev_gpio_set(&trace_spi[TRACE_SPI_MOSI], 0);
 8001236:	2100      	movs	r1, #0
 8001238:	4805      	ldr	r0, [pc, #20]	; (8001250 <dev_trace_init+0xb0>)
 800123a:	f001 f853 	bl	80022e4 <dev_gpio_set>

		trace_ready = 1;	
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <dev_trace_init+0xc0>)
 8001240:	2201      	movs	r2, #1
 8001242:	701a      	strb	r2, [r3, #0]

		return RET_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000098 	.word	0x20000098
 8001254:	080082b8 	.word	0x080082b8
 8001258:	200000b8 	.word	0x200000b8
 800125c:	200000d8 	.word	0x200000d8
 8001260:	20000094 	.word	0x20000094

08001264 <dev_trace_send_byte>:

// Send one Byte 
void dev_trace_send_byte(UINT8 b)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
	if (trace_ready == 0) return;
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <dev_trace_send_byte+0x48>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d016      	beq.n	80012a4 <dev_trace_send_byte+0x40>

//		dev_gpio_set(&trace_spi[TRACE_SPI_NSS], 0);
		HAL_GPIO_WritePin(trace_spi[TRACE_SPI_NSS].port, trace_spi[TRACE_SPI_NSS].pin, 0);
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <dev_trace_send_byte+0x4c>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <dev_trace_send_byte+0x4c>)
 800127c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 8001280:	2200      	movs	r2, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f003 f907 	bl	8004496 <HAL_GPIO_WritePin>
		dev_trace_send_byte_int(b);
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff5e 	bl	800114c <dev_trace_send_byte_int>
//		dev_gpio_set(&trace_spi[TRACE_SPI_NSS], 1);
	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_NSS].port, trace_spi[TRACE_SPI_NSS].pin, 1);
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <dev_trace_send_byte+0x4c>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	4a06      	ldr	r2, [pc, #24]	; (80012b0 <dev_trace_send_byte+0x4c>)
 8001296:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 800129a:	2201      	movs	r2, #1
 800129c:	4618      	mov	r0, r3
 800129e:	f003 f8fa 	bl	8004496 <HAL_GPIO_WritePin>
 80012a2:	e000      	b.n	80012a6 <dev_trace_send_byte+0x42>
	if (trace_ready == 0) return;
 80012a4:	bf00      	nop
//		HAL_GPIO_WritePin(trace_spi[TRACE_SPI_SCK].port, trace_spi[TRACE_SPI_SCK].pin, 0);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
}
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000094 	.word	0x20000094
 80012b0:	20000098 	.word	0x20000098

080012b4 <dev_trace_get_error>:
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
}

// Get Trace error
uint8_t dev_trace_get_error(uint8_t error_value, char* file_name, uint32_t file_line)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	73fb      	strb	r3, [r7, #15]
		if (error_value == RET_OK) return RET_OK;
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d101      	bne.n	80012cc <dev_trace_get_error+0x18>
 80012c8:	2300      	movs	r3, #0
 80012ca:	e006      	b.n	80012da <dev_trace_get_error+0x26>
	
		debug_printf("EE> %d at %s:%d\n\r", error_value, file_name, file_line); 
 80012cc:	7bf9      	ldrb	r1, [r7, #15]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	68ba      	ldr	r2, [r7, #8]
 80012d2:	4804      	ldr	r0, [pc, #16]	; (80012e4 <dev_trace_get_error+0x30>)
 80012d4:	f000 f9b8 	bl	8001648 <debug_printf>

		return error_value;
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	080082d0 	.word	0x080082d0

080012e8 <dev_trace_generate_error>:

// Generate Trace error
uint8_t dev_trace_generate_error(char* error_name, char* file_name, uint32_t file_line)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
		trace_error_id++;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <dev_trace_generate_error+0x54>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	3301      	adds	r3, #1
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <dev_trace_generate_error+0x54>)
 80012fe:	701a      	strb	r2, [r3, #0]
		if (trace_error_id < 100) trace_error_id = 100;
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <dev_trace_generate_error+0x54>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b63      	cmp	r3, #99	; 0x63
 8001306:	d802      	bhi.n	800130e <dev_trace_generate_error+0x26>
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <dev_trace_generate_error+0x54>)
 800130a:	2264      	movs	r2, #100	; 0x64
 800130c:	701a      	strb	r2, [r3, #0]
		if (trace_error_id >= 200) trace_error_id = 100;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <dev_trace_generate_error+0x54>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2bc7      	cmp	r3, #199	; 0xc7
 8001314:	d902      	bls.n	800131c <dev_trace_generate_error+0x34>
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <dev_trace_generate_error+0x54>)
 8001318:	2264      	movs	r2, #100	; 0x64
 800131a:	701a      	strb	r2, [r3, #0]

		debug_printf("GE> %d %s at %s:%d\n\r", trace_error_id, error_name, file_name, file_line);
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <dev_trace_generate_error+0x54>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <dev_trace_generate_error+0x58>)
 800132c:	f000 f98c 	bl	8001648 <debug_printf>

		return trace_error_id;
 8001330:	4b02      	ldr	r3, [pc, #8]	; (800133c <dev_trace_generate_error+0x54>)
 8001332:	781b      	ldrb	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000095 	.word	0x20000095
 8001340:	080082e4 	.word	0x080082e4

08001344 <debug_printf_char>:
}

// Custom Printf function
//////////////////////////////////////////////////////////////////////////
void debug_printf_char(UINT8 c)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
    if (c < ' ') 
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	2b1f      	cmp	r3, #31
 8001352:	d82a      	bhi.n	80013aa <debug_printf_char+0x66>
    {    
        dev_trace_send_byte('~');
 8001354:	207e      	movs	r0, #126	; 0x7e
 8001356:	f7ff ff85 	bl	8001264 <dev_trace_send_byte>
        dev_trace_send_byte(HB2HEX(c / 0x10));
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	2b9f      	cmp	r3, #159	; 0x9f
 800135e:	d905      	bls.n	800136c <debug_printf_char+0x28>
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	091b      	lsrs	r3, r3, #4
 8001364:	b2db      	uxtb	r3, r3
 8001366:	3337      	adds	r3, #55	; 0x37
 8001368:	b2db      	uxtb	r3, r3
 800136a:	e004      	b.n	8001376 <debug_printf_char+0x32>
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	091b      	lsrs	r3, r3, #4
 8001370:	b2db      	uxtb	r3, r3
 8001372:	3330      	adds	r3, #48	; 0x30
 8001374:	b2db      	uxtb	r3, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff74 	bl	8001264 <dev_trace_send_byte>
        dev_trace_send_byte(HB2HEX(c % 0x10));
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b09      	cmp	r3, #9
 8001386:	d906      	bls.n	8001396 <debug_printf_char+0x52>
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	b2db      	uxtb	r3, r3
 8001390:	3337      	adds	r3, #55	; 0x37
 8001392:	b2db      	uxtb	r3, r3
 8001394:	e005      	b.n	80013a2 <debug_printf_char+0x5e>
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	f003 030f 	and.w	r3, r3, #15
 800139c:	b2db      	uxtb	r3, r3
 800139e:	3330      	adds	r3, #48	; 0x30
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff ff5e 	bl	8001264 <dev_trace_send_byte>
    }
    else dev_trace_send_byte(c);
}
 80013a8:	e003      	b.n	80013b2 <debug_printf_char+0x6e>
    else dev_trace_send_byte(c);
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff59 	bl	8001264 <dev_trace_send_byte>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <debug_printf_text>:

void debug_printf_text(char* text)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
   int i = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]

   while(text[i] != 0)
 80013c6:	e009      	b.n	80013dc <debug_printf_text+0x22>
   {   
      dev_trace_send_byte(text[i]);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff47 	bl	8001264 <dev_trace_send_byte>
      i++;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	3301      	adds	r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
   while(text[i] != 0)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1ef      	bne.n	80013c8 <debug_printf_text+0xe>
   }   
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <debug_printf_ulong>:

void debug_printf_ulong(unsigned long d)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
   UINT8 buf[10], len = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	75fb      	strb	r3, [r7, #23]

   if (d == 0) 
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d11c      	bne.n	8001440 <debug_printf_ulong+0x4c>
   {
      dev_trace_send_byte('0');
 8001406:	2030      	movs	r0, #48	; 0x30
 8001408:	f7ff ff2c 	bl	8001264 <dev_trace_send_byte>
 800140c:	e02d      	b.n	800146a <debug_printf_ulong+0x76>
      return;
   }   
   
   while (d > 0)
   {   
      buf[len] = d % 10;
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <debug_printf_ulong+0x7c>)
 8001412:	fba3 2301 	umull	r2, r3, r3, r1
 8001416:	08da      	lsrs	r2, r3, #3
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	1aca      	subs	r2, r1, r3
 8001422:	7dfb      	ldrb	r3, [r7, #23]
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	3318      	adds	r3, #24
 8001428:	443b      	add	r3, r7
 800142a:	f803 2c0c 	strb.w	r2, [r3, #-12]
      d = d / 10;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a0f      	ldr	r2, [pc, #60]	; (8001470 <debug_printf_ulong+0x7c>)
 8001432:	fba2 2303 	umull	r2, r3, r2, r3
 8001436:	08db      	lsrs	r3, r3, #3
 8001438:	607b      	str	r3, [r7, #4]
      len++;
 800143a:	7dfb      	ldrb	r3, [r7, #23]
 800143c:	3301      	adds	r3, #1
 800143e:	75fb      	strb	r3, [r7, #23]
   while (d > 0)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1e3      	bne.n	800140e <debug_printf_ulong+0x1a>
   }   

   while (len > 0)
 8001446:	e00d      	b.n	8001464 <debug_printf_ulong+0x70>
   {   
      dev_trace_send_byte(buf[len - 1] + 0x30);
 8001448:	7dfb      	ldrb	r3, [r7, #23]
 800144a:	3b01      	subs	r3, #1
 800144c:	3318      	adds	r3, #24
 800144e:	443b      	add	r3, r7
 8001450:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001454:	3330      	adds	r3, #48	; 0x30
 8001456:	b2db      	uxtb	r3, r3
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff03 	bl	8001264 <dev_trace_send_byte>
      len--;
 800145e:	7dfb      	ldrb	r3, [r7, #23]
 8001460:	3b01      	subs	r3, #1
 8001462:	75fb      	strb	r3, [r7, #23]
   while (len > 0)
 8001464:	7dfb      	ldrb	r3, [r7, #23]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1ee      	bne.n	8001448 <debug_printf_ulong+0x54>
   }   
}
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	cccccccd 	.word	0xcccccccd

08001474 <debug_printf_long>:

   debug_printf_ulong(d);
}

void debug_printf_long(unsigned long d, UINT8 mode)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	70fb      	strb	r3, [r7, #3]
   UINT8 buf[10], len = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	75fb      	strb	r3, [r7, #23]

   if (d == 0) 
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d103      	bne.n	8001492 <debug_printf_long+0x1e>
   {
      dev_trace_send_byte('0');
 800148a:	2030      	movs	r0, #48	; 0x30
 800148c:	f7ff feea 	bl	8001264 <dev_trace_send_byte>
 8001490:	e03a      	b.n	8001508 <debug_printf_long+0x94>
      return;
   }   
   
   if (mode == 'd') 
 8001492:	78fb      	ldrb	r3, [r7, #3]
 8001494:	2b64      	cmp	r3, #100	; 0x64
 8001496:	d122      	bne.n	80014de <debug_printf_long+0x6a>
   if ((signed long)d < 0) 
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	da1f      	bge.n	80014de <debug_printf_long+0x6a>
   {
      dev_trace_send_byte('-');
 800149e:	202d      	movs	r0, #45	; 0x2d
 80014a0:	f7ff fee0 	bl	8001264 <dev_trace_send_byte>
      d = -((signed long)d);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	425b      	negs	r3, r3
 80014a8:	607b      	str	r3, [r7, #4]
   }   

   while (d > 0)
 80014aa:	e018      	b.n	80014de <debug_printf_long+0x6a>
   {   
      buf[len] = d % 10;
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <debug_printf_long+0x9c>)
 80014b0:	fba3 2301 	umull	r2, r3, r3, r1
 80014b4:	08da      	lsrs	r2, r3, #3
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	1aca      	subs	r2, r1, r3
 80014c0:	7dfb      	ldrb	r3, [r7, #23]
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	3318      	adds	r3, #24
 80014c6:	443b      	add	r3, r7
 80014c8:	f803 2c0c 	strb.w	r2, [r3, #-12]
      d = d / 10;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a10      	ldr	r2, [pc, #64]	; (8001510 <debug_printf_long+0x9c>)
 80014d0:	fba2 2303 	umull	r2, r3, r2, r3
 80014d4:	08db      	lsrs	r3, r3, #3
 80014d6:	607b      	str	r3, [r7, #4]
      len++;
 80014d8:	7dfb      	ldrb	r3, [r7, #23]
 80014da:	3301      	adds	r3, #1
 80014dc:	75fb      	strb	r3, [r7, #23]
   while (d > 0)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1e3      	bne.n	80014ac <debug_printf_long+0x38>
   }   

   while (len > 0)
 80014e4:	e00d      	b.n	8001502 <debug_printf_long+0x8e>
   {   
      dev_trace_send_byte(buf[len - 1] + 0x30);
 80014e6:	7dfb      	ldrb	r3, [r7, #23]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	3318      	adds	r3, #24
 80014ec:	443b      	add	r3, r7
 80014ee:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80014f2:	3330      	adds	r3, #48	; 0x30
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff feb4 	bl	8001264 <dev_trace_send_byte>
      len--;
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
 80014fe:	3b01      	subs	r3, #1
 8001500:	75fb      	strb	r3, [r7, #23]
   while (len > 0)
 8001502:	7dfb      	ldrb	r3, [r7, #23]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1ee      	bne.n	80014e6 <debug_printf_long+0x72>
   }   
}
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	cccccccd 	.word	0xcccccccd

08001514 <debug_printf_hex>:

void debug_printf_hex(UINT32 d, UINT8 mode)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	70fb      	strb	r3, [r7, #3]
   UINT32 buf = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
   UINT8 b, len = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	72fb      	strb	r3, [r7, #11]

   if (d == 0) 
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d112      	bne.n	8001554 <debug_printf_hex+0x40>
   {
      dev_trace_send_byte('0');
 800152e:	2030      	movs	r0, #48	; 0x30
 8001530:	f7ff fe98 	bl	8001264 <dev_trace_send_byte>
      return;
 8001534:	e03a      	b.n	80015ac <debug_printf_hex+0x98>
   }   

   while (d > 0)
   {  
      buf = buf << 4;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	60fb      	str	r3, [r7, #12]
      buf = buf + d % 0x10;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	4413      	add	r3, r2
 8001546:	60fb      	str	r3, [r7, #12]
      d = d >> 4;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	091b      	lsrs	r3, r3, #4
 800154c:	607b      	str	r3, [r7, #4]
      len++;
 800154e:	7afb      	ldrb	r3, [r7, #11]
 8001550:	3301      	adds	r3, #1
 8001552:	72fb      	strb	r3, [r7, #11]
   while (d > 0)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1ed      	bne.n	8001536 <debug_printf_hex+0x22>
   }   

   while (len > 0)
 800155a:	e024      	b.n	80015a6 <debug_printf_hex+0x92>
   {   
      b = buf % 0x10;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	f003 030f 	and.w	r3, r3, #15
 8001564:	72bb      	strb	r3, [r7, #10]
   
      if (b < 0xA) dev_trace_send_byte(b + 0x30);
 8001566:	7abb      	ldrb	r3, [r7, #10]
 8001568:	2b09      	cmp	r3, #9
 800156a:	d806      	bhi.n	800157a <debug_printf_hex+0x66>
 800156c:	7abb      	ldrb	r3, [r7, #10]
 800156e:	3330      	adds	r3, #48	; 0x30
 8001570:	b2db      	uxtb	r3, r3
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fe76 	bl	8001264 <dev_trace_send_byte>
 8001578:	e00f      	b.n	800159a <debug_printf_hex+0x86>
      else  
      {      
         if (mode == 'X') dev_trace_send_byte(b + 0x41 - 0xA);
 800157a:	78fb      	ldrb	r3, [r7, #3]
 800157c:	2b58      	cmp	r3, #88	; 0x58
 800157e:	d106      	bne.n	800158e <debug_printf_hex+0x7a>
 8001580:	7abb      	ldrb	r3, [r7, #10]
 8001582:	3337      	adds	r3, #55	; 0x37
 8001584:	b2db      	uxtb	r3, r3
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fe6c 	bl	8001264 <dev_trace_send_byte>
 800158c:	e005      	b.n	800159a <debug_printf_hex+0x86>
                  else  dev_trace_send_byte(b + 0x61 - 0xA);
 800158e:	7abb      	ldrb	r3, [r7, #10]
 8001590:	3357      	adds	r3, #87	; 0x57
 8001592:	b2db      	uxtb	r3, r3
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fe65 	bl	8001264 <dev_trace_send_byte>
      }

      buf = buf >> 4;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	091b      	lsrs	r3, r3, #4
 800159e:	60fb      	str	r3, [r7, #12]
      len--;
 80015a0:	7afb      	ldrb	r3, [r7, #11]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	72fb      	strb	r3, [r7, #11]
   while (len > 0)
 80015a6:	7afb      	ldrb	r3, [r7, #11]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1d7      	bne.n	800155c <debug_printf_hex+0x48>
   }   
}
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <debug_printf_bin>:

void debug_printf_bin(UINT32 d, UINT8 mode)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b084      	sub	sp, #16
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	460b      	mov	r3, r1
 80015bc:	70fb      	strb	r3, [r7, #3]
   UINT32 buf = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
   UINT8 i, len = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	72bb      	strb	r3, [r7, #10]

   if (mode == 'B') len = 32;
 80015c6:	78fb      	ldrb	r3, [r7, #3]
 80015c8:	2b42      	cmp	r3, #66	; 0x42
 80015ca:	d102      	bne.n	80015d2 <debug_printf_bin+0x20>
 80015cc:	2320      	movs	r3, #32
 80015ce:	72bb      	strb	r3, [r7, #10]
 80015d0:	e001      	b.n	80015d6 <debug_printf_bin+0x24>
                else len = 8;
 80015d2:	2308      	movs	r3, #8
 80015d4:	72bb      	strb	r3, [r7, #10]

   for(i=0; i<len; i++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	72fb      	strb	r3, [r7, #11]
 80015da:	e010      	b.n	80015fe <debug_printf_bin+0x4c>
   {
      buf = buf << 1;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	60fb      	str	r3, [r7, #12]
      if (d % 2) buf++;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d002      	beq.n	80015f2 <debug_printf_bin+0x40>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	3301      	adds	r3, #1
 80015f0:	60fb      	str	r3, [r7, #12]
      d = d >> 1;      
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	085b      	lsrs	r3, r3, #1
 80015f6:	607b      	str	r3, [r7, #4]
   for(i=0; i<len; i++)
 80015f8:	7afb      	ldrb	r3, [r7, #11]
 80015fa:	3301      	adds	r3, #1
 80015fc:	72fb      	strb	r3, [r7, #11]
 80015fe:	7afa      	ldrb	r2, [r7, #11]
 8001600:	7abb      	ldrb	r3, [r7, #10]
 8001602:	429a      	cmp	r2, r3
 8001604:	d3ea      	bcc.n	80015dc <debug_printf_bin+0x2a>
   }   
                
   for(i=0; i<len; i++)
 8001606:	2300      	movs	r3, #0
 8001608:	72fb      	strb	r3, [r7, #11]
 800160a:	e011      	b.n	8001630 <debug_printf_bin+0x7e>
   {
      if (buf % 2) dev_trace_send_byte('1');
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <debug_printf_bin+0x6c>
 8001616:	2031      	movs	r0, #49	; 0x31
 8001618:	f7ff fe24 	bl	8001264 <dev_trace_send_byte>
 800161c:	e002      	b.n	8001624 <debug_printf_bin+0x72>
            else dev_trace_send_byte('0');
 800161e:	2030      	movs	r0, #48	; 0x30
 8001620:	f7ff fe20 	bl	8001264 <dev_trace_send_byte>
               
      buf = buf >> 1;      
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	085b      	lsrs	r3, r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
   for(i=0; i<len; i++)
 800162a:	7afb      	ldrb	r3, [r7, #11]
 800162c:	3301      	adds	r3, #1
 800162e:	72fb      	strb	r3, [r7, #11]
 8001630:	7afa      	ldrb	r2, [r7, #11]
 8001632:	7abb      	ldrb	r3, [r7, #10]
 8001634:	429a      	cmp	r2, r3
 8001636:	d3e9      	bcc.n	800160c <debug_printf_bin+0x5a>
   }   
}
 8001638:	bf00      	nop
 800163a:	bf00      	nop
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	0000      	movs	r0, r0
 8001644:	0000      	movs	r0, r0
	...

08001648 <debug_printf>:

void debug_printf(char* text, ...)
{
 8001648:	b40f      	push	{r0, r1, r2, r3}
 800164a:	b5b0      	push	{r4, r5, r7, lr}
 800164c:	b098      	sub	sp, #96	; 0x60
 800164e:	af00      	add	r7, sp, #0
   va_list tag;
   int i = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	65fb      	str	r3, [r7, #92]	; 0x5c

   va_start(tag, text);
 8001654:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001658:	60bb      	str	r3, [r7, #8]
   
   while(text[i] != 0)
 800165a:	e225      	b.n	8001aa8 <debug_printf+0x460>
   {
      if (text[i] != '%') 
 800165c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800165e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001660:	4413      	add	r3, r2
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b25      	cmp	r3, #37	; 0x25
 8001666:	d00a      	beq.n	800167e <debug_printf+0x36>
      {
         dev_trace_send_byte(text[i]);
 8001668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800166a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800166c:	4413      	add	r3, r2
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fdf7 	bl	8001264 <dev_trace_send_byte>
         i++;
 8001676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001678:	3301      	adds	r3, #1
 800167a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800167c:	e214      	b.n	8001aa8 <debug_printf+0x460>
//         continue;
      }   
      else if (text[i + 1] != 0)
 800167e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001680:	3301      	adds	r3, #1
 8001682:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001684:	4413      	add	r3, r2
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 820d 	beq.w	8001aa8 <debug_printf+0x460>
      {   
         switch(text[i + 1])   
 800168e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001690:	3301      	adds	r3, #1
 8001692:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001694:	4413      	add	r3, r2
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	3b42      	subs	r3, #66	; 0x42
 800169a:	2b36      	cmp	r3, #54	; 0x36
 800169c:	f200 8201 	bhi.w	8001aa2 <debug_printf+0x45a>
 80016a0:	a201      	add	r2, pc, #4	; (adr r2, 80016a8 <debug_printf+0x60>)
 80016a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a6:	bf00      	nop
 80016a8:	08001959 	.word	0x08001959
 80016ac:	08001aa3 	.word	0x08001aa3
 80016b0:	08001aa3 	.word	0x08001aa3
 80016b4:	08001aa3 	.word	0x08001aa3
 80016b8:	08001aa3 	.word	0x08001aa3
 80016bc:	08001aa3 	.word	0x08001aa3
 80016c0:	08001aa3 	.word	0x08001aa3
 80016c4:	08001aa3 	.word	0x08001aa3
 80016c8:	08001aa3 	.word	0x08001aa3
 80016cc:	08001aa3 	.word	0x08001aa3
 80016d0:	08001aa3 	.word	0x08001aa3
 80016d4:	08001a0f 	.word	0x08001a0f
 80016d8:	08001aa3 	.word	0x08001aa3
 80016dc:	08001aa3 	.word	0x08001aa3
 80016e0:	08001aa3 	.word	0x08001aa3
 80016e4:	08001aa3 	.word	0x08001aa3
 80016e8:	08001aa3 	.word	0x08001aa3
 80016ec:	08001aa3 	.word	0x08001aa3
 80016f0:	08001aa3 	.word	0x08001aa3
 80016f4:	08001aa3 	.word	0x08001aa3
 80016f8:	08001aa3 	.word	0x08001aa3
 80016fc:	08001aa3 	.word	0x08001aa3
 8001700:	08001931 	.word	0x08001931
 8001704:	08001aa3 	.word	0x08001aa3
 8001708:	08001aa3 	.word	0x08001aa3
 800170c:	08001aa3 	.word	0x08001aa3
 8001710:	08001aa3 	.word	0x08001aa3
 8001714:	08001aa3 	.word	0x08001aa3
 8001718:	08001aa3 	.word	0x08001aa3
 800171c:	08001aa3 	.word	0x08001aa3
 8001720:	08001aa3 	.word	0x08001aa3
 8001724:	08001aa3 	.word	0x08001aa3
 8001728:	08001945 	.word	0x08001945
 800172c:	08001905 	.word	0x08001905
 8001730:	08001785 	.word	0x08001785
 8001734:	08001aa3 	.word	0x08001aa3
 8001738:	080017af 	.word	0x080017af
 800173c:	08001aa3 	.word	0x08001aa3
 8001740:	08001aa3 	.word	0x08001aa3
 8001744:	08001aa3 	.word	0x08001aa3
 8001748:	08001aa3 	.word	0x08001aa3
 800174c:	08001aa3 	.word	0x08001aa3
 8001750:	08001aa3 	.word	0x08001aa3
 8001754:	0800196d 	.word	0x0800196d
 8001758:	08001aa3 	.word	0x08001aa3
 800175c:	08001aa3 	.word	0x08001aa3
 8001760:	08001a4f 	.word	0x08001a4f
 8001764:	08001aa3 	.word	0x08001aa3
 8001768:	08001aa3 	.word	0x08001aa3
 800176c:	080018f3 	.word	0x080018f3
 8001770:	08001aa3 	.word	0x08001aa3
 8001774:	0800179b 	.word	0x0800179b
 8001778:	08001aa3 	.word	0x08001aa3
 800177c:	08001aa3 	.word	0x08001aa3
 8001780:	0800191d 	.word	0x0800191d
         {
            case 'd' : 
               {
                  signed long d = va_arg(tag, signed long);
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	1d1a      	adds	r2, r3, #4
 8001788:	60ba      	str	r2, [r7, #8]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
                  debug_printf_long(d, 'd');
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	2164      	movs	r1, #100	; 0x64
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fe6e 	bl	8001474 <debug_printf_long>
               } break;
 8001798:	e183      	b.n	8001aa2 <debug_printf+0x45a>

            case 'u' : 
               {
                  unsigned long d = va_arg(tag, unsigned long);
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	1d1a      	adds	r2, r3, #4
 800179e:	60ba      	str	r2, [r7, #8]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	63bb      	str	r3, [r7, #56]	; 0x38
                  debug_printf_long(d, 'u');
 80017a4:	2175      	movs	r1, #117	; 0x75
 80017a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80017a8:	f7ff fe64 	bl	8001474 <debug_printf_long>
               } break;
 80017ac:	e179      	b.n	8001aa2 <debug_printf+0x45a>

            case 'f' :
               {
                  signed long l;
                  unsigned char i, m[8];
                  double d = va_arg(tag, double);
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	3307      	adds	r3, #7
 80017b2:	f023 0307 	bic.w	r3, r3, #7
 80017b6:	f103 0208 	add.w	r2, r3, #8
 80017ba:	60ba      	str	r2, [r7, #8]
 80017bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

                  if (d < 0)
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80017d0:	f7ff f8ec 	bl	80009ac <__aeabi_dcmplt>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d008      	beq.n	80017ec <debug_printf+0x1a4>
                  {
                    d = -d;
 80017da:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 80017dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017de:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80017e2:	e9c7 4512 	strd	r4, r5, [r7, #72]	; 0x48
                    dev_trace_send_byte('-');
 80017e6:	202d      	movs	r0, #45	; 0x2d
 80017e8:	f7ff fd3c 	bl	8001264 <dev_trace_send_byte>
                  }

                  debug_printf_ulong(d);
 80017ec:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80017f0:	f7ff f942 	bl	8000a78 <__aeabi_d2uiz>
 80017f4:	4603      	mov	r3, r0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fdfc 	bl	80013f4 <debug_printf_ulong>
                  dev_trace_send_byte('.');
 80017fc:	202e      	movs	r0, #46	; 0x2e
 80017fe:	f7ff fd31 	bl	8001264 <dev_trace_send_byte>

                  d =  d - (signed long)d;
 8001802:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001806:	f7ff f90f 	bl	8000a28 <__aeabi_d2iz>
 800180a:	4603      	mov	r3, r0
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fdf1 	bl	80003f4 <__aeabi_i2d>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800181a:	f7fe fc9d 	bl	8000158 <__aeabi_dsub>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
                  l = d * 1000000000;
 8001826:	a3a8      	add	r3, pc, #672	; (adr r3, 8001ac8 <debug_printf+0x480>)
 8001828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001830:	f7fe fe4a 	bl	80004c8 <__aeabi_dmul>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	f7ff f8f4 	bl	8000a28 <__aeabi_d2iz>
 8001840:	4603      	mov	r3, r0
 8001842:	65bb      	str	r3, [r7, #88]	; 0x58

                  if ((l % 1000) > 500) l = l / 1000 + 1;
 8001844:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001846:	4ba2      	ldr	r3, [pc, #648]	; (8001ad0 <debug_printf+0x488>)
 8001848:	fb83 1302 	smull	r1, r3, r3, r2
 800184c:	1199      	asrs	r1, r3, #6
 800184e:	17d3      	asrs	r3, r2, #31
 8001850:	1acb      	subs	r3, r1, r3
 8001852:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001856:	fb01 f303 	mul.w	r3, r1, r3
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001860:	dd09      	ble.n	8001876 <debug_printf+0x22e>
 8001862:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001864:	4a9a      	ldr	r2, [pc, #616]	; (8001ad0 <debug_printf+0x488>)
 8001866:	fb82 1203 	smull	r1, r2, r2, r3
 800186a:	1192      	asrs	r2, r2, #6
 800186c:	17db      	asrs	r3, r3, #31
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	3301      	adds	r3, #1
 8001872:	65bb      	str	r3, [r7, #88]	; 0x58
 8001874:	e007      	b.n	8001886 <debug_printf+0x23e>
                                  else  l = l / 1000;
 8001876:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001878:	4a95      	ldr	r2, [pc, #596]	; (8001ad0 <debug_printf+0x488>)
 800187a:	fb82 1203 	smull	r1, r2, r2, r3
 800187e:	1192      	asrs	r2, r2, #6
 8001880:	17db      	asrs	r3, r3, #31
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	65bb      	str	r3, [r7, #88]	; 0x58
      //                m[1] = 0;
        //              debug_printf_text(m);
          //            break;
            //      }

                  i = 6; //sizeof(m);
 8001886:	2306      	movs	r3, #6
 8001888:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  //                {
    //                 l = l / 10;
      //               i--;
        //          }

                  m[i] = 0;
 800188c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001890:	3360      	adds	r3, #96	; 0x60
 8001892:	443b      	add	r3, r7
 8001894:	2200      	movs	r2, #0
 8001896:	f803 2c60 	strb.w	r2, [r3, #-96]
                  while (i)
 800189a:	e021      	b.n	80018e0 <debug_printf+0x298>
                  {
                     i--;
 800189c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80018a0:	3b01      	subs	r3, #1
 80018a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                     m[i] = 0x30 + (l % 10);
 80018a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80018a8:	4b8a      	ldr	r3, [pc, #552]	; (8001ad4 <debug_printf+0x48c>)
 80018aa:	fb83 1302 	smull	r1, r3, r3, r2
 80018ae:	1099      	asrs	r1, r3, #2
 80018b0:	17d3      	asrs	r3, r2, #31
 80018b2:	1ac9      	subs	r1, r1, r3
 80018b4:	460b      	mov	r3, r1
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	1ad1      	subs	r1, r2, r3
 80018be:	b2ca      	uxtb	r2, r1
 80018c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80018c4:	3230      	adds	r2, #48	; 0x30
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	3360      	adds	r3, #96	; 0x60
 80018ca:	443b      	add	r3, r7
 80018cc:	f803 2c60 	strb.w	r2, [r3, #-96]
                     l = l / 10;
 80018d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018d2:	4a80      	ldr	r2, [pc, #512]	; (8001ad4 <debug_printf+0x48c>)
 80018d4:	fb82 1203 	smull	r1, r2, r2, r3
 80018d8:	1092      	asrs	r2, r2, #2
 80018da:	17db      	asrs	r3, r3, #31
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	65bb      	str	r3, [r7, #88]	; 0x58
                  while (i)
 80018e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1d9      	bne.n	800189c <debug_printf+0x254>
                  }

                  debug_printf_text((char*)m);
 80018e8:	463b      	mov	r3, r7
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fd65 	bl	80013ba <debug_printf_text>

               } break;
 80018f0:	e0d7      	b.n	8001aa2 <debug_printf+0x45a>
           
            case 's' : 
               {
                  char* s = va_arg(tag, char*);
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	1d1a      	adds	r2, r3, #4
 80018f6:	60ba      	str	r2, [r7, #8]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	637b      	str	r3, [r7, #52]	; 0x34
                  debug_printf_text(s);
 80018fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80018fe:	f7ff fd5c 	bl	80013ba <debug_printf_text>
               } break;
 8001902:	e0ce      	b.n	8001aa2 <debug_printf+0x45a>

            case 'c' : 
               {
                  UINT8 b = va_arg(tag, unsigned long);
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	1d1a      	adds	r2, r3, #4
 8001908:	60ba      	str	r2, [r7, #8]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                  debug_printf_char(b);
 8001910:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fd15 	bl	8001344 <debug_printf_char>
               } break;
 800191a:	e0c2      	b.n	8001aa2 <debug_printf+0x45a>
           
            case 'x' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	1d1a      	adds	r2, r3, #4
 8001920:	60ba      	str	r2, [r7, #8]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	63fb      	str	r3, [r7, #60]	; 0x3c
                  debug_printf_hex(d, 'x');
 8001926:	2178      	movs	r1, #120	; 0x78
 8001928:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800192a:	f7ff fdf3 	bl	8001514 <debug_printf_hex>
               } break;
 800192e:	e0b8      	b.n	8001aa2 <debug_printf+0x45a>
            
            case 'X' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	1d1a      	adds	r2, r3, #4
 8001934:	60ba      	str	r2, [r7, #8]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	61bb      	str	r3, [r7, #24]
                  debug_printf_hex(d, 'X');
 800193a:	2158      	movs	r1, #88	; 0x58
 800193c:	69b8      	ldr	r0, [r7, #24]
 800193e:	f7ff fde9 	bl	8001514 <debug_printf_hex>
               } break;
 8001942:	e0ae      	b.n	8001aa2 <debug_printf+0x45a>
            
            case 'b' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	1d1a      	adds	r2, r3, #4
 8001948:	60ba      	str	r2, [r7, #8]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	61fb      	str	r3, [r7, #28]
                  debug_printf_bin(d, 'b');
 800194e:	2162      	movs	r1, #98	; 0x62
 8001950:	69f8      	ldr	r0, [r7, #28]
 8001952:	f7ff fe2e 	bl	80015b2 <debug_printf_bin>
               } break;
 8001956:	e0a4      	b.n	8001aa2 <debug_printf+0x45a>
            
            case 'B' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	1d1a      	adds	r2, r3, #4
 800195c:	60ba      	str	r2, [r7, #8]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	60fb      	str	r3, [r7, #12]
                  debug_printf_bin(d, 'B');
 8001962:	2142      	movs	r1, #66	; 0x42
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f7ff fe24 	bl	80015b2 <debug_printf_bin>
               } break;
 800196a:	e09a      	b.n	8001aa2 <debug_printf+0x45a>
            
            case 'm' : 
               {
                  UINT8* mm = va_arg(tag, UINT8*);
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	1d1a      	adds	r2, r3, #4
 8001970:	60ba      	str	r2, [r7, #8]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
                  UINT16 size = va_arg(tag, int);
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1d1a      	adds	r2, r3, #4
 800197a:	60ba      	str	r2, [r7, #8]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	857b      	strh	r3, [r7, #42]	; 0x2a
                  int ii;

                  for(ii=0; ii<size; ii++) 
 8001980:	2300      	movs	r3, #0
 8001982:	647b      	str	r3, [r7, #68]	; 0x44
 8001984:	e03e      	b.n	8001a04 <debug_printf+0x3bc>
                  {   
                     dev_trace_send_byte(HB2HEX(mm[ii] / 0x10));
 8001986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800198a:	4413      	add	r3, r2
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b9f      	cmp	r3, #159	; 0x9f
 8001990:	d908      	bls.n	80019a4 <debug_printf+0x35c>
 8001992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001996:	4413      	add	r3, r2
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	091b      	lsrs	r3, r3, #4
 800199c:	b2db      	uxtb	r3, r3
 800199e:	3337      	adds	r3, #55	; 0x37
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	e007      	b.n	80019b4 <debug_printf+0x36c>
 80019a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019a8:	4413      	add	r3, r2
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	3330      	adds	r3, #48	; 0x30
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fc55 	bl	8001264 <dev_trace_send_byte>
                     dev_trace_send_byte(HB2HEX(mm[ii] % 0x10));
 80019ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019be:	4413      	add	r3, r2
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b09      	cmp	r3, #9
 80019ca:	d909      	bls.n	80019e0 <debug_printf+0x398>
 80019cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019d0:	4413      	add	r3, r2
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	f003 030f 	and.w	r3, r3, #15
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	3337      	adds	r3, #55	; 0x37
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	e008      	b.n	80019f2 <debug_printf+0x3aa>
 80019e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019e4:	4413      	add	r3, r2
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	f003 030f 	and.w	r3, r3, #15
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	3330      	adds	r3, #48	; 0x30
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fc36 	bl	8001264 <dev_trace_send_byte>
                     dev_trace_send_byte(' ');
 80019f8:	2020      	movs	r0, #32
 80019fa:	f7ff fc33 	bl	8001264 <dev_trace_send_byte>
                  for(ii=0; ii<size; ii++) 
 80019fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a00:	3301      	adds	r3, #1
 8001a02:	647b      	str	r3, [r7, #68]	; 0x44
 8001a04:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	dbbc      	blt.n	8001986 <debug_printf+0x33e>
                  }
               
               } break;
 8001a0c:	e049      	b.n	8001aa2 <debug_printf+0x45a>

            case 'M' : 
               {
                  UINT8* mm = va_arg(tag, UINT8*);
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	1d1a      	adds	r2, r3, #4
 8001a12:	60ba      	str	r2, [r7, #8]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	617b      	str	r3, [r7, #20]
                  UINT16 size = va_arg(tag, int);
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	1d1a      	adds	r2, r3, #4
 8001a1c:	60ba      	str	r2, [r7, #8]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	827b      	strh	r3, [r7, #18]
                  int ii;

                  for(ii=0; ii<size; ii++) 
 8001a22:	2300      	movs	r3, #0
 8001a24:	643b      	str	r3, [r7, #64]	; 0x40
 8001a26:	e00d      	b.n	8001a44 <debug_printf+0x3fc>
                  {   
                     debug_printf_long(mm[ii], 'u');
 8001a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2175      	movs	r1, #117	; 0x75
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fd1e 	bl	8001474 <debug_printf_long>
                     dev_trace_send_byte(' ');
 8001a38:	2020      	movs	r0, #32
 8001a3a:	f7ff fc13 	bl	8001264 <dev_trace_send_byte>
                  for(ii=0; ii<size; ii++) 
 8001a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a40:	3301      	adds	r3, #1
 8001a42:	643b      	str	r3, [r7, #64]	; 0x40
 8001a44:	8a7b      	ldrh	r3, [r7, #18]
 8001a46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	dbed      	blt.n	8001a28 <debug_printf+0x3e0>
                  }
               
               } break;
 8001a4c:	e029      	b.n	8001aa2 <debug_printf+0x45a>

            case 'p' : 
               {
                  UINT8* mm = va_arg(tag, UINT8*);
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	1d1a      	adds	r2, r3, #4
 8001a52:	60ba      	str	r2, [r7, #8]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	633b      	str	r3, [r7, #48]	; 0x30
               
                  debug_printf_long(mm[0], 'u');
 8001a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2175      	movs	r1, #117	; 0x75
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fd08 	bl	8001474 <debug_printf_long>
                  dev_trace_send_byte('.');
 8001a64:	202e      	movs	r0, #46	; 0x2e
 8001a66:	f7ff fbfd 	bl	8001264 <dev_trace_send_byte>
                  debug_printf_long(mm[1], 'u');
 8001a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2175      	movs	r1, #117	; 0x75
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fcfe 	bl	8001474 <debug_printf_long>
                  dev_trace_send_byte('.');
 8001a78:	202e      	movs	r0, #46	; 0x2e
 8001a7a:	f7ff fbf3 	bl	8001264 <dev_trace_send_byte>
                  debug_printf_long(mm[2], 'u');
 8001a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a80:	3302      	adds	r3, #2
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2175      	movs	r1, #117	; 0x75
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fcf4 	bl	8001474 <debug_printf_long>
                  dev_trace_send_byte('.');
 8001a8c:	202e      	movs	r0, #46	; 0x2e
 8001a8e:	f7ff fbe9 	bl	8001264 <dev_trace_send_byte>
                  debug_printf_long(mm[3], 'u');
 8001a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a94:	3303      	adds	r3, #3
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2175      	movs	r1, #117	; 0x75
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fcea 	bl	8001474 <debug_printf_long>
               
               } break;
 8001aa0:	bf00      	nop
           
         }
      
         i += 2;
 8001aa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aa4:	3302      	adds	r3, #2
 8001aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
   while(text[i] != 0)
 8001aa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aaa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001aac:	4413      	add	r3, r2
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f47f add3 	bne.w	800165c <debug_printf+0x14>
      }
   }   

}
 8001ab6:	bf00      	nop
 8001ab8:	bf00      	nop
 8001aba:	3760      	adds	r7, #96	; 0x60
 8001abc:	46bd      	mov	sp, r7
 8001abe:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001ac2:	b004      	add	sp, #16
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	00000000 	.word	0x00000000
 8001acc:	41cdcd65 	.word	0x41cdcd65
 8001ad0:	10624dd3 	.word	0x10624dd3
 8001ad4:	66666667 	.word	0x66666667

08001ad8 <hal_driver_set_info>:
static void* dma_2_irq_data[16];



void hal_driver_set_info(dev_info_t* info_1, dev_info_t* info_2)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
		info_2->id = info_1->id;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	781a      	ldrb	r2, [r3, #0]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	701a      	strb	r2, [r3, #0]
		info_2->status_in = info_1->status_in;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	605a      	str	r2, [r3, #4]
		info_2->status_out = info_1->status_out;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	609a      	str	r2, [r3, #8]
		info_2->name = info_1->name;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	691a      	ldr	r2, [r3, #16]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	611a      	str	r2, [r3, #16]
	
		info_2->rx_mode = HAL_DEFAULT_MODE_SYNC;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	2200      	movs	r2, #0
 8001b06:	731a      	strb	r2, [r3, #12]
		info_2->tx_mode = HAL_DEFAULT_MODE_SYNC;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	735a      	strb	r2, [r3, #13]
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <EXTI1_IRQHandler>:
//------------------------------------------------------------------------------
//         internal Functions
//------------------------------------------------------------------------------

//void EXTI0_IRQHandler(void){ (*gpio_irq_cbf[0])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);}
void EXTI1_IRQHandler(void){ (*gpio_irq_cbf[1])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);}
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <EXTI1_IRQHandler+0x14>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	4798      	blx	r3
 8001b22:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <EXTI1_IRQHandler+0x18>)
 8001b24:	2202      	movs	r2, #2
 8001b26:	615a      	str	r2, [r3, #20]
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	200000f8 	.word	0x200000f8
 8001b30:	40010400 	.word	0x40010400

08001b34 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){ (*gpio_irq_cbf[2])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2);}
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <EXTI2_IRQHandler+0x14>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	4798      	blx	r3
 8001b3e:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <EXTI2_IRQHandler+0x18>)
 8001b40:	2204      	movs	r2, #4
 8001b42:	615a      	str	r2, [r3, #20]
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	200000f8 	.word	0x200000f8
 8001b4c:	40010400 	.word	0x40010400

08001b50 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){ (*gpio_irq_cbf[3])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);}
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <EXTI3_IRQHandler+0x14>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	4798      	blx	r3
 8001b5a:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <EXTI3_IRQHandler+0x18>)
 8001b5c:	2208      	movs	r2, #8
 8001b5e:	615a      	str	r2, [r3, #20]
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	200000f8 	.word	0x200000f8
 8001b68:	40010400 	.word	0x40010400

08001b6c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){ (*gpio_irq_cbf[4])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);}
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <EXTI4_IRQHandler+0x14>)
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	4798      	blx	r3
 8001b76:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <EXTI4_IRQHandler+0x18>)
 8001b78:	2210      	movs	r2, #16
 8001b7a:	615a      	str	r2, [r3, #20]
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	200000f8 	.word	0x200000f8
 8001b84:	40010400 	.word	0x40010400

08001b88 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{ 
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_5) != RESET) { (*gpio_irq_cbf[5])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5); }
 8001b8c:	4b1f      	ldr	r3, [pc, #124]	; (8001c0c <EXTI9_5_IRQHandler+0x84>)
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	f003 0320 	and.w	r3, r3, #32
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <EXTI9_5_IRQHandler+0x1c>
 8001b98:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <EXTI9_5_IRQHandler+0x88>)
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	4798      	blx	r3
 8001b9e:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <EXTI9_5_IRQHandler+0x84>)
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET) { (*gpio_irq_cbf[6])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6); }
 8001ba4:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <EXTI9_5_IRQHandler+0x84>)
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d005      	beq.n	8001bbc <EXTI9_5_IRQHandler+0x34>
 8001bb0:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <EXTI9_5_IRQHandler+0x88>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	4798      	blx	r3
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <EXTI9_5_IRQHandler+0x84>)
 8001bb8:	2240      	movs	r2, #64	; 0x40
 8001bba:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET) { (*gpio_irq_cbf[7])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7); }
 8001bbc:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <EXTI9_5_IRQHandler+0x84>)
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d005      	beq.n	8001bd4 <EXTI9_5_IRQHandler+0x4c>
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <EXTI9_5_IRQHandler+0x88>)
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	4798      	blx	r3
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <EXTI9_5_IRQHandler+0x84>)
 8001bd0:	2280      	movs	r2, #128	; 0x80
 8001bd2:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET) { (*gpio_irq_cbf[8])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8); }
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <EXTI9_5_IRQHandler+0x84>)
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d006      	beq.n	8001bee <EXTI9_5_IRQHandler+0x66>
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <EXTI9_5_IRQHandler+0x88>)
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	4798      	blx	r3
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <EXTI9_5_IRQHandler+0x84>)
 8001be8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bec:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET) { (*gpio_irq_cbf[9])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9); }
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <EXTI9_5_IRQHandler+0x84>)
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d006      	beq.n	8001c08 <EXTI9_5_IRQHandler+0x80>
 8001bfa:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <EXTI9_5_IRQHandler+0x88>)
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	4798      	blx	r3
 8001c00:	4b02      	ldr	r3, [pc, #8]	; (8001c0c <EXTI9_5_IRQHandler+0x84>)
 8001c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c06:	615a      	str	r2, [r3, #20]
}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40010400 	.word	0x40010400
 8001c10:	200000f8 	.word	0x200000f8

08001c14 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{ 
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_10) != RESET) { (*gpio_irq_cbf[10])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10); }
 8001c18:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <EXTI15_10_IRQHandler+0xa4>)
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d006      	beq.n	8001c32 <EXTI15_10_IRQHandler+0x1e>
 8001c24:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <EXTI15_10_IRQHandler+0xa8>)
 8001c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c28:	4798      	blx	r3
 8001c2a:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <EXTI15_10_IRQHandler+0xa4>)
 8001c2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c30:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_11) != RESET) { (*gpio_irq_cbf[11])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11); }
 8001c32:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <EXTI15_10_IRQHandler+0xa4>)
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d006      	beq.n	8001c4c <EXTI15_10_IRQHandler+0x38>
 8001c3e:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <EXTI15_10_IRQHandler+0xa8>)
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c42:	4798      	blx	r3
 8001c44:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <EXTI15_10_IRQHandler+0xa4>)
 8001c46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c4a:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_12) != RESET) { (*gpio_irq_cbf[12])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12); }
 8001c4c:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <EXTI15_10_IRQHandler+0xa4>)
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d006      	beq.n	8001c66 <EXTI15_10_IRQHandler+0x52>
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <EXTI15_10_IRQHandler+0xa8>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	4798      	blx	r3
 8001c5e:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <EXTI15_10_IRQHandler+0xa4>)
 8001c60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c64:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET) { (*gpio_irq_cbf[13])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13); }
 8001c66:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <EXTI15_10_IRQHandler+0xa4>)
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d006      	beq.n	8001c80 <EXTI15_10_IRQHandler+0x6c>
 8001c72:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <EXTI15_10_IRQHandler+0xa8>)
 8001c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c76:	4798      	blx	r3
 8001c78:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <EXTI15_10_IRQHandler+0xa4>)
 8001c7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c7e:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_14) != RESET) { (*gpio_irq_cbf[14])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14); }
 8001c80:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <EXTI15_10_IRQHandler+0xa4>)
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d006      	beq.n	8001c9a <EXTI15_10_IRQHandler+0x86>
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <EXTI15_10_IRQHandler+0xa8>)
 8001c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c90:	4798      	blx	r3
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <EXTI15_10_IRQHandler+0xa4>)
 8001c94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c98:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_15) != RESET) { (*gpio_irq_cbf[15])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_15); }
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <EXTI15_10_IRQHandler+0xa4>)
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d006      	beq.n	8001cb4 <EXTI15_10_IRQHandler+0xa0>
 8001ca6:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <EXTI15_10_IRQHandler+0xa8>)
 8001ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001caa:	4798      	blx	r3
 8001cac:	4b02      	ldr	r3, [pc, #8]	; (8001cb8 <EXTI15_10_IRQHandler+0xa4>)
 8001cae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001cb2:	615a      	str	r2, [r3, #20]
}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40010400 	.word	0x40010400
 8001cbc:	200000f8 	.word	0x200000f8

08001cc0 <dev_gpio_id_port>:

//------------------------------------------------------------------------------
//         GPIO Local Functions
//------------------------------------------------------------------------------
GPIO_TypeDef* dev_gpio_id_port(UINT8 gpio_id)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
		switch(gpio_id)
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	d817      	bhi.n	8001d00 <dev_gpio_id_port+0x40>
 8001cd0:	a201      	add	r2, pc, #4	; (adr r2, 8001cd8 <dev_gpio_id_port+0x18>)
 8001cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd6:	bf00      	nop
 8001cd8:	08001ced 	.word	0x08001ced
 8001cdc:	08001cf1 	.word	0x08001cf1
 8001ce0:	08001cf5 	.word	0x08001cf5
 8001ce4:	08001cf9 	.word	0x08001cf9
 8001ce8:	08001cfd 	.word	0x08001cfd
		{
				case GPIO_PA : return GPIOA;
 8001cec:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <dev_gpio_id_port+0x4c>)
 8001cee:	e008      	b.n	8001d02 <dev_gpio_id_port+0x42>
				case GPIO_PB : return GPIOB;
 8001cf0:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <dev_gpio_id_port+0x50>)
 8001cf2:	e006      	b.n	8001d02 <dev_gpio_id_port+0x42>
				case GPIO_PC : return GPIOC;
 8001cf4:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <dev_gpio_id_port+0x54>)
 8001cf6:	e004      	b.n	8001d02 <dev_gpio_id_port+0x42>
				case GPIO_PD : return GPIOD;
 8001cf8:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <dev_gpio_id_port+0x58>)
 8001cfa:	e002      	b.n	8001d02 <dev_gpio_id_port+0x42>
				case GPIO_PE : return GPIOE;
 8001cfc:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <dev_gpio_id_port+0x5c>)
 8001cfe:	e000      	b.n	8001d02 <dev_gpio_id_port+0x42>
				case GPIO_PI : return GPIOI;
#endif

		}

		return (GPIO_TypeDef*)0;	
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr
 8001d0c:	40010800 	.word	0x40010800
 8001d10:	40010c00 	.word	0x40010c00
 8001d14:	40011000 	.word	0x40011000
 8001d18:	40011400 	.word	0x40011400
 8001d1c:	40011800 	.word	0x40011800

08001d20 <dev_gpio_pin_id>:

		return 0;	
}

int dev_gpio_pin_id(UINT16 pin)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	80fb      	strh	r3, [r7, #6]
		if (pin & 0x0001) return 0;
 8001d2a:	88fb      	ldrh	r3, [r7, #6]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <dev_gpio_pin_id+0x18>
 8001d34:	2300      	movs	r3, #0
 8001d36:	e069      	b.n	8001e0c <dev_gpio_pin_id+0xec>
		if (pin & 0x0002) return 1;
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <dev_gpio_pin_id+0x26>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e062      	b.n	8001e0c <dev_gpio_pin_id+0xec>
		if (pin & 0x0004) return 2;
 8001d46:	88fb      	ldrh	r3, [r7, #6]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <dev_gpio_pin_id+0x34>
 8001d50:	2302      	movs	r3, #2
 8001d52:	e05b      	b.n	8001e0c <dev_gpio_pin_id+0xec>
		if (pin & 0x0008) return 3;
 8001d54:	88fb      	ldrh	r3, [r7, #6]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <dev_gpio_pin_id+0x42>
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e054      	b.n	8001e0c <dev_gpio_pin_id+0xec>
		if (pin & 0x0010) return 4;
 8001d62:	88fb      	ldrh	r3, [r7, #6]
 8001d64:	f003 0310 	and.w	r3, r3, #16
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <dev_gpio_pin_id+0x50>
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	e04d      	b.n	8001e0c <dev_gpio_pin_id+0xec>
		if (pin & 0x0020) return 5;
 8001d70:	88fb      	ldrh	r3, [r7, #6]
 8001d72:	f003 0320 	and.w	r3, r3, #32
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <dev_gpio_pin_id+0x5e>
 8001d7a:	2305      	movs	r3, #5
 8001d7c:	e046      	b.n	8001e0c <dev_gpio_pin_id+0xec>
		if (pin & 0x0040) return 6;
 8001d7e:	88fb      	ldrh	r3, [r7, #6]
 8001d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <dev_gpio_pin_id+0x6c>
 8001d88:	2306      	movs	r3, #6
 8001d8a:	e03f      	b.n	8001e0c <dev_gpio_pin_id+0xec>
		if (pin & 0x0080) return 7;
 8001d8c:	88fb      	ldrh	r3, [r7, #6]
 8001d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <dev_gpio_pin_id+0x7a>
 8001d96:	2307      	movs	r3, #7
 8001d98:	e038      	b.n	8001e0c <dev_gpio_pin_id+0xec>
	
		if (pin & 0x0100) return 8;
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <dev_gpio_pin_id+0x88>
 8001da4:	2308      	movs	r3, #8
 8001da6:	e031      	b.n	8001e0c <dev_gpio_pin_id+0xec>
		if (pin & 0x0200) return 9;
 8001da8:	88fb      	ldrh	r3, [r7, #6]
 8001daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <dev_gpio_pin_id+0x96>
 8001db2:	2309      	movs	r3, #9
 8001db4:	e02a      	b.n	8001e0c <dev_gpio_pin_id+0xec>
		if (pin & 0x0400) return 10;
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <dev_gpio_pin_id+0xa4>
 8001dc0:	230a      	movs	r3, #10
 8001dc2:	e023      	b.n	8001e0c <dev_gpio_pin_id+0xec>
		if (pin & 0x0800) return 11;
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <dev_gpio_pin_id+0xb2>
 8001dce:	230b      	movs	r3, #11
 8001dd0:	e01c      	b.n	8001e0c <dev_gpio_pin_id+0xec>
		if (pin & 0x1000) return 12;
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <dev_gpio_pin_id+0xc0>
 8001ddc:	230c      	movs	r3, #12
 8001dde:	e015      	b.n	8001e0c <dev_gpio_pin_id+0xec>
		if (pin & 0x2000) return 13;
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <dev_gpio_pin_id+0xce>
 8001dea:	230d      	movs	r3, #13
 8001dec:	e00e      	b.n	8001e0c <dev_gpio_pin_id+0xec>
		if (pin & 0x4000) return 14;
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <dev_gpio_pin_id+0xdc>
 8001df8:	230e      	movs	r3, #14
 8001dfa:	e007      	b.n	8001e0c <dev_gpio_pin_id+0xec>
		if (pin & 0x8000) return 15;
 8001dfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	da01      	bge.n	8001e08 <dev_gpio_pin_id+0xe8>
 8001e04:	230f      	movs	r3, #15
 8001e06:	e001      	b.n	8001e0c <dev_gpio_pin_id+0xec>

		return -1;	
 8001e08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
	...

08001e18 <dev_gpio_init_rcc>:

//------------------------------------------------------------------------------
//         GPIO Init Functions
//------------------------------------------------------------------------------
UINT8 dev_gpio_init_rcc(UINT8 gpio_id)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]
		switch(gpio_id)
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d84e      	bhi.n	8001ec6 <dev_gpio_init_rcc+0xae>
 8001e28:	a201      	add	r2, pc, #4	; (adr r2, 8001e30 <dev_gpio_init_rcc+0x18>)
 8001e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2e:	bf00      	nop
 8001e30:	08001e45 	.word	0x08001e45
 8001e34:	08001e5f 	.word	0x08001e5f
 8001e38:	08001e79 	.word	0x08001e79
 8001e3c:	08001e93 	.word	0x08001e93
 8001e40:	08001ead 	.word	0x08001ead
		{
				case GPIO_PA : __HAL_RCC_GPIOA_CLK_ENABLE(); break;
 8001e44:	4b25      	ldr	r3, [pc, #148]	; (8001edc <dev_gpio_init_rcc+0xc4>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	4a24      	ldr	r2, [pc, #144]	; (8001edc <dev_gpio_init_rcc+0xc4>)
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	6193      	str	r3, [r2, #24]
 8001e50:	4b22      	ldr	r3, [pc, #136]	; (8001edc <dev_gpio_init_rcc+0xc4>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	61fb      	str	r3, [r7, #28]
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	e038      	b.n	8001ed0 <dev_gpio_init_rcc+0xb8>
				case GPIO_PB : __HAL_RCC_GPIOB_CLK_ENABLE(); break;
 8001e5e:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <dev_gpio_init_rcc+0xc4>)
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	4a1e      	ldr	r2, [pc, #120]	; (8001edc <dev_gpio_init_rcc+0xc4>)
 8001e64:	f043 0308 	orr.w	r3, r3, #8
 8001e68:	6193      	str	r3, [r2, #24]
 8001e6a:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <dev_gpio_init_rcc+0xc4>)
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	61bb      	str	r3, [r7, #24]
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	e02b      	b.n	8001ed0 <dev_gpio_init_rcc+0xb8>
				case GPIO_PC : __HAL_RCC_GPIOC_CLK_ENABLE(); break;
 8001e78:	4b18      	ldr	r3, [pc, #96]	; (8001edc <dev_gpio_init_rcc+0xc4>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	4a17      	ldr	r2, [pc, #92]	; (8001edc <dev_gpio_init_rcc+0xc4>)
 8001e7e:	f043 0310 	orr.w	r3, r3, #16
 8001e82:	6193      	str	r3, [r2, #24]
 8001e84:	4b15      	ldr	r3, [pc, #84]	; (8001edc <dev_gpio_init_rcc+0xc4>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f003 0310 	and.w	r3, r3, #16
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	e01e      	b.n	8001ed0 <dev_gpio_init_rcc+0xb8>
				case GPIO_PD : __HAL_RCC_GPIOD_CLK_ENABLE(); break;
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <dev_gpio_init_rcc+0xc4>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	4a11      	ldr	r2, [pc, #68]	; (8001edc <dev_gpio_init_rcc+0xc4>)
 8001e98:	f043 0320 	orr.w	r3, r3, #32
 8001e9c:	6193      	str	r3, [r2, #24]
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <dev_gpio_init_rcc+0xc4>)
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	f003 0320 	and.w	r3, r3, #32
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	e011      	b.n	8001ed0 <dev_gpio_init_rcc+0xb8>
				case GPIO_PE : __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <dev_gpio_init_rcc+0xc4>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <dev_gpio_init_rcc+0xc4>)
 8001eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eb6:	6193      	str	r3, [r2, #24]
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <dev_gpio_init_rcc+0xc4>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	e004      	b.n	8001ed0 <dev_gpio_init_rcc+0xb8>
			
#ifdef	GPIOI			
				case GPIO_PI : __HAL_RCC_GPIOI_CLK_ENABLE(); break;
#endif
			
				default : TRACE_GERROR("Unknow GPIO !!!");
 8001ec6:	22a4      	movs	r2, #164	; 0xa4
 8001ec8:	4905      	ldr	r1, [pc, #20]	; (8001ee0 <dev_gpio_init_rcc+0xc8>)
 8001eca:	4806      	ldr	r0, [pc, #24]	; (8001ee4 <dev_gpio_init_rcc+0xcc>)
 8001ecc:	f7ff fa0c 	bl	80012e8 <dev_trace_generate_error>
		}
		
		return RET_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3720      	adds	r7, #32
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	08008328 	.word	0x08008328
 8001ee4:	08008340 	.word	0x08008340

08001ee8 <dev_gpio_init_mode>:
			
		return RET_OK;
}

UINT8 dev_gpio_init_mode(GPIO_InitTypeDef* init, UINT8 gpio_mode)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	70fb      	strb	r3, [r7, #3]
	
		switch(gpio_mode)
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	2b0b      	cmp	r3, #11
 8001ef8:	d859      	bhi.n	8001fae <dev_gpio_init_mode+0xc6>
 8001efa:	a201      	add	r2, pc, #4	; (adr r2, 8001f00 <dev_gpio_init_mode+0x18>)
 8001efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f00:	08001f31 	.word	0x08001f31
 8001f04:	08001f5b 	.word	0x08001f5b
 8001f08:	08001f31 	.word	0x08001f31
 8001f0c:	08001f4d 	.word	0x08001f4d
 8001f10:	08001f3f 	.word	0x08001f3f
 8001f14:	08001f5b 	.word	0x08001f5b
 8001f18:	08001f69 	.word	0x08001f69
 8001f1c:	08001f77 	.word	0x08001f77
 8001f20:	08001f85 	.word	0x08001f85
 8001f24:	08001f93 	.word	0x08001f93
 8001f28:	08001f77 	.word	0x08001f77
 8001f2c:	08001fa1 	.word	0x08001fa1
		{
				case GPIO_MODE_IN : 
				case GPIO_MODE_IN_FLOAT : 	init->Mode = GPIO_MODE_INPUT;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	605a      	str	r2, [r3, #4]
																		init->Pull = GPIO_NOPULL; break;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	e03e      	b.n	8001fbc <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_IN_UP : 			init->Mode = GPIO_MODE_INPUT;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	605a      	str	r2, [r3, #4]
																		init->Pull = GPIO_PULLUP; break;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	e037      	b.n	8001fbc <dev_gpio_init_mode+0xd4>
				
				case GPIO_MODE_IN_DOWN : 		init->Mode = GPIO_MODE_INPUT;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	605a      	str	r2, [r3, #4]
																		init->Pull = GPIO_PULLDOWN; break;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2202      	movs	r2, #2
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	e030      	b.n	8001fbc <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_OUT : 
				case GPIO_MODE_OUT_PP : 		init->Mode 	= GPIO_MODE_OUTPUT_PP;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	e029      	b.n	8001fbc <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_OUT_OD : 		init->Mode 	= GPIO_MODE_OUTPUT_OD;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2211      	movs	r2, #17
 8001f6c:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	e022      	b.n	8001fbc <dev_gpio_init_mode+0xd4>
#ifdef GPIO_MODE_AF_INPUT				
				case GPIO_MODE_ALF : 
				case GPIO_MODE_ALF_IN : 		init->Mode 	= GPIO_MODE_AF_INPUT;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	e01b      	b.n	8001fbc <dev_gpio_init_mode+0xd4>
#endif				
				
				case GPIO_MODE_ALF_PP : 		init->Mode 	= GPIO_MODE_AF_PP;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	e014      	b.n	8001fbc <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_ALF_OD : 		init->Mode 	= GPIO_MODE_AF_OD;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2212      	movs	r2, #18
 8001f96:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	e00d      	b.n	8001fbc <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_AN : 				init->Mode 	= GPIO_MODE_ANALOG;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	e006      	b.n	8001fbc <dev_gpio_init_mode+0xd4>

				default : 									return TRACE_GERROR("Unknow GPIO Mode !!!");
 8001fae:	22e9      	movs	r2, #233	; 0xe9
 8001fb0:	4905      	ldr	r1, [pc, #20]	; (8001fc8 <dev_gpio_init_mode+0xe0>)
 8001fb2:	4806      	ldr	r0, [pc, #24]	; (8001fcc <dev_gpio_init_mode+0xe4>)
 8001fb4:	f7ff f998 	bl	80012e8 <dev_trace_generate_error>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	e000      	b.n	8001fbe <dev_gpio_init_mode+0xd6>
				
		};
		
		return RET_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	08008328 	.word	0x08008328
 8001fcc:	08008350 	.word	0x08008350

08001fd0 <dev_gpio_init_speed>:

UINT8 dev_gpio_init_speed(GPIO_InitTypeDef* init, UINT8 gpio_speed)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	70fb      	strb	r3, [r7, #3]
		switch(gpio_speed)
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	d81a      	bhi.n	8002018 <dev_gpio_init_speed+0x48>
 8001fe2:	a201      	add	r2, pc, #4	; (adr r2, 8001fe8 <dev_gpio_init_speed+0x18>)
 8001fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe8:	08001ff9 	.word	0x08001ff9
 8001fec:	08002001 	.word	0x08002001
 8001ff0:	08002009 	.word	0x08002009
 8001ff4:	08002011 	.word	0x08002011
		{
				case GPIO_PIN_SPEED_VHIGH : 			init->Speed = GPIO_SPEED_FREQ_HIGH; break;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	e012      	b.n	8002026 <dev_gpio_init_speed+0x56>
				case GPIO_PIN_SPEED_HIGH : 				init->Speed = GPIO_SPEED_FREQ_HIGH; break;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2203      	movs	r2, #3
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	e00e      	b.n	8002026 <dev_gpio_init_speed+0x56>
				case GPIO_PIN_SPEED_MED : 				init->Speed = GPIO_SPEED_FREQ_MEDIUM; break;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	e00a      	b.n	8002026 <dev_gpio_init_speed+0x56>
				case GPIO_PIN_SPEED_LOW : 				init->Speed = GPIO_SPEED_FREQ_LOW; break;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2202      	movs	r2, #2
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	e006      	b.n	8002026 <dev_gpio_init_speed+0x56>
			
				default : 									return TRACE_GERROR("Unknow GPIO Speed !!!");
 8002018:	22f9      	movs	r2, #249	; 0xf9
 800201a:	4905      	ldr	r1, [pc, #20]	; (8002030 <dev_gpio_init_speed+0x60>)
 800201c:	4805      	ldr	r0, [pc, #20]	; (8002034 <dev_gpio_init_speed+0x64>)
 800201e:	f7ff f963 	bl	80012e8 <dev_trace_generate_error>
 8002022:	4603      	mov	r3, r0
 8002024:	e000      	b.n	8002028 <dev_gpio_init_speed+0x58>
		};

		return RET_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	08008328 	.word	0x08008328
 8002034:	08008368 	.word	0x08008368

08002038 <dev_gpio_init>:
	
		return RET_OK;
}

UINT8 dev_gpio_init(dev_gpio_t* gpio, dev_gpio_init_t* init)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
		UINT8 ret;
		GPIO_InitTypeDef GPIO_InitStructure;

		hal_driver_set_info(&init->info, &gpio->info);
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3304      	adds	r3, #4
 8002048:	4619      	mov	r1, r3
 800204a:	4610      	mov	r0, r2
 800204c:	f7ff fd44 	bl	8001ad8 <hal_driver_set_info>
	
		gpio->port = dev_gpio_id_port(gpio->info.id);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	791b      	ldrb	r3, [r3, #4]
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fe33 	bl	8001cc0 <dev_gpio_id_port>
 800205a:	4602      	mov	r2, r0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	601a      	str	r2, [r3, #0]
		gpio->pin = init->pin;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	8b1a      	ldrh	r2, [r3, #24]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	839a      	strh	r2, [r3, #28]
	
		GPIO_InitStructure.Pin = gpio->pin; 
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	8b9b      	ldrh	r3, [r3, #28]
 800206c:	60bb      	str	r3, [r7, #8]
	
		ret = dev_gpio_init_rcc(gpio->info.id);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	791b      	ldrb	r3, [r3, #4]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fed0 	bl	8001e18 <dev_gpio_init_rcc>
 8002078:	4603      	mov	r3, r0
 800207a:	77fb      	strb	r3, [r7, #31]
		if (ret) return TRACE_EERROR(ret);
 800207c:	7ffb      	ldrb	r3, [r7, #31]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d008      	beq.n	8002094 <dev_gpio_init+0x5c>
 8002082:	7ffb      	ldrb	r3, [r7, #31]
 8002084:	f240 1213 	movw	r2, #275	; 0x113
 8002088:	4978      	ldr	r1, [pc, #480]	; (800226c <dev_gpio_init+0x234>)
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff f912 	bl	80012b4 <dev_trace_get_error>
 8002090:	4603      	mov	r3, r0
 8002092:	e0e7      	b.n	8002264 <dev_gpio_init+0x22c>
	
		ret = dev_gpio_init_mode(&GPIO_InitStructure, init->mode);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	7e9a      	ldrb	r2, [r3, #26]
 8002098:	f107 0308 	add.w	r3, r7, #8
 800209c:	4611      	mov	r1, r2
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff ff22 	bl	8001ee8 <dev_gpio_init_mode>
 80020a4:	4603      	mov	r3, r0
 80020a6:	77fb      	strb	r3, [r7, #31]
		if (ret) return TRACE_EERROR(ret);
 80020a8:	7ffb      	ldrb	r3, [r7, #31]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d008      	beq.n	80020c0 <dev_gpio_init+0x88>
 80020ae:	7ffb      	ldrb	r3, [r7, #31]
 80020b0:	f44f 728b 	mov.w	r2, #278	; 0x116
 80020b4:	496d      	ldr	r1, [pc, #436]	; (800226c <dev_gpio_init+0x234>)
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff f8fc 	bl	80012b4 <dev_trace_get_error>
 80020bc:	4603      	mov	r3, r0
 80020be:	e0d1      	b.n	8002264 <dev_gpio_init+0x22c>
	
		ret = dev_gpio_init_speed(&GPIO_InitStructure, init->speed);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	7eda      	ldrb	r2, [r3, #27]
 80020c4:	f107 0308 	add.w	r3, r7, #8
 80020c8:	4611      	mov	r1, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff ff80 	bl	8001fd0 <dev_gpio_init_speed>
 80020d0:	4603      	mov	r3, r0
 80020d2:	77fb      	strb	r3, [r7, #31]
		if (ret) return TRACE_EERROR(ret);
 80020d4:	7ffb      	ldrb	r3, [r7, #31]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d008      	beq.n	80020ec <dev_gpio_init+0xb4>
 80020da:	7ffb      	ldrb	r3, [r7, #31]
 80020dc:	f240 1219 	movw	r2, #281	; 0x119
 80020e0:	4962      	ldr	r1, [pc, #392]	; (800226c <dev_gpio_init+0x234>)
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff f8e6 	bl	80012b4 <dev_trace_get_error>
 80020e8:	4603      	mov	r3, r0
 80020ea:	e0bb      	b.n	8002264 <dev_gpio_init+0x22c>
	
	  // EXTI interrupt init
		if (init->irq_cbf)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d013      	beq.n	800211c <dev_gpio_init+0xe4>
		{
				switch(init->irq_mode)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	7f1b      	ldrb	r3, [r3, #28]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d00c      	beq.n	8002116 <dev_gpio_init+0xde>
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	dc0e      	bgt.n	800211e <dev_gpio_init+0xe6>
 8002100:	2b01      	cmp	r3, #1
 8002102:	d002      	beq.n	800210a <dev_gpio_init+0xd2>
 8002104:	2b02      	cmp	r3, #2
 8002106:	d003      	beq.n	8002110 <dev_gpio_init+0xd8>
 8002108:	e009      	b.n	800211e <dev_gpio_init+0xe6>
				{
						case GPIO_IRQ_RISING : 		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING; break;
 800210a:	4b59      	ldr	r3, [pc, #356]	; (8002270 <dev_gpio_init+0x238>)
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	e006      	b.n	800211e <dev_gpio_init+0xe6>
						case GPIO_IRQ_FALLING : 	GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING; break;
 8002110:	4b57      	ldr	r3, [pc, #348]	; (8002270 <dev_gpio_init+0x238>)
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	e003      	b.n	800211e <dev_gpio_init+0xe6>
						case GPIO_IRQ_CHANGE : 		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING; break;
 8002116:	4b56      	ldr	r3, [pc, #344]	; (8002270 <dev_gpio_init+0x238>)
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	e000      	b.n	800211e <dev_gpio_init+0xe6>
				}
		}	
 800211c:	bf00      	nop
	
		HAL_GPIO_Init(gpio->port, &GPIO_InitStructure);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f107 0208 	add.w	r2, r7, #8
 8002126:	4611      	mov	r1, r2
 8002128:	4618      	mov	r0, r3
 800212a:	f002 f819 	bl	8004160 <HAL_GPIO_Init>

		HAL_DRIVER_DEBUG(gpio->info.status_in, debug_printf("Init Gpio %s - %d, %X\n\r", gpio->info.name, gpio->info.id, gpio->pin));		
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00e      	beq.n	8002154 <dev_gpio_init+0x11c>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d009      	beq.n	8002154 <dev_gpio_init+0x11c>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6959      	ldr	r1, [r3, #20]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	791b      	ldrb	r3, [r3, #4]
 8002148:	461a      	mov	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	8b9b      	ldrh	r3, [r3, #28]
 800214e:	4849      	ldr	r0, [pc, #292]	; (8002274 <dev_gpio_init+0x23c>)
 8002150:	f7ff fa7a 	bl	8001648 <debug_printf>

	  // EXTI interrupt init
		if (init->irq_cbf)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 8082 	beq.w	8002262 <dev_gpio_init+0x22a>
		{
				int pin_id = dev_gpio_pin_id(gpio->pin);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	8b9b      	ldrh	r3, [r3, #28]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fddc 	bl	8001d20 <dev_gpio_pin_id>
 8002168:	61b8      	str	r0, [r7, #24]
			
				if (pin_id < 0) return TRACE_GERROR("Irq Line!!!");
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	2b00      	cmp	r3, #0
 800216e:	da07      	bge.n	8002180 <dev_gpio_init+0x148>
 8002170:	f240 122f 	movw	r2, #303	; 0x12f
 8002174:	493d      	ldr	r1, [pc, #244]	; (800226c <dev_gpio_init+0x234>)
 8002176:	4840      	ldr	r0, [pc, #256]	; (8002278 <dev_gpio_init+0x240>)
 8002178:	f7ff f8b6 	bl	80012e8 <dev_trace_generate_error>
 800217c:	4603      	mov	r3, r0
 800217e:	e071      	b.n	8002264 <dev_gpio_init+0x22c>
			
				gpio_irq_cbf[pin_id] = init->irq_cbf;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	6a1a      	ldr	r2, [r3, #32]
 8002184:	493d      	ldr	r1, [pc, #244]	; (800227c <dev_gpio_init+0x244>)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			
				switch(pin_id)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2b0f      	cmp	r3, #15
 8002190:	d83e      	bhi.n	8002210 <dev_gpio_init+0x1d8>
 8002192:	a201      	add	r2, pc, #4	; (adr r2, 8002198 <dev_gpio_init+0x160>)
 8002194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002198:	080021d9 	.word	0x080021d9
 800219c:	080021e1 	.word	0x080021e1
 80021a0:	080021e9 	.word	0x080021e9
 80021a4:	080021f1 	.word	0x080021f1
 80021a8:	080021f9 	.word	0x080021f9
 80021ac:	08002201 	.word	0x08002201
 80021b0:	08002201 	.word	0x08002201
 80021b4:	08002201 	.word	0x08002201
 80021b8:	08002201 	.word	0x08002201
 80021bc:	08002201 	.word	0x08002201
 80021c0:	08002209 	.word	0x08002209
 80021c4:	08002209 	.word	0x08002209
 80021c8:	08002209 	.word	0x08002209
 80021cc:	08002209 	.word	0x08002209
 80021d0:	08002209 	.word	0x08002209
 80021d4:	08002209 	.word	0x08002209
				{
						case 0 : gpio->irq_line = EXTI0_IRQn; break;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2206      	movs	r2, #6
 80021dc:	779a      	strb	r2, [r3, #30]
 80021de:	e017      	b.n	8002210 <dev_gpio_init+0x1d8>
						case 1 : gpio->irq_line = EXTI1_IRQn; break;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2207      	movs	r2, #7
 80021e4:	779a      	strb	r2, [r3, #30]
 80021e6:	e013      	b.n	8002210 <dev_gpio_init+0x1d8>
						case 2 : gpio->irq_line = EXTI2_IRQn; break;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2208      	movs	r2, #8
 80021ec:	779a      	strb	r2, [r3, #30]
 80021ee:	e00f      	b.n	8002210 <dev_gpio_init+0x1d8>
						case 3 : gpio->irq_line = EXTI3_IRQn; break;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2209      	movs	r2, #9
 80021f4:	779a      	strb	r2, [r3, #30]
 80021f6:	e00b      	b.n	8002210 <dev_gpio_init+0x1d8>
						case 4 : gpio->irq_line = EXTI4_IRQn; break;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	220a      	movs	r2, #10
 80021fc:	779a      	strb	r2, [r3, #30]
 80021fe:	e007      	b.n	8002210 <dev_gpio_init+0x1d8>

						case 5 : 
						case 6 : 
						case 7 : 
						case 8 : 
						case 9 : gpio->irq_line = EXTI9_5_IRQn; break;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2217      	movs	r2, #23
 8002204:	779a      	strb	r2, [r3, #30]
 8002206:	e003      	b.n	8002210 <dev_gpio_init+0x1d8>
						case 10 : 
						case 11 : 
						case 12 : 
						case 13 : 
						case 14 : 
						case 15 : gpio->irq_line = EXTI15_10_IRQn; break;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2228      	movs	r2, #40	; 0x28
 800220c:	779a      	strb	r2, [r3, #30]
 800220e:	bf00      	nop
				}
			
				HAL_NVIC_SetPriority((IRQn_Type)gpio->irq_line, (init->irq_prior >> 4) & 0x0F, init->irq_prior & 0x0F);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	7f9b      	ldrb	r3, [r3, #30]
 8002214:	b258      	sxtb	r0, r3
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	7f5b      	ldrb	r3, [r3, #29]
 800221a:	091b      	lsrs	r3, r3, #4
 800221c:	b2db      	uxtb	r3, r3
 800221e:	f003 010f 	and.w	r1, r3, #15
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	7f5b      	ldrb	r3, [r3, #29]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	461a      	mov	r2, r3
 800222c:	f001 fcbf 	bl	8003bae <HAL_NVIC_SetPriority>
				HAL_NVIC_EnableIRQ((IRQn_Type)gpio->irq_line);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	7f9b      	ldrb	r3, [r3, #30]
 8002234:	b25b      	sxtb	r3, r3
 8002236:	4618      	mov	r0, r3
 8002238:	f001 fcd5 	bl	8003be6 <HAL_NVIC_EnableIRQ>

			
				HAL_DRIVER_DEBUG(gpio->info.status_in, debug_printf("Init Gpio IRQ %s -, %d, %X\n\r", gpio->info.name, gpio->info.id, gpio->irq_line));		
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00e      	beq.n	8002262 <dev_gpio_init+0x22a>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d009      	beq.n	8002262 <dev_gpio_init+0x22a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6959      	ldr	r1, [r3, #20]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	791b      	ldrb	r3, [r3, #4]
 8002256:	461a      	mov	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	7f9b      	ldrb	r3, [r3, #30]
 800225c:	4808      	ldr	r0, [pc, #32]	; (8002280 <dev_gpio_init+0x248>)
 800225e:	f7ff f9f3 	bl	8001648 <debug_printf>
		}	

		return RET_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3720      	adds	r7, #32
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	08008328 	.word	0x08008328
 8002270:	10110000 	.word	0x10110000
 8002274:	08008380 	.word	0x08008380
 8002278:	08008398 	.word	0x08008398
 800227c:	200000f8 	.word	0x200000f8
 8002280:	080083a4 	.word	0x080083a4

08002284 <dev_gpio_init_simp>:

UINT8 dev_gpio_init_simp(dev_gpio_t* gpio, UINT8 gpio_id, UINT16 gpio_pin, UINT8 gpio_mode)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08c      	sub	sp, #48	; 0x30
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	4608      	mov	r0, r1
 800228e:	4611      	mov	r1, r2
 8002290:	461a      	mov	r2, r3
 8002292:	4603      	mov	r3, r0
 8002294:	70fb      	strb	r3, [r7, #3]
 8002296:	460b      	mov	r3, r1
 8002298:	803b      	strh	r3, [r7, #0]
 800229a:	4613      	mov	r3, r2
 800229c:	70bb      	strb	r3, [r7, #2]
		dev_gpio_init_t init;
	
		init.info.id = gpio_id;
 800229e:	78fb      	ldrb	r3, [r7, #3]
 80022a0:	733b      	strb	r3, [r7, #12]
		init.info.name = "";
 80022a2:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <dev_gpio_init_simp+0x5c>)
 80022a4:	61fb      	str	r3, [r7, #28]
		init.info.status_in = 0; 
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
		init.info.status_out = 0; 
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]

		init.pin = gpio_pin;
 80022ae:	883b      	ldrh	r3, [r7, #0]
 80022b0:	84bb      	strh	r3, [r7, #36]	; 0x24
		init.mode = gpio_mode;
 80022b2:	78bb      	ldrb	r3, [r7, #2]
 80022b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		init.speed = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		init.irq_cbf = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	62fb      	str	r3, [r7, #44]	; 0x2c
		init.irq_mode = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	
		return dev_gpio_init(gpio, &init);
 80022c8:	f107 030c 	add.w	r3, r7, #12
 80022cc:	4619      	mov	r1, r3
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff feb2 	bl	8002038 <dev_gpio_init>
 80022d4:	4603      	mov	r3, r0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3730      	adds	r7, #48	; 0x30
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	080083c4 	.word	0x080083c4

080022e4 <dev_gpio_set>:
{
		return 0; //HAL_GPIO_ReadPins(gpio->port, gpio->pin); 
}

void dev_gpio_set(dev_gpio_t* gpio, UINT8 val)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	70fb      	strb	r3, [r7, #3]
		if (val) HAL_GPIO_WritePin(gpio->port, gpio->pin, (GPIO_PinState)1); 
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d008      	beq.n	8002308 <dev_gpio_set+0x24>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	8b9b      	ldrh	r3, [r3, #28]
 80022fe:	2201      	movs	r2, #1
 8002300:	4619      	mov	r1, r3
 8002302:	f002 f8c8 	bl	8004496 <HAL_GPIO_WritePin>
				else HAL_GPIO_WritePin(gpio->port, gpio->pin, (GPIO_PinState)0);
}
 8002306:	e007      	b.n	8002318 <dev_gpio_set+0x34>
				else HAL_GPIO_WritePin(gpio->port, gpio->pin, (GPIO_PinState)0);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6818      	ldr	r0, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	8b9b      	ldrh	r3, [r3, #28]
 8002310:	2200      	movs	r2, #0
 8002312:	4619      	mov	r1, r3
 8002314:	f002 f8bf 	bl	8004496 <HAL_GPIO_WritePin>
}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <Max30102Setup>:
float n_spo2_sum;
int32_t n_heart_rate_sum;


void Max30102Setup()
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
  uint8_t uch_dummy;

  maxim_max30102_reset();
 8002326:	f001 f957 	bl	80035d8 <maxim_max30102_reset>
  maxim_max30102_read_reg(REG_INTR_STATUS_1, &uch_dummy);  // reads/clears the interrupt status register
 800232a:	1dfb      	adds	r3, r7, #7
 800232c:	4619      	mov	r1, r3
 800232e:	2000      	movs	r0, #0
 8002330:	f001 f896 	bl	8003460 <maxim_max30102_read_reg>
  maxim_max30102_init();
 8002334:	f001 f8ae 	bl	8003494 <maxim_max30102_init>
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <Max30102Loop>:

// Takes samples from MAX30102.  Heart rate and SpO2 are calculated every ST seconds
void Max30102Loop(float *spo2_mean, uint32_t *heart_rate_mean, uint8_t *finger_on)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b093      	sub	sp, #76	; 0x4c
 8002344:	af06      	add	r7, sp, #24
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]

//  static int16_t x = 1;
//  static int16_t lastY = 35;

  // buffer length of BUFFER_SIZE stores ST seconds of samples running at FS sps
  for (i = 0U; i < BUFFER_SIZE; i++)
 800234c:	2300      	movs	r3, #0
 800234e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002352:	e09c      	b.n	800248e <Max30102Loop+0x14e>
  {
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET);	// wait until the interrupt pin asserts
 8002354:	bf00      	nop
 8002356:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800235a:	48a3      	ldr	r0, [pc, #652]	; (80025e8 <Max30102Loop+0x2a8>)
 800235c:	f002 f884 	bl	8004468 <HAL_GPIO_ReadPin>
 8002360:	4603      	mov	r3, r0
 8002362:	2b01      	cmp	r3, #1
 8002364:	d0f7      	beq.n	8002356 <Max30102Loop+0x16>

#ifdef FAKE_MAX30102_CLONE
    maxim_max30102_read_fifo((aun_ir_buffer + i), (aun_red_buffer + i));  // read from MAX30102 FIFO
 8002366:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4a9f      	ldr	r2, [pc, #636]	; (80025ec <Max30102Loop+0x2ac>)
 800236e:	441a      	add	r2, r3
 8002370:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	499e      	ldr	r1, [pc, #632]	; (80025f0 <Max30102Loop+0x2b0>)
 8002378:	440b      	add	r3, r1
 800237a:	4619      	mov	r1, r3
 800237c:	4610      	mov	r0, r2
 800237e:	f001 f8b9 	bl	80034f4 <maxim_max30102_read_fifo>
#else
    maxim_max30102_read_fifo((aun_red_buffer + i), (aun_ir_buffer + i));  // read from MAX30102 FIFO
#endif
    // calculate LED brightness
    if (aun_red_buffer[i] > un_prev_data)
 8002382:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002386:	4a9a      	ldr	r2, [pc, #616]	; (80025f0 <Max30102Loop+0x2b0>)
 8002388:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800238c:	4b99      	ldr	r3, [pc, #612]	; (80025f4 <Max30102Loop+0x2b4>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d938      	bls.n	8002406 <Max30102Loop+0xc6>
    {
      f_temp = aun_red_buffer[i] - un_prev_data;
 8002394:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002398:	4a95      	ldr	r2, [pc, #596]	; (80025f0 <Max30102Loop+0x2b0>)
 800239a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800239e:	4b95      	ldr	r3, [pc, #596]	; (80025f4 <Max30102Loop+0x2b4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe fc8d 	bl	8000cc4 <__aeabi_ui2f>
 80023aa:	4603      	mov	r3, r0
 80023ac:	62bb      	str	r3, [r7, #40]	; 0x28
      f_temp /= (un_max - un_min);
 80023ae:	4b92      	ldr	r3, [pc, #584]	; (80025f8 <Max30102Loop+0x2b8>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	4b92      	ldr	r3, [pc, #584]	; (80025fc <Max30102Loop+0x2bc>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe fc83 	bl	8000cc4 <__aeabi_ui2f>
 80023be:	4603      	mov	r3, r0
 80023c0:	4619      	mov	r1, r3
 80023c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023c4:	f7fe fd8a 	bl	8000edc <__aeabi_fdiv>
 80023c8:	4603      	mov	r3, r0
 80023ca:	62bb      	str	r3, [r7, #40]	; 0x28
      f_temp *= MAX_HEART_BEAT_TRACE;
 80023cc:	498c      	ldr	r1, [pc, #560]	; (8002600 <Max30102Loop+0x2c0>)
 80023ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023d0:	f7fe fcd0 	bl	8000d74 <__aeabi_fmul>
 80023d4:	4603      	mov	r3, r0
 80023d6:	62bb      	str	r3, [r7, #40]	; 0x28
      f_heartbeatTrace -= f_temp;
 80023d8:	4b8a      	ldr	r3, [pc, #552]	; (8002604 <Max30102Loop+0x2c4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe fbbe 	bl	8000b60 <__aeabi_fsub>
 80023e4:	4603      	mov	r3, r0
 80023e6:	461a      	mov	r2, r3
 80023e8:	4b86      	ldr	r3, [pc, #536]	; (8002604 <Max30102Loop+0x2c4>)
 80023ea:	601a      	str	r2, [r3, #0]
      if (f_heartbeatTrace < -25.0f)
 80023ec:	4b85      	ldr	r3, [pc, #532]	; (8002604 <Max30102Loop+0x2c4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4985      	ldr	r1, [pc, #532]	; (8002608 <Max30102Loop+0x2c8>)
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe fe5c 	bl	80010b0 <__aeabi_fcmplt>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d03b      	beq.n	8002476 <Max30102Loop+0x136>
      {
        f_heartbeatTrace = -25.0f;
 80023fe:	4b81      	ldr	r3, [pc, #516]	; (8002604 <Max30102Loop+0x2c4>)
 8002400:	4a81      	ldr	r2, [pc, #516]	; (8002608 <Max30102Loop+0x2c8>)
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	e037      	b.n	8002476 <Max30102Loop+0x136>
      }
    }
    else
    {
	  f_temp = un_prev_data - aun_red_buffer[i];
 8002406:	4b7b      	ldr	r3, [pc, #492]	; (80025f4 <Max30102Loop+0x2b4>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800240e:	4978      	ldr	r1, [pc, #480]	; (80025f0 <Max30102Loop+0x2b0>)
 8002410:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe fc54 	bl	8000cc4 <__aeabi_ui2f>
 800241c:	4603      	mov	r3, r0
 800241e:	62bb      	str	r3, [r7, #40]	; 0x28
	  f_temp /= (un_max - un_min);
 8002420:	4b75      	ldr	r3, [pc, #468]	; (80025f8 <Max30102Loop+0x2b8>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4b75      	ldr	r3, [pc, #468]	; (80025fc <Max30102Loop+0x2bc>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe fc4a 	bl	8000cc4 <__aeabi_ui2f>
 8002430:	4603      	mov	r3, r0
 8002432:	4619      	mov	r1, r3
 8002434:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002436:	f7fe fd51 	bl	8000edc <__aeabi_fdiv>
 800243a:	4603      	mov	r3, r0
 800243c:	62bb      	str	r3, [r7, #40]	; 0x28
	  f_temp *= MAX_HEART_BEAT_TRACE;
 800243e:	4970      	ldr	r1, [pc, #448]	; (8002600 <Max30102Loop+0x2c0>)
 8002440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002442:	f7fe fc97 	bl	8000d74 <__aeabi_fmul>
 8002446:	4603      	mov	r3, r0
 8002448:	62bb      	str	r3, [r7, #40]	; 0x28
	  f_heartbeatTrace += f_temp;
 800244a:	4b6e      	ldr	r3, [pc, #440]	; (8002604 <Max30102Loop+0x2c4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe fb87 	bl	8000b64 <__addsf3>
 8002456:	4603      	mov	r3, r0
 8002458:	461a      	mov	r2, r3
 800245a:	4b6a      	ldr	r3, [pc, #424]	; (8002604 <Max30102Loop+0x2c4>)
 800245c:	601a      	str	r2, [r3, #0]
	  if (f_heartbeatTrace > MAX_HEART_BEAT_TRACE + 25.0f)
 800245e:	4b69      	ldr	r3, [pc, #420]	; (8002604 <Max30102Loop+0x2c4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	496a      	ldr	r1, [pc, #424]	; (800260c <Max30102Loop+0x2cc>)
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe fe41 	bl	80010ec <__aeabi_fcmpgt>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d002      	beq.n	8002476 <Max30102Loop+0x136>
	  {
		f_heartbeatTrace = MAX_HEART_BEAT_TRACE + 25.0f;
 8002470:	4b64      	ldr	r3, [pc, #400]	; (8002604 <Max30102Loop+0x2c4>)
 8002472:	4a66      	ldr	r2, [pc, #408]	; (800260c <Max30102Loop+0x2cc>)
 8002474:	601a      	str	r2, [r3, #0]
//    if (x == 238)
//    {
//    	GraphicsFilledRectangle(1, 1, 238, 208, BLACK);
//    	x = 1;
//    }
    un_prev_data = aun_red_buffer[i];
 8002476:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800247a:	4a5d      	ldr	r2, [pc, #372]	; (80025f0 <Max30102Loop+0x2b0>)
 800247c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002480:	4a5c      	ldr	r2, [pc, #368]	; (80025f4 <Max30102Loop+0x2b4>)
 8002482:	6013      	str	r3, [r2, #0]
  for (i = 0U; i < BUFFER_SIZE; i++)
 8002484:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002488:	3301      	adds	r3, #1
 800248a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800248e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002492:	2b1f      	cmp	r3, #31
 8002494:	f67f af5e 	bls.w	8002354 <Max30102Loop+0x14>
  }

  un_min = 0x3FFFFUL;
 8002498:	4b58      	ldr	r3, [pc, #352]	; (80025fc <Max30102Loop+0x2bc>)
 800249a:	4a5d      	ldr	r2, [pc, #372]	; (8002610 <Max30102Loop+0x2d0>)
 800249c:	601a      	str	r2, [r3, #0]
  un_max = 0UL;
 800249e:	4b56      	ldr	r3, [pc, #344]	; (80025f8 <Max30102Loop+0x2b8>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < BUFFER_SIZE; i++)
 80024a4:	2300      	movs	r3, #0
 80024a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80024aa:	e024      	b.n	80024f6 <Max30102Loop+0x1b6>
  {
    if (un_min > aun_red_buffer[i])
 80024ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024b0:	4a4f      	ldr	r2, [pc, #316]	; (80025f0 <Max30102Loop+0x2b0>)
 80024b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80024b6:	4b51      	ldr	r3, [pc, #324]	; (80025fc <Max30102Loop+0x2bc>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d206      	bcs.n	80024cc <Max30102Loop+0x18c>
    {
      un_min = aun_red_buffer[i];    //update signal min for next cycle using values from this cycle
 80024be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024c2:	4a4b      	ldr	r2, [pc, #300]	; (80025f0 <Max30102Loop+0x2b0>)
 80024c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c8:	4a4c      	ldr	r2, [pc, #304]	; (80025fc <Max30102Loop+0x2bc>)
 80024ca:	6013      	str	r3, [r2, #0]
    }
    if (un_max < aun_red_buffer[i])
 80024cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024d0:	4a47      	ldr	r2, [pc, #284]	; (80025f0 <Max30102Loop+0x2b0>)
 80024d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80024d6:	4b48      	ldr	r3, [pc, #288]	; (80025f8 <Max30102Loop+0x2b8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d906      	bls.n	80024ec <Max30102Loop+0x1ac>
    {
      un_max = aun_red_buffer[i];    //update signal max for next cycle using values from this cycle
 80024de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024e2:	4a43      	ldr	r2, [pc, #268]	; (80025f0 <Max30102Loop+0x2b0>)
 80024e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e8:	4a43      	ldr	r2, [pc, #268]	; (80025f8 <Max30102Loop+0x2b8>)
 80024ea:	6013      	str	r3, [r2, #0]
  for (i = 0U; i < BUFFER_SIZE; i++)
 80024ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024f0:	3301      	adds	r3, #1
 80024f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80024f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024fa:	2b1f      	cmp	r3, #31
 80024fc:	d9d6      	bls.n	80024ac <Max30102Loop+0x16c>
    }
  }

  // calculate heart rate and SpO2 after BUFFER_SIZE samples (ST seconds of samples) using Robert's method
  rf_heart_rate_and_oxygen_saturation(aun_ir_buffer, BUFFER_SIZE, aun_red_buffer, &n_spo2, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid, &ratio, &correl);
 80024fe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002502:	f107 031c 	add.w	r3, r7, #28
 8002506:	9304      	str	r3, [sp, #16]
 8002508:	f107 0320 	add.w	r3, r7, #32
 800250c:	9303      	str	r3, [sp, #12]
 800250e:	f107 0313 	add.w	r3, r7, #19
 8002512:	9302      	str	r3, [sp, #8]
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	9301      	str	r3, [sp, #4]
 800251a:	f107 031b 	add.w	r3, r7, #27
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	4613      	mov	r3, r2
 8002522:	4a33      	ldr	r2, [pc, #204]	; (80025f0 <Max30102Loop+0x2b0>)
 8002524:	2120      	movs	r1, #32
 8002526:	4831      	ldr	r0, [pc, #196]	; (80025ec <Max30102Loop+0x2ac>)
 8002528:	f000 f87e 	bl	8002628 <rf_heart_rate_and_oxygen_saturation>


  if (ch_hr_valid && ch_spo2_valid)
 800252c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d050      	beq.n	80025d6 <Max30102Loop+0x296>
 8002534:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d04c      	beq.n	80025d6 <Max30102Loop+0x296>
  {
	  *finger_on = 1;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	701a      	strb	r2, [r3, #0]
	  if (HAL_GetTick()-last_time > 10000){
 8002542:	f001 fa53 	bl	80039ec <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	4b32      	ldr	r3, [pc, #200]	; (8002614 <Max30102Loop+0x2d4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002552:	4293      	cmp	r3, r2
 8002554:	d927      	bls.n	80025a6 <Max30102Loop+0x266>
		  *spo2_mean = n_spo2_sum/num;
 8002556:	4b30      	ldr	r3, [pc, #192]	; (8002618 <Max30102Loop+0x2d8>)
 8002558:	681c      	ldr	r4, [r3, #0]
 800255a:	4b30      	ldr	r3, [pc, #192]	; (800261c <Max30102Loop+0x2dc>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fbb4 	bl	8000ccc <__aeabi_i2f>
 8002564:	4603      	mov	r3, r0
 8002566:	4619      	mov	r1, r3
 8002568:	4620      	mov	r0, r4
 800256a:	f7fe fcb7 	bl	8000edc <__aeabi_fdiv>
 800256e:	4603      	mov	r3, r0
 8002570:	461a      	mov	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	601a      	str	r2, [r3, #0]
		  *heart_rate_mean = n_heart_rate_sum/num;
 8002576:	4b2a      	ldr	r3, [pc, #168]	; (8002620 <Max30102Loop+0x2e0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a28      	ldr	r2, [pc, #160]	; (800261c <Max30102Loop+0x2dc>)
 800257c:	7812      	ldrb	r2, [r2, #0]
 800257e:	fb93 f3f2 	sdiv	r3, r3, r2
 8002582:	461a      	mov	r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	601a      	str	r2, [r3, #0]
//		  debug_printf(">>>>>>>>>>>>SPO2: %f , Heart Rate: %d\r\n", *spo2_mean, *heart_rate_mean);
		  num = 0;
 8002588:	4b24      	ldr	r3, [pc, #144]	; (800261c <Max30102Loop+0x2dc>)
 800258a:	2200      	movs	r2, #0
 800258c:	701a      	strb	r2, [r3, #0]
		  n_spo2_sum = 0;
 800258e:	4b22      	ldr	r3, [pc, #136]	; (8002618 <Max30102Loop+0x2d8>)
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
		  n_heart_rate_sum = 0;
 8002596:	4b22      	ldr	r3, [pc, #136]	; (8002620 <Max30102Loop+0x2e0>)
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
		  last_time = HAL_GetTick();
 800259c:	f001 fa26 	bl	80039ec <HAL_GetTick>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4a1c      	ldr	r2, [pc, #112]	; (8002614 <Max30102Loop+0x2d4>)
 80025a4:	6013      	str	r3, [r2, #0]
	  }

	  n_spo2_sum += n_spo2;
 80025a6:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <Max30102Loop+0x2d8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ac:	4611      	mov	r1, r2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe fad8 	bl	8000b64 <__addsf3>
 80025b4:	4603      	mov	r3, r0
 80025b6:	461a      	mov	r2, r3
 80025b8:	4b17      	ldr	r3, [pc, #92]	; (8002618 <Max30102Loop+0x2d8>)
 80025ba:	601a      	str	r2, [r3, #0]
	  n_heart_rate_sum += n_heart_rate;
 80025bc:	4b18      	ldr	r3, [pc, #96]	; (8002620 <Max30102Loop+0x2e0>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	4413      	add	r3, r2
 80025c4:	4a16      	ldr	r2, [pc, #88]	; (8002620 <Max30102Loop+0x2e0>)
 80025c6:	6013      	str	r3, [r2, #0]
	  num += 1;
 80025c8:	4b14      	ldr	r3, [pc, #80]	; (800261c <Max30102Loop+0x2dc>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	3301      	adds	r3, #1
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	4b12      	ldr	r3, [pc, #72]	; (800261c <Max30102Loop+0x2dc>)
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	e003      	b.n	80025de <Max30102Loop+0x29e>
//	  debug_printf("SPO2: %f , Heart Rate: %d\r\n", n_spo2, n_heart_rate);
  }
  else
  {
	  *finger_on = 0;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
//	  debug_printf("..........................\r\n");
  }
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3734      	adds	r7, #52	; 0x34
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd90      	pop	{r4, r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40010c00 	.word	0x40010c00
 80025ec:	20000138 	.word	0x20000138
 80025f0:	200001b8 	.word	0x200001b8
 80025f4:	20000248 	.word	0x20000248
 80025f8:	2000024c 	.word	0x2000024c
 80025fc:	20000000 	.word	0x20000000
 8002600:	430c0000 	.word	0x430c0000
 8002604:	20000250 	.word	0x20000250
 8002608:	c1c80000 	.word	0xc1c80000
 800260c:	43250000 	.word	0x43250000
 8002610:	0003ffff 	.word	0x0003ffff
 8002614:	20000238 	.word	0x20000238
 8002618:	20000240 	.word	0x20000240
 800261c:	2000023c 	.word	0x2000023c
 8002620:	20000244 	.word	0x20000244
 8002624:	00000000 	.word	0x00000000

08002628 <rf_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 8002628:	b5b0      	push	{r4, r5, r7, lr}
 800262a:	b0d6      	sub	sp, #344	; 0x158
 800262c:	af04      	add	r7, sp, #16
 800262e:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 8002632:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
 8002636:	6020      	str	r0, [r4, #0]
 8002638:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800263c:	f5a0 70a0 	sub.w	r0, r0, #320	; 0x140
 8002640:	6001      	str	r1, [r0, #0]
 8002642:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8002646:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 800264a:	600a      	str	r2, [r1, #0]
 800264c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002650:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8002654:	6013      	str	r3, [r2, #0]
  float beta_ir, beta_red, x;
  float an_x[BUFFER_SIZE], *ptr_x; //ir
  float an_y[BUFFER_SIZE], *ptr_y; //red

  // calculates DC mean and subtracts DC from ir and red
  f_ir_mean=0.0;
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  f_red_mean=0.0;
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  for (k=0; k<n_ir_buffer_length; ++k) {
 8002666:	2300      	movs	r3, #0
 8002668:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800266c:	e030      	b.n	80026d0 <rf_heart_rate_and_oxygen_saturation+0xa8>
    f_ir_mean += pun_ir_buffer[k];
 800266e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002678:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	4413      	add	r3, r2
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe fb1e 	bl	8000cc4 <__aeabi_ui2f>
 8002688:	4603      	mov	r3, r0
 800268a:	4619      	mov	r1, r3
 800268c:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8002690:	f7fe fa68 	bl	8000b64 <__addsf3>
 8002694:	4603      	mov	r3, r0
 8002696:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    f_red_mean += pun_red_buffer[k];
 800269a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80026a4:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 80026a8:	6812      	ldr	r2, [r2, #0]
 80026aa:	4413      	add	r3, r2
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe fb08 	bl	8000cc4 <__aeabi_ui2f>
 80026b4:	4603      	mov	r3, r0
 80026b6:	4619      	mov	r1, r3
 80026b8:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80026bc:	f7fe fa52 	bl	8000b64 <__addsf3>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  for (k=0; k<n_ir_buffer_length; ++k) {
 80026c6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80026ca:	3301      	adds	r3, #1
 80026cc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80026d0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80026d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80026d8:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	dbc5      	blt.n	800266e <rf_heart_rate_and_oxygen_saturation+0x46>
  }
  f_ir_mean=f_ir_mean/n_ir_buffer_length ;
 80026e2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80026e6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	f7fe faee 	bl	8000ccc <__aeabi_i2f>
 80026f0:	4603      	mov	r3, r0
 80026f2:	4619      	mov	r1, r3
 80026f4:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 80026f8:	f7fe fbf0 	bl	8000edc <__aeabi_fdiv>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  f_red_mean=f_red_mean/n_ir_buffer_length ;
 8002702:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002706:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	f7fe fade 	bl	8000ccc <__aeabi_i2f>
 8002710:	4603      	mov	r3, r0
 8002712:	4619      	mov	r1, r3
 8002714:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8002718:	f7fe fbe0 	bl	8000edc <__aeabi_fdiv>
 800271c:	4603      	mov	r3, r0
 800271e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

  // remove DC
  for (k=0,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++ptr_x,++ptr_y) {
 8002722:	2300      	movs	r3, #0
 8002724:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002728:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800272c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002738:	e03e      	b.n	80027b8 <rf_heart_rate_and_oxygen_saturation+0x190>
    *ptr_x = pun_ir_buffer[k] - f_ir_mean;
 800273a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002744:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8002748:	6812      	ldr	r2, [r2, #0]
 800274a:	4413      	add	r3, r2
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe fab8 	bl	8000cc4 <__aeabi_ui2f>
 8002754:	4603      	mov	r3, r0
 8002756:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800275a:	4618      	mov	r0, r3
 800275c:	f7fe fa00 	bl	8000b60 <__aeabi_fsub>
 8002760:	4603      	mov	r3, r0
 8002762:	461a      	mov	r2, r3
 8002764:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002768:	601a      	str	r2, [r3, #0]
    *ptr_y = pun_red_buffer[k] - f_red_mean;
 800276a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002774:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8002778:	6812      	ldr	r2, [r2, #0]
 800277a:	4413      	add	r3, r2
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe faa0 	bl	8000cc4 <__aeabi_ui2f>
 8002784:	4603      	mov	r3, r0
 8002786:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800278a:	4618      	mov	r0, r3
 800278c:	f7fe f9e8 	bl	8000b60 <__aeabi_fsub>
 8002790:	4603      	mov	r3, r0
 8002792:	461a      	mov	r2, r3
 8002794:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002798:	601a      	str	r2, [r3, #0]
  for (k=0,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++ptr_x,++ptr_y) {
 800279a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800279e:	3301      	adds	r3, #1
 80027a0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80027a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80027a8:	3304      	adds	r3, #4
 80027aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80027ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80027b2:	3304      	adds	r3, #4
 80027b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80027b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80027bc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80027c0:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	dbb7      	blt.n	800273a <rf_heart_rate_and_oxygen_saturation+0x112>
  }

  // RF, remove linear trend (baseline leveling)
  beta_ir = rf_linear_regression_beta(an_x, mean_X, sum_X2);
 80027ca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80027ce:	4ac8      	ldr	r2, [pc, #800]	; (8002af0 <rf_heart_rate_and_oxygen_saturation+0x4c8>)
 80027d0:	49c8      	ldr	r1, [pc, #800]	; (8002af4 <rf_heart_rate_and_oxygen_saturation+0x4cc>)
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 f9ac 	bl	8002b30 <rf_linear_regression_beta>
 80027d8:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
  beta_red = rf_linear_regression_beta(an_y, mean_X, sum_X2);
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	4ac3      	ldr	r2, [pc, #780]	; (8002af0 <rf_heart_rate_and_oxygen_saturation+0x4c8>)
 80027e2:	49c4      	ldr	r1, [pc, #784]	; (8002af4 <rf_heart_rate_and_oxygen_saturation+0x4cc>)
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 f9a3 	bl	8002b30 <rf_linear_regression_beta>
 80027ea:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  for(k=0,x=-mean_X,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++x,++ptr_x,++ptr_y) {
 80027ee:	2300      	movs	r3, #0
 80027f0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80027f4:	4bc0      	ldr	r3, [pc, #768]	; (8002af8 <rf_heart_rate_and_oxygen_saturation+0x4d0>)
 80027f6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80027fa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80027fe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002802:	f107 0314 	add.w	r3, r7, #20
 8002806:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800280a:	e03d      	b.n	8002888 <rf_heart_rate_and_oxygen_saturation+0x260>
    *ptr_x -= beta_ir*x;
 800280c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002810:	681c      	ldr	r4, [r3, #0]
 8002812:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8002816:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800281a:	f7fe faab 	bl	8000d74 <__aeabi_fmul>
 800281e:	4603      	mov	r3, r0
 8002820:	4619      	mov	r1, r3
 8002822:	4620      	mov	r0, r4
 8002824:	f7fe f99c 	bl	8000b60 <__aeabi_fsub>
 8002828:	4603      	mov	r3, r0
 800282a:	461a      	mov	r2, r3
 800282c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002830:	601a      	str	r2, [r3, #0]
    *ptr_y -= beta_red*x;
 8002832:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002836:	681c      	ldr	r4, [r3, #0]
 8002838:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800283c:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8002840:	f7fe fa98 	bl	8000d74 <__aeabi_fmul>
 8002844:	4603      	mov	r3, r0
 8002846:	4619      	mov	r1, r3
 8002848:	4620      	mov	r0, r4
 800284a:	f7fe f989 	bl	8000b60 <__aeabi_fsub>
 800284e:	4603      	mov	r3, r0
 8002850:	461a      	mov	r2, r3
 8002852:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002856:	601a      	str	r2, [r3, #0]
  for(k=0,x=-mean_X,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++x,++ptr_x,++ptr_y) {
 8002858:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800285c:	3301      	adds	r3, #1
 800285e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002862:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002866:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 800286a:	f7fe f97b 	bl	8000b64 <__addsf3>
 800286e:	4603      	mov	r3, r0
 8002870:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002874:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002878:	3304      	adds	r3, #4
 800287a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800287e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002882:	3304      	adds	r3, #4
 8002884:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002888:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800288c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002890:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	dbb8      	blt.n	800280c <rf_heart_rate_and_oxygen_saturation+0x1e4>
  }

    // For SpO2 calculate RMS of both AC signals. In addition, pulse detector needs raw sum of squares for IR
  f_y_ac=rf_rms(an_y,n_ir_buffer_length,&f_red_sumsq);
 800289a:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800289e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80028a2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80028a6:	f107 0014 	add.w	r0, r7, #20
 80028aa:	6819      	ldr	r1, [r3, #0]
 80028ac:	f000 fab8 	bl	8002e20 <rf_rms>
 80028b0:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  f_x_ac=rf_rms(an_x,n_ir_buffer_length,&f_ir_sumsq);
 80028b4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80028b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80028bc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80028c0:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80028c4:	6819      	ldr	r1, [r3, #0]
 80028c6:	f000 faab 	bl	8002e20 <rf_rms>
 80028ca:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

  // Calculate Pearson correlation between red and IR
  *correl=rf_Pcorrelation(an_x, an_y, n_ir_buffer_length)/sqrt(f_red_sumsq*f_ir_sumsq);
 80028ce:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80028d2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80028d6:	f107 0114 	add.w	r1, r7, #20
 80028da:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	f000 faef 	bl	8002ec2 <rf_Pcorrelation>
 80028e4:	4603      	mov	r3, r0
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fd fd96 	bl	8000418 <__aeabi_f2d>
 80028ec:	4604      	mov	r4, r0
 80028ee:	460d      	mov	r5, r1
 80028f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028f4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80028f8:	4611      	mov	r1, r2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe fa3a 	bl	8000d74 <__aeabi_fmul>
 8002900:	4603      	mov	r3, r0
 8002902:	4618      	mov	r0, r3
 8002904:	f7fd fd88 	bl	8000418 <__aeabi_f2d>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4610      	mov	r0, r2
 800290e:	4619      	mov	r1, r3
 8002910:	f004 fe26 	bl	8007560 <sqrt>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4620      	mov	r0, r4
 800291a:	4629      	mov	r1, r5
 800291c:	f7fd fefe 	bl	800071c <__aeabi_ddiv>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4610      	mov	r0, r2
 8002926:	4619      	mov	r1, r3
 8002928:	f7fe f8c6 	bl	8000ab8 <__aeabi_d2f>
 800292c:	4602      	mov	r2, r0
 800292e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002932:	601a      	str	r2, [r3, #0]

  // Find signal periodicity
  if(*correl>=min_pearson_correlation) {
 8002934:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4970      	ldr	r1, [pc, #448]	; (8002afc <rf_heart_rate_and_oxygen_saturation+0x4d4>)
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe fbcb 	bl	80010d8 <__aeabi_fcmpge>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d027      	beq.n	8002998 <rf_heart_rate_and_oxygen_saturation+0x370>
    // At the beginning of oximetry run the exact range of heart rate is unknown. This may lead to wrong rate if the next call does not find the _first_
    // peak of the autocorrelation function. E.g., second peak would yield only 50% of the true rate.
    if(LOWEST_PERIOD==n_last_peak_interval)
 8002948:	4b6d      	ldr	r3, [pc, #436]	; (8002b00 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b08      	cmp	r3, #8
 800294e:	d10c      	bne.n	800296a <rf_heart_rate_and_oxygen_saturation+0x342>
      rf_initialize_periodicity_search(an_x, BUFFER_SIZE, &n_last_peak_interval, HIGHEST_PERIOD, min_autocorrelation_ratio, f_ir_sumsq);
 8002950:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002954:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	2325      	movs	r3, #37	; 0x25
 8002962:	4a67      	ldr	r2, [pc, #412]	; (8002b00 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 8002964:	2120      	movs	r1, #32
 8002966:	f000 f962 	bl	8002c2e <rf_initialize_periodicity_search>
    // RF, If correlation os good, then find average periodicity of the IR signal. If aperiodic, return periodicity of 0
    if(n_last_peak_interval!=0)
 800296a:	4b65      	ldr	r3, [pc, #404]	; (8002b00 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d015      	beq.n	800299e <rf_heart_rate_and_oxygen_saturation+0x376>
      rf_signal_periodicity(an_x, BUFFER_SIZE, &n_last_peak_interval, LOWEST_PERIOD, HIGHEST_PERIOD, min_autocorrelation_ratio, f_ir_sumsq, ratio);
 8002972:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002976:	f107 0094 	add.w	r0, r7, #148	; 0x94
 800297a:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800297e:	9203      	str	r2, [sp, #12]
 8002980:	9302      	str	r3, [sp, #8]
 8002982:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002986:	9301      	str	r3, [sp, #4]
 8002988:	2325      	movs	r3, #37	; 0x25
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	2308      	movs	r3, #8
 800298e:	4a5c      	ldr	r2, [pc, #368]	; (8002b00 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 8002990:	2120      	movs	r1, #32
 8002992:	f000 f9bf 	bl	8002d14 <rf_signal_periodicity>
 8002996:	e002      	b.n	800299e <rf_heart_rate_and_oxygen_saturation+0x376>
  } else n_last_peak_interval=0;
 8002998:	4b59      	ldr	r3, [pc, #356]	; (8002b00 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]

  // Calculate heart rate if periodicity detector was successful. Otherwise, reset peak interval to its initial value and report error.
  if(n_last_peak_interval!=0) {
 800299e:	4b58      	ldr	r3, [pc, #352]	; (8002b00 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d02f      	beq.n	8002a06 <rf_heart_rate_and_oxygen_saturation+0x3de>
    *pn_heart_rate = (int32_t)(FS60/n_last_peak_interval);
 80029a6:	4b56      	ldr	r3, [pc, #344]	; (8002b00 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80029ae:	fb92 f2f3 	sdiv	r2, r2, r3
 80029b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80029b6:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 1;
 80029b8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80029bc:	2201      	movs	r2, #1
 80029be:	701a      	strb	r2, [r3, #0]
    *pch_spo2_valid  = 0;
    return;
  }

  // After trend removal, the mean represents DC level
  xy_ratio= (f_y_ac*f_ir_mean)/(f_x_ac*f_red_mean);  //formula is (f_y_ac*f_x_dc) / (f_x_ac*f_y_dc) ;
 80029c0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80029c4:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80029c8:	f7fe f9d4 	bl	8000d74 <__aeabi_fmul>
 80029cc:	4603      	mov	r3, r0
 80029ce:	461c      	mov	r4, r3
 80029d0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80029d4:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80029d8:	f7fe f9cc 	bl	8000d74 <__aeabi_fmul>
 80029dc:	4603      	mov	r3, r0
 80029de:	4619      	mov	r1, r3
 80029e0:	4620      	mov	r0, r4
 80029e2:	f7fe fa7b 	bl	8000edc <__aeabi_fdiv>
 80029e6:	4603      	mov	r3, r0
 80029e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  if(xy_ratio>0.02 && xy_ratio<1.84) { // Check boundaries of applicability
 80029ec:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80029f0:	f7fd fd12 	bl	8000418 <__aeabi_f2d>
 80029f4:	a334      	add	r3, pc, #208	; (adr r3, 8002ac8 <rf_heart_rate_and_oxygen_saturation+0x4a0>)
 80029f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fa:	f7fd fff5 	bl	80009e8 <__aeabi_dcmpgt>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d117      	bne.n	8002a34 <rf_heart_rate_and_oxygen_saturation+0x40c>
 8002a04:	e082      	b.n	8002b0c <rf_heart_rate_and_oxygen_saturation+0x4e4>
    n_last_peak_interval=LOWEST_PERIOD;
 8002a06:	4b3e      	ldr	r3, [pc, #248]	; (8002b00 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 8002a08:	2208      	movs	r2, #8
 8002a0a:	601a      	str	r2, [r3, #0]
    *pn_heart_rate = -999; // unable to calculate because signal looks aperiodic
 8002a0c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002a10:	4a3c      	ldr	r2, [pc, #240]	; (8002b04 <rf_heart_rate_and_oxygen_saturation+0x4dc>)
 8002a12:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 0;
 8002a14:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
    *pn_spo2 =  -999 ; // do not use SPO2 from this corrupt signal
 8002a1c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002a20:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a38      	ldr	r2, [pc, #224]	; (8002b08 <rf_heart_rate_and_oxygen_saturation+0x4e0>)
 8002a28:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 0;
 8002a2a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002a2e:	2200      	movs	r2, #0
 8002a30:	701a      	strb	r2, [r3, #0]
 8002a32:	e076      	b.n	8002b22 <rf_heart_rate_and_oxygen_saturation+0x4fa>
  if(xy_ratio>0.02 && xy_ratio<1.84) { // Check boundaries of applicability
 8002a34:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8002a38:	f7fd fcee 	bl	8000418 <__aeabi_f2d>
 8002a3c:	a324      	add	r3, pc, #144	; (adr r3, 8002ad0 <rf_heart_rate_and_oxygen_saturation+0x4a8>)
 8002a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a42:	f7fd ffb3 	bl	80009ac <__aeabi_dcmplt>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d05f      	beq.n	8002b0c <rf_heart_rate_and_oxygen_saturation+0x4e4>
    *pn_spo2 = (-45.060*xy_ratio + 30.354)*xy_ratio + 94.845;
 8002a4c:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8002a50:	f7fd fce2 	bl	8000418 <__aeabi_f2d>
 8002a54:	a320      	add	r3, pc, #128	; (adr r3, 8002ad8 <rf_heart_rate_and_oxygen_saturation+0x4b0>)
 8002a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5a:	f7fd fd35 	bl	80004c8 <__aeabi_dmul>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4610      	mov	r0, r2
 8002a64:	4619      	mov	r1, r3
 8002a66:	a31e      	add	r3, pc, #120	; (adr r3, 8002ae0 <rf_heart_rate_and_oxygen_saturation+0x4b8>)
 8002a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6c:	f7fd fb76 	bl	800015c <__adddf3>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4614      	mov	r4, r2
 8002a76:	461d      	mov	r5, r3
 8002a78:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8002a7c:	f7fd fccc 	bl	8000418 <__aeabi_f2d>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4620      	mov	r0, r4
 8002a86:	4629      	mov	r1, r5
 8002a88:	f7fd fd1e 	bl	80004c8 <__aeabi_dmul>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4610      	mov	r0, r2
 8002a92:	4619      	mov	r1, r3
 8002a94:	a314      	add	r3, pc, #80	; (adr r3, 8002ae8 <rf_heart_rate_and_oxygen_saturation+0x4c0>)
 8002a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9a:	f7fd fb5f 	bl	800015c <__adddf3>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f7fe f807 	bl	8000ab8 <__aeabi_d2f>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002ab0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid = 1;
 8002ab8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002abc:	2201      	movs	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]
 8002ac0:	e02f      	b.n	8002b22 <rf_heart_rate_and_oxygen_saturation+0x4fa>
 8002ac2:	bf00      	nop
 8002ac4:	f3af 8000 	nop.w
 8002ac8:	47ae147b 	.word	0x47ae147b
 8002acc:	3f947ae1 	.word	0x3f947ae1
 8002ad0:	d70a3d71 	.word	0xd70a3d71
 8002ad4:	3ffd70a3 	.word	0x3ffd70a3
 8002ad8:	147ae148 	.word	0x147ae148
 8002adc:	c04687ae 	.word	0xc04687ae
 8002ae0:	be76c8b4 	.word	0xbe76c8b4
 8002ae4:	403e5a9f 	.word	0x403e5a9f
 8002ae8:	7ae147ae 	.word	0x7ae147ae
 8002aec:	4057b614 	.word	0x4057b614
 8002af0:	47a2be80 	.word	0x47a2be80
 8002af4:	41780000 	.word	0x41780000
 8002af8:	c1780000 	.word	0xc1780000
 8002afc:	3f4ccccd 	.word	0x3f4ccccd
 8002b00:	20000004 	.word	0x20000004
 8002b04:	fffffc19 	.word	0xfffffc19
 8002b08:	c479c000 	.word	0xc479c000
  } else {
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
 8002b0c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002b10:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a05      	ldr	r2, [pc, #20]	; (8002b2c <rf_heart_rate_and_oxygen_saturation+0x504>)
 8002b18:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 0;
 8002b1a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002b1e:	2200      	movs	r2, #0
 8002b20:	701a      	strb	r2, [r3, #0]
  }
}
 8002b22:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bdb0      	pop	{r4, r5, r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	c479c000 	.word	0xc479c000

08002b30 <rf_linear_regression_beta>:
*               point index values (0 to BUFFER_SIZE-1). xmean must equal to (BUFFER_SIZE-1)/2! sum_x2 is
*               the sum of squares of the mean-centered index values.
*               Robert Fraczkiewicz, 12/22/2017
* \retval       Beta
*/
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  float x,beta,*pn_ptr;
  beta=0.0;
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	61bb      	str	r3, [r7, #24]
  for(x=-xmean,pn_ptr=pn_x;x<=xmean;++x,++pn_ptr)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	e016      	b.n	8002b7e <rf_linear_regression_beta+0x4e>
    beta+=x*(*pn_ptr);
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	69f9      	ldr	r1, [r7, #28]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe f90c 	bl	8000d74 <__aeabi_fmul>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	4619      	mov	r1, r3
 8002b60:	69b8      	ldr	r0, [r7, #24]
 8002b62:	f7fd ffff 	bl	8000b64 <__addsf3>
 8002b66:	4603      	mov	r3, r0
 8002b68:	61bb      	str	r3, [r7, #24]
  for(x=-xmean,pn_ptr=pn_x;x<=xmean;++x,++pn_ptr)
 8002b6a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002b6e:	69f8      	ldr	r0, [r7, #28]
 8002b70:	f7fd fff8 	bl	8000b64 <__addsf3>
 8002b74:	4603      	mov	r3, r0
 8002b76:	61fb      	str	r3, [r7, #28]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	68b9      	ldr	r1, [r7, #8]
 8002b80:	69f8      	ldr	r0, [r7, #28]
 8002b82:	f7fe fa9f 	bl	80010c4 <__aeabi_fcmple>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1e1      	bne.n	8002b50 <rf_linear_regression_beta+0x20>
  return beta/sum_x2;
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	69b8      	ldr	r0, [r7, #24]
 8002b90:	f7fe f9a4 	bl	8000edc <__aeabi_fdiv>
 8002b94:	4603      	mov	r3, r0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3720      	adds	r7, #32
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <rf_autocorrelation>:
* \par          Details
*               Compute autocorrelation sequence's n_lag's element for a given series pn_x
*               Robert Fraczkiewicz, 12/21/2017
* \retval       Autocorrelation sum
*/
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b088      	sub	sp, #32
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
  int16_t i, n_temp=n_size-n_lag;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	827b      	strh	r3, [r7, #18]
  float sum=0.0,*pn_ptr;
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	61bb      	str	r3, [r7, #24]
  if(n_temp<=0) return sum;
 8002bbe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	dc01      	bgt.n	8002bca <rf_autocorrelation+0x2c>
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	e02d      	b.n	8002c26 <rf_autocorrelation+0x88>
  for (i=0,pn_ptr=pn_x; i<n_temp; ++i,++pn_ptr) {
 8002bca:	2300      	movs	r3, #0
 8002bcc:	83fb      	strh	r3, [r7, #30]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	e017      	b.n	8002c04 <rf_autocorrelation+0x66>
    sum += (*pn_ptr)*(*(pn_ptr+n_lag));
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	6818      	ldr	r0, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	4413      	add	r3, r2
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4619      	mov	r1, r3
 8002be4:	f7fe f8c6 	bl	8000d74 <__aeabi_fmul>
 8002be8:	4603      	mov	r3, r0
 8002bea:	4619      	mov	r1, r3
 8002bec:	69b8      	ldr	r0, [r7, #24]
 8002bee:	f7fd ffb9 	bl	8000b64 <__addsf3>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	61bb      	str	r3, [r7, #24]
  for (i=0,pn_ptr=pn_x; i<n_temp; ++i,++pn_ptr) {
 8002bf6:	8bfb      	ldrh	r3, [r7, #30]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	83fb      	strh	r3, [r7, #30]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	3304      	adds	r3, #4
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8002c08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	dbe1      	blt.n	8002bd4 <rf_autocorrelation+0x36>
  }
  return sum/n_temp;
 8002c10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fe f859 	bl	8000ccc <__aeabi_i2f>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	69b8      	ldr	r0, [r7, #24]
 8002c20:	f7fe f95c 	bl	8000edc <__aeabi_fdiv>
 8002c24:	4603      	mov	r3, r0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3720      	adds	r7, #32
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <rf_initialize_periodicity_search>:
*               of the autocorrelation at lag=0, then the input signal is insufficiently
*               periodic and probably indicates motion artifacts.
*               Robert Fraczkiewicz, 04/25/2020
* \retval       Average distance between peaks
*/
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b088      	sub	sp, #32
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	607a      	str	r2, [r7, #4]
 8002c3a:	603b      	str	r3, [r7, #0]
  int32_t n_lag;
  float aut,aut_right;
  // At this point, *p_last_periodicity = LOWEST_PERIOD. Start walking to the right,
  // two steps at a time, until lag ratio fulfills quality criteria or HIGHEST_PERIOD
  // is reached.
  n_lag=*p_last_periodicity;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	61fb      	str	r3, [r7, #28]
  aut_right=aut=rf_autocorrelation(pn_x, n_size, n_lag);
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	68b9      	ldr	r1, [r7, #8]
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f7ff ffa9 	bl	8002b9e <rf_autocorrelation>
 8002c4c:	6178      	str	r0, [r7, #20]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	61bb      	str	r3, [r7, #24]
  // Check sanity
  if(aut/aut_lag0 >= min_aut_ratio) {
 8002c52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c54:	6978      	ldr	r0, [r7, #20]
 8002c56:	f7fe f941 	bl	8000edc <__aeabi_fdiv>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c60:	f7fe fa30 	bl	80010c4 <__aeabi_fcmple>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d02b      	beq.n	8002cc2 <rf_initialize_periodicity_search+0x94>
    // Either quality criterion, min_aut_ratio, is too low, or heart rate is too high.
    // Are we on autocorrelation's downward slope? If yes, continue to a local minimum.
    // If not, continue to the next block.
    do {
      aut=aut_right;
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	617b      	str	r3, [r7, #20]
      n_lag+=2;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	3302      	adds	r3, #2
 8002c72:	61fb      	str	r3, [r7, #28]
      aut_right=rf_autocorrelation(pn_x, n_size, n_lag);
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	68b9      	ldr	r1, [r7, #8]
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f7ff ff90 	bl	8002b9e <rf_autocorrelation>
 8002c7e:	61b8      	str	r0, [r7, #24]
    } while(aut_right/aut_lag0 >= min_aut_ratio && aut_right<aut && n_lag<=n_max_distance);
 8002c80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c82:	69b8      	ldr	r0, [r7, #24]
 8002c84:	f7fe f92a 	bl	8000edc <__aeabi_fdiv>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c8e:	f7fe fa19 	bl	80010c4 <__aeabi_fcmple>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00a      	beq.n	8002cae <rf_initialize_periodicity_search+0x80>
 8002c98:	6979      	ldr	r1, [r7, #20]
 8002c9a:	69b8      	ldr	r0, [r7, #24]
 8002c9c:	f7fe fa08 	bl	80010b0 <__aeabi_fcmplt>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <rf_initialize_periodicity_search+0x80>
 8002ca6:	69fa      	ldr	r2, [r7, #28]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	dddd      	ble.n	8002c6a <rf_initialize_periodicity_search+0x3c>
    if(n_lag>n_max_distance) {
 8002cae:	69fa      	ldr	r2, [r7, #28]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	dd03      	ble.n	8002cbe <rf_initialize_periodicity_search+0x90>
      // This should never happen, but if does return failure
      *p_last_periodicity=0;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
      return;
 8002cbc:	e027      	b.n	8002d0e <rf_initialize_periodicity_search+0xe0>
    }
    aut=aut_right;
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	617b      	str	r3, [r7, #20]
  }
  // Walk to the right.
  do {
    aut=aut_right;
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	617b      	str	r3, [r7, #20]
    n_lag+=2;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3302      	adds	r3, #2
 8002cca:	61fb      	str	r3, [r7, #28]
    aut_right=rf_autocorrelation(pn_x, n_size, n_lag);
 8002ccc:	69fa      	ldr	r2, [r7, #28]
 8002cce:	68b9      	ldr	r1, [r7, #8]
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f7ff ff64 	bl	8002b9e <rf_autocorrelation>
 8002cd6:	61b8      	str	r0, [r7, #24]
  } while(aut_right/aut_lag0 < min_aut_ratio && n_lag<=n_max_distance);
 8002cd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cda:	69b8      	ldr	r0, [r7, #24]
 8002cdc:	f7fe f8fe 	bl	8000edc <__aeabi_fdiv>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ce6:	f7fe fa01 	bl	80010ec <__aeabi_fcmpgt>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <rf_initialize_periodicity_search+0xca>
 8002cf0:	69fa      	ldr	r2, [r7, #28]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	dde4      	ble.n	8002cc2 <rf_initialize_periodicity_search+0x94>
  if(n_lag>n_max_distance) {
 8002cf8:	69fa      	ldr	r2, [r7, #28]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	dd03      	ble.n	8002d08 <rf_initialize_periodicity_search+0xda>
    // This should never happen, but if does return failure
    *p_last_periodicity=0;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	e002      	b.n	8002d0e <rf_initialize_periodicity_search+0xe0>
  } else
    *p_last_periodicity=n_lag;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69fa      	ldr	r2, [r7, #28]
 8002d0c:	601a      	str	r2, [r3, #0]
}
 8002d0e:	3720      	adds	r7, #32
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <rf_signal_periodicity>:
*               than min_aut_ratio fraction of the autocorrelation at lag=0, then the input
*               signal is insufficiently periodic and probably indicates motion artifacts.
*               Robert Fraczkiewicz, 01/07/2018
* \retval       Average distance between peaks
*/
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08a      	sub	sp, #40	; 0x28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	603b      	str	r3, [r7, #0]
  int32_t n_lag;
  float aut,aut_left,aut_right,aut_save;
  bool left_limit_reached=false;
 8002d22:	2300      	movs	r3, #0
 8002d24:	75fb      	strb	r3, [r7, #23]
  // Start from the last periodicity computing the corresponding autocorrelation
  n_lag=*p_last_periodicity;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24
  aut_save=aut=rf_autocorrelation(pn_x, n_size, n_lag);
 8002d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d2e:	68b9      	ldr	r1, [r7, #8]
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f7ff ff34 	bl	8002b9e <rf_autocorrelation>
 8002d36:	6238      	str	r0, [r7, #32]
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	613b      	str	r3, [r7, #16]
  // Is autocorrelation one lag to the left greater?
  aut_left=aut;
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	61fb      	str	r3, [r7, #28]
  do {
    aut=aut_left;
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	623b      	str	r3, [r7, #32]
    n_lag--;
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	3b01      	subs	r3, #1
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
    aut_left=rf_autocorrelation(pn_x, n_size, n_lag);
 8002d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4c:	68b9      	ldr	r1, [r7, #8]
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f7ff ff25 	bl	8002b9e <rf_autocorrelation>
 8002d54:	61f8      	str	r0, [r7, #28]
  } while(aut_left>aut && n_lag>=n_min_distance);
 8002d56:	6a39      	ldr	r1, [r7, #32]
 8002d58:	69f8      	ldr	r0, [r7, #28]
 8002d5a:	f7fe f9c7 	bl	80010ec <__aeabi_fcmpgt>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <rf_signal_periodicity+0x58>
 8002d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	dae9      	bge.n	8002d40 <rf_signal_periodicity+0x2c>
  // Restore lag of the highest aut
  if(n_lag<n_min_distance) {
 8002d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	da07      	bge.n	8002d84 <rf_signal_periodicity+0x70>
    left_limit_reached=true;
 8002d74:	2301      	movs	r3, #1
 8002d76:	75fb      	strb	r3, [r7, #23]
    n_lag=*p_last_periodicity;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
    aut=aut_save;
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	623b      	str	r3, [r7, #32]
 8002d82:	e002      	b.n	8002d8a <rf_signal_periodicity+0x76>
  } else n_lag++;
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	3301      	adds	r3, #1
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
  if(n_lag==*p_last_periodicity) {
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d12b      	bne.n	8002dec <rf_signal_periodicity+0xd8>
    // Trip to the left made no progress. Walk to the right.
    aut_right=aut;
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	61bb      	str	r3, [r7, #24]
    do {
      aut=aut_right;
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	623b      	str	r3, [r7, #32]
      n_lag++;
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	3301      	adds	r3, #1
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
      aut_right=rf_autocorrelation(pn_x, n_size, n_lag);
 8002da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da4:	68b9      	ldr	r1, [r7, #8]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f7ff fef9 	bl	8002b9e <rf_autocorrelation>
 8002dac:	61b8      	str	r0, [r7, #24]
    } while(aut_right>aut && n_lag<=n_max_distance);
 8002dae:	6a39      	ldr	r1, [r7, #32]
 8002db0:	69b8      	ldr	r0, [r7, #24]
 8002db2:	f7fe f99b 	bl	80010ec <__aeabi_fcmpgt>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <rf_signal_periodicity+0xb0>
 8002dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	dde9      	ble.n	8002d98 <rf_signal_periodicity+0x84>
    // Restore lag of the highest aut
    if(n_lag>n_max_distance) n_lag=0; // Indicates failure
 8002dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	dd02      	ble.n	8002dd2 <rf_signal_periodicity+0xbe>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd0:	e002      	b.n	8002dd8 <rf_signal_periodicity+0xc4>
    else n_lag--;
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
    if(n_lag==*p_last_periodicity && left_limit_reached) n_lag=0; // Indicates failure
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d104      	bne.n	8002dec <rf_signal_periodicity+0xd8>
 8002de2:	7dfb      	ldrb	r3, [r7, #23]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <rf_signal_periodicity+0xd8>
 8002de8:	2300      	movs	r3, #0
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  *ratio=aut/aut_lag0;
 8002dec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002dee:	6a38      	ldr	r0, [r7, #32]
 8002df0:	f7fe f874 	bl	8000edc <__aeabi_fdiv>
 8002df4:	4603      	mov	r3, r0
 8002df6:	461a      	mov	r2, r3
 8002df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfa:	601a      	str	r2, [r3, #0]
  if(*ratio < min_aut_ratio) n_lag=0; // Indicates failure
 8002dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4619      	mov	r1, r3
 8002e02:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e04:	f7fe f972 	bl	80010ec <__aeabi_fcmpgt>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <rf_signal_periodicity+0xfe>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
  *p_last_periodicity=n_lag;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e16:	601a      	str	r2, [r3, #0]
}
 8002e18:	bf00      	nop
 8002e1a:	3728      	adds	r7, #40	; 0x28
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <rf_rms>:
* \par          Details
*               Compute root-mean-square variation for a given series pn_x
*               Robert Fraczkiewicz, 12/25/2017
* \retval       RMS value and raw sum of squares
*/
{
 8002e20:	b590      	push	{r4, r7, lr}
 8002e22:	b089      	sub	sp, #36	; 0x24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  int16_t i;
  float r,*pn_ptr;
  (*sumsq)=0.0;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
  for (i=0,pn_ptr=pn_x; i<n_size; ++i,++pn_ptr) {
 8002e34:	2300      	movs	r3, #0
 8002e36:	83fb      	strh	r3, [r7, #30]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	61bb      	str	r3, [r7, #24]
 8002e3c:	e018      	b.n	8002e70 <rf_rms+0x50>
    r=(*pn_ptr);
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	617b      	str	r3, [r7, #20]
    (*sumsq) += r*r;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681c      	ldr	r4, [r3, #0]
 8002e48:	6979      	ldr	r1, [r7, #20]
 8002e4a:	6978      	ldr	r0, [r7, #20]
 8002e4c:	f7fd ff92 	bl	8000d74 <__aeabi_fmul>
 8002e50:	4603      	mov	r3, r0
 8002e52:	4619      	mov	r1, r3
 8002e54:	4620      	mov	r0, r4
 8002e56:	f7fd fe85 	bl	8000b64 <__addsf3>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	601a      	str	r2, [r3, #0]
  for (i=0,pn_ptr=pn_x; i<n_size; ++i,++pn_ptr) {
 8002e62:	8bfb      	ldrh	r3, [r7, #30]
 8002e64:	3301      	adds	r3, #1
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	83fb      	strh	r3, [r7, #30]
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	61bb      	str	r3, [r7, #24]
 8002e70:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	dce1      	bgt.n	8002e3e <rf_rms+0x1e>
  }
  (*sumsq)/=n_size; // This corresponds to autocorrelation at lag=0
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681c      	ldr	r4, [r3, #0]
 8002e7e:	68b8      	ldr	r0, [r7, #8]
 8002e80:	f7fd ff24 	bl	8000ccc <__aeabi_i2f>
 8002e84:	4603      	mov	r3, r0
 8002e86:	4619      	mov	r1, r3
 8002e88:	4620      	mov	r0, r4
 8002e8a:	f7fe f827 	bl	8000edc <__aeabi_fdiv>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	461a      	mov	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	601a      	str	r2, [r3, #0]
  return sqrt(*sumsq);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd fabc 	bl	8000418 <__aeabi_f2d>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	f004 fb5a 	bl	8007560 <sqrt>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	f7fd fe00 	bl	8000ab8 <__aeabi_d2f>
 8002eb8:	4603      	mov	r3, r0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3724      	adds	r7, #36	; 0x24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd90      	pop	{r4, r7, pc}

08002ec2 <rf_Pcorrelation>:
* \par          Details
*               Compute scalar product between *pn_x and *pn_y vectors
*               Robert Fraczkiewicz, 12/25/2017
* \retval       Correlation product
*/
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b088      	sub	sp, #32
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
  int16_t i;
  float r,*x_ptr,*y_ptr;
  r=0.0;
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	61bb      	str	r3, [r7, #24]
  for (i=0,x_ptr=pn_x,y_ptr=pn_y; i<n_size; ++i,++x_ptr,++y_ptr) {
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	83fb      	strh	r3, [r7, #30]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	613b      	str	r3, [r7, #16]
 8002ee0:	e018      	b.n	8002f14 <rf_Pcorrelation+0x52>
    r+=(*x_ptr)*(*y_ptr);
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4619      	mov	r1, r3
 8002eec:	4610      	mov	r0, r2
 8002eee:	f7fd ff41 	bl	8000d74 <__aeabi_fmul>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	69b8      	ldr	r0, [r7, #24]
 8002ef8:	f7fd fe34 	bl	8000b64 <__addsf3>
 8002efc:	4603      	mov	r3, r0
 8002efe:	61bb      	str	r3, [r7, #24]
  for (i=0,x_ptr=pn_x,y_ptr=pn_y; i<n_size; ++i,++x_ptr,++y_ptr) {
 8002f00:	8bfb      	ldrh	r3, [r7, #30]
 8002f02:	3301      	adds	r3, #1
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	83fb      	strh	r3, [r7, #30]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	617b      	str	r3, [r7, #20]
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	3304      	adds	r3, #4
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	dce1      	bgt.n	8002ee2 <rf_Pcorrelation+0x20>
  }
  r/=n_size;
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7fd fed4 	bl	8000ccc <__aeabi_i2f>
 8002f24:	4603      	mov	r3, r0
 8002f26:	4619      	mov	r1, r3
 8002f28:	69b8      	ldr	r0, [r7, #24]
 8002f2a:	f7fd ffd7 	bl	8000edc <__aeabi_fdiv>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	61bb      	str	r3, [r7, #24]
  return r;
 8002f32:	69bb      	ldr	r3, [r7, #24]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3720      	adds	r7, #32
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08a      	sub	sp, #40	; 0x28
 8002f40:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f42:	f000 fcfb 	bl	800393c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f46:	f000 f891 	bl	800306c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f4a:	f000 f981 	bl	8003250 <MX_GPIO_Init>
  MX_DMA_Init();
 8002f4e:	f000 f959 	bl	8003204 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002f52:	f000 f92d 	bl	80031b0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002f56:	f000 f8cf 	bl	80030f8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002f5a:	f000 f8fb 	bl	8003154 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  dev_trace_init_t trace_init;
  trace_init.mosi.port = GPIO_PA;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	74bb      	strb	r3, [r7, #18]
  trace_init.sck. port = GPIO_PA;
 8002f62:	2300      	movs	r3, #0
 8002f64:	75bb      	strb	r3, [r7, #22]
  trace_init.nss.port = GPIO_PA;
 8002f66:	2300      	movs	r3, #0
 8002f68:	76bb      	strb	r3, [r7, #26]
  trace_init.mosi.pin =BB(0, b00000001);
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	823b      	strh	r3, [r7, #16]
  trace_init.sck.pin = BB(0, b00000010);
 8002f6e:	2302      	movs	r3, #2
 8002f70:	82bb      	strh	r3, [r7, #20]
  trace_init.nss.pin = BB(0, b00000100);
 8002f72:	2304      	movs	r3, #4
 8002f74:	833b      	strh	r3, [r7, #24]
  dev_trace_init(&trace_init);
 8002f76:	f107 0310 	add.w	r3, r7, #16
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fe f910 	bl	80011a0 <dev_trace_init>

  debug_printf("\r\n\n\n\n******HUMAN HEALTH MONITORING SENSOR******\r\n");
 8002f80:	4832      	ldr	r0, [pc, #200]	; (800304c <main+0x110>)
 8002f82:	f7fe fb61 	bl	8001648 <debug_printf>

  uint32_t serial_id = 1717;
 8002f86:	f240 63b5 	movw	r3, #1717	; 0x6b5
 8002f8a:	60fb      	str	r3, [r7, #12]
//  uint32_t temperature = 3755;
  uint32_t heart_rate;
  float saturation = 0;
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	607b      	str	r3, [r7, #4]
  uint8_t finger_on = 1;
 8002f92:	2301      	movs	r3, #1
 8002f94:	70fb      	strb	r3, [r7, #3]

  uint32_t last_time = HAL_GetTick();
 8002f96:	f000 fd29 	bl	80039ec <HAL_GetTick>
 8002f9a:	61f8      	str	r0, [r7, #28]


  Max30102Setup();
 8002f9c:	f7ff f9c0 	bl	8002320 <Max30102Setup>
    /* USER CODE BEGIN 3 */

//	  Max30102Loop();


	  if (HAL_GetTick() - last_time > 1000){
 8002fa0:	f000 fd24 	bl	80039ec <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fae:	d9f7      	bls.n	8002fa0 <main+0x64>
		  HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13);
 8002fb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fb4:	4826      	ldr	r0, [pc, #152]	; (8003050 <main+0x114>)
 8002fb6:	f001 fa86 	bl	80044c6 <HAL_GPIO_TogglePin>
		  get_temp();
 8002fba:	f000 f9b1 	bl	8003320 <get_temp>
		  Max30102Loop(&saturation, &heart_rate, &finger_on);
 8002fbe:	1cfa      	adds	r2, r7, #3
 8002fc0:	f107 0108 	add.w	r1, r7, #8
 8002fc4:	1d3b      	adds	r3, r7, #4
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff f9ba 	bl	8002340 <Max30102Loop>
		  if (finger_on == 1){
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d10b      	bne.n	8002fea <main+0xae>
			  debug_printf("........................................new SPO2: %f , Heart Rate: %d\r\n",saturation, heart_rate);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7fd fa1f 	bl	8000418 <__aeabi_f2d>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	9100      	str	r1, [sp, #0]
 8002fe2:	481c      	ldr	r0, [pc, #112]	; (8003054 <main+0x118>)
 8002fe4:	f7fe fb30 	bl	8001648 <debug_printf>
 8002fe8:	e002      	b.n	8002ff0 <main+0xb4>
		  }else{
			  debug_printf("........................................Not valid. Are you still alive?\r\n");
 8002fea:	481b      	ldr	r0, [pc, #108]	; (8003058 <main+0x11c>)
 8002fec:	f7fe fb2c 	bl	8001648 <debug_printf>
		  }
		  tx_buffer[0] = START_MESSAGE;
 8002ff0:	4b1a      	ldr	r3, [pc, #104]	; (800305c <main+0x120>)
 8002ff2:	22aa      	movs	r2, #170	; 0xaa
 8002ff4:	701a      	strb	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
		  memcpy(&tx_buffer[1], &serial_id, 4);
 8002ff8:	4a18      	ldr	r2, [pc, #96]	; (800305c <main+0x120>)
 8002ffa:	f8c2 3001 	str.w	r3, [r2, #1]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
		  // tx_buffer[5], temp;
		  memcpy(&tx_buffer[9], &heart_rate, 4);
 8003000:	4a16      	ldr	r2, [pc, #88]	; (800305c <main+0x120>)
 8003002:	f8c2 3009 	str.w	r3, [r2, #9]
		  saturation *= 1000;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4915      	ldr	r1, [pc, #84]	; (8003060 <main+0x124>)
 800300a:	4618      	mov	r0, r3
 800300c:	f7fd feb2 	bl	8000d74 <__aeabi_fmul>
 8003010:	4603      	mov	r3, r0
 8003012:	607b      	str	r3, [r7, #4]
		  temporary_int = (int)saturation;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4618      	mov	r0, r3
 8003018:	f7fe f872 	bl	8001100 <__aeabi_f2iz>
 800301c:	4603      	mov	r3, r0
 800301e:	461a      	mov	r2, r3
 8003020:	4b10      	ldr	r3, [pc, #64]	; (8003064 <main+0x128>)
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <main+0x128>)
 8003026:	681b      	ldr	r3, [r3, #0]
		  memcpy(&tx_buffer[13], &temporary_int, 4);
 8003028:	4a0c      	ldr	r2, [pc, #48]	; (800305c <main+0x120>)
 800302a:	f8c2 300d 	str.w	r3, [r2, #13]
		  tx_buffer[17] = finger_on;
 800302e:	78fa      	ldrb	r2, [r7, #3]
 8003030:	4b0a      	ldr	r3, [pc, #40]	; (800305c <main+0x120>)
 8003032:	745a      	strb	r2, [r3, #17]
		  tx_buffer[18] = END_MESSAGE;
 8003034:	4b09      	ldr	r3, [pc, #36]	; (800305c <main+0x120>)
 8003036:	2255      	movs	r2, #85	; 0x55
 8003038:	749a      	strb	r2, [r3, #18]
		  HAL_UART_Transmit_DMA(&huart1, tx_buffer, 32);
 800303a:	2220      	movs	r2, #32
 800303c:	4907      	ldr	r1, [pc, #28]	; (800305c <main+0x120>)
 800303e:	480a      	ldr	r0, [pc, #40]	; (8003068 <main+0x12c>)
 8003040:	f003 fbce 	bl	80067e0 <HAL_UART_Transmit_DMA>
		  last_time = HAL_GetTick();
 8003044:	f000 fcd2 	bl	80039ec <HAL_GetTick>
 8003048:	61f8      	str	r0, [r7, #28]
	  if (HAL_GetTick() - last_time > 1000){
 800304a:	e7a9      	b.n	8002fa0 <main+0x64>
 800304c:	080083e8 	.word	0x080083e8
 8003050:	40011000 	.word	0x40011000
 8003054:	0800841c 	.word	0x0800841c
 8003058:	08008464 	.word	0x08008464
 800305c:	200003cc 	.word	0x200003cc
 8003060:	447a0000 	.word	0x447a0000
 8003064:	2000044c 	.word	0x2000044c
 8003068:	200002fc 	.word	0x200002fc

0800306c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b090      	sub	sp, #64	; 0x40
 8003070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003072:	f107 0318 	add.w	r3, r7, #24
 8003076:	2228      	movs	r2, #40	; 0x28
 8003078:	2100      	movs	r1, #0
 800307a:	4618      	mov	r0, r3
 800307c:	f004 fa00 	bl	8007480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003080:	1d3b      	adds	r3, r7, #4
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	605a      	str	r2, [r3, #4]
 8003088:	609a      	str	r2, [r3, #8]
 800308a:	60da      	str	r2, [r3, #12]
 800308c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800308e:	2301      	movs	r3, #1
 8003090:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003092:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003096:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003098:	2300      	movs	r3, #0
 800309a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800309c:	2301      	movs	r3, #1
 800309e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030a0:	2302      	movs	r3, #2
 80030a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80030aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80030ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030b0:	f107 0318 	add.w	r3, r7, #24
 80030b4:	4618      	mov	r0, r3
 80030b6:	f002 ff33 	bl	8005f20 <HAL_RCC_OscConfig>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80030c0:	f000 f9ac 	bl	800341c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030c4:	230f      	movs	r3, #15
 80030c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030c8:	2302      	movs	r3, #2
 80030ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030cc:	2300      	movs	r3, #0
 80030ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80030da:	1d3b      	adds	r3, r7, #4
 80030dc:	2102      	movs	r1, #2
 80030de:	4618      	mov	r0, r3
 80030e0:	f003 f9a0 	bl	8006424 <HAL_RCC_ClockConfig>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80030ea:	f000 f997 	bl	800341c <Error_Handler>
  }
}
 80030ee:	bf00      	nop
 80030f0:	3740      	adds	r7, #64	; 0x40
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80030fc:	4b12      	ldr	r3, [pc, #72]	; (8003148 <MX_I2C1_Init+0x50>)
 80030fe:	4a13      	ldr	r2, [pc, #76]	; (800314c <MX_I2C1_Init+0x54>)
 8003100:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003102:	4b11      	ldr	r3, [pc, #68]	; (8003148 <MX_I2C1_Init+0x50>)
 8003104:	4a12      	ldr	r2, [pc, #72]	; (8003150 <MX_I2C1_Init+0x58>)
 8003106:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003108:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <MX_I2C1_Init+0x50>)
 800310a:	2200      	movs	r2, #0
 800310c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800310e:	4b0e      	ldr	r3, [pc, #56]	; (8003148 <MX_I2C1_Init+0x50>)
 8003110:	2200      	movs	r2, #0
 8003112:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003114:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <MX_I2C1_Init+0x50>)
 8003116:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800311a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800311c:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <MX_I2C1_Init+0x50>)
 800311e:	2200      	movs	r2, #0
 8003120:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003122:	4b09      	ldr	r3, [pc, #36]	; (8003148 <MX_I2C1_Init+0x50>)
 8003124:	2200      	movs	r2, #0
 8003126:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003128:	4b07      	ldr	r3, [pc, #28]	; (8003148 <MX_I2C1_Init+0x50>)
 800312a:	2200      	movs	r2, #0
 800312c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800312e:	4b06      	ldr	r3, [pc, #24]	; (8003148 <MX_I2C1_Init+0x50>)
 8003130:	2200      	movs	r2, #0
 8003132:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003134:	4804      	ldr	r0, [pc, #16]	; (8003148 <MX_I2C1_Init+0x50>)
 8003136:	f001 f9df 	bl	80044f8 <HAL_I2C_Init>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003140:	f000 f96c 	bl	800341c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003144:	bf00      	nop
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20000254 	.word	0x20000254
 800314c:	40005400 	.word	0x40005400
 8003150:	000186a0 	.word	0x000186a0

08003154 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003158:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <MX_I2C2_Init+0x50>)
 800315a:	4a13      	ldr	r2, [pc, #76]	; (80031a8 <MX_I2C2_Init+0x54>)
 800315c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800315e:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <MX_I2C2_Init+0x50>)
 8003160:	4a12      	ldr	r2, [pc, #72]	; (80031ac <MX_I2C2_Init+0x58>)
 8003162:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003164:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <MX_I2C2_Init+0x50>)
 8003166:	2200      	movs	r2, #0
 8003168:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800316a:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <MX_I2C2_Init+0x50>)
 800316c:	2200      	movs	r2, #0
 800316e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003170:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <MX_I2C2_Init+0x50>)
 8003172:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003176:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003178:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <MX_I2C2_Init+0x50>)
 800317a:	2200      	movs	r2, #0
 800317c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800317e:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <MX_I2C2_Init+0x50>)
 8003180:	2200      	movs	r2, #0
 8003182:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003184:	4b07      	ldr	r3, [pc, #28]	; (80031a4 <MX_I2C2_Init+0x50>)
 8003186:	2200      	movs	r2, #0
 8003188:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800318a:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <MX_I2C2_Init+0x50>)
 800318c:	2200      	movs	r2, #0
 800318e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003190:	4804      	ldr	r0, [pc, #16]	; (80031a4 <MX_I2C2_Init+0x50>)
 8003192:	f001 f9b1 	bl	80044f8 <HAL_I2C_Init>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800319c:	f000 f93e 	bl	800341c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80031a0:	bf00      	nop
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	200002a8 	.word	0x200002a8
 80031a8:	40005800 	.word	0x40005800
 80031ac:	000186a0 	.word	0x000186a0

080031b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031b4:	4b11      	ldr	r3, [pc, #68]	; (80031fc <MX_USART1_UART_Init+0x4c>)
 80031b6:	4a12      	ldr	r2, [pc, #72]	; (8003200 <MX_USART1_UART_Init+0x50>)
 80031b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80031ba:	4b10      	ldr	r3, [pc, #64]	; (80031fc <MX_USART1_UART_Init+0x4c>)
 80031bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031c2:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <MX_USART1_UART_Init+0x4c>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031c8:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <MX_USART1_UART_Init+0x4c>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031ce:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <MX_USART1_UART_Init+0x4c>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031d4:	4b09      	ldr	r3, [pc, #36]	; (80031fc <MX_USART1_UART_Init+0x4c>)
 80031d6:	220c      	movs	r2, #12
 80031d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031da:	4b08      	ldr	r3, [pc, #32]	; (80031fc <MX_USART1_UART_Init+0x4c>)
 80031dc:	2200      	movs	r2, #0
 80031de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031e0:	4b06      	ldr	r3, [pc, #24]	; (80031fc <MX_USART1_UART_Init+0x4c>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031e6:	4805      	ldr	r0, [pc, #20]	; (80031fc <MX_USART1_UART_Init+0x4c>)
 80031e8:	f003 faaa 	bl	8006740 <HAL_UART_Init>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80031f2:	f000 f913 	bl	800341c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	200002fc 	.word	0x200002fc
 8003200:	40013800 	.word	0x40013800

08003204 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800320a:	4b10      	ldr	r3, [pc, #64]	; (800324c <MX_DMA_Init+0x48>)
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	4a0f      	ldr	r2, [pc, #60]	; (800324c <MX_DMA_Init+0x48>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	6153      	str	r3, [r2, #20]
 8003216:	4b0d      	ldr	r3, [pc, #52]	; (800324c <MX_DMA_Init+0x48>)
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	607b      	str	r3, [r7, #4]
 8003220:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003222:	2200      	movs	r2, #0
 8003224:	2100      	movs	r1, #0
 8003226:	200e      	movs	r0, #14
 8003228:	f000 fcc1 	bl	8003bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800322c:	200e      	movs	r0, #14
 800322e:	f000 fcda 	bl	8003be6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003232:	2200      	movs	r2, #0
 8003234:	2100      	movs	r1, #0
 8003236:	200f      	movs	r0, #15
 8003238:	f000 fcb9 	bl	8003bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800323c:	200f      	movs	r0, #15
 800323e:	f000 fcd2 	bl	8003be6 <HAL_NVIC_EnableIRQ>

}
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40021000 	.word	0x40021000

08003250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003256:	f107 0310 	add.w	r3, r7, #16
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	605a      	str	r2, [r3, #4]
 8003260:	609a      	str	r2, [r3, #8]
 8003262:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003264:	4b2a      	ldr	r3, [pc, #168]	; (8003310 <MX_GPIO_Init+0xc0>)
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	4a29      	ldr	r2, [pc, #164]	; (8003310 <MX_GPIO_Init+0xc0>)
 800326a:	f043 0310 	orr.w	r3, r3, #16
 800326e:	6193      	str	r3, [r2, #24]
 8003270:	4b27      	ldr	r3, [pc, #156]	; (8003310 <MX_GPIO_Init+0xc0>)
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800327c:	4b24      	ldr	r3, [pc, #144]	; (8003310 <MX_GPIO_Init+0xc0>)
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	4a23      	ldr	r2, [pc, #140]	; (8003310 <MX_GPIO_Init+0xc0>)
 8003282:	f043 0320 	orr.w	r3, r3, #32
 8003286:	6193      	str	r3, [r2, #24]
 8003288:	4b21      	ldr	r3, [pc, #132]	; (8003310 <MX_GPIO_Init+0xc0>)
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	f003 0320 	and.w	r3, r3, #32
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003294:	4b1e      	ldr	r3, [pc, #120]	; (8003310 <MX_GPIO_Init+0xc0>)
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	4a1d      	ldr	r2, [pc, #116]	; (8003310 <MX_GPIO_Init+0xc0>)
 800329a:	f043 0308 	orr.w	r3, r3, #8
 800329e:	6193      	str	r3, [r2, #24]
 80032a0:	4b1b      	ldr	r3, [pc, #108]	; (8003310 <MX_GPIO_Init+0xc0>)
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	607b      	str	r3, [r7, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ac:	4b18      	ldr	r3, [pc, #96]	; (8003310 <MX_GPIO_Init+0xc0>)
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	4a17      	ldr	r2, [pc, #92]	; (8003310 <MX_GPIO_Init+0xc0>)
 80032b2:	f043 0304 	orr.w	r3, r3, #4
 80032b6:	6193      	str	r3, [r2, #24]
 80032b8:	4b15      	ldr	r3, [pc, #84]	; (8003310 <MX_GPIO_Init+0xc0>)
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	603b      	str	r3, [r7, #0]
 80032c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80032c4:	2200      	movs	r2, #0
 80032c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032ca:	4812      	ldr	r0, [pc, #72]	; (8003314 <MX_GPIO_Init+0xc4>)
 80032cc:	f001 f8e3 	bl	8004496 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80032d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032d6:	2301      	movs	r3, #1
 80032d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032da:	2300      	movs	r3, #0
 80032dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032de:	2302      	movs	r3, #2
 80032e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032e2:	f107 0310 	add.w	r3, r7, #16
 80032e6:	4619      	mov	r1, r3
 80032e8:	480a      	ldr	r0, [pc, #40]	; (8003314 <MX_GPIO_Init+0xc4>)
 80032ea:	f000 ff39 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80032ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80032f4:	4b08      	ldr	r3, [pc, #32]	; (8003318 <MX_GPIO_Init+0xc8>)
 80032f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032f8:	2301      	movs	r3, #1
 80032fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fc:	f107 0310 	add.w	r3, r7, #16
 8003300:	4619      	mov	r1, r3
 8003302:	4806      	ldr	r0, [pc, #24]	; (800331c <MX_GPIO_Init+0xcc>)
 8003304:	f000 ff2c 	bl	8004160 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003308:	bf00      	nop
 800330a:	3720      	adds	r7, #32
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40021000 	.word	0x40021000
 8003314:	40011000 	.word	0x40011000
 8003318:	10210000 	.word	0x10210000
 800331c:	40010800 	.word	0x40010800

08003320 <get_temp>:

/* USER CODE BEGIN 4 */
float get_temp(void){
 8003320:	b5b0      	push	{r4, r5, r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af02      	add	r7, sp, #8
	uint8_t temp_buff[2] = {0};
 8003326:	2300      	movs	r3, #0
 8003328:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c2, TEMP_I2C_ADDRESS, TEMP_READ_ADDRESS, 1, TEMP_TIMEOUT);
 800332a:	230a      	movs	r3, #10
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	2301      	movs	r3, #1
 8003330:	2200      	movs	r2, #0
 8003332:	2190      	movs	r1, #144	; 0x90
 8003334:	4834      	ldr	r0, [pc, #208]	; (8003408 <get_temp+0xe8>)
 8003336:	f001 fa23 	bl	8004780 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, TEMP_I2C_ADDRESS, temp_buff, sizeof(temp_buff), TEMP_TIMEOUT);
 800333a:	1d3a      	adds	r2, r7, #4
 800333c:	230a      	movs	r3, #10
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2302      	movs	r3, #2
 8003342:	2190      	movs	r1, #144	; 0x90
 8003344:	4830      	ldr	r0, [pc, #192]	; (8003408 <get_temp+0xe8>)
 8003346:	f001 fb19 	bl	800497c <HAL_I2C_Master_Receive>

	float ans = 0;
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]
	for(int q = -8; q < 0; q++){
 8003350:	f06f 0307 	mvn.w	r3, #7
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	e02a      	b.n	80033ae <get_temp+0x8e>
	  if(temp_buff[1] & (1 << q + 8)){
 8003358:	797b      	ldrb	r3, [r7, #5]
 800335a:	461a      	mov	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	3308      	adds	r3, #8
 8003360:	fa42 f303 	asr.w	r3, r2, r3
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d01d      	beq.n	80033a8 <get_temp+0x88>
		  ans += pow(2,q);
 800336c:	68b8      	ldr	r0, [r7, #8]
 800336e:	f7fd f841 	bl	80003f4 <__aeabi_i2d>
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	f04f 0000 	mov.w	r0, #0
 800337a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800337e:	f004 f887 	bl	8007490 <pow>
 8003382:	4604      	mov	r4, r0
 8003384:	460d      	mov	r5, r1
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f7fd f846 	bl	8000418 <__aeabi_f2d>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4620      	mov	r0, r4
 8003392:	4629      	mov	r1, r5
 8003394:	f7fc fee2 	bl	800015c <__adddf3>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4610      	mov	r0, r2
 800339e:	4619      	mov	r1, r3
 80033a0:	f7fd fb8a 	bl	8000ab8 <__aeabi_d2f>
 80033a4:	4603      	mov	r3, r0
 80033a6:	60fb      	str	r3, [r7, #12]
	for(int q = -8; q < 0; q++){
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	3301      	adds	r3, #1
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	dbd1      	blt.n	8003358 <get_temp+0x38>
	  }
    }
	ans += temp_buff[0];
 80033b4:	793b      	ldrb	r3, [r7, #4]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd fc88 	bl	8000ccc <__aeabi_i2f>
 80033bc:	4603      	mov	r3, r0
 80033be:	4619      	mov	r1, r3
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f7fd fbcf 	bl	8000b64 <__addsf3>
 80033c6:	4603      	mov	r3, r0
 80033c8:	60fb      	str	r3, [r7, #12]
	ans *= 1000;
 80033ca:	4910      	ldr	r1, [pc, #64]	; (800340c <get_temp+0xec>)
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f7fd fcd1 	bl	8000d74 <__aeabi_fmul>
 80033d2:	4603      	mov	r3, r0
 80033d4:	60fb      	str	r3, [r7, #12]
	temporary_int = (int)ans;
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f7fd fe92 	bl	8001100 <__aeabi_f2iz>
 80033dc:	4603      	mov	r3, r0
 80033de:	461a      	mov	r2, r3
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <get_temp+0xf0>)
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <get_temp+0xf0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
	memcpy(&tx_buffer[5], &temporary_int, 4);
 80033e8:	4a0a      	ldr	r2, [pc, #40]	; (8003414 <get_temp+0xf4>)
 80033ea:	f8c2 3005 	str.w	r3, [r2, #5]
	debug_printf("temp %f\n\r" , ans);
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f7fd f812 	bl	8000418 <__aeabi_f2d>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4807      	ldr	r0, [pc, #28]	; (8003418 <get_temp+0xf8>)
 80033fa:	f7fe f925 	bl	8001648 <debug_printf>

}
 80033fe:	bf00      	nop
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bdb0      	pop	{r4, r5, r7, pc}
 8003408:	200002a8 	.word	0x200002a8
 800340c:	447a0000 	.word	0x447a0000
 8003410:	2000044c 	.word	0x2000044c
 8003414:	200003cc 	.word	0x200003cc
 8003418:	080084b0 	.word	0x080084b0

0800341c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003420:	b672      	cpsid	i
}
 8003422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003424:	e7fe      	b.n	8003424 <Error_Handler+0x8>
	...

08003428 <maxim_max30102_write_reg>:
*
* \param[in]    uch_addr    - register address
* \param[in]    uch_data    - register data
*/
void maxim_max30102_write_reg(uint8_t uch_addr, uint8_t uch_data)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af04      	add	r7, sp, #16
 800342e:	4603      	mov	r3, r0
 8003430:	460a      	mov	r2, r1
 8003432:	71fb      	strb	r3, [r7, #7]
 8003434:	4613      	mov	r3, r2
 8003436:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, I2C_WRITE_ADDR, uch_addr, 1U, &uch_data, 1U, 100U);
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	b29a      	uxth	r2, r3
 800343c:	2364      	movs	r3, #100	; 0x64
 800343e:	9302      	str	r3, [sp, #8]
 8003440:	2301      	movs	r3, #1
 8003442:	9301      	str	r3, [sp, #4]
 8003444:	1dbb      	adds	r3, r7, #6
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	2301      	movs	r3, #1
 800344a:	21ae      	movs	r1, #174	; 0xae
 800344c:	4803      	ldr	r0, [pc, #12]	; (800345c <maxim_max30102_write_reg+0x34>)
 800344e:	f001 fd01 	bl	8004e54 <HAL_I2C_Mem_Write>
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20000254 	.word	0x20000254

08003460 <maxim_max30102_read_reg>:
*
* \param[in]    uch_addr    - register address
* \param[out]   puch_data    - pointer that stores the register data
*/
void maxim_max30102_read_reg(uint8_t uch_addr, uint8_t *puch_data)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af04      	add	r7, sp, #16
 8003466:	4603      	mov	r3, r0
 8003468:	6039      	str	r1, [r7, #0]
 800346a:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, I2C_READ_ADDR, uch_addr, 1U, puch_data, 1U, 250U);
 800346c:	79fb      	ldrb	r3, [r7, #7]
 800346e:	b29a      	uxth	r2, r3
 8003470:	23fa      	movs	r3, #250	; 0xfa
 8003472:	9302      	str	r3, [sp, #8]
 8003474:	2301      	movs	r3, #1
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	2301      	movs	r3, #1
 800347e:	21af      	movs	r1, #175	; 0xaf
 8003480:	4803      	ldr	r0, [pc, #12]	; (8003490 <maxim_max30102_read_reg+0x30>)
 8003482:	f001 fde1 	bl	8005048 <HAL_I2C_Mem_Read>
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000254 	.word	0x20000254

08003494 <maxim_max30102_init>:
* \par          Details
*               This function initializes the MAX30102
*
* \param        None
*/
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
	maxim_max30102_write_reg(REG_INTR_ENABLE_1, 0xc0U); 	// INTR setting
 8003498:	21c0      	movs	r1, #192	; 0xc0
 800349a:	2002      	movs	r0, #2
 800349c:	f7ff ffc4 	bl	8003428 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_INTR_ENABLE_2, 0x00U);
 80034a0:	2100      	movs	r1, #0
 80034a2:	2003      	movs	r0, #3
 80034a4:	f7ff ffc0 	bl	8003428 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_FIFO_WR_PTR, 0x00U);  		//FIFO_WR_PTR[4:0]
 80034a8:	2100      	movs	r1, #0
 80034aa:	2004      	movs	r0, #4
 80034ac:	f7ff ffbc 	bl	8003428 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_OVF_COUNTER, 0x00U);  		//OVF_COUNTER[4:0]
 80034b0:	2100      	movs	r1, #0
 80034b2:	2005      	movs	r0, #5
 80034b4:	f7ff ffb8 	bl	8003428 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_FIFO_RD_PTR, 0x00U);  		//FIFO_RD_PTR[4:0]
 80034b8:	2100      	movs	r1, #0
 80034ba:	2006      	movs	r0, #6
 80034bc:	f7ff ffb4 	bl	8003428 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_FIFO_CONFIG, 0x4fU);  		//sample avg = 4, fifo rollover=false, fifo almost full = 17
 80034c0:	214f      	movs	r1, #79	; 0x4f
 80034c2:	2008      	movs	r0, #8
 80034c4:	f7ff ffb0 	bl	8003428 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_MODE_CONFIG, 0x03U);   	//0x02 for Red only, 0x03 for SpO2 mode 0x07 multimode LED
 80034c8:	2103      	movs	r1, #3
 80034ca:	2009      	movs	r0, #9
 80034cc:	f7ff ffac 	bl	8003428 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_SPO2_CONFIG, 0x27U);  		// SPO2_ADC range = 4096nA, SPO2 sample rate (100 Hz), LED pulseWidth (411uS)
 80034d0:	2127      	movs	r1, #39	; 0x27
 80034d2:	200a      	movs	r0, #10
 80034d4:	f7ff ffa8 	bl	8003428 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_LED1_PA, 0x24U);   		//Choose value for ~ 7mA for LED1
 80034d8:	2124      	movs	r1, #36	; 0x24
 80034da:	200c      	movs	r0, #12
 80034dc:	f7ff ffa4 	bl	8003428 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_LED2_PA, 0x24U);   		// Choose value for ~ 7mA for LED2
 80034e0:	2124      	movs	r1, #36	; 0x24
 80034e2:	200d      	movs	r0, #13
 80034e4:	f7ff ffa0 	bl	8003428 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_PILOT_PA, 0x7fU);   		// Choose value for ~ 25mA for Pilot LED
 80034e8:	217f      	movs	r1, #127	; 0x7f
 80034ea:	2010      	movs	r0, #16
 80034ec:	f7ff ff9c 	bl	8003428 <maxim_max30102_write_reg>
}
 80034f0:	bf00      	nop
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <maxim_max30102_read_fifo>:
*
* \param[out]   *pun_red_led   - pointer that stores the red LED reading data
* \param[out]   *pun_ir_led    - pointer that stores the IR LED reading data
*/
void maxim_max30102_read_fifo(uint32_t *pun_red_led, uint32_t *pun_ir_led)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08a      	sub	sp, #40	; 0x28
 80034f8:	af04      	add	r7, sp, #16
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t un_temp;
  uint8_t uch_temp;
  uint8_t uch_i2c_data[6];

  maxim_max30102_read_reg(REG_INTR_STATUS_1, &uch_temp);
 80034fe:	f107 0313 	add.w	r3, r7, #19
 8003502:	4619      	mov	r1, r3
 8003504:	2000      	movs	r0, #0
 8003506:	f7ff ffab 	bl	8003460 <maxim_max30102_read_reg>
  maxim_max30102_read_reg(REG_INTR_STATUS_2, &uch_temp);
 800350a:	f107 0313 	add.w	r3, r7, #19
 800350e:	4619      	mov	r1, r3
 8003510:	2001      	movs	r0, #1
 8003512:	f7ff ffa5 	bl	8003460 <maxim_max30102_read_reg>

  HAL_I2C_Mem_Read(&hi2c1, I2C_READ_ADDR, REG_FIFO_DATA, 1U, uch_i2c_data, 6U, 250U);
 8003516:	23fa      	movs	r3, #250	; 0xfa
 8003518:	9302      	str	r3, [sp, #8]
 800351a:	2306      	movs	r3, #6
 800351c:	9301      	str	r3, [sp, #4]
 800351e:	f107 030c 	add.w	r3, r7, #12
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	2301      	movs	r3, #1
 8003526:	2207      	movs	r2, #7
 8003528:	21af      	movs	r1, #175	; 0xaf
 800352a:	482a      	ldr	r0, [pc, #168]	; (80035d4 <maxim_max30102_read_fifo+0xe0>)
 800352c:	f001 fd8c 	bl	8005048 <HAL_I2C_Mem_Read>

  *pun_ir_led = 0UL;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
  *pun_red_led = 0UL;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]

  un_temp = (uint32_t)uch_i2c_data[0];
 800353c:	7b3b      	ldrb	r3, [r7, #12]
 800353e:	617b      	str	r3, [r7, #20]
  un_temp <<= 16;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	041b      	lsls	r3, r3, #16
 8003544:	617b      	str	r3, [r7, #20]
  *pun_red_led += un_temp;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	441a      	add	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[1];
 8003552:	7b7b      	ldrb	r3, [r7, #13]
 8003554:	617b      	str	r3, [r7, #20]
  un_temp <<= 8;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	021b      	lsls	r3, r3, #8
 800355a:	617b      	str	r3, [r7, #20]
  *pun_red_led += un_temp;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	441a      	add	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[2];
 8003568:	7bbb      	ldrb	r3, [r7, #14]
 800356a:	617b      	str	r3, [r7, #20]
  *pun_red_led += un_temp;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	441a      	add	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[3];
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	617b      	str	r3, [r7, #20]
  un_temp <<= 16;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	041b      	lsls	r3, r3, #16
 8003580:	617b      	str	r3, [r7, #20]
  *pun_ir_led += un_temp;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	441a      	add	r2, r3
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[4];
 800358e:	7c3b      	ldrb	r3, [r7, #16]
 8003590:	617b      	str	r3, [r7, #20]
  un_temp <<= 8;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	021b      	lsls	r3, r3, #8
 8003596:	617b      	str	r3, [r7, #20]
  *pun_ir_led += un_temp;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	441a      	add	r2, r3
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[5];
 80035a4:	7c7b      	ldrb	r3, [r7, #17]
 80035a6:	617b      	str	r3, [r7, #20]
  *pun_ir_led += un_temp;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	441a      	add	r2, r3
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	601a      	str	r2, [r3, #0]
  *pun_red_led &= 0x03FFFF;  	// Mask MSB [23:18]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f3c3 0211 	ubfx	r2, r3, #0, #18
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	601a      	str	r2, [r3, #0]
  *pun_ir_led &= 0x03FFFF;  	// Mask MSB [23:18]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f3c3 0211 	ubfx	r2, r3, #0, #18
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	601a      	str	r2, [r3, #0]

}
 80035cc:	bf00      	nop
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	20000254 	.word	0x20000254

080035d8 <maxim_max30102_reset>:
*               This function resets the MAX30102
*
* \param        None
*/
void maxim_max30102_reset()
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
	maxim_max30102_write_reg(REG_MODE_CONFIG, 0x40U);
 80035dc:	2140      	movs	r1, #64	; 0x40
 80035de:	2009      	movs	r0, #9
 80035e0:	f7ff ff22 	bl	8003428 <maxim_max30102_write_reg>
}
 80035e4:	bf00      	nop
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80035ee:	4b0e      	ldr	r3, [pc, #56]	; (8003628 <HAL_MspInit+0x40>)
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	4a0d      	ldr	r2, [pc, #52]	; (8003628 <HAL_MspInit+0x40>)
 80035f4:	f043 0301 	orr.w	r3, r3, #1
 80035f8:	6193      	str	r3, [r2, #24]
 80035fa:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <HAL_MspInit+0x40>)
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	607b      	str	r3, [r7, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003606:	4b08      	ldr	r3, [pc, #32]	; (8003628 <HAL_MspInit+0x40>)
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	4a07      	ldr	r2, [pc, #28]	; (8003628 <HAL_MspInit+0x40>)
 800360c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003610:	61d3      	str	r3, [r2, #28]
 8003612:	4b05      	ldr	r3, [pc, #20]	; (8003628 <HAL_MspInit+0x40>)
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr
 8003628:	40021000 	.word	0x40021000

0800362c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08a      	sub	sp, #40	; 0x28
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003634:	f107 0318 	add.w	r3, r7, #24
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a2b      	ldr	r2, [pc, #172]	; (80036f4 <HAL_I2C_MspInit+0xc8>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d124      	bne.n	8003696 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800364c:	4b2a      	ldr	r3, [pc, #168]	; (80036f8 <HAL_I2C_MspInit+0xcc>)
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	4a29      	ldr	r2, [pc, #164]	; (80036f8 <HAL_I2C_MspInit+0xcc>)
 8003652:	f043 0308 	orr.w	r3, r3, #8
 8003656:	6193      	str	r3, [r2, #24]
 8003658:	4b27      	ldr	r3, [pc, #156]	; (80036f8 <HAL_I2C_MspInit+0xcc>)
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	617b      	str	r3, [r7, #20]
 8003662:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003664:	23c0      	movs	r3, #192	; 0xc0
 8003666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003668:	2312      	movs	r3, #18
 800366a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800366c:	2303      	movs	r3, #3
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003670:	f107 0318 	add.w	r3, r7, #24
 8003674:	4619      	mov	r1, r3
 8003676:	4821      	ldr	r0, [pc, #132]	; (80036fc <HAL_I2C_MspInit+0xd0>)
 8003678:	f000 fd72 	bl	8004160 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800367c:	4b1e      	ldr	r3, [pc, #120]	; (80036f8 <HAL_I2C_MspInit+0xcc>)
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	4a1d      	ldr	r2, [pc, #116]	; (80036f8 <HAL_I2C_MspInit+0xcc>)
 8003682:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003686:	61d3      	str	r3, [r2, #28]
 8003688:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <HAL_I2C_MspInit+0xcc>)
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003694:	e029      	b.n	80036ea <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a19      	ldr	r2, [pc, #100]	; (8003700 <HAL_I2C_MspInit+0xd4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d124      	bne.n	80036ea <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036a0:	4b15      	ldr	r3, [pc, #84]	; (80036f8 <HAL_I2C_MspInit+0xcc>)
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	4a14      	ldr	r2, [pc, #80]	; (80036f8 <HAL_I2C_MspInit+0xcc>)
 80036a6:	f043 0308 	orr.w	r3, r3, #8
 80036aa:	6193      	str	r3, [r2, #24]
 80036ac:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <HAL_I2C_MspInit+0xcc>)
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80036b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80036bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036be:	2312      	movs	r3, #18
 80036c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036c2:	2303      	movs	r3, #3
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036c6:	f107 0318 	add.w	r3, r7, #24
 80036ca:	4619      	mov	r1, r3
 80036cc:	480b      	ldr	r0, [pc, #44]	; (80036fc <HAL_I2C_MspInit+0xd0>)
 80036ce:	f000 fd47 	bl	8004160 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80036d2:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <HAL_I2C_MspInit+0xcc>)
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	4a08      	ldr	r2, [pc, #32]	; (80036f8 <HAL_I2C_MspInit+0xcc>)
 80036d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036dc:	61d3      	str	r3, [r2, #28]
 80036de:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <HAL_I2C_MspInit+0xcc>)
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e6:	60bb      	str	r3, [r7, #8]
 80036e8:	68bb      	ldr	r3, [r7, #8]
}
 80036ea:	bf00      	nop
 80036ec:	3728      	adds	r7, #40	; 0x28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40005400 	.word	0x40005400
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40010c00 	.word	0x40010c00
 8003700:	40005800 	.word	0x40005800

08003704 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800370c:	f107 0310 	add.w	r3, r7, #16
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	605a      	str	r2, [r3, #4]
 8003716:	609a      	str	r2, [r3, #8]
 8003718:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a47      	ldr	r2, [pc, #284]	; (800383c <HAL_UART_MspInit+0x138>)
 8003720:	4293      	cmp	r3, r2
 8003722:	f040 8086 	bne.w	8003832 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003726:	4b46      	ldr	r3, [pc, #280]	; (8003840 <HAL_UART_MspInit+0x13c>)
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	4a45      	ldr	r2, [pc, #276]	; (8003840 <HAL_UART_MspInit+0x13c>)
 800372c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003730:	6193      	str	r3, [r2, #24]
 8003732:	4b43      	ldr	r3, [pc, #268]	; (8003840 <HAL_UART_MspInit+0x13c>)
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800373e:	4b40      	ldr	r3, [pc, #256]	; (8003840 <HAL_UART_MspInit+0x13c>)
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	4a3f      	ldr	r2, [pc, #252]	; (8003840 <HAL_UART_MspInit+0x13c>)
 8003744:	f043 0304 	orr.w	r3, r3, #4
 8003748:	6193      	str	r3, [r2, #24]
 800374a:	4b3d      	ldr	r3, [pc, #244]	; (8003840 <HAL_UART_MspInit+0x13c>)
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	60bb      	str	r3, [r7, #8]
 8003754:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003756:	f44f 7300 	mov.w	r3, #512	; 0x200
 800375a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375c:	2302      	movs	r3, #2
 800375e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003760:	2303      	movs	r3, #3
 8003762:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003764:	f107 0310 	add.w	r3, r7, #16
 8003768:	4619      	mov	r1, r3
 800376a:	4836      	ldr	r0, [pc, #216]	; (8003844 <HAL_UART_MspInit+0x140>)
 800376c:	f000 fcf8 	bl	8004160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003774:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377a:	2300      	movs	r3, #0
 800377c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800377e:	f107 0310 	add.w	r3, r7, #16
 8003782:	4619      	mov	r1, r3
 8003784:	482f      	ldr	r0, [pc, #188]	; (8003844 <HAL_UART_MspInit+0x140>)
 8003786:	f000 fceb 	bl	8004160 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800378a:	4b2f      	ldr	r3, [pc, #188]	; (8003848 <HAL_UART_MspInit+0x144>)
 800378c:	4a2f      	ldr	r2, [pc, #188]	; (800384c <HAL_UART_MspInit+0x148>)
 800378e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003790:	4b2d      	ldr	r3, [pc, #180]	; (8003848 <HAL_UART_MspInit+0x144>)
 8003792:	2200      	movs	r2, #0
 8003794:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003796:	4b2c      	ldr	r3, [pc, #176]	; (8003848 <HAL_UART_MspInit+0x144>)
 8003798:	2200      	movs	r2, #0
 800379a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800379c:	4b2a      	ldr	r3, [pc, #168]	; (8003848 <HAL_UART_MspInit+0x144>)
 800379e:	2280      	movs	r2, #128	; 0x80
 80037a0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037a2:	4b29      	ldr	r3, [pc, #164]	; (8003848 <HAL_UART_MspInit+0x144>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037a8:	4b27      	ldr	r3, [pc, #156]	; (8003848 <HAL_UART_MspInit+0x144>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80037ae:	4b26      	ldr	r3, [pc, #152]	; (8003848 <HAL_UART_MspInit+0x144>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037b4:	4b24      	ldr	r3, [pc, #144]	; (8003848 <HAL_UART_MspInit+0x144>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80037ba:	4823      	ldr	r0, [pc, #140]	; (8003848 <HAL_UART_MspInit+0x144>)
 80037bc:	f000 fa2e 	bl	8003c1c <HAL_DMA_Init>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80037c6:	f7ff fe29 	bl	800341c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a1e      	ldr	r2, [pc, #120]	; (8003848 <HAL_UART_MspInit+0x144>)
 80037ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80037d0:	4a1d      	ldr	r2, [pc, #116]	; (8003848 <HAL_UART_MspInit+0x144>)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80037d6:	4b1e      	ldr	r3, [pc, #120]	; (8003850 <HAL_UART_MspInit+0x14c>)
 80037d8:	4a1e      	ldr	r2, [pc, #120]	; (8003854 <HAL_UART_MspInit+0x150>)
 80037da:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037dc:	4b1c      	ldr	r3, [pc, #112]	; (8003850 <HAL_UART_MspInit+0x14c>)
 80037de:	2210      	movs	r2, #16
 80037e0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037e2:	4b1b      	ldr	r3, [pc, #108]	; (8003850 <HAL_UART_MspInit+0x14c>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037e8:	4b19      	ldr	r3, [pc, #100]	; (8003850 <HAL_UART_MspInit+0x14c>)
 80037ea:	2280      	movs	r2, #128	; 0x80
 80037ec:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037ee:	4b18      	ldr	r3, [pc, #96]	; (8003850 <HAL_UART_MspInit+0x14c>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037f4:	4b16      	ldr	r3, [pc, #88]	; (8003850 <HAL_UART_MspInit+0x14c>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80037fa:	4b15      	ldr	r3, [pc, #84]	; (8003850 <HAL_UART_MspInit+0x14c>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003800:	4b13      	ldr	r3, [pc, #76]	; (8003850 <HAL_UART_MspInit+0x14c>)
 8003802:	2200      	movs	r2, #0
 8003804:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003806:	4812      	ldr	r0, [pc, #72]	; (8003850 <HAL_UART_MspInit+0x14c>)
 8003808:	f000 fa08 	bl	8003c1c <HAL_DMA_Init>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8003812:	f7ff fe03 	bl	800341c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a0d      	ldr	r2, [pc, #52]	; (8003850 <HAL_UART_MspInit+0x14c>)
 800381a:	639a      	str	r2, [r3, #56]	; 0x38
 800381c:	4a0c      	ldr	r2, [pc, #48]	; (8003850 <HAL_UART_MspInit+0x14c>)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003822:	2200      	movs	r2, #0
 8003824:	2100      	movs	r1, #0
 8003826:	2025      	movs	r0, #37	; 0x25
 8003828:	f000 f9c1 	bl	8003bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800382c:	2025      	movs	r0, #37	; 0x25
 800382e:	f000 f9da 	bl	8003be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003832:	bf00      	nop
 8003834:	3720      	adds	r7, #32
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40013800 	.word	0x40013800
 8003840:	40021000 	.word	0x40021000
 8003844:	40010800 	.word	0x40010800
 8003848:	20000344 	.word	0x20000344
 800384c:	40020058 	.word	0x40020058
 8003850:	20000388 	.word	0x20000388
 8003854:	40020044 	.word	0x40020044

08003858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800385c:	e7fe      	b.n	800385c <NMI_Handler+0x4>

0800385e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800385e:	b480      	push	{r7}
 8003860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003862:	e7fe      	b.n	8003862 <HardFault_Handler+0x4>

08003864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003868:	e7fe      	b.n	8003868 <MemManage_Handler+0x4>

0800386a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800386a:	b480      	push	{r7}
 800386c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800386e:	e7fe      	b.n	800386e <BusFault_Handler+0x4>

08003870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003874:	e7fe      	b.n	8003874 <UsageFault_Handler+0x4>

08003876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003876:	b480      	push	{r7}
 8003878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800387a:	bf00      	nop
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr

08003882 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003882:	b480      	push	{r7}
 8003884:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr

0800388e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800388e:	b480      	push	{r7}
 8003890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003892:	bf00      	nop
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr

0800389a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800389e:	f000 f893 	bl	80039c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038a2:	bf00      	nop
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80038ac:	4802      	ldr	r0, [pc, #8]	; (80038b8 <DMA1_Channel4_IRQHandler+0x10>)
 80038ae:	f000 fb23 	bl	8003ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80038b2:	bf00      	nop
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	20000388 	.word	0x20000388

080038bc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80038c0:	4802      	ldr	r0, [pc, #8]	; (80038cc <DMA1_Channel5_IRQHandler+0x10>)
 80038c2:	f000 fb19 	bl	8003ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000344 	.word	0x20000344

080038d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80038d4:	4802      	ldr	r0, [pc, #8]	; (80038e0 <USART1_IRQHandler+0x10>)
 80038d6:	f002 fff3 	bl	80068c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	200002fc 	.word	0x200002fc

080038e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038e8:	bf00      	nop
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr

080038f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80038f0:	f7ff fff8 	bl	80038e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038f4:	480b      	ldr	r0, [pc, #44]	; (8003924 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80038f6:	490c      	ldr	r1, [pc, #48]	; (8003928 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80038f8:	4a0c      	ldr	r2, [pc, #48]	; (800392c <LoopFillZerobss+0x16>)
  movs r3, #0
 80038fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038fc:	e002      	b.n	8003904 <LoopCopyDataInit>

080038fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003902:	3304      	adds	r3, #4

08003904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003908:	d3f9      	bcc.n	80038fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800390a:	4a09      	ldr	r2, [pc, #36]	; (8003930 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800390c:	4c09      	ldr	r4, [pc, #36]	; (8003934 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800390e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003910:	e001      	b.n	8003916 <LoopFillZerobss>

08003912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003914:	3204      	adds	r2, #4

08003916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003918:	d3fb      	bcc.n	8003912 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800391a:	f003 fd8d 	bl	8007438 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800391e:	f7ff fb0d 	bl	8002f3c <main>
  bx lr
 8003922:	4770      	bx	lr
  ldr r0, =_sdata
 8003924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003928:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800392c:	08008520 	.word	0x08008520
  ldr r2, =_sbss
 8003930:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003934:	20000454 	.word	0x20000454

08003938 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003938:	e7fe      	b.n	8003938 <ADC1_2_IRQHandler>
	...

0800393c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003940:	4b08      	ldr	r3, [pc, #32]	; (8003964 <HAL_Init+0x28>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a07      	ldr	r2, [pc, #28]	; (8003964 <HAL_Init+0x28>)
 8003946:	f043 0310 	orr.w	r3, r3, #16
 800394a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800394c:	2003      	movs	r0, #3
 800394e:	f000 f923 	bl	8003b98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003952:	200f      	movs	r0, #15
 8003954:	f000 f808 	bl	8003968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003958:	f7ff fe46 	bl	80035e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40022000 	.word	0x40022000

08003968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003970:	4b12      	ldr	r3, [pc, #72]	; (80039bc <HAL_InitTick+0x54>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <HAL_InitTick+0x58>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	4619      	mov	r1, r3
 800397a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800397e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003982:	fbb2 f3f3 	udiv	r3, r2, r3
 8003986:	4618      	mov	r0, r3
 8003988:	f000 f93b 	bl	8003c02 <HAL_SYSTICK_Config>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e00e      	b.n	80039b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b0f      	cmp	r3, #15
 800399a:	d80a      	bhi.n	80039b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800399c:	2200      	movs	r2, #0
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	f04f 30ff 	mov.w	r0, #4294967295
 80039a4:	f000 f903 	bl	8003bae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039a8:	4a06      	ldr	r2, [pc, #24]	; (80039c4 <HAL_InitTick+0x5c>)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	e000      	b.n	80039b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20000008 	.word	0x20000008
 80039c0:	20000010 	.word	0x20000010
 80039c4:	2000000c 	.word	0x2000000c

080039c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HAL_IncTick+0x1c>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	461a      	mov	r2, r3
 80039d2:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <HAL_IncTick+0x20>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4413      	add	r3, r2
 80039d8:	4a03      	ldr	r2, [pc, #12]	; (80039e8 <HAL_IncTick+0x20>)
 80039da:	6013      	str	r3, [r2, #0]
}
 80039dc:	bf00      	nop
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr
 80039e4:	20000010 	.word	0x20000010
 80039e8:	20000450 	.word	0x20000450

080039ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  return uwTick;
 80039f0:	4b02      	ldr	r3, [pc, #8]	; (80039fc <HAL_GetTick+0x10>)
 80039f2:	681b      	ldr	r3, [r3, #0]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr
 80039fc:	20000450 	.word	0x20000450

08003a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a10:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <__NVIC_SetPriorityGrouping+0x44>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a32:	4a04      	ldr	r2, [pc, #16]	; (8003a44 <__NVIC_SetPriorityGrouping+0x44>)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	60d3      	str	r3, [r2, #12]
}
 8003a38:	bf00      	nop
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	e000ed00 	.word	0xe000ed00

08003a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a4c:	4b04      	ldr	r3, [pc, #16]	; (8003a60 <__NVIC_GetPriorityGrouping+0x18>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	0a1b      	lsrs	r3, r3, #8
 8003a52:	f003 0307 	and.w	r3, r3, #7
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	e000ed00 	.word	0xe000ed00

08003a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	db0b      	blt.n	8003a8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	f003 021f 	and.w	r2, r3, #31
 8003a7c:	4906      	ldr	r1, [pc, #24]	; (8003a98 <__NVIC_EnableIRQ+0x34>)
 8003a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	2001      	movs	r0, #1
 8003a86:	fa00 f202 	lsl.w	r2, r0, r2
 8003a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr
 8003a98:	e000e100 	.word	0xe000e100

08003a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	6039      	str	r1, [r7, #0]
 8003aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	db0a      	blt.n	8003ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	490c      	ldr	r1, [pc, #48]	; (8003ae8 <__NVIC_SetPriority+0x4c>)
 8003ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aba:	0112      	lsls	r2, r2, #4
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	440b      	add	r3, r1
 8003ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ac4:	e00a      	b.n	8003adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	4908      	ldr	r1, [pc, #32]	; (8003aec <__NVIC_SetPriority+0x50>)
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	3b04      	subs	r3, #4
 8003ad4:	0112      	lsls	r2, r2, #4
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	440b      	add	r3, r1
 8003ada:	761a      	strb	r2, [r3, #24]
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc80      	pop	{r7}
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	e000e100 	.word	0xe000e100
 8003aec:	e000ed00 	.word	0xe000ed00

08003af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b089      	sub	sp, #36	; 0x24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f1c3 0307 	rsb	r3, r3, #7
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	bf28      	it	cs
 8003b0e:	2304      	movcs	r3, #4
 8003b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3304      	adds	r3, #4
 8003b16:	2b06      	cmp	r3, #6
 8003b18:	d902      	bls.n	8003b20 <NVIC_EncodePriority+0x30>
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	3b03      	subs	r3, #3
 8003b1e:	e000      	b.n	8003b22 <NVIC_EncodePriority+0x32>
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b24:	f04f 32ff 	mov.w	r2, #4294967295
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	43da      	mvns	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	401a      	ands	r2, r3
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b38:	f04f 31ff 	mov.w	r1, #4294967295
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b42:	43d9      	mvns	r1, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b48:	4313      	orrs	r3, r2
         );
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3724      	adds	r7, #36	; 0x24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr

08003b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b64:	d301      	bcc.n	8003b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b66:	2301      	movs	r3, #1
 8003b68:	e00f      	b.n	8003b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b6a:	4a0a      	ldr	r2, [pc, #40]	; (8003b94 <SysTick_Config+0x40>)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b72:	210f      	movs	r1, #15
 8003b74:	f04f 30ff 	mov.w	r0, #4294967295
 8003b78:	f7ff ff90 	bl	8003a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b7c:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <SysTick_Config+0x40>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b82:	4b04      	ldr	r3, [pc, #16]	; (8003b94 <SysTick_Config+0x40>)
 8003b84:	2207      	movs	r2, #7
 8003b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	e000e010 	.word	0xe000e010

08003b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff ff2d 	bl	8003a00 <__NVIC_SetPriorityGrouping>
}
 8003ba6:	bf00      	nop
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b086      	sub	sp, #24
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	607a      	str	r2, [r7, #4]
 8003bba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bc0:	f7ff ff42 	bl	8003a48 <__NVIC_GetPriorityGrouping>
 8003bc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	68b9      	ldr	r1, [r7, #8]
 8003bca:	6978      	ldr	r0, [r7, #20]
 8003bcc:	f7ff ff90 	bl	8003af0 <NVIC_EncodePriority>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff ff5f 	bl	8003a9c <__NVIC_SetPriority>
}
 8003bde:	bf00      	nop
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b082      	sub	sp, #8
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	4603      	mov	r3, r0
 8003bee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff ff35 	bl	8003a64 <__NVIC_EnableIRQ>
}
 8003bfa:	bf00      	nop
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff ffa2 	bl	8003b54 <SysTick_Config>
 8003c10:	4603      	mov	r3, r0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e043      	b.n	8003cba <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	4b22      	ldr	r3, [pc, #136]	; (8003cc4 <HAL_DMA_Init+0xa8>)
 8003c3a:	4413      	add	r3, r2
 8003c3c:	4a22      	ldr	r2, [pc, #136]	; (8003cc8 <HAL_DMA_Init+0xac>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	091b      	lsrs	r3, r3, #4
 8003c44:	009a      	lsls	r2, r3, #2
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a1f      	ldr	r2, [pc, #124]	; (8003ccc <HAL_DMA_Init+0xb0>)
 8003c4e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003c66:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003c6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr
 8003cc4:	bffdfff8 	.word	0xbffdfff8
 8003cc8:	cccccccd 	.word	0xcccccccd
 8003ccc:	40020000 	.word	0x40020000

08003cd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_DMA_Start_IT+0x20>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e04b      	b.n	8003d88 <HAL_DMA_Start_IT+0xb8>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d13a      	bne.n	8003d7a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0201 	bic.w	r2, r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	68b9      	ldr	r1, [r7, #8]
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f9eb 	bl	8004104 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d008      	beq.n	8003d48 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f042 020e 	orr.w	r2, r2, #14
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	e00f      	b.n	8003d68 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0204 	bic.w	r2, r2, #4
 8003d56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 020a 	orr.w	r2, r2, #10
 8003d66:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0201 	orr.w	r2, r2, #1
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	e005      	b.n	8003d86 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d82:	2302      	movs	r3, #2
 8003d84:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d008      	beq.n	8003dba <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2204      	movs	r2, #4
 8003dac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e020      	b.n	8003dfc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 020e 	bic.w	r2, r2, #14
 8003dc8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0201 	bic.w	r2, r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de2:	2101      	movs	r1, #1
 8003de4:	fa01 f202 	lsl.w	r2, r1, r2
 8003de8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr
	...

08003e08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e10:	2300      	movs	r3, #0
 8003e12:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d005      	beq.n	8003e2c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2204      	movs	r2, #4
 8003e24:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	73fb      	strb	r3, [r7, #15]
 8003e2a:	e051      	b.n	8003ed0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 020e 	bic.w	r2, r2, #14
 8003e3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0201 	bic.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a22      	ldr	r2, [pc, #136]	; (8003edc <HAL_DMA_Abort_IT+0xd4>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d029      	beq.n	8003eaa <HAL_DMA_Abort_IT+0xa2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a21      	ldr	r2, [pc, #132]	; (8003ee0 <HAL_DMA_Abort_IT+0xd8>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d022      	beq.n	8003ea6 <HAL_DMA_Abort_IT+0x9e>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1f      	ldr	r2, [pc, #124]	; (8003ee4 <HAL_DMA_Abort_IT+0xdc>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d01a      	beq.n	8003ea0 <HAL_DMA_Abort_IT+0x98>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1e      	ldr	r2, [pc, #120]	; (8003ee8 <HAL_DMA_Abort_IT+0xe0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d012      	beq.n	8003e9a <HAL_DMA_Abort_IT+0x92>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1c      	ldr	r2, [pc, #112]	; (8003eec <HAL_DMA_Abort_IT+0xe4>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00a      	beq.n	8003e94 <HAL_DMA_Abort_IT+0x8c>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a1b      	ldr	r2, [pc, #108]	; (8003ef0 <HAL_DMA_Abort_IT+0xe8>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d102      	bne.n	8003e8e <HAL_DMA_Abort_IT+0x86>
 8003e88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003e8c:	e00e      	b.n	8003eac <HAL_DMA_Abort_IT+0xa4>
 8003e8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e92:	e00b      	b.n	8003eac <HAL_DMA_Abort_IT+0xa4>
 8003e94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e98:	e008      	b.n	8003eac <HAL_DMA_Abort_IT+0xa4>
 8003e9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e9e:	e005      	b.n	8003eac <HAL_DMA_Abort_IT+0xa4>
 8003ea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ea4:	e002      	b.n	8003eac <HAL_DMA_Abort_IT+0xa4>
 8003ea6:	2310      	movs	r3, #16
 8003ea8:	e000      	b.n	8003eac <HAL_DMA_Abort_IT+0xa4>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	4a11      	ldr	r2, [pc, #68]	; (8003ef4 <HAL_DMA_Abort_IT+0xec>)
 8003eae:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	4798      	blx	r3
    } 
  }
  return status;
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	40020008 	.word	0x40020008
 8003ee0:	4002001c 	.word	0x4002001c
 8003ee4:	40020030 	.word	0x40020030
 8003ee8:	40020044 	.word	0x40020044
 8003eec:	40020058 	.word	0x40020058
 8003ef0:	4002006c 	.word	0x4002006c
 8003ef4:	40020000 	.word	0x40020000

08003ef8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	2204      	movs	r2, #4
 8003f16:	409a      	lsls	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d04f      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0xc8>
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d04a      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d107      	bne.n	8003f48 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0204 	bic.w	r2, r2, #4
 8003f46:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a66      	ldr	r2, [pc, #408]	; (80040e8 <HAL_DMA_IRQHandler+0x1f0>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d029      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xae>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a65      	ldr	r2, [pc, #404]	; (80040ec <HAL_DMA_IRQHandler+0x1f4>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d022      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xaa>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a63      	ldr	r2, [pc, #396]	; (80040f0 <HAL_DMA_IRQHandler+0x1f8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d01a      	beq.n	8003f9c <HAL_DMA_IRQHandler+0xa4>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a62      	ldr	r2, [pc, #392]	; (80040f4 <HAL_DMA_IRQHandler+0x1fc>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d012      	beq.n	8003f96 <HAL_DMA_IRQHandler+0x9e>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a60      	ldr	r2, [pc, #384]	; (80040f8 <HAL_DMA_IRQHandler+0x200>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d00a      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x98>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a5f      	ldr	r2, [pc, #380]	; (80040fc <HAL_DMA_IRQHandler+0x204>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d102      	bne.n	8003f8a <HAL_DMA_IRQHandler+0x92>
 8003f84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f88:	e00e      	b.n	8003fa8 <HAL_DMA_IRQHandler+0xb0>
 8003f8a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003f8e:	e00b      	b.n	8003fa8 <HAL_DMA_IRQHandler+0xb0>
 8003f90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003f94:	e008      	b.n	8003fa8 <HAL_DMA_IRQHandler+0xb0>
 8003f96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f9a:	e005      	b.n	8003fa8 <HAL_DMA_IRQHandler+0xb0>
 8003f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fa0:	e002      	b.n	8003fa8 <HAL_DMA_IRQHandler+0xb0>
 8003fa2:	2340      	movs	r3, #64	; 0x40
 8003fa4:	e000      	b.n	8003fa8 <HAL_DMA_IRQHandler+0xb0>
 8003fa6:	2304      	movs	r3, #4
 8003fa8:	4a55      	ldr	r2, [pc, #340]	; (8004100 <HAL_DMA_IRQHandler+0x208>)
 8003faa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 8094 	beq.w	80040de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003fbe:	e08e      	b.n	80040de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	409a      	lsls	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d056      	beq.n	800407e <HAL_DMA_IRQHandler+0x186>
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d051      	beq.n	800407e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0320 	and.w	r3, r3, #32
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10b      	bne.n	8004000 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 020a 	bic.w	r2, r2, #10
 8003ff6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a38      	ldr	r2, [pc, #224]	; (80040e8 <HAL_DMA_IRQHandler+0x1f0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d029      	beq.n	800405e <HAL_DMA_IRQHandler+0x166>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a37      	ldr	r2, [pc, #220]	; (80040ec <HAL_DMA_IRQHandler+0x1f4>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d022      	beq.n	800405a <HAL_DMA_IRQHandler+0x162>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a35      	ldr	r2, [pc, #212]	; (80040f0 <HAL_DMA_IRQHandler+0x1f8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d01a      	beq.n	8004054 <HAL_DMA_IRQHandler+0x15c>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a34      	ldr	r2, [pc, #208]	; (80040f4 <HAL_DMA_IRQHandler+0x1fc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d012      	beq.n	800404e <HAL_DMA_IRQHandler+0x156>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a32      	ldr	r2, [pc, #200]	; (80040f8 <HAL_DMA_IRQHandler+0x200>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00a      	beq.n	8004048 <HAL_DMA_IRQHandler+0x150>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a31      	ldr	r2, [pc, #196]	; (80040fc <HAL_DMA_IRQHandler+0x204>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d102      	bne.n	8004042 <HAL_DMA_IRQHandler+0x14a>
 800403c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004040:	e00e      	b.n	8004060 <HAL_DMA_IRQHandler+0x168>
 8004042:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004046:	e00b      	b.n	8004060 <HAL_DMA_IRQHandler+0x168>
 8004048:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800404c:	e008      	b.n	8004060 <HAL_DMA_IRQHandler+0x168>
 800404e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004052:	e005      	b.n	8004060 <HAL_DMA_IRQHandler+0x168>
 8004054:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004058:	e002      	b.n	8004060 <HAL_DMA_IRQHandler+0x168>
 800405a:	2320      	movs	r3, #32
 800405c:	e000      	b.n	8004060 <HAL_DMA_IRQHandler+0x168>
 800405e:	2302      	movs	r3, #2
 8004060:	4a27      	ldr	r2, [pc, #156]	; (8004100 <HAL_DMA_IRQHandler+0x208>)
 8004062:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004070:	2b00      	cmp	r3, #0
 8004072:	d034      	beq.n	80040de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800407c:	e02f      	b.n	80040de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	2208      	movs	r2, #8
 8004084:	409a      	lsls	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4013      	ands	r3, r2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d028      	beq.n	80040e0 <HAL_DMA_IRQHandler+0x1e8>
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b00      	cmp	r3, #0
 8004096:	d023      	beq.n	80040e0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 020e 	bic.w	r2, r2, #14
 80040a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b0:	2101      	movs	r1, #1
 80040b2:	fa01 f202 	lsl.w	r2, r1, r2
 80040b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d004      	beq.n	80040e0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	4798      	blx	r3
    }
  }
  return;
 80040de:	bf00      	nop
 80040e0:	bf00      	nop
}
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40020008 	.word	0x40020008
 80040ec:	4002001c 	.word	0x4002001c
 80040f0:	40020030 	.word	0x40020030
 80040f4:	40020044 	.word	0x40020044
 80040f8:	40020058 	.word	0x40020058
 80040fc:	4002006c 	.word	0x4002006c
 8004100:	40020000 	.word	0x40020000

08004104 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
 8004110:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411a:	2101      	movs	r1, #1
 800411c:	fa01 f202 	lsl.w	r2, r1, r2
 8004120:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b10      	cmp	r3, #16
 8004130:	d108      	bne.n	8004144 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004142:	e007      	b.n	8004154 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	60da      	str	r2, [r3, #12]
}
 8004154:	bf00      	nop
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr
	...

08004160 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004160:	b480      	push	{r7}
 8004162:	b08b      	sub	sp, #44	; 0x2c
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800416a:	2300      	movs	r3, #0
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800416e:	2300      	movs	r3, #0
 8004170:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004172:	e169      	b.n	8004448 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004174:	2201      	movs	r2, #1
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69fa      	ldr	r2, [r7, #28]
 8004184:	4013      	ands	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	429a      	cmp	r2, r3
 800418e:	f040 8158 	bne.w	8004442 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	4a9a      	ldr	r2, [pc, #616]	; (8004400 <HAL_GPIO_Init+0x2a0>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d05e      	beq.n	800425a <HAL_GPIO_Init+0xfa>
 800419c:	4a98      	ldr	r2, [pc, #608]	; (8004400 <HAL_GPIO_Init+0x2a0>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d875      	bhi.n	800428e <HAL_GPIO_Init+0x12e>
 80041a2:	4a98      	ldr	r2, [pc, #608]	; (8004404 <HAL_GPIO_Init+0x2a4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d058      	beq.n	800425a <HAL_GPIO_Init+0xfa>
 80041a8:	4a96      	ldr	r2, [pc, #600]	; (8004404 <HAL_GPIO_Init+0x2a4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d86f      	bhi.n	800428e <HAL_GPIO_Init+0x12e>
 80041ae:	4a96      	ldr	r2, [pc, #600]	; (8004408 <HAL_GPIO_Init+0x2a8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d052      	beq.n	800425a <HAL_GPIO_Init+0xfa>
 80041b4:	4a94      	ldr	r2, [pc, #592]	; (8004408 <HAL_GPIO_Init+0x2a8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d869      	bhi.n	800428e <HAL_GPIO_Init+0x12e>
 80041ba:	4a94      	ldr	r2, [pc, #592]	; (800440c <HAL_GPIO_Init+0x2ac>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d04c      	beq.n	800425a <HAL_GPIO_Init+0xfa>
 80041c0:	4a92      	ldr	r2, [pc, #584]	; (800440c <HAL_GPIO_Init+0x2ac>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d863      	bhi.n	800428e <HAL_GPIO_Init+0x12e>
 80041c6:	4a92      	ldr	r2, [pc, #584]	; (8004410 <HAL_GPIO_Init+0x2b0>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d046      	beq.n	800425a <HAL_GPIO_Init+0xfa>
 80041cc:	4a90      	ldr	r2, [pc, #576]	; (8004410 <HAL_GPIO_Init+0x2b0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d85d      	bhi.n	800428e <HAL_GPIO_Init+0x12e>
 80041d2:	2b12      	cmp	r3, #18
 80041d4:	d82a      	bhi.n	800422c <HAL_GPIO_Init+0xcc>
 80041d6:	2b12      	cmp	r3, #18
 80041d8:	d859      	bhi.n	800428e <HAL_GPIO_Init+0x12e>
 80041da:	a201      	add	r2, pc, #4	; (adr r2, 80041e0 <HAL_GPIO_Init+0x80>)
 80041dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e0:	0800425b 	.word	0x0800425b
 80041e4:	08004235 	.word	0x08004235
 80041e8:	08004247 	.word	0x08004247
 80041ec:	08004289 	.word	0x08004289
 80041f0:	0800428f 	.word	0x0800428f
 80041f4:	0800428f 	.word	0x0800428f
 80041f8:	0800428f 	.word	0x0800428f
 80041fc:	0800428f 	.word	0x0800428f
 8004200:	0800428f 	.word	0x0800428f
 8004204:	0800428f 	.word	0x0800428f
 8004208:	0800428f 	.word	0x0800428f
 800420c:	0800428f 	.word	0x0800428f
 8004210:	0800428f 	.word	0x0800428f
 8004214:	0800428f 	.word	0x0800428f
 8004218:	0800428f 	.word	0x0800428f
 800421c:	0800428f 	.word	0x0800428f
 8004220:	0800428f 	.word	0x0800428f
 8004224:	0800423d 	.word	0x0800423d
 8004228:	08004251 	.word	0x08004251
 800422c:	4a79      	ldr	r2, [pc, #484]	; (8004414 <HAL_GPIO_Init+0x2b4>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d013      	beq.n	800425a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004232:	e02c      	b.n	800428e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	623b      	str	r3, [r7, #32]
          break;
 800423a:	e029      	b.n	8004290 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	3304      	adds	r3, #4
 8004242:	623b      	str	r3, [r7, #32]
          break;
 8004244:	e024      	b.n	8004290 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	3308      	adds	r3, #8
 800424c:	623b      	str	r3, [r7, #32]
          break;
 800424e:	e01f      	b.n	8004290 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	330c      	adds	r3, #12
 8004256:	623b      	str	r3, [r7, #32]
          break;
 8004258:	e01a      	b.n	8004290 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d102      	bne.n	8004268 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004262:	2304      	movs	r3, #4
 8004264:	623b      	str	r3, [r7, #32]
          break;
 8004266:	e013      	b.n	8004290 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d105      	bne.n	800427c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004270:	2308      	movs	r3, #8
 8004272:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69fa      	ldr	r2, [r7, #28]
 8004278:	611a      	str	r2, [r3, #16]
          break;
 800427a:	e009      	b.n	8004290 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800427c:	2308      	movs	r3, #8
 800427e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	615a      	str	r2, [r3, #20]
          break;
 8004286:	e003      	b.n	8004290 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004288:	2300      	movs	r3, #0
 800428a:	623b      	str	r3, [r7, #32]
          break;
 800428c:	e000      	b.n	8004290 <HAL_GPIO_Init+0x130>
          break;
 800428e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	2bff      	cmp	r3, #255	; 0xff
 8004294:	d801      	bhi.n	800429a <HAL_GPIO_Init+0x13a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	e001      	b.n	800429e <HAL_GPIO_Init+0x13e>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	3304      	adds	r3, #4
 800429e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	2bff      	cmp	r3, #255	; 0xff
 80042a4:	d802      	bhi.n	80042ac <HAL_GPIO_Init+0x14c>
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	e002      	b.n	80042b2 <HAL_GPIO_Init+0x152>
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	3b08      	subs	r3, #8
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	210f      	movs	r1, #15
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	fa01 f303 	lsl.w	r3, r1, r3
 80042c0:	43db      	mvns	r3, r3
 80042c2:	401a      	ands	r2, r3
 80042c4:	6a39      	ldr	r1, [r7, #32]
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	fa01 f303 	lsl.w	r3, r1, r3
 80042cc:	431a      	orrs	r2, r3
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 80b1 	beq.w	8004442 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80042e0:	4b4d      	ldr	r3, [pc, #308]	; (8004418 <HAL_GPIO_Init+0x2b8>)
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	4a4c      	ldr	r2, [pc, #304]	; (8004418 <HAL_GPIO_Init+0x2b8>)
 80042e6:	f043 0301 	orr.w	r3, r3, #1
 80042ea:	6193      	str	r3, [r2, #24]
 80042ec:	4b4a      	ldr	r3, [pc, #296]	; (8004418 <HAL_GPIO_Init+0x2b8>)
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	60bb      	str	r3, [r7, #8]
 80042f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80042f8:	4a48      	ldr	r2, [pc, #288]	; (800441c <HAL_GPIO_Init+0x2bc>)
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	089b      	lsrs	r3, r3, #2
 80042fe:	3302      	adds	r3, #2
 8004300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004304:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	f003 0303 	and.w	r3, r3, #3
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	220f      	movs	r2, #15
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	43db      	mvns	r3, r3
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	4013      	ands	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a40      	ldr	r2, [pc, #256]	; (8004420 <HAL_GPIO_Init+0x2c0>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d013      	beq.n	800434c <HAL_GPIO_Init+0x1ec>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a3f      	ldr	r2, [pc, #252]	; (8004424 <HAL_GPIO_Init+0x2c4>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d00d      	beq.n	8004348 <HAL_GPIO_Init+0x1e8>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a3e      	ldr	r2, [pc, #248]	; (8004428 <HAL_GPIO_Init+0x2c8>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d007      	beq.n	8004344 <HAL_GPIO_Init+0x1e4>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a3d      	ldr	r2, [pc, #244]	; (800442c <HAL_GPIO_Init+0x2cc>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d101      	bne.n	8004340 <HAL_GPIO_Init+0x1e0>
 800433c:	2303      	movs	r3, #3
 800433e:	e006      	b.n	800434e <HAL_GPIO_Init+0x1ee>
 8004340:	2304      	movs	r3, #4
 8004342:	e004      	b.n	800434e <HAL_GPIO_Init+0x1ee>
 8004344:	2302      	movs	r3, #2
 8004346:	e002      	b.n	800434e <HAL_GPIO_Init+0x1ee>
 8004348:	2301      	movs	r3, #1
 800434a:	e000      	b.n	800434e <HAL_GPIO_Init+0x1ee>
 800434c:	2300      	movs	r3, #0
 800434e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004350:	f002 0203 	and.w	r2, r2, #3
 8004354:	0092      	lsls	r2, r2, #2
 8004356:	4093      	lsls	r3, r2
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800435e:	492f      	ldr	r1, [pc, #188]	; (800441c <HAL_GPIO_Init+0x2bc>)
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	089b      	lsrs	r3, r3, #2
 8004364:	3302      	adds	r3, #2
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d006      	beq.n	8004386 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004378:	4b2d      	ldr	r3, [pc, #180]	; (8004430 <HAL_GPIO_Init+0x2d0>)
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	492c      	ldr	r1, [pc, #176]	; (8004430 <HAL_GPIO_Init+0x2d0>)
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	4313      	orrs	r3, r2
 8004382:	608b      	str	r3, [r1, #8]
 8004384:	e006      	b.n	8004394 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004386:	4b2a      	ldr	r3, [pc, #168]	; (8004430 <HAL_GPIO_Init+0x2d0>)
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	43db      	mvns	r3, r3
 800438e:	4928      	ldr	r1, [pc, #160]	; (8004430 <HAL_GPIO_Init+0x2d0>)
 8004390:	4013      	ands	r3, r2
 8004392:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d006      	beq.n	80043ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80043a0:	4b23      	ldr	r3, [pc, #140]	; (8004430 <HAL_GPIO_Init+0x2d0>)
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	4922      	ldr	r1, [pc, #136]	; (8004430 <HAL_GPIO_Init+0x2d0>)
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60cb      	str	r3, [r1, #12]
 80043ac:	e006      	b.n	80043bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80043ae:	4b20      	ldr	r3, [pc, #128]	; (8004430 <HAL_GPIO_Init+0x2d0>)
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	43db      	mvns	r3, r3
 80043b6:	491e      	ldr	r1, [pc, #120]	; (8004430 <HAL_GPIO_Init+0x2d0>)
 80043b8:	4013      	ands	r3, r2
 80043ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d006      	beq.n	80043d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80043c8:	4b19      	ldr	r3, [pc, #100]	; (8004430 <HAL_GPIO_Init+0x2d0>)
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	4918      	ldr	r1, [pc, #96]	; (8004430 <HAL_GPIO_Init+0x2d0>)
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	604b      	str	r3, [r1, #4]
 80043d4:	e006      	b.n	80043e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80043d6:	4b16      	ldr	r3, [pc, #88]	; (8004430 <HAL_GPIO_Init+0x2d0>)
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	43db      	mvns	r3, r3
 80043de:	4914      	ldr	r1, [pc, #80]	; (8004430 <HAL_GPIO_Init+0x2d0>)
 80043e0:	4013      	ands	r3, r2
 80043e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d021      	beq.n	8004434 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80043f0:	4b0f      	ldr	r3, [pc, #60]	; (8004430 <HAL_GPIO_Init+0x2d0>)
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	490e      	ldr	r1, [pc, #56]	; (8004430 <HAL_GPIO_Init+0x2d0>)
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	600b      	str	r3, [r1, #0]
 80043fc:	e021      	b.n	8004442 <HAL_GPIO_Init+0x2e2>
 80043fe:	bf00      	nop
 8004400:	10320000 	.word	0x10320000
 8004404:	10310000 	.word	0x10310000
 8004408:	10220000 	.word	0x10220000
 800440c:	10210000 	.word	0x10210000
 8004410:	10120000 	.word	0x10120000
 8004414:	10110000 	.word	0x10110000
 8004418:	40021000 	.word	0x40021000
 800441c:	40010000 	.word	0x40010000
 8004420:	40010800 	.word	0x40010800
 8004424:	40010c00 	.word	0x40010c00
 8004428:	40011000 	.word	0x40011000
 800442c:	40011400 	.word	0x40011400
 8004430:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004434:	4b0b      	ldr	r3, [pc, #44]	; (8004464 <HAL_GPIO_Init+0x304>)
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	43db      	mvns	r3, r3
 800443c:	4909      	ldr	r1, [pc, #36]	; (8004464 <HAL_GPIO_Init+0x304>)
 800443e:	4013      	ands	r3, r2
 8004440:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	3301      	adds	r3, #1
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	fa22 f303 	lsr.w	r3, r2, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	f47f ae8e 	bne.w	8004174 <HAL_GPIO_Init+0x14>
  }
}
 8004458:	bf00      	nop
 800445a:	bf00      	nop
 800445c:	372c      	adds	r7, #44	; 0x2c
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr
 8004464:	40010400 	.word	0x40010400

08004468 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	460b      	mov	r3, r1
 8004472:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	887b      	ldrh	r3, [r7, #2]
 800447a:	4013      	ands	r3, r2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d002      	beq.n	8004486 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004480:	2301      	movs	r3, #1
 8004482:	73fb      	strb	r3, [r7, #15]
 8004484:	e001      	b.n	800448a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004486:	2300      	movs	r3, #0
 8004488:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800448a:	7bfb      	ldrb	r3, [r7, #15]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	bc80      	pop	{r7}
 8004494:	4770      	bx	lr

08004496 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	460b      	mov	r3, r1
 80044a0:	807b      	strh	r3, [r7, #2]
 80044a2:	4613      	mov	r3, r2
 80044a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044a6:	787b      	ldrb	r3, [r7, #1]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044ac:	887a      	ldrh	r2, [r7, #2]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80044b2:	e003      	b.n	80044bc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044b4:	887b      	ldrh	r3, [r7, #2]
 80044b6:	041a      	lsls	r2, r3, #16
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	611a      	str	r2, [r3, #16]
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc80      	pop	{r7}
 80044c4:	4770      	bx	lr

080044c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b085      	sub	sp, #20
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	460b      	mov	r3, r1
 80044d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044d8:	887a      	ldrh	r2, [r7, #2]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	4013      	ands	r3, r2
 80044de:	041a      	lsls	r2, r3, #16
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	43d9      	mvns	r1, r3
 80044e4:	887b      	ldrh	r3, [r7, #2]
 80044e6:	400b      	ands	r3, r1
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	611a      	str	r2, [r3, #16]
}
 80044ee:	bf00      	nop
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bc80      	pop	{r7}
 80044f6:	4770      	bx	lr

080044f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e12b      	b.n	8004762 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff f884 	bl	800362c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2224      	movs	r2, #36	; 0x24
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0201 	bic.w	r2, r2, #1
 800453a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800454a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800455a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800455c:	f002 f8aa 	bl	80066b4 <HAL_RCC_GetPCLK1Freq>
 8004560:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	4a81      	ldr	r2, [pc, #516]	; (800476c <HAL_I2C_Init+0x274>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d807      	bhi.n	800457c <HAL_I2C_Init+0x84>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4a80      	ldr	r2, [pc, #512]	; (8004770 <HAL_I2C_Init+0x278>)
 8004570:	4293      	cmp	r3, r2
 8004572:	bf94      	ite	ls
 8004574:	2301      	movls	r3, #1
 8004576:	2300      	movhi	r3, #0
 8004578:	b2db      	uxtb	r3, r3
 800457a:	e006      	b.n	800458a <HAL_I2C_Init+0x92>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4a7d      	ldr	r2, [pc, #500]	; (8004774 <HAL_I2C_Init+0x27c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	bf94      	ite	ls
 8004584:	2301      	movls	r3, #1
 8004586:	2300      	movhi	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e0e7      	b.n	8004762 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4a78      	ldr	r2, [pc, #480]	; (8004778 <HAL_I2C_Init+0x280>)
 8004596:	fba2 2303 	umull	r2, r3, r2, r3
 800459a:	0c9b      	lsrs	r3, r3, #18
 800459c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	4a6a      	ldr	r2, [pc, #424]	; (800476c <HAL_I2C_Init+0x274>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d802      	bhi.n	80045cc <HAL_I2C_Init+0xd4>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	3301      	adds	r3, #1
 80045ca:	e009      	b.n	80045e0 <HAL_I2C_Init+0xe8>
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045d2:	fb02 f303 	mul.w	r3, r2, r3
 80045d6:	4a69      	ldr	r2, [pc, #420]	; (800477c <HAL_I2C_Init+0x284>)
 80045d8:	fba2 2303 	umull	r2, r3, r2, r3
 80045dc:	099b      	lsrs	r3, r3, #6
 80045de:	3301      	adds	r3, #1
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6812      	ldr	r2, [r2, #0]
 80045e4:	430b      	orrs	r3, r1
 80045e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	495c      	ldr	r1, [pc, #368]	; (800476c <HAL_I2C_Init+0x274>)
 80045fc:	428b      	cmp	r3, r1
 80045fe:	d819      	bhi.n	8004634 <HAL_I2C_Init+0x13c>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	1e59      	subs	r1, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	fbb1 f3f3 	udiv	r3, r1, r3
 800460e:	1c59      	adds	r1, r3, #1
 8004610:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004614:	400b      	ands	r3, r1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <HAL_I2C_Init+0x138>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1e59      	subs	r1, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	fbb1 f3f3 	udiv	r3, r1, r3
 8004628:	3301      	adds	r3, #1
 800462a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800462e:	e051      	b.n	80046d4 <HAL_I2C_Init+0x1dc>
 8004630:	2304      	movs	r3, #4
 8004632:	e04f      	b.n	80046d4 <HAL_I2C_Init+0x1dc>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d111      	bne.n	8004660 <HAL_I2C_Init+0x168>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	1e58      	subs	r0, r3, #1
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6859      	ldr	r1, [r3, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	440b      	add	r3, r1
 800464a:	fbb0 f3f3 	udiv	r3, r0, r3
 800464e:	3301      	adds	r3, #1
 8004650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004654:	2b00      	cmp	r3, #0
 8004656:	bf0c      	ite	eq
 8004658:	2301      	moveq	r3, #1
 800465a:	2300      	movne	r3, #0
 800465c:	b2db      	uxtb	r3, r3
 800465e:	e012      	b.n	8004686 <HAL_I2C_Init+0x18e>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	1e58      	subs	r0, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6859      	ldr	r1, [r3, #4]
 8004668:	460b      	mov	r3, r1
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	0099      	lsls	r1, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	fbb0 f3f3 	udiv	r3, r0, r3
 8004676:	3301      	adds	r3, #1
 8004678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800467c:	2b00      	cmp	r3, #0
 800467e:	bf0c      	ite	eq
 8004680:	2301      	moveq	r3, #1
 8004682:	2300      	movne	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <HAL_I2C_Init+0x196>
 800468a:	2301      	movs	r3, #1
 800468c:	e022      	b.n	80046d4 <HAL_I2C_Init+0x1dc>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10e      	bne.n	80046b4 <HAL_I2C_Init+0x1bc>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	1e58      	subs	r0, r3, #1
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6859      	ldr	r1, [r3, #4]
 800469e:	460b      	mov	r3, r1
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	440b      	add	r3, r1
 80046a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80046a8:	3301      	adds	r3, #1
 80046aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046b2:	e00f      	b.n	80046d4 <HAL_I2C_Init+0x1dc>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	1e58      	subs	r0, r3, #1
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6859      	ldr	r1, [r3, #4]
 80046bc:	460b      	mov	r3, r1
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	0099      	lsls	r1, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ca:	3301      	adds	r3, #1
 80046cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	6809      	ldr	r1, [r1, #0]
 80046d8:	4313      	orrs	r3, r2
 80046da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69da      	ldr	r2, [r3, #28]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004702:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6911      	ldr	r1, [r2, #16]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	68d2      	ldr	r2, [r2, #12]
 800470e:	4311      	orrs	r1, r2
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6812      	ldr	r2, [r2, #0]
 8004714:	430b      	orrs	r3, r1
 8004716:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695a      	ldr	r2, [r3, #20]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0201 	orr.w	r2, r2, #1
 8004742:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2220      	movs	r2, #32
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	000186a0 	.word	0x000186a0
 8004770:	001e847f 	.word	0x001e847f
 8004774:	003d08ff 	.word	0x003d08ff
 8004778:	431bde83 	.word	0x431bde83
 800477c:	10624dd3 	.word	0x10624dd3

08004780 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af02      	add	r7, sp, #8
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	607a      	str	r2, [r7, #4]
 800478a:	461a      	mov	r2, r3
 800478c:	460b      	mov	r3, r1
 800478e:	817b      	strh	r3, [r7, #10]
 8004790:	4613      	mov	r3, r2
 8004792:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004794:	f7ff f92a 	bl	80039ec <HAL_GetTick>
 8004798:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b20      	cmp	r3, #32
 80047a4:	f040 80e0 	bne.w	8004968 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	2319      	movs	r3, #25
 80047ae:	2201      	movs	r2, #1
 80047b0:	4970      	ldr	r1, [pc, #448]	; (8004974 <HAL_I2C_Master_Transmit+0x1f4>)
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f001 f97e 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80047be:	2302      	movs	r3, #2
 80047c0:	e0d3      	b.n	800496a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_I2C_Master_Transmit+0x50>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e0cc      	b.n	800496a <HAL_I2C_Master_Transmit+0x1ea>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d007      	beq.n	80047f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f042 0201 	orr.w	r2, r2, #1
 80047f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004804:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2221      	movs	r2, #33	; 0x21
 800480a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2210      	movs	r2, #16
 8004812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	893a      	ldrh	r2, [r7, #8]
 8004826:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4a50      	ldr	r2, [pc, #320]	; (8004978 <HAL_I2C_Master_Transmit+0x1f8>)
 8004836:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004838:	8979      	ldrh	r1, [r7, #10]
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	6a3a      	ldr	r2, [r7, #32]
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 fe6a 	bl	8005518 <I2C_MasterRequestWrite>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e08d      	b.n	800496a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800484e:	2300      	movs	r3, #0
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	613b      	str	r3, [r7, #16]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	613b      	str	r3, [r7, #16]
 8004862:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004864:	e066      	b.n	8004934 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	6a39      	ldr	r1, [r7, #32]
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f001 fa3c 	bl	8005ce8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00d      	beq.n	8004892 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	2b04      	cmp	r3, #4
 800487c:	d107      	bne.n	800488e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800488c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e06b      	b.n	800496a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	781a      	ldrb	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29a      	uxth	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	d11b      	bne.n	8004908 <HAL_I2C_Master_Transmit+0x188>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d017      	beq.n	8004908 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	781a      	ldrb	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004900:	3b01      	subs	r3, #1
 8004902:	b29a      	uxth	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	6a39      	ldr	r1, [r7, #32]
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f001 fa33 	bl	8005d78 <I2C_WaitOnBTFFlagUntilTimeout>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00d      	beq.n	8004934 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491c:	2b04      	cmp	r3, #4
 800491e:	d107      	bne.n	8004930 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e01a      	b.n	800496a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004938:	2b00      	cmp	r3, #0
 800493a:	d194      	bne.n	8004866 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800494a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004964:	2300      	movs	r3, #0
 8004966:	e000      	b.n	800496a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004968:	2302      	movs	r3, #2
  }
}
 800496a:	4618      	mov	r0, r3
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	00100002 	.word	0x00100002
 8004978:	ffff0000 	.word	0xffff0000

0800497c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08c      	sub	sp, #48	; 0x30
 8004980:	af02      	add	r7, sp, #8
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	607a      	str	r2, [r7, #4]
 8004986:	461a      	mov	r2, r3
 8004988:	460b      	mov	r3, r1
 800498a:	817b      	strh	r3, [r7, #10]
 800498c:	4613      	mov	r3, r2
 800498e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004994:	f7ff f82a 	bl	80039ec <HAL_GetTick>
 8004998:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	f040 824b 	bne.w	8004e3e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	2319      	movs	r3, #25
 80049ae:	2201      	movs	r2, #1
 80049b0:	497f      	ldr	r1, [pc, #508]	; (8004bb0 <HAL_I2C_Master_Receive+0x234>)
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f001 f87e 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80049be:	2302      	movs	r3, #2
 80049c0:	e23e      	b.n	8004e40 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d101      	bne.n	80049d0 <HAL_I2C_Master_Receive+0x54>
 80049cc:	2302      	movs	r3, #2
 80049ce:	e237      	b.n	8004e40 <HAL_I2C_Master_Receive+0x4c4>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d007      	beq.n	80049f6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 0201 	orr.w	r2, r2, #1
 80049f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2222      	movs	r2, #34	; 0x22
 8004a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2210      	movs	r2, #16
 8004a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	893a      	ldrh	r2, [r7, #8]
 8004a26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4a5f      	ldr	r2, [pc, #380]	; (8004bb4 <HAL_I2C_Master_Receive+0x238>)
 8004a36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a38:	8979      	ldrh	r1, [r7, #10]
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 fdec 	bl	800561c <I2C_MasterRequestRead>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e1f8      	b.n	8004e40 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d113      	bne.n	8004a7e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a56:	2300      	movs	r3, #0
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	61fb      	str	r3, [r7, #28]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	61fb      	str	r3, [r7, #28]
 8004a6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	e1cc      	b.n	8004e18 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d11e      	bne.n	8004ac4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a96:	b672      	cpsid	i
}
 8004a98:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61bb      	str	r3, [r7, #24]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	61bb      	str	r3, [r7, #24]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	61bb      	str	r3, [r7, #24]
 8004aae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004abe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004ac0:	b662      	cpsie	i
}
 8004ac2:	e035      	b.n	8004b30 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d11e      	bne.n	8004b0a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ada:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004adc:	b672      	cpsid	i
}
 8004ade:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004b06:	b662      	cpsie	i
}
 8004b08:	e012      	b.n	8004b30 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	613b      	str	r3, [r7, #16]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	613b      	str	r3, [r7, #16]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004b30:	e172      	b.n	8004e18 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b36:	2b03      	cmp	r3, #3
 8004b38:	f200 811f 	bhi.w	8004d7a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d123      	bne.n	8004b8c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f001 f95d 	bl	8005e08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e173      	b.n	8004e40 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691a      	ldr	r2, [r3, #16]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	b2d2      	uxtb	r2, r2
 8004b64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	3b01      	subs	r3, #1
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b8a:	e145      	b.n	8004e18 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d152      	bne.n	8004c3a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	4906      	ldr	r1, [pc, #24]	; (8004bb8 <HAL_I2C_Master_Receive+0x23c>)
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 ff88 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d008      	beq.n	8004bbc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e148      	b.n	8004e40 <HAL_I2C_Master_Receive+0x4c4>
 8004bae:	bf00      	nop
 8004bb0:	00100002 	.word	0x00100002
 8004bb4:	ffff0000 	.word	0xffff0000
 8004bb8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004bbc:	b672      	cpsid	i
}
 8004bbe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691a      	ldr	r2, [r3, #16]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	b2d2      	uxtb	r2, r2
 8004bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	1c5a      	adds	r2, r3, #1
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004c02:	b662      	cpsie	i
}
 8004c04:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	691a      	ldr	r2, [r3, #16]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	b2d2      	uxtb	r2, r2
 8004c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c22:	3b01      	subs	r3, #1
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c38:	e0ee      	b.n	8004e18 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c40:	2200      	movs	r2, #0
 8004c42:	4981      	ldr	r1, [pc, #516]	; (8004e48 <HAL_I2C_Master_Receive+0x4cc>)
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 ff35 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e0f5      	b.n	8004e40 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c64:	b672      	cpsid	i
}
 8004c66:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	691a      	ldr	r2, [r3, #16]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	1c5a      	adds	r2, r3, #1
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c84:	3b01      	subs	r3, #1
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c9a:	4b6c      	ldr	r3, [pc, #432]	; (8004e4c <HAL_I2C_Master_Receive+0x4d0>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	08db      	lsrs	r3, r3, #3
 8004ca0:	4a6b      	ldr	r2, [pc, #428]	; (8004e50 <HAL_I2C_Master_Receive+0x4d4>)
 8004ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca6:	0a1a      	lsrs	r2, r3, #8
 8004ca8:	4613      	mov	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	00da      	lsls	r2, r3, #3
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d118      	bne.n	8004cf2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	f043 0220 	orr.w	r2, r3, #32
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004ce2:	b662      	cpsie	i
}
 8004ce4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e0a6      	b.n	8004e40 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	d1d9      	bne.n	8004cb4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691a      	ldr	r2, [r3, #16]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004d42:	b662      	cpsie	i
}
 8004d44:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	691a      	ldr	r2, [r3, #16]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d78:	e04e      	b.n	8004e18 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f001 f842 	bl	8005e08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e058      	b.n	8004e40 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	691a      	ldr	r2, [r3, #16]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	b2d2      	uxtb	r2, r2
 8004d9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004daa:	3b01      	subs	r3, #1
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	f003 0304 	and.w	r3, r3, #4
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	d124      	bne.n	8004e18 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd2:	2b03      	cmp	r3, #3
 8004dd4:	d107      	bne.n	8004de6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	b2d2      	uxtb	r2, r2
 8004df2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f47f ae88 	bne.w	8004b32 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2220      	movs	r2, #32
 8004e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	e000      	b.n	8004e40 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8004e3e:	2302      	movs	r3, #2
  }
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3728      	adds	r7, #40	; 0x28
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	00010004 	.word	0x00010004
 8004e4c:	20000008 	.word	0x20000008
 8004e50:	14f8b589 	.word	0x14f8b589

08004e54 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b088      	sub	sp, #32
 8004e58:	af02      	add	r7, sp, #8
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	4608      	mov	r0, r1
 8004e5e:	4611      	mov	r1, r2
 8004e60:	461a      	mov	r2, r3
 8004e62:	4603      	mov	r3, r0
 8004e64:	817b      	strh	r3, [r7, #10]
 8004e66:	460b      	mov	r3, r1
 8004e68:	813b      	strh	r3, [r7, #8]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e6e:	f7fe fdbd 	bl	80039ec <HAL_GetTick>
 8004e72:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b20      	cmp	r3, #32
 8004e7e:	f040 80d9 	bne.w	8005034 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	2319      	movs	r3, #25
 8004e88:	2201      	movs	r2, #1
 8004e8a:	496d      	ldr	r1, [pc, #436]	; (8005040 <HAL_I2C_Mem_Write+0x1ec>)
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 fe11 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004e98:	2302      	movs	r3, #2
 8004e9a:	e0cc      	b.n	8005036 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d101      	bne.n	8004eaa <HAL_I2C_Mem_Write+0x56>
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	e0c5      	b.n	8005036 <HAL_I2C_Mem_Write+0x1e2>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d007      	beq.n	8004ed0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0201 	orr.w	r2, r2, #1
 8004ece:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ede:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2221      	movs	r2, #33	; 0x21
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2240      	movs	r2, #64	; 0x40
 8004eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a3a      	ldr	r2, [r7, #32]
 8004efa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4a4d      	ldr	r2, [pc, #308]	; (8005044 <HAL_I2C_Mem_Write+0x1f0>)
 8004f10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f12:	88f8      	ldrh	r0, [r7, #6]
 8004f14:	893a      	ldrh	r2, [r7, #8]
 8004f16:	8979      	ldrh	r1, [r7, #10]
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	9301      	str	r3, [sp, #4]
 8004f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	4603      	mov	r3, r0
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 fc48 	bl	80057b8 <I2C_RequestMemoryWrite>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d052      	beq.n	8004fd4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e081      	b.n	8005036 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 fed6 	bl	8005ce8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00d      	beq.n	8004f5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d107      	bne.n	8004f5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e06b      	b.n	8005036 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	781a      	ldrb	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d11b      	bne.n	8004fd4 <HAL_I2C_Mem_Write+0x180>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d017      	beq.n	8004fd4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	781a      	ldrb	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1aa      	bne.n	8004f32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 fec9 	bl	8005d78 <I2C_WaitOnBTFFlagUntilTimeout>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00d      	beq.n	8005008 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff0:	2b04      	cmp	r3, #4
 8004ff2:	d107      	bne.n	8005004 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005002:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e016      	b.n	8005036 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005016:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2220      	movs	r2, #32
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005030:	2300      	movs	r3, #0
 8005032:	e000      	b.n	8005036 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005034:	2302      	movs	r3, #2
  }
}
 8005036:	4618      	mov	r0, r3
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	00100002 	.word	0x00100002
 8005044:	ffff0000 	.word	0xffff0000

08005048 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b08c      	sub	sp, #48	; 0x30
 800504c:	af02      	add	r7, sp, #8
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	4608      	mov	r0, r1
 8005052:	4611      	mov	r1, r2
 8005054:	461a      	mov	r2, r3
 8005056:	4603      	mov	r3, r0
 8005058:	817b      	strh	r3, [r7, #10]
 800505a:	460b      	mov	r3, r1
 800505c:	813b      	strh	r3, [r7, #8]
 800505e:	4613      	mov	r3, r2
 8005060:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005062:	2300      	movs	r3, #0
 8005064:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005066:	f7fe fcc1 	bl	80039ec <HAL_GetTick>
 800506a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b20      	cmp	r3, #32
 8005076:	f040 8244 	bne.w	8005502 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	2319      	movs	r3, #25
 8005080:	2201      	movs	r2, #1
 8005082:	4982      	ldr	r1, [pc, #520]	; (800528c <HAL_I2C_Mem_Read+0x244>)
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 fd15 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005090:	2302      	movs	r3, #2
 8005092:	e237      	b.n	8005504 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <HAL_I2C_Mem_Read+0x5a>
 800509e:	2302      	movs	r3, #2
 80050a0:	e230      	b.n	8005504 <HAL_I2C_Mem_Read+0x4bc>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d007      	beq.n	80050c8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0201 	orr.w	r2, r2, #1
 80050c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2222      	movs	r2, #34	; 0x22
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2240      	movs	r2, #64	; 0x40
 80050e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80050f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fe:	b29a      	uxth	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4a62      	ldr	r2, [pc, #392]	; (8005290 <HAL_I2C_Mem_Read+0x248>)
 8005108:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800510a:	88f8      	ldrh	r0, [r7, #6]
 800510c:	893a      	ldrh	r2, [r7, #8]
 800510e:	8979      	ldrh	r1, [r7, #10]
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	9301      	str	r3, [sp, #4]
 8005114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	4603      	mov	r3, r0
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 fbe2 	bl	80058e4 <I2C_RequestMemoryRead>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e1ec      	b.n	8005504 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800512e:	2b00      	cmp	r3, #0
 8005130:	d113      	bne.n	800515a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005132:	2300      	movs	r3, #0
 8005134:	61fb      	str	r3, [r7, #28]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	61fb      	str	r3, [r7, #28]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	61fb      	str	r3, [r7, #28]
 8005146:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	e1c0      	b.n	80054dc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800515e:	2b01      	cmp	r3, #1
 8005160:	d11e      	bne.n	80051a0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005170:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005172:	b672      	cpsid	i
}
 8005174:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005176:	2300      	movs	r3, #0
 8005178:	61bb      	str	r3, [r7, #24]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	61bb      	str	r3, [r7, #24]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	61bb      	str	r3, [r7, #24]
 800518a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800519a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800519c:	b662      	cpsie	i
}
 800519e:	e035      	b.n	800520c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d11e      	bne.n	80051e6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80051b8:	b672      	cpsid	i
}
 80051ba:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051bc:	2300      	movs	r3, #0
 80051be:	617b      	str	r3, [r7, #20]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	617b      	str	r3, [r7, #20]
 80051d0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80051e2:	b662      	cpsie	i
}
 80051e4:	e012      	b.n	800520c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051f4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051f6:	2300      	movs	r3, #0
 80051f8:	613b      	str	r3, [r7, #16]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	613b      	str	r3, [r7, #16]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	613b      	str	r3, [r7, #16]
 800520a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800520c:	e166      	b.n	80054dc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005212:	2b03      	cmp	r3, #3
 8005214:	f200 811f 	bhi.w	8005456 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521c:	2b01      	cmp	r3, #1
 800521e:	d123      	bne.n	8005268 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005222:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 fdef 	bl	8005e08 <I2C_WaitOnRXNEFlagUntilTimeout>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e167      	b.n	8005504 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691a      	ldr	r2, [r3, #16]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005250:	3b01      	subs	r3, #1
 8005252:	b29a      	uxth	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525c:	b29b      	uxth	r3, r3
 800525e:	3b01      	subs	r3, #1
 8005260:	b29a      	uxth	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005266:	e139      	b.n	80054dc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800526c:	2b02      	cmp	r3, #2
 800526e:	d152      	bne.n	8005316 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005276:	2200      	movs	r2, #0
 8005278:	4906      	ldr	r1, [pc, #24]	; (8005294 <HAL_I2C_Mem_Read+0x24c>)
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 fc1a 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d008      	beq.n	8005298 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e13c      	b.n	8005504 <HAL_I2C_Mem_Read+0x4bc>
 800528a:	bf00      	nop
 800528c:	00100002 	.word	0x00100002
 8005290:	ffff0000 	.word	0xffff0000
 8005294:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005298:	b672      	cpsid	i
}
 800529a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	691a      	ldr	r2, [r3, #16]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c8:	3b01      	subs	r3, #1
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80052de:	b662      	cpsie	i
}
 80052e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	691a      	ldr	r2, [r3, #16]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052fe:	3b01      	subs	r3, #1
 8005300:	b29a      	uxth	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530a:	b29b      	uxth	r3, r3
 800530c:	3b01      	subs	r3, #1
 800530e:	b29a      	uxth	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005314:	e0e2      	b.n	80054dc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531c:	2200      	movs	r2, #0
 800531e:	497b      	ldr	r1, [pc, #492]	; (800550c <HAL_I2C_Mem_Read+0x4c4>)
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 fbc7 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e0e9      	b.n	8005504 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800533e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005340:	b672      	cpsid	i
}
 8005342:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691a      	ldr	r2, [r3, #16]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005360:	3b01      	subs	r3, #1
 8005362:	b29a      	uxth	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536c:	b29b      	uxth	r3, r3
 800536e:	3b01      	subs	r3, #1
 8005370:	b29a      	uxth	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005376:	4b66      	ldr	r3, [pc, #408]	; (8005510 <HAL_I2C_Mem_Read+0x4c8>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	08db      	lsrs	r3, r3, #3
 800537c:	4a65      	ldr	r2, [pc, #404]	; (8005514 <HAL_I2C_Mem_Read+0x4cc>)
 800537e:	fba2 2303 	umull	r2, r3, r2, r3
 8005382:	0a1a      	lsrs	r2, r3, #8
 8005384:	4613      	mov	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	00da      	lsls	r2, r3, #3
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005390:	6a3b      	ldr	r3, [r7, #32]
 8005392:	3b01      	subs	r3, #1
 8005394:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d118      	bne.n	80053ce <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	f043 0220 	orr.w	r2, r3, #32
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80053be:	b662      	cpsie	i
}
 80053c0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e09a      	b.n	8005504 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d1d9      	bne.n	8005390 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691a      	ldr	r2, [r3, #16]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fe:	1c5a      	adds	r2, r3, #1
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005408:	3b01      	subs	r3, #1
 800540a:	b29a      	uxth	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005414:	b29b      	uxth	r3, r3
 8005416:	3b01      	subs	r3, #1
 8005418:	b29a      	uxth	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800541e:	b662      	cpsie	i
}
 8005420:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	691a      	ldr	r2, [r3, #16]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	b2d2      	uxtb	r2, r2
 800542e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	1c5a      	adds	r2, r3, #1
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800543e:	3b01      	subs	r3, #1
 8005440:	b29a      	uxth	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800544a:	b29b      	uxth	r3, r3
 800544c:	3b01      	subs	r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005454:	e042      	b.n	80054dc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005458:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 fcd4 	bl	8005e08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e04c      	b.n	8005504 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	691a      	ldr	r2, [r3, #16]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	b2d2      	uxtb	r2, r2
 8005476:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005486:	3b01      	subs	r3, #1
 8005488:	b29a      	uxth	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005492:	b29b      	uxth	r3, r3
 8005494:	3b01      	subs	r3, #1
 8005496:	b29a      	uxth	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	f003 0304 	and.w	r3, r3, #4
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d118      	bne.n	80054dc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c6:	3b01      	subs	r3, #1
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	3b01      	subs	r3, #1
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f47f ae94 	bne.w	800520e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2220      	movs	r2, #32
 80054ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	e000      	b.n	8005504 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8005502:	2302      	movs	r3, #2
  }
}
 8005504:	4618      	mov	r0, r3
 8005506:	3728      	adds	r7, #40	; 0x28
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	00010004 	.word	0x00010004
 8005510:	20000008 	.word	0x20000008
 8005514:	14f8b589 	.word	0x14f8b589

08005518 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b088      	sub	sp, #32
 800551c:	af02      	add	r7, sp, #8
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	607a      	str	r2, [r7, #4]
 8005522:	603b      	str	r3, [r7, #0]
 8005524:	460b      	mov	r3, r1
 8005526:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	2b08      	cmp	r3, #8
 8005532:	d006      	beq.n	8005542 <I2C_MasterRequestWrite+0x2a>
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d003      	beq.n	8005542 <I2C_MasterRequestWrite+0x2a>
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005540:	d108      	bne.n	8005554 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	e00b      	b.n	800556c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005558:	2b12      	cmp	r3, #18
 800555a:	d107      	bne.n	800556c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800556a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f000 fa9b 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00d      	beq.n	80055a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005592:	d103      	bne.n	800559c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800559a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e035      	b.n	800560c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055a8:	d108      	bne.n	80055bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055aa:	897b      	ldrh	r3, [r7, #10]
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	461a      	mov	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055b8:	611a      	str	r2, [r3, #16]
 80055ba:	e01b      	b.n	80055f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80055bc:	897b      	ldrh	r3, [r7, #10]
 80055be:	11db      	asrs	r3, r3, #7
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	f003 0306 	and.w	r3, r3, #6
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	f063 030f 	orn	r3, r3, #15
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	490e      	ldr	r1, [pc, #56]	; (8005614 <I2C_MasterRequestWrite+0xfc>)
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f000 fae4 	bl	8005ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e010      	b.n	800560c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80055ea:	897b      	ldrh	r3, [r7, #10]
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	4907      	ldr	r1, [pc, #28]	; (8005618 <I2C_MasterRequestWrite+0x100>)
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 fad4 	bl	8005ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e000      	b.n	800560c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	00010008 	.word	0x00010008
 8005618:	00010002 	.word	0x00010002

0800561c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af02      	add	r7, sp, #8
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	607a      	str	r2, [r7, #4]
 8005626:	603b      	str	r3, [r7, #0]
 8005628:	460b      	mov	r3, r1
 800562a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005640:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2b08      	cmp	r3, #8
 8005646:	d006      	beq.n	8005656 <I2C_MasterRequestRead+0x3a>
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d003      	beq.n	8005656 <I2C_MasterRequestRead+0x3a>
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005654:	d108      	bne.n	8005668 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	e00b      	b.n	8005680 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566c:	2b11      	cmp	r3, #17
 800566e:	d107      	bne.n	8005680 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800567e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 fa11 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00d      	beq.n	80056b4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056a6:	d103      	bne.n	80056b0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e079      	b.n	80057a8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056bc:	d108      	bne.n	80056d0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80056be:	897b      	ldrh	r3, [r7, #10]
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	f043 0301 	orr.w	r3, r3, #1
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	611a      	str	r2, [r3, #16]
 80056ce:	e05f      	b.n	8005790 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80056d0:	897b      	ldrh	r3, [r7, #10]
 80056d2:	11db      	asrs	r3, r3, #7
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	f003 0306 	and.w	r3, r3, #6
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	f063 030f 	orn	r3, r3, #15
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	4930      	ldr	r1, [pc, #192]	; (80057b0 <I2C_MasterRequestRead+0x194>)
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 fa5a 	bl	8005ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e054      	b.n	80057a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80056fe:	897b      	ldrh	r3, [r7, #10]
 8005700:	b2da      	uxtb	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	4929      	ldr	r1, [pc, #164]	; (80057b4 <I2C_MasterRequestRead+0x198>)
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 fa4a 	bl	8005ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e044      	b.n	80057a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800571e:	2300      	movs	r3, #0
 8005720:	613b      	str	r3, [r7, #16]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	613b      	str	r3, [r7, #16]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	613b      	str	r3, [r7, #16]
 8005732:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005742:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 f9af 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00d      	beq.n	8005778 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800576a:	d103      	bne.n	8005774 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005772:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e017      	b.n	80057a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005778:	897b      	ldrh	r3, [r7, #10]
 800577a:	11db      	asrs	r3, r3, #7
 800577c:	b2db      	uxtb	r3, r3
 800577e:	f003 0306 	and.w	r3, r3, #6
 8005782:	b2db      	uxtb	r3, r3
 8005784:	f063 030e 	orn	r3, r3, #14
 8005788:	b2da      	uxtb	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	4907      	ldr	r1, [pc, #28]	; (80057b4 <I2C_MasterRequestRead+0x198>)
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 fa06 	bl	8005ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e000      	b.n	80057a8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	00010008 	.word	0x00010008
 80057b4:	00010002 	.word	0x00010002

080057b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b088      	sub	sp, #32
 80057bc:	af02      	add	r7, sp, #8
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	4608      	mov	r0, r1
 80057c2:	4611      	mov	r1, r2
 80057c4:	461a      	mov	r2, r3
 80057c6:	4603      	mov	r3, r0
 80057c8:	817b      	strh	r3, [r7, #10]
 80057ca:	460b      	mov	r3, r1
 80057cc:	813b      	strh	r3, [r7, #8]
 80057ce:	4613      	mov	r3, r2
 80057d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f000 f960 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00d      	beq.n	8005816 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005808:	d103      	bne.n	8005812 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005810:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e05f      	b.n	80058d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005816:	897b      	ldrh	r3, [r7, #10]
 8005818:	b2db      	uxtb	r3, r3
 800581a:	461a      	mov	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005824:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	6a3a      	ldr	r2, [r7, #32]
 800582a:	492d      	ldr	r1, [pc, #180]	; (80058e0 <I2C_RequestMemoryWrite+0x128>)
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 f9bb 	bl	8005ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d001      	beq.n	800583c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e04c      	b.n	80058d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800583c:	2300      	movs	r3, #0
 800583e:	617b      	str	r3, [r7, #20]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005854:	6a39      	ldr	r1, [r7, #32]
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 fa46 	bl	8005ce8 <I2C_WaitOnTXEFlagUntilTimeout>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00d      	beq.n	800587e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	2b04      	cmp	r3, #4
 8005868:	d107      	bne.n	800587a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005878:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e02b      	b.n	80058d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800587e:	88fb      	ldrh	r3, [r7, #6]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d105      	bne.n	8005890 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005884:	893b      	ldrh	r3, [r7, #8]
 8005886:	b2da      	uxtb	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	611a      	str	r2, [r3, #16]
 800588e:	e021      	b.n	80058d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005890:	893b      	ldrh	r3, [r7, #8]
 8005892:	0a1b      	lsrs	r3, r3, #8
 8005894:	b29b      	uxth	r3, r3
 8005896:	b2da      	uxtb	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800589e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a0:	6a39      	ldr	r1, [r7, #32]
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 fa20 	bl	8005ce8 <I2C_WaitOnTXEFlagUntilTimeout>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00d      	beq.n	80058ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	d107      	bne.n	80058c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e005      	b.n	80058d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058ca:	893b      	ldrh	r3, [r7, #8]
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	00010002 	.word	0x00010002

080058e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b088      	sub	sp, #32
 80058e8:	af02      	add	r7, sp, #8
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	4608      	mov	r0, r1
 80058ee:	4611      	mov	r1, r2
 80058f0:	461a      	mov	r2, r3
 80058f2:	4603      	mov	r3, r0
 80058f4:	817b      	strh	r3, [r7, #10]
 80058f6:	460b      	mov	r3, r1
 80058f8:	813b      	strh	r3, [r7, #8]
 80058fa:	4613      	mov	r3, r2
 80058fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800590c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800591c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	2200      	movs	r2, #0
 8005926:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 f8c2 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00d      	beq.n	8005952 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005944:	d103      	bne.n	800594e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800594c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e0aa      	b.n	8005aa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005952:	897b      	ldrh	r3, [r7, #10]
 8005954:	b2db      	uxtb	r3, r3
 8005956:	461a      	mov	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005960:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	6a3a      	ldr	r2, [r7, #32]
 8005966:	4952      	ldr	r1, [pc, #328]	; (8005ab0 <I2C_RequestMemoryRead+0x1cc>)
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f000 f91d 	bl	8005ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d001      	beq.n	8005978 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e097      	b.n	8005aa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005978:	2300      	movs	r3, #0
 800597a:	617b      	str	r3, [r7, #20]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800598e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005990:	6a39      	ldr	r1, [r7, #32]
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f000 f9a8 	bl	8005ce8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00d      	beq.n	80059ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d107      	bne.n	80059b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e076      	b.n	8005aa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059ba:	88fb      	ldrh	r3, [r7, #6]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d105      	bne.n	80059cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059c0:	893b      	ldrh	r3, [r7, #8]
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	611a      	str	r2, [r3, #16]
 80059ca:	e021      	b.n	8005a10 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059cc:	893b      	ldrh	r3, [r7, #8]
 80059ce:	0a1b      	lsrs	r3, r3, #8
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059dc:	6a39      	ldr	r1, [r7, #32]
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 f982 	bl	8005ce8 <I2C_WaitOnTXEFlagUntilTimeout>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00d      	beq.n	8005a06 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	d107      	bne.n	8005a02 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e050      	b.n	8005aa8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a06:	893b      	ldrh	r3, [r7, #8]
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a12:	6a39      	ldr	r1, [r7, #32]
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 f967 	bl	8005ce8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00d      	beq.n	8005a3c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d107      	bne.n	8005a38 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a36:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e035      	b.n	8005aa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a4a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 f82b 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00d      	beq.n	8005a80 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a72:	d103      	bne.n	8005a7c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e013      	b.n	8005aa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a80:	897b      	ldrh	r3, [r7, #10]
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	f043 0301 	orr.w	r3, r3, #1
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	6a3a      	ldr	r2, [r7, #32]
 8005a94:	4906      	ldr	r1, [pc, #24]	; (8005ab0 <I2C_RequestMemoryRead+0x1cc>)
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 f886 	bl	8005ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e000      	b.n	8005aa8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3718      	adds	r7, #24
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	00010002 	.word	0x00010002

08005ab4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	603b      	str	r3, [r7, #0]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ac4:	e048      	b.n	8005b58 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005acc:	d044      	beq.n	8005b58 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ace:	f7fd ff8d 	bl	80039ec <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d302      	bcc.n	8005ae4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d139      	bne.n	8005b58 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	0c1b      	lsrs	r3, r3, #16
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d10d      	bne.n	8005b0a <I2C_WaitOnFlagUntilTimeout+0x56>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	43da      	mvns	r2, r3
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	4013      	ands	r3, r2
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	bf0c      	ite	eq
 8005b00:	2301      	moveq	r3, #1
 8005b02:	2300      	movne	r3, #0
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	461a      	mov	r2, r3
 8005b08:	e00c      	b.n	8005b24 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	43da      	mvns	r2, r3
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	4013      	ands	r3, r2
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	bf0c      	ite	eq
 8005b1c:	2301      	moveq	r3, #1
 8005b1e:	2300      	movne	r3, #0
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	461a      	mov	r2, r3
 8005b24:	79fb      	ldrb	r3, [r7, #7]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d116      	bne.n	8005b58 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2220      	movs	r2, #32
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b44:	f043 0220 	orr.w	r2, r3, #32
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e023      	b.n	8005ba0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	0c1b      	lsrs	r3, r3, #16
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d10d      	bne.n	8005b7e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	43da      	mvns	r2, r3
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	bf0c      	ite	eq
 8005b74:	2301      	moveq	r3, #1
 8005b76:	2300      	movne	r3, #0
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	e00c      	b.n	8005b98 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	43da      	mvns	r2, r3
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	4013      	ands	r3, r2
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	bf0c      	ite	eq
 8005b90:	2301      	moveq	r3, #1
 8005b92:	2300      	movne	r3, #0
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	461a      	mov	r2, r3
 8005b98:	79fb      	ldrb	r3, [r7, #7]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d093      	beq.n	8005ac6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bb6:	e071      	b.n	8005c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc6:	d123      	bne.n	8005c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bd6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005be0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2220      	movs	r2, #32
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfc:	f043 0204 	orr.w	r2, r3, #4
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e067      	b.n	8005ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c16:	d041      	beq.n	8005c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c18:	f7fd fee8 	bl	80039ec <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d302      	bcc.n	8005c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d136      	bne.n	8005c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	0c1b      	lsrs	r3, r3, #16
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d10c      	bne.n	8005c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	43da      	mvns	r2, r3
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	4013      	ands	r3, r2
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	bf14      	ite	ne
 8005c4a:	2301      	movne	r3, #1
 8005c4c:	2300      	moveq	r3, #0
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	e00b      	b.n	8005c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	43da      	mvns	r2, r3
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	bf14      	ite	ne
 8005c64:	2301      	movne	r3, #1
 8005c66:	2300      	moveq	r3, #0
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d016      	beq.n	8005c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c88:	f043 0220 	orr.w	r2, r3, #32
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e021      	b.n	8005ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	0c1b      	lsrs	r3, r3, #16
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d10c      	bne.n	8005cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	43da      	mvns	r2, r3
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	bf14      	ite	ne
 8005cb8:	2301      	movne	r3, #1
 8005cba:	2300      	moveq	r3, #0
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	e00b      	b.n	8005cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	43da      	mvns	r2, r3
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	bf14      	ite	ne
 8005cd2:	2301      	movne	r3, #1
 8005cd4:	2300      	moveq	r3, #0
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f47f af6d 	bne.w	8005bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cf4:	e034      	b.n	8005d60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f000 f8e3 	bl	8005ec2 <I2C_IsAcknowledgeFailed>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e034      	b.n	8005d70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0c:	d028      	beq.n	8005d60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d0e:	f7fd fe6d 	bl	80039ec <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d302      	bcc.n	8005d24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d11d      	bne.n	8005d60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d2e:	2b80      	cmp	r3, #128	; 0x80
 8005d30:	d016      	beq.n	8005d60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4c:	f043 0220 	orr.w	r2, r3, #32
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e007      	b.n	8005d70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6a:	2b80      	cmp	r3, #128	; 0x80
 8005d6c:	d1c3      	bne.n	8005cf6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d84:	e034      	b.n	8005df0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 f89b 	bl	8005ec2 <I2C_IsAcknowledgeFailed>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e034      	b.n	8005e00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9c:	d028      	beq.n	8005df0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d9e:	f7fd fe25 	bl	80039ec <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d302      	bcc.n	8005db4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d11d      	bne.n	8005df0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	f003 0304 	and.w	r3, r3, #4
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	d016      	beq.n	8005df0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ddc:	f043 0220 	orr.w	r2, r3, #32
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e007      	b.n	8005e00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	f003 0304 	and.w	r3, r3, #4
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	d1c3      	bne.n	8005d86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e14:	e049      	b.n	8005eaa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	f003 0310 	and.w	r3, r3, #16
 8005e20:	2b10      	cmp	r3, #16
 8005e22:	d119      	bne.n	8005e58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f06f 0210 	mvn.w	r2, #16
 8005e2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2220      	movs	r2, #32
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e030      	b.n	8005eba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e58:	f7fd fdc8 	bl	80039ec <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d302      	bcc.n	8005e6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d11d      	bne.n	8005eaa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e78:	2b40      	cmp	r3, #64	; 0x40
 8005e7a:	d016      	beq.n	8005eaa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2220      	movs	r2, #32
 8005e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	f043 0220 	orr.w	r2, r3, #32
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e007      	b.n	8005eba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb4:	2b40      	cmp	r3, #64	; 0x40
 8005eb6:	d1ae      	bne.n	8005e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ed8:	d11b      	bne.n	8005f12 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ee2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2220      	movs	r2, #32
 8005eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	f043 0204 	orr.w	r2, r3, #4
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e000      	b.n	8005f14 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bc80      	pop	{r7}
 8005f1c:	4770      	bx	lr
	...

08005f20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e272      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 8087 	beq.w	800604e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f40:	4b92      	ldr	r3, [pc, #584]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f003 030c 	and.w	r3, r3, #12
 8005f48:	2b04      	cmp	r3, #4
 8005f4a:	d00c      	beq.n	8005f66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005f4c:	4b8f      	ldr	r3, [pc, #572]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f003 030c 	and.w	r3, r3, #12
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d112      	bne.n	8005f7e <HAL_RCC_OscConfig+0x5e>
 8005f58:	4b8c      	ldr	r3, [pc, #560]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f64:	d10b      	bne.n	8005f7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f66:	4b89      	ldr	r3, [pc, #548]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d06c      	beq.n	800604c <HAL_RCC_OscConfig+0x12c>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d168      	bne.n	800604c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e24c      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f86:	d106      	bne.n	8005f96 <HAL_RCC_OscConfig+0x76>
 8005f88:	4b80      	ldr	r3, [pc, #512]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a7f      	ldr	r2, [pc, #508]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f92:	6013      	str	r3, [r2, #0]
 8005f94:	e02e      	b.n	8005ff4 <HAL_RCC_OscConfig+0xd4>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10c      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x98>
 8005f9e:	4b7b      	ldr	r3, [pc, #492]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a7a      	ldr	r2, [pc, #488]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fa8:	6013      	str	r3, [r2, #0]
 8005faa:	4b78      	ldr	r3, [pc, #480]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a77      	ldr	r2, [pc, #476]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005fb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fb4:	6013      	str	r3, [r2, #0]
 8005fb6:	e01d      	b.n	8005ff4 <HAL_RCC_OscConfig+0xd4>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fc0:	d10c      	bne.n	8005fdc <HAL_RCC_OscConfig+0xbc>
 8005fc2:	4b72      	ldr	r3, [pc, #456]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a71      	ldr	r2, [pc, #452]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	4b6f      	ldr	r3, [pc, #444]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a6e      	ldr	r2, [pc, #440]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	e00b      	b.n	8005ff4 <HAL_RCC_OscConfig+0xd4>
 8005fdc:	4b6b      	ldr	r3, [pc, #428]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a6a      	ldr	r2, [pc, #424]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fe6:	6013      	str	r3, [r2, #0]
 8005fe8:	4b68      	ldr	r3, [pc, #416]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a67      	ldr	r2, [pc, #412]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8005fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ff2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d013      	beq.n	8006024 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ffc:	f7fd fcf6 	bl	80039ec <HAL_GetTick>
 8006000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006002:	e008      	b.n	8006016 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006004:	f7fd fcf2 	bl	80039ec <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b64      	cmp	r3, #100	; 0x64
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e200      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006016:	4b5d      	ldr	r3, [pc, #372]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0f0      	beq.n	8006004 <HAL_RCC_OscConfig+0xe4>
 8006022:	e014      	b.n	800604e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006024:	f7fd fce2 	bl	80039ec <HAL_GetTick>
 8006028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800602a:	e008      	b.n	800603e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800602c:	f7fd fcde 	bl	80039ec <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b64      	cmp	r3, #100	; 0x64
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e1ec      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800603e:	4b53      	ldr	r3, [pc, #332]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1f0      	bne.n	800602c <HAL_RCC_OscConfig+0x10c>
 800604a:	e000      	b.n	800604e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800604c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0302 	and.w	r3, r3, #2
 8006056:	2b00      	cmp	r3, #0
 8006058:	d063      	beq.n	8006122 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800605a:	4b4c      	ldr	r3, [pc, #304]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f003 030c 	and.w	r3, r3, #12
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00b      	beq.n	800607e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006066:	4b49      	ldr	r3, [pc, #292]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f003 030c 	and.w	r3, r3, #12
 800606e:	2b08      	cmp	r3, #8
 8006070:	d11c      	bne.n	80060ac <HAL_RCC_OscConfig+0x18c>
 8006072:	4b46      	ldr	r3, [pc, #280]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d116      	bne.n	80060ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800607e:	4b43      	ldr	r3, [pc, #268]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d005      	beq.n	8006096 <HAL_RCC_OscConfig+0x176>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d001      	beq.n	8006096 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e1c0      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006096:	4b3d      	ldr	r3, [pc, #244]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	4939      	ldr	r1, [pc, #228]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060aa:	e03a      	b.n	8006122 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d020      	beq.n	80060f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060b4:	4b36      	ldr	r3, [pc, #216]	; (8006190 <HAL_RCC_OscConfig+0x270>)
 80060b6:	2201      	movs	r2, #1
 80060b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ba:	f7fd fc97 	bl	80039ec <HAL_GetTick>
 80060be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060c0:	e008      	b.n	80060d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060c2:	f7fd fc93 	bl	80039ec <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e1a1      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060d4:	4b2d      	ldr	r3, [pc, #180]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0f0      	beq.n	80060c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060e0:	4b2a      	ldr	r3, [pc, #168]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	00db      	lsls	r3, r3, #3
 80060ee:	4927      	ldr	r1, [pc, #156]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	600b      	str	r3, [r1, #0]
 80060f4:	e015      	b.n	8006122 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060f6:	4b26      	ldr	r3, [pc, #152]	; (8006190 <HAL_RCC_OscConfig+0x270>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060fc:	f7fd fc76 	bl	80039ec <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006102:	e008      	b.n	8006116 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006104:	f7fd fc72 	bl	80039ec <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e180      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006116:	4b1d      	ldr	r3, [pc, #116]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1f0      	bne.n	8006104 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0308 	and.w	r3, r3, #8
 800612a:	2b00      	cmp	r3, #0
 800612c:	d03a      	beq.n	80061a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d019      	beq.n	800616a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006136:	4b17      	ldr	r3, [pc, #92]	; (8006194 <HAL_RCC_OscConfig+0x274>)
 8006138:	2201      	movs	r2, #1
 800613a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800613c:	f7fd fc56 	bl	80039ec <HAL_GetTick>
 8006140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006142:	e008      	b.n	8006156 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006144:	f7fd fc52 	bl	80039ec <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	2b02      	cmp	r3, #2
 8006150:	d901      	bls.n	8006156 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e160      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006156:	4b0d      	ldr	r3, [pc, #52]	; (800618c <HAL_RCC_OscConfig+0x26c>)
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d0f0      	beq.n	8006144 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006162:	2001      	movs	r0, #1
 8006164:	f000 face 	bl	8006704 <RCC_Delay>
 8006168:	e01c      	b.n	80061a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800616a:	4b0a      	ldr	r3, [pc, #40]	; (8006194 <HAL_RCC_OscConfig+0x274>)
 800616c:	2200      	movs	r2, #0
 800616e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006170:	f7fd fc3c 	bl	80039ec <HAL_GetTick>
 8006174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006176:	e00f      	b.n	8006198 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006178:	f7fd fc38 	bl	80039ec <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b02      	cmp	r3, #2
 8006184:	d908      	bls.n	8006198 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e146      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
 800618a:	bf00      	nop
 800618c:	40021000 	.word	0x40021000
 8006190:	42420000 	.word	0x42420000
 8006194:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006198:	4b92      	ldr	r3, [pc, #584]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 800619a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e9      	bne.n	8006178 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 80a6 	beq.w	80062fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061b2:	2300      	movs	r3, #0
 80061b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061b6:	4b8b      	ldr	r3, [pc, #556]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10d      	bne.n	80061de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061c2:	4b88      	ldr	r3, [pc, #544]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	4a87      	ldr	r2, [pc, #540]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 80061c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061cc:	61d3      	str	r3, [r2, #28]
 80061ce:	4b85      	ldr	r3, [pc, #532]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 80061d0:	69db      	ldr	r3, [r3, #28]
 80061d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061d6:	60bb      	str	r3, [r7, #8]
 80061d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061da:	2301      	movs	r3, #1
 80061dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061de:	4b82      	ldr	r3, [pc, #520]	; (80063e8 <HAL_RCC_OscConfig+0x4c8>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d118      	bne.n	800621c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061ea:	4b7f      	ldr	r3, [pc, #508]	; (80063e8 <HAL_RCC_OscConfig+0x4c8>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a7e      	ldr	r2, [pc, #504]	; (80063e8 <HAL_RCC_OscConfig+0x4c8>)
 80061f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061f6:	f7fd fbf9 	bl	80039ec <HAL_GetTick>
 80061fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061fc:	e008      	b.n	8006210 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061fe:	f7fd fbf5 	bl	80039ec <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b64      	cmp	r3, #100	; 0x64
 800620a:	d901      	bls.n	8006210 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e103      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006210:	4b75      	ldr	r3, [pc, #468]	; (80063e8 <HAL_RCC_OscConfig+0x4c8>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006218:	2b00      	cmp	r3, #0
 800621a:	d0f0      	beq.n	80061fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d106      	bne.n	8006232 <HAL_RCC_OscConfig+0x312>
 8006224:	4b6f      	ldr	r3, [pc, #444]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	4a6e      	ldr	r2, [pc, #440]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 800622a:	f043 0301 	orr.w	r3, r3, #1
 800622e:	6213      	str	r3, [r2, #32]
 8006230:	e02d      	b.n	800628e <HAL_RCC_OscConfig+0x36e>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10c      	bne.n	8006254 <HAL_RCC_OscConfig+0x334>
 800623a:	4b6a      	ldr	r3, [pc, #424]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	4a69      	ldr	r2, [pc, #420]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 8006240:	f023 0301 	bic.w	r3, r3, #1
 8006244:	6213      	str	r3, [r2, #32]
 8006246:	4b67      	ldr	r3, [pc, #412]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	4a66      	ldr	r2, [pc, #408]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 800624c:	f023 0304 	bic.w	r3, r3, #4
 8006250:	6213      	str	r3, [r2, #32]
 8006252:	e01c      	b.n	800628e <HAL_RCC_OscConfig+0x36e>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	2b05      	cmp	r3, #5
 800625a:	d10c      	bne.n	8006276 <HAL_RCC_OscConfig+0x356>
 800625c:	4b61      	ldr	r3, [pc, #388]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	4a60      	ldr	r2, [pc, #384]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 8006262:	f043 0304 	orr.w	r3, r3, #4
 8006266:	6213      	str	r3, [r2, #32]
 8006268:	4b5e      	ldr	r3, [pc, #376]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 800626a:	6a1b      	ldr	r3, [r3, #32]
 800626c:	4a5d      	ldr	r2, [pc, #372]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 800626e:	f043 0301 	orr.w	r3, r3, #1
 8006272:	6213      	str	r3, [r2, #32]
 8006274:	e00b      	b.n	800628e <HAL_RCC_OscConfig+0x36e>
 8006276:	4b5b      	ldr	r3, [pc, #364]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	4a5a      	ldr	r2, [pc, #360]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 800627c:	f023 0301 	bic.w	r3, r3, #1
 8006280:	6213      	str	r3, [r2, #32]
 8006282:	4b58      	ldr	r3, [pc, #352]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	4a57      	ldr	r2, [pc, #348]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 8006288:	f023 0304 	bic.w	r3, r3, #4
 800628c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d015      	beq.n	80062c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006296:	f7fd fba9 	bl	80039ec <HAL_GetTick>
 800629a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800629c:	e00a      	b.n	80062b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800629e:	f7fd fba5 	bl	80039ec <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d901      	bls.n	80062b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e0b1      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062b4:	4b4b      	ldr	r3, [pc, #300]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0ee      	beq.n	800629e <HAL_RCC_OscConfig+0x37e>
 80062c0:	e014      	b.n	80062ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062c2:	f7fd fb93 	bl	80039ec <HAL_GetTick>
 80062c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062c8:	e00a      	b.n	80062e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ca:	f7fd fb8f 	bl	80039ec <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d8:	4293      	cmp	r3, r2
 80062da:	d901      	bls.n	80062e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e09b      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062e0:	4b40      	ldr	r3, [pc, #256]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1ee      	bne.n	80062ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80062ec:	7dfb      	ldrb	r3, [r7, #23]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d105      	bne.n	80062fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062f2:	4b3c      	ldr	r3, [pc, #240]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	4a3b      	ldr	r2, [pc, #236]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 80062f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	2b00      	cmp	r3, #0
 8006304:	f000 8087 	beq.w	8006416 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006308:	4b36      	ldr	r3, [pc, #216]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f003 030c 	and.w	r3, r3, #12
 8006310:	2b08      	cmp	r3, #8
 8006312:	d061      	beq.n	80063d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	2b02      	cmp	r3, #2
 800631a:	d146      	bne.n	80063aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800631c:	4b33      	ldr	r3, [pc, #204]	; (80063ec <HAL_RCC_OscConfig+0x4cc>)
 800631e:	2200      	movs	r2, #0
 8006320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006322:	f7fd fb63 	bl	80039ec <HAL_GetTick>
 8006326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006328:	e008      	b.n	800633c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800632a:	f7fd fb5f 	bl	80039ec <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d901      	bls.n	800633c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e06d      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800633c:	4b29      	ldr	r3, [pc, #164]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1f0      	bne.n	800632a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006350:	d108      	bne.n	8006364 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006352:	4b24      	ldr	r3, [pc, #144]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	4921      	ldr	r1, [pc, #132]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 8006360:	4313      	orrs	r3, r2
 8006362:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006364:	4b1f      	ldr	r3, [pc, #124]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a19      	ldr	r1, [r3, #32]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	430b      	orrs	r3, r1
 8006376:	491b      	ldr	r1, [pc, #108]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 8006378:	4313      	orrs	r3, r2
 800637a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800637c:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <HAL_RCC_OscConfig+0x4cc>)
 800637e:	2201      	movs	r2, #1
 8006380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006382:	f7fd fb33 	bl	80039ec <HAL_GetTick>
 8006386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006388:	e008      	b.n	800639c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800638a:	f7fd fb2f 	bl	80039ec <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	2b02      	cmp	r3, #2
 8006396:	d901      	bls.n	800639c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e03d      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800639c:	4b11      	ldr	r3, [pc, #68]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d0f0      	beq.n	800638a <HAL_RCC_OscConfig+0x46a>
 80063a8:	e035      	b.n	8006416 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063aa:	4b10      	ldr	r3, [pc, #64]	; (80063ec <HAL_RCC_OscConfig+0x4cc>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b0:	f7fd fb1c 	bl	80039ec <HAL_GetTick>
 80063b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063b6:	e008      	b.n	80063ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063b8:	f7fd fb18 	bl	80039ec <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d901      	bls.n	80063ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e026      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063ca:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <HAL_RCC_OscConfig+0x4c4>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1f0      	bne.n	80063b8 <HAL_RCC_OscConfig+0x498>
 80063d6:	e01e      	b.n	8006416 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	69db      	ldr	r3, [r3, #28]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d107      	bne.n	80063f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e019      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
 80063e4:	40021000 	.word	0x40021000
 80063e8:	40007000 	.word	0x40007000
 80063ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80063f0:	4b0b      	ldr	r3, [pc, #44]	; (8006420 <HAL_RCC_OscConfig+0x500>)
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a1b      	ldr	r3, [r3, #32]
 8006400:	429a      	cmp	r2, r3
 8006402:	d106      	bne.n	8006412 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800640e:	429a      	cmp	r2, r3
 8006410:	d001      	beq.n	8006416 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e000      	b.n	8006418 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3718      	adds	r7, #24
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	40021000 	.word	0x40021000

08006424 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d101      	bne.n	8006438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e0d0      	b.n	80065da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006438:	4b6a      	ldr	r3, [pc, #424]	; (80065e4 <HAL_RCC_ClockConfig+0x1c0>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0307 	and.w	r3, r3, #7
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	429a      	cmp	r2, r3
 8006444:	d910      	bls.n	8006468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006446:	4b67      	ldr	r3, [pc, #412]	; (80065e4 <HAL_RCC_ClockConfig+0x1c0>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f023 0207 	bic.w	r2, r3, #7
 800644e:	4965      	ldr	r1, [pc, #404]	; (80065e4 <HAL_RCC_ClockConfig+0x1c0>)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	4313      	orrs	r3, r2
 8006454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006456:	4b63      	ldr	r3, [pc, #396]	; (80065e4 <HAL_RCC_ClockConfig+0x1c0>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	429a      	cmp	r2, r3
 8006462:	d001      	beq.n	8006468 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e0b8      	b.n	80065da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b00      	cmp	r3, #0
 8006472:	d020      	beq.n	80064b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0304 	and.w	r3, r3, #4
 800647c:	2b00      	cmp	r3, #0
 800647e:	d005      	beq.n	800648c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006480:	4b59      	ldr	r3, [pc, #356]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	4a58      	ldr	r2, [pc, #352]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 8006486:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800648a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0308 	and.w	r3, r3, #8
 8006494:	2b00      	cmp	r3, #0
 8006496:	d005      	beq.n	80064a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006498:	4b53      	ldr	r3, [pc, #332]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	4a52      	ldr	r2, [pc, #328]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 800649e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80064a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064a4:	4b50      	ldr	r3, [pc, #320]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	494d      	ldr	r1, [pc, #308]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d040      	beq.n	8006544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d107      	bne.n	80064da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ca:	4b47      	ldr	r3, [pc, #284]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d115      	bne.n	8006502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e07f      	b.n	80065da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d107      	bne.n	80064f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064e2:	4b41      	ldr	r3, [pc, #260]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d109      	bne.n	8006502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e073      	b.n	80065da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064f2:	4b3d      	ldr	r3, [pc, #244]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e06b      	b.n	80065da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006502:	4b39      	ldr	r3, [pc, #228]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f023 0203 	bic.w	r2, r3, #3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	4936      	ldr	r1, [pc, #216]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 8006510:	4313      	orrs	r3, r2
 8006512:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006514:	f7fd fa6a 	bl	80039ec <HAL_GetTick>
 8006518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800651a:	e00a      	b.n	8006532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800651c:	f7fd fa66 	bl	80039ec <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	f241 3288 	movw	r2, #5000	; 0x1388
 800652a:	4293      	cmp	r3, r2
 800652c:	d901      	bls.n	8006532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e053      	b.n	80065da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006532:	4b2d      	ldr	r3, [pc, #180]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f003 020c 	and.w	r2, r3, #12
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	429a      	cmp	r2, r3
 8006542:	d1eb      	bne.n	800651c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006544:	4b27      	ldr	r3, [pc, #156]	; (80065e4 <HAL_RCC_ClockConfig+0x1c0>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0307 	and.w	r3, r3, #7
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	429a      	cmp	r2, r3
 8006550:	d210      	bcs.n	8006574 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006552:	4b24      	ldr	r3, [pc, #144]	; (80065e4 <HAL_RCC_ClockConfig+0x1c0>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f023 0207 	bic.w	r2, r3, #7
 800655a:	4922      	ldr	r1, [pc, #136]	; (80065e4 <HAL_RCC_ClockConfig+0x1c0>)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	4313      	orrs	r3, r2
 8006560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006562:	4b20      	ldr	r3, [pc, #128]	; (80065e4 <HAL_RCC_ClockConfig+0x1c0>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0307 	and.w	r3, r3, #7
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	429a      	cmp	r2, r3
 800656e:	d001      	beq.n	8006574 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e032      	b.n	80065da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0304 	and.w	r3, r3, #4
 800657c:	2b00      	cmp	r3, #0
 800657e:	d008      	beq.n	8006592 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006580:	4b19      	ldr	r3, [pc, #100]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	4916      	ldr	r1, [pc, #88]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 800658e:	4313      	orrs	r3, r2
 8006590:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0308 	and.w	r3, r3, #8
 800659a:	2b00      	cmp	r3, #0
 800659c:	d009      	beq.n	80065b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800659e:	4b12      	ldr	r3, [pc, #72]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	00db      	lsls	r3, r3, #3
 80065ac:	490e      	ldr	r1, [pc, #56]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80065b2:	f000 f821 	bl	80065f8 <HAL_RCC_GetSysClockFreq>
 80065b6:	4602      	mov	r2, r0
 80065b8:	4b0b      	ldr	r3, [pc, #44]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	091b      	lsrs	r3, r3, #4
 80065be:	f003 030f 	and.w	r3, r3, #15
 80065c2:	490a      	ldr	r1, [pc, #40]	; (80065ec <HAL_RCC_ClockConfig+0x1c8>)
 80065c4:	5ccb      	ldrb	r3, [r1, r3]
 80065c6:	fa22 f303 	lsr.w	r3, r2, r3
 80065ca:	4a09      	ldr	r2, [pc, #36]	; (80065f0 <HAL_RCC_ClockConfig+0x1cc>)
 80065cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80065ce:	4b09      	ldr	r3, [pc, #36]	; (80065f4 <HAL_RCC_ClockConfig+0x1d0>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fd f9c8 	bl	8003968 <HAL_InitTick>

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	40022000 	.word	0x40022000
 80065e8:	40021000 	.word	0x40021000
 80065ec:	080084bc 	.word	0x080084bc
 80065f0:	20000008 	.word	0x20000008
 80065f4:	2000000c 	.word	0x2000000c

080065f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80065fe:	2300      	movs	r3, #0
 8006600:	60fb      	str	r3, [r7, #12]
 8006602:	2300      	movs	r3, #0
 8006604:	60bb      	str	r3, [r7, #8]
 8006606:	2300      	movs	r3, #0
 8006608:	617b      	str	r3, [r7, #20]
 800660a:	2300      	movs	r3, #0
 800660c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800660e:	2300      	movs	r3, #0
 8006610:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006612:	4b1e      	ldr	r3, [pc, #120]	; (800668c <HAL_RCC_GetSysClockFreq+0x94>)
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f003 030c 	and.w	r3, r3, #12
 800661e:	2b04      	cmp	r3, #4
 8006620:	d002      	beq.n	8006628 <HAL_RCC_GetSysClockFreq+0x30>
 8006622:	2b08      	cmp	r3, #8
 8006624:	d003      	beq.n	800662e <HAL_RCC_GetSysClockFreq+0x36>
 8006626:	e027      	b.n	8006678 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006628:	4b19      	ldr	r3, [pc, #100]	; (8006690 <HAL_RCC_GetSysClockFreq+0x98>)
 800662a:	613b      	str	r3, [r7, #16]
      break;
 800662c:	e027      	b.n	800667e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	0c9b      	lsrs	r3, r3, #18
 8006632:	f003 030f 	and.w	r3, r3, #15
 8006636:	4a17      	ldr	r2, [pc, #92]	; (8006694 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006638:	5cd3      	ldrb	r3, [r2, r3]
 800663a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d010      	beq.n	8006668 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006646:	4b11      	ldr	r3, [pc, #68]	; (800668c <HAL_RCC_GetSysClockFreq+0x94>)
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	0c5b      	lsrs	r3, r3, #17
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	4a11      	ldr	r2, [pc, #68]	; (8006698 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006652:	5cd3      	ldrb	r3, [r2, r3]
 8006654:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a0d      	ldr	r2, [pc, #52]	; (8006690 <HAL_RCC_GetSysClockFreq+0x98>)
 800665a:	fb03 f202 	mul.w	r2, r3, r2
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	fbb2 f3f3 	udiv	r3, r2, r3
 8006664:	617b      	str	r3, [r7, #20]
 8006666:	e004      	b.n	8006672 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a0c      	ldr	r2, [pc, #48]	; (800669c <HAL_RCC_GetSysClockFreq+0xa4>)
 800666c:	fb02 f303 	mul.w	r3, r2, r3
 8006670:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	613b      	str	r3, [r7, #16]
      break;
 8006676:	e002      	b.n	800667e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006678:	4b05      	ldr	r3, [pc, #20]	; (8006690 <HAL_RCC_GetSysClockFreq+0x98>)
 800667a:	613b      	str	r3, [r7, #16]
      break;
 800667c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800667e:	693b      	ldr	r3, [r7, #16]
}
 8006680:	4618      	mov	r0, r3
 8006682:	371c      	adds	r7, #28
 8006684:	46bd      	mov	sp, r7
 8006686:	bc80      	pop	{r7}
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	40021000 	.word	0x40021000
 8006690:	007a1200 	.word	0x007a1200
 8006694:	080084d4 	.word	0x080084d4
 8006698:	080084e4 	.word	0x080084e4
 800669c:	003d0900 	.word	0x003d0900

080066a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066a0:	b480      	push	{r7}
 80066a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066a4:	4b02      	ldr	r3, [pc, #8]	; (80066b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80066a6:	681b      	ldr	r3, [r3, #0]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bc80      	pop	{r7}
 80066ae:	4770      	bx	lr
 80066b0:	20000008 	.word	0x20000008

080066b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80066b8:	f7ff fff2 	bl	80066a0 <HAL_RCC_GetHCLKFreq>
 80066bc:	4602      	mov	r2, r0
 80066be:	4b05      	ldr	r3, [pc, #20]	; (80066d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	0a1b      	lsrs	r3, r3, #8
 80066c4:	f003 0307 	and.w	r3, r3, #7
 80066c8:	4903      	ldr	r1, [pc, #12]	; (80066d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066ca:	5ccb      	ldrb	r3, [r1, r3]
 80066cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	40021000 	.word	0x40021000
 80066d8:	080084cc 	.word	0x080084cc

080066dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80066e0:	f7ff ffde 	bl	80066a0 <HAL_RCC_GetHCLKFreq>
 80066e4:	4602      	mov	r2, r0
 80066e6:	4b05      	ldr	r3, [pc, #20]	; (80066fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	0adb      	lsrs	r3, r3, #11
 80066ec:	f003 0307 	and.w	r3, r3, #7
 80066f0:	4903      	ldr	r1, [pc, #12]	; (8006700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066f2:	5ccb      	ldrb	r3, [r1, r3]
 80066f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	40021000 	.word	0x40021000
 8006700:	080084cc 	.word	0x080084cc

08006704 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800670c:	4b0a      	ldr	r3, [pc, #40]	; (8006738 <RCC_Delay+0x34>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a0a      	ldr	r2, [pc, #40]	; (800673c <RCC_Delay+0x38>)
 8006712:	fba2 2303 	umull	r2, r3, r2, r3
 8006716:	0a5b      	lsrs	r3, r3, #9
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	fb02 f303 	mul.w	r3, r2, r3
 800671e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006720:	bf00      	nop
  }
  while (Delay --);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	1e5a      	subs	r2, r3, #1
 8006726:	60fa      	str	r2, [r7, #12]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1f9      	bne.n	8006720 <RCC_Delay+0x1c>
}
 800672c:	bf00      	nop
 800672e:	bf00      	nop
 8006730:	3714      	adds	r7, #20
 8006732:	46bd      	mov	sp, r7
 8006734:	bc80      	pop	{r7}
 8006736:	4770      	bx	lr
 8006738:	20000008 	.word	0x20000008
 800673c:	10624dd3 	.word	0x10624dd3

08006740 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d101      	bne.n	8006752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e042      	b.n	80067d8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d106      	bne.n	800676c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f7fc ffcc 	bl	8003704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2224      	movs	r2, #36	; 0x24
 8006770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68da      	ldr	r2, [r3, #12]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006782:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fdc3 	bl	8007310 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	691a      	ldr	r2, [r3, #16]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006798:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	695a      	ldr	r2, [r3, #20]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68da      	ldr	r2, [r3, #12]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2220      	movs	r2, #32
 80067c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2220      	movs	r2, #32
 80067cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b08c      	sub	sp, #48	; 0x30
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	4613      	mov	r3, r2
 80067ec:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b20      	cmp	r3, #32
 80067f8:	d156      	bne.n	80068a8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d002      	beq.n	8006806 <HAL_UART_Transmit_DMA+0x26>
 8006800:	88fb      	ldrh	r3, [r7, #6]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e04f      	b.n	80068aa <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	88fa      	ldrh	r2, [r7, #6]
 8006814:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	88fa      	ldrh	r2, [r7, #6]
 800681a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2221      	movs	r2, #33	; 0x21
 8006826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682e:	4a21      	ldr	r2, [pc, #132]	; (80068b4 <HAL_UART_Transmit_DMA+0xd4>)
 8006830:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006836:	4a20      	ldr	r2, [pc, #128]	; (80068b8 <HAL_UART_Transmit_DMA+0xd8>)
 8006838:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683e:	4a1f      	ldr	r2, [pc, #124]	; (80068bc <HAL_UART_Transmit_DMA+0xdc>)
 8006840:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006846:	2200      	movs	r2, #0
 8006848:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800684a:	f107 0308 	add.w	r3, r7, #8
 800684e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006856:	6819      	ldr	r1, [r3, #0]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3304      	adds	r3, #4
 800685e:	461a      	mov	r2, r3
 8006860:	88fb      	ldrh	r3, [r7, #6]
 8006862:	f7fd fa35 	bl	8003cd0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800686e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3314      	adds	r3, #20
 8006876:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	e853 3f00 	ldrex	r3, [r3]
 800687e:	617b      	str	r3, [r7, #20]
   return(result);
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006886:	62bb      	str	r3, [r7, #40]	; 0x28
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3314      	adds	r3, #20
 800688e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006890:	627a      	str	r2, [r7, #36]	; 0x24
 8006892:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006894:	6a39      	ldr	r1, [r7, #32]
 8006896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006898:	e841 2300 	strex	r3, r2, [r1]
 800689c:	61fb      	str	r3, [r7, #28]
   return(result);
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1e5      	bne.n	8006870 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80068a4:	2300      	movs	r3, #0
 80068a6:	e000      	b.n	80068aa <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80068a8:	2302      	movs	r3, #2
  }
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3730      	adds	r7, #48	; 0x30
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	08006e43 	.word	0x08006e43
 80068b8:	08006edd 	.word	0x08006edd
 80068bc:	08006ef9 	.word	0x08006ef9

080068c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b0ba      	sub	sp, #232	; 0xe8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80068f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f6:	f003 030f 	and.w	r3, r3, #15
 80068fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80068fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10f      	bne.n	8006926 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800690a:	f003 0320 	and.w	r3, r3, #32
 800690e:	2b00      	cmp	r3, #0
 8006910:	d009      	beq.n	8006926 <HAL_UART_IRQHandler+0x66>
 8006912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006916:	f003 0320 	and.w	r3, r3, #32
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fc38 	bl	8007194 <UART_Receive_IT>
      return;
 8006924:	e25b      	b.n	8006dde <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006926:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 80de 	beq.w	8006aec <HAL_UART_IRQHandler+0x22c>
 8006930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	2b00      	cmp	r3, #0
 800693a:	d106      	bne.n	800694a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800693c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006940:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 80d1 	beq.w	8006aec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800694a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00b      	beq.n	800696e <HAL_UART_IRQHandler+0xae>
 8006956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800695a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695e:	2b00      	cmp	r3, #0
 8006960:	d005      	beq.n	800696e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006966:	f043 0201 	orr.w	r2, r3, #1
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800696e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006972:	f003 0304 	and.w	r3, r3, #4
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00b      	beq.n	8006992 <HAL_UART_IRQHandler+0xd2>
 800697a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b00      	cmp	r3, #0
 8006984:	d005      	beq.n	8006992 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800698a:	f043 0202 	orr.w	r2, r3, #2
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00b      	beq.n	80069b6 <HAL_UART_IRQHandler+0xf6>
 800699e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d005      	beq.n	80069b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ae:	f043 0204 	orr.w	r2, r3, #4
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80069b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ba:	f003 0308 	and.w	r3, r3, #8
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d011      	beq.n	80069e6 <HAL_UART_IRQHandler+0x126>
 80069c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d105      	bne.n	80069da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80069ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d005      	beq.n	80069e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069de:	f043 0208 	orr.w	r2, r3, #8
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f000 81f2 	beq.w	8006dd4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069f4:	f003 0320 	and.w	r3, r3, #32
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d008      	beq.n	8006a0e <HAL_UART_IRQHandler+0x14e>
 80069fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a00:	f003 0320 	and.w	r3, r3, #32
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d002      	beq.n	8006a0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fbc3 	bl	8007194 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	695b      	ldr	r3, [r3, #20]
 8006a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	bf14      	ite	ne
 8006a1c:	2301      	movne	r3, #1
 8006a1e:	2300      	moveq	r3, #0
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2a:	f003 0308 	and.w	r3, r3, #8
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d103      	bne.n	8006a3a <HAL_UART_IRQHandler+0x17a>
 8006a32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d04f      	beq.n	8006ada <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 facd 	bl	8006fda <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d041      	beq.n	8006ad2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3314      	adds	r3, #20
 8006a54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3314      	adds	r3, #20
 8006a76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a8a:	e841 2300 	strex	r3, r2, [r1]
 8006a8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1d9      	bne.n	8006a4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d013      	beq.n	8006aca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa6:	4a7e      	ldr	r2, [pc, #504]	; (8006ca0 <HAL_UART_IRQHandler+0x3e0>)
 8006aa8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7fd f9aa 	bl	8003e08 <HAL_DMA_Abort_IT>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d016      	beq.n	8006ae8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006ac4:	4610      	mov	r0, r2
 8006ac6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac8:	e00e      	b.n	8006ae8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f9a5 	bl	8006e1a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad0:	e00a      	b.n	8006ae8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f9a1 	bl	8006e1a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad8:	e006      	b.n	8006ae8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f99d 	bl	8006e1a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006ae6:	e175      	b.n	8006dd4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae8:	bf00      	nop
    return;
 8006aea:	e173      	b.n	8006dd4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	f040 814f 	bne.w	8006d94 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006afa:	f003 0310 	and.w	r3, r3, #16
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 8148 	beq.w	8006d94 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b08:	f003 0310 	and.w	r3, r3, #16
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 8141 	beq.w	8006d94 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b12:	2300      	movs	r3, #0
 8006b14:	60bb      	str	r3, [r7, #8]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	60bb      	str	r3, [r7, #8]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	60bb      	str	r3, [r7, #8]
 8006b26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f000 80b6 	beq.w	8006ca4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 8145 	beq.w	8006dd8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b56:	429a      	cmp	r2, r3
 8006b58:	f080 813e 	bcs.w	8006dd8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b62:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	f000 8088 	beq.w	8006c80 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	330c      	adds	r3, #12
 8006b76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b7e:	e853 3f00 	ldrex	r3, [r3]
 8006b82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	330c      	adds	r3, #12
 8006b98:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006b9c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ba0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ba8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006bac:	e841 2300 	strex	r3, r2, [r1]
 8006bb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1d9      	bne.n	8006b70 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3314      	adds	r3, #20
 8006bc2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bc6:	e853 3f00 	ldrex	r3, [r3]
 8006bca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006bcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bce:	f023 0301 	bic.w	r3, r3, #1
 8006bd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3314      	adds	r3, #20
 8006bdc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006be0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006be4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006be8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006bec:	e841 2300 	strex	r3, r2, [r1]
 8006bf0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006bf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e1      	bne.n	8006bbc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3314      	adds	r3, #20
 8006bfe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c02:	e853 3f00 	ldrex	r3, [r3]
 8006c06:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	3314      	adds	r3, #20
 8006c18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c1c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c20:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c24:	e841 2300 	strex	r3, r2, [r1]
 8006c28:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1e3      	bne.n	8006bf8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2220      	movs	r2, #32
 8006c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	330c      	adds	r3, #12
 8006c44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c48:	e853 3f00 	ldrex	r3, [r3]
 8006c4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c50:	f023 0310 	bic.w	r3, r3, #16
 8006c54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	330c      	adds	r3, #12
 8006c5e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006c62:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c64:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c6a:	e841 2300 	strex	r3, r2, [r1]
 8006c6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1e3      	bne.n	8006c3e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7fd f888 	bl	8003d90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2202      	movs	r2, #2
 8006c84:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	4619      	mov	r1, r3
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f8c8 	bl	8006e2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c9c:	e09c      	b.n	8006dd8 <HAL_UART_IRQHandler+0x518>
 8006c9e:	bf00      	nop
 8006ca0:	0800709f 	.word	0x0800709f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f000 808e 	beq.w	8006ddc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006cc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 8089 	beq.w	8006ddc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	330c      	adds	r3, #12
 8006cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ce0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	330c      	adds	r3, #12
 8006cea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006cee:	647a      	str	r2, [r7, #68]	; 0x44
 8006cf0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cf6:	e841 2300 	strex	r3, r2, [r1]
 8006cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1e3      	bne.n	8006cca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3314      	adds	r3, #20
 8006d08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0c:	e853 3f00 	ldrex	r3, [r3]
 8006d10:	623b      	str	r3, [r7, #32]
   return(result);
 8006d12:	6a3b      	ldr	r3, [r7, #32]
 8006d14:	f023 0301 	bic.w	r3, r3, #1
 8006d18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3314      	adds	r3, #20
 8006d22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d26:	633a      	str	r2, [r7, #48]	; 0x30
 8006d28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d2e:	e841 2300 	strex	r3, r2, [r1]
 8006d32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1e3      	bne.n	8006d02 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	330c      	adds	r3, #12
 8006d4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	e853 3f00 	ldrex	r3, [r3]
 8006d56:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f023 0310 	bic.w	r3, r3, #16
 8006d5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	330c      	adds	r3, #12
 8006d68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006d6c:	61fa      	str	r2, [r7, #28]
 8006d6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d70:	69b9      	ldr	r1, [r7, #24]
 8006d72:	69fa      	ldr	r2, [r7, #28]
 8006d74:	e841 2300 	strex	r3, r2, [r1]
 8006d78:	617b      	str	r3, [r7, #20]
   return(result);
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1e3      	bne.n	8006d48 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2202      	movs	r2, #2
 8006d84:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f84d 	bl	8006e2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d92:	e023      	b.n	8006ddc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d009      	beq.n	8006db4 <HAL_UART_IRQHandler+0x4f4>
 8006da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d003      	beq.n	8006db4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f98a 	bl	80070c6 <UART_Transmit_IT>
    return;
 8006db2:	e014      	b.n	8006dde <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00e      	beq.n	8006dde <HAL_UART_IRQHandler+0x51e>
 8006dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d008      	beq.n	8006dde <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f9c9 	bl	8007164 <UART_EndTransmit_IT>
    return;
 8006dd2:	e004      	b.n	8006dde <HAL_UART_IRQHandler+0x51e>
    return;
 8006dd4:	bf00      	nop
 8006dd6:	e002      	b.n	8006dde <HAL_UART_IRQHandler+0x51e>
      return;
 8006dd8:	bf00      	nop
 8006dda:	e000      	b.n	8006dde <HAL_UART_IRQHandler+0x51e>
      return;
 8006ddc:	bf00      	nop
  }
}
 8006dde:	37e8      	adds	r7, #232	; 0xe8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bc80      	pop	{r7}
 8006df4:	4770      	bx	lr

08006df6 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b083      	sub	sp, #12
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006dfe:	bf00      	nop
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bc80      	pop	{r7}
 8006e06:	4770      	bx	lr

08006e08 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bc80      	pop	{r7}
 8006e18:	4770      	bx	lr

08006e1a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b083      	sub	sp, #12
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e22:	bf00      	nop
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bc80      	pop	{r7}
 8006e2a:	4770      	bx	lr

08006e2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	460b      	mov	r3, r1
 8006e36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bc80      	pop	{r7}
 8006e40:	4770      	bx	lr

08006e42 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b090      	sub	sp, #64	; 0x40
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0320 	and.w	r3, r3, #32
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d137      	bne.n	8006ece <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e60:	2200      	movs	r2, #0
 8006e62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3314      	adds	r3, #20
 8006e6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	e853 3f00 	ldrex	r3, [r3]
 8006e72:	623b      	str	r3, [r7, #32]
   return(result);
 8006e74:	6a3b      	ldr	r3, [r7, #32]
 8006e76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3314      	adds	r3, #20
 8006e82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e84:	633a      	str	r2, [r7, #48]	; 0x30
 8006e86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e8c:	e841 2300 	strex	r3, r2, [r1]
 8006e90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1e5      	bne.n	8006e64 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	330c      	adds	r3, #12
 8006e9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	e853 3f00 	ldrex	r3, [r3]
 8006ea6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eae:	637b      	str	r3, [r7, #52]	; 0x34
 8006eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	330c      	adds	r3, #12
 8006eb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006eb8:	61fa      	str	r2, [r7, #28]
 8006eba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebc:	69b9      	ldr	r1, [r7, #24]
 8006ebe:	69fa      	ldr	r2, [r7, #28]
 8006ec0:	e841 2300 	strex	r3, r2, [r1]
 8006ec4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1e5      	bne.n	8006e98 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ecc:	e002      	b.n	8006ed4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006ece:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006ed0:	f7ff ff88 	bl	8006de4 <HAL_UART_TxCpltCallback>
}
 8006ed4:	bf00      	nop
 8006ed6:	3740      	adds	r7, #64	; 0x40
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f7ff ff83 	bl	8006df6 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ef0:	bf00      	nop
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f08:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	bf14      	ite	ne
 8006f18:	2301      	movne	r3, #1
 8006f1a:	2300      	moveq	r3, #0
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b21      	cmp	r3, #33	; 0x21
 8006f2a:	d108      	bne.n	8006f3e <UART_DMAError+0x46>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d005      	beq.n	8006f3e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2200      	movs	r2, #0
 8006f36:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006f38:	68b8      	ldr	r0, [r7, #8]
 8006f3a:	f000 f827 	bl	8006f8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	695b      	ldr	r3, [r3, #20]
 8006f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	bf14      	ite	ne
 8006f4c:	2301      	movne	r3, #1
 8006f4e:	2300      	moveq	r3, #0
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b22      	cmp	r3, #34	; 0x22
 8006f5e:	d108      	bne.n	8006f72 <UART_DMAError+0x7a>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d005      	beq.n	8006f72 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006f6c:	68b8      	ldr	r0, [r7, #8]
 8006f6e:	f000 f834 	bl	8006fda <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f76:	f043 0210 	orr.w	r2, r3, #16
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f7e:	68b8      	ldr	r0, [r7, #8]
 8006f80:	f7ff ff4b 	bl	8006e1a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f84:	bf00      	nop
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b089      	sub	sp, #36	; 0x24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	330c      	adds	r3, #12
 8006f9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	e853 3f00 	ldrex	r3, [r3]
 8006fa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006faa:	61fb      	str	r3, [r7, #28]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	330c      	adds	r3, #12
 8006fb2:	69fa      	ldr	r2, [r7, #28]
 8006fb4:	61ba      	str	r2, [r7, #24]
 8006fb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb8:	6979      	ldr	r1, [r7, #20]
 8006fba:	69ba      	ldr	r2, [r7, #24]
 8006fbc:	e841 2300 	strex	r3, r2, [r1]
 8006fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1e5      	bne.n	8006f94 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2220      	movs	r2, #32
 8006fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8006fd0:	bf00      	nop
 8006fd2:	3724      	adds	r7, #36	; 0x24
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bc80      	pop	{r7}
 8006fd8:	4770      	bx	lr

08006fda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b095      	sub	sp, #84	; 0x54
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	330c      	adds	r3, #12
 8006fe8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fec:	e853 3f00 	ldrex	r3, [r3]
 8006ff0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	330c      	adds	r3, #12
 8007000:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007002:	643a      	str	r2, [r7, #64]	; 0x40
 8007004:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007006:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007008:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800700a:	e841 2300 	strex	r3, r2, [r1]
 800700e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1e5      	bne.n	8006fe2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3314      	adds	r3, #20
 800701c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701e:	6a3b      	ldr	r3, [r7, #32]
 8007020:	e853 3f00 	ldrex	r3, [r3]
 8007024:	61fb      	str	r3, [r7, #28]
   return(result);
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	f023 0301 	bic.w	r3, r3, #1
 800702c:	64bb      	str	r3, [r7, #72]	; 0x48
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3314      	adds	r3, #20
 8007034:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007036:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007038:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800703c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800703e:	e841 2300 	strex	r3, r2, [r1]
 8007042:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1e5      	bne.n	8007016 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704e:	2b01      	cmp	r3, #1
 8007050:	d119      	bne.n	8007086 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	330c      	adds	r3, #12
 8007058:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	e853 3f00 	ldrex	r3, [r3]
 8007060:	60bb      	str	r3, [r7, #8]
   return(result);
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	f023 0310 	bic.w	r3, r3, #16
 8007068:	647b      	str	r3, [r7, #68]	; 0x44
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	330c      	adds	r3, #12
 8007070:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007072:	61ba      	str	r2, [r7, #24]
 8007074:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007076:	6979      	ldr	r1, [r7, #20]
 8007078:	69ba      	ldr	r2, [r7, #24]
 800707a:	e841 2300 	strex	r3, r2, [r1]
 800707e:	613b      	str	r3, [r7, #16]
   return(result);
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1e5      	bne.n	8007052 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2220      	movs	r2, #32
 800708a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007094:	bf00      	nop
 8007096:	3754      	adds	r7, #84	; 0x54
 8007098:	46bd      	mov	sp, r7
 800709a:	bc80      	pop	{r7}
 800709c:	4770      	bx	lr

0800709e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b084      	sub	sp, #16
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f7ff feae 	bl	8006e1a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070be:	bf00      	nop
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b085      	sub	sp, #20
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b21      	cmp	r3, #33	; 0x21
 80070d8:	d13e      	bne.n	8007158 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070e2:	d114      	bne.n	800710e <UART_Transmit_IT+0x48>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d110      	bne.n	800710e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a1b      	ldr	r3, [r3, #32]
 80070f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	881b      	ldrh	r3, [r3, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007100:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	1c9a      	adds	r2, r3, #2
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	621a      	str	r2, [r3, #32]
 800710c:	e008      	b.n	8007120 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	1c59      	adds	r1, r3, #1
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	6211      	str	r1, [r2, #32]
 8007118:	781a      	ldrb	r2, [r3, #0]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007124:	b29b      	uxth	r3, r3
 8007126:	3b01      	subs	r3, #1
 8007128:	b29b      	uxth	r3, r3
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	4619      	mov	r1, r3
 800712e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10f      	bne.n	8007154 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68da      	ldr	r2, [r3, #12]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007142:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68da      	ldr	r2, [r3, #12]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007152:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007154:	2300      	movs	r3, #0
 8007156:	e000      	b.n	800715a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007158:	2302      	movs	r3, #2
  }
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	bc80      	pop	{r7}
 8007162:	4770      	bx	lr

08007164 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68da      	ldr	r2, [r3, #12]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800717a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2220      	movs	r2, #32
 8007180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7ff fe2d 	bl	8006de4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3708      	adds	r7, #8
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b08c      	sub	sp, #48	; 0x30
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	2b22      	cmp	r3, #34	; 0x22
 80071a6:	f040 80ae 	bne.w	8007306 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071b2:	d117      	bne.n	80071e4 <UART_Receive_IT+0x50>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d113      	bne.n	80071e4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80071bc:	2300      	movs	r3, #0
 80071be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071dc:	1c9a      	adds	r2, r3, #2
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	629a      	str	r2, [r3, #40]	; 0x28
 80071e2:	e026      	b.n	8007232 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80071ea:	2300      	movs	r3, #0
 80071ec:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071f6:	d007      	beq.n	8007208 <UART_Receive_IT+0x74>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d10a      	bne.n	8007216 <UART_Receive_IT+0x82>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d106      	bne.n	8007216 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	b2da      	uxtb	r2, r3
 8007210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007212:	701a      	strb	r2, [r3, #0]
 8007214:	e008      	b.n	8007228 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	b2db      	uxtb	r3, r3
 800721e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007222:	b2da      	uxtb	r2, r3
 8007224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007226:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722c:	1c5a      	adds	r2, r3, #1
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007236:	b29b      	uxth	r3, r3
 8007238:	3b01      	subs	r3, #1
 800723a:	b29b      	uxth	r3, r3
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	4619      	mov	r1, r3
 8007240:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007242:	2b00      	cmp	r3, #0
 8007244:	d15d      	bne.n	8007302 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68da      	ldr	r2, [r3, #12]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f022 0220 	bic.w	r2, r2, #32
 8007254:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68da      	ldr	r2, [r3, #12]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007264:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	695a      	ldr	r2, [r3, #20]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 0201 	bic.w	r2, r2, #1
 8007274:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2220      	movs	r2, #32
 800727a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007288:	2b01      	cmp	r3, #1
 800728a:	d135      	bne.n	80072f8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	330c      	adds	r3, #12
 8007298:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	e853 3f00 	ldrex	r3, [r3]
 80072a0:	613b      	str	r3, [r7, #16]
   return(result);
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f023 0310 	bic.w	r3, r3, #16
 80072a8:	627b      	str	r3, [r7, #36]	; 0x24
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	330c      	adds	r3, #12
 80072b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072b2:	623a      	str	r2, [r7, #32]
 80072b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	69f9      	ldr	r1, [r7, #28]
 80072b8:	6a3a      	ldr	r2, [r7, #32]
 80072ba:	e841 2300 	strex	r3, r2, [r1]
 80072be:	61bb      	str	r3, [r7, #24]
   return(result);
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e5      	bne.n	8007292 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0310 	and.w	r3, r3, #16
 80072d0:	2b10      	cmp	r3, #16
 80072d2:	d10a      	bne.n	80072ea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072d4:	2300      	movs	r3, #0
 80072d6:	60fb      	str	r3, [r7, #12]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	60fb      	str	r3, [r7, #12]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072ee:	4619      	mov	r1, r3
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7ff fd9b 	bl	8006e2c <HAL_UARTEx_RxEventCallback>
 80072f6:	e002      	b.n	80072fe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7ff fd85 	bl	8006e08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	e002      	b.n	8007308 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	e000      	b.n	8007308 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007306:	2302      	movs	r3, #2
  }
}
 8007308:	4618      	mov	r0, r3
 800730a:	3730      	adds	r7, #48	; 0x30
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	430a      	orrs	r2, r1
 800732c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	689a      	ldr	r2, [r3, #8]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	431a      	orrs	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	4313      	orrs	r3, r2
 800733e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800734a:	f023 030c 	bic.w	r3, r3, #12
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	6812      	ldr	r2, [r2, #0]
 8007352:	68b9      	ldr	r1, [r7, #8]
 8007354:	430b      	orrs	r3, r1
 8007356:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	699a      	ldr	r2, [r3, #24]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a2c      	ldr	r2, [pc, #176]	; (8007424 <UART_SetConfig+0x114>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d103      	bne.n	8007380 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007378:	f7ff f9b0 	bl	80066dc <HAL_RCC_GetPCLK2Freq>
 800737c:	60f8      	str	r0, [r7, #12]
 800737e:	e002      	b.n	8007386 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007380:	f7ff f998 	bl	80066b4 <HAL_RCC_GetPCLK1Freq>
 8007384:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	4613      	mov	r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4413      	add	r3, r2
 800738e:	009a      	lsls	r2, r3, #2
 8007390:	441a      	add	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	fbb2 f3f3 	udiv	r3, r2, r3
 800739c:	4a22      	ldr	r2, [pc, #136]	; (8007428 <UART_SetConfig+0x118>)
 800739e:	fba2 2303 	umull	r2, r3, r2, r3
 80073a2:	095b      	lsrs	r3, r3, #5
 80073a4:	0119      	lsls	r1, r3, #4
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	4613      	mov	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	009a      	lsls	r2, r3, #2
 80073b0:	441a      	add	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80073bc:	4b1a      	ldr	r3, [pc, #104]	; (8007428 <UART_SetConfig+0x118>)
 80073be:	fba3 0302 	umull	r0, r3, r3, r2
 80073c2:	095b      	lsrs	r3, r3, #5
 80073c4:	2064      	movs	r0, #100	; 0x64
 80073c6:	fb00 f303 	mul.w	r3, r0, r3
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	011b      	lsls	r3, r3, #4
 80073ce:	3332      	adds	r3, #50	; 0x32
 80073d0:	4a15      	ldr	r2, [pc, #84]	; (8007428 <UART_SetConfig+0x118>)
 80073d2:	fba2 2303 	umull	r2, r3, r2, r3
 80073d6:	095b      	lsrs	r3, r3, #5
 80073d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073dc:	4419      	add	r1, r3
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	4613      	mov	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	009a      	lsls	r2, r3, #2
 80073e8:	441a      	add	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80073f4:	4b0c      	ldr	r3, [pc, #48]	; (8007428 <UART_SetConfig+0x118>)
 80073f6:	fba3 0302 	umull	r0, r3, r3, r2
 80073fa:	095b      	lsrs	r3, r3, #5
 80073fc:	2064      	movs	r0, #100	; 0x64
 80073fe:	fb00 f303 	mul.w	r3, r0, r3
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	011b      	lsls	r3, r3, #4
 8007406:	3332      	adds	r3, #50	; 0x32
 8007408:	4a07      	ldr	r2, [pc, #28]	; (8007428 <UART_SetConfig+0x118>)
 800740a:	fba2 2303 	umull	r2, r3, r2, r3
 800740e:	095b      	lsrs	r3, r3, #5
 8007410:	f003 020f 	and.w	r2, r3, #15
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	440a      	add	r2, r1
 800741a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800741c:	bf00      	nop
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	40013800 	.word	0x40013800
 8007428:	51eb851f 	.word	0x51eb851f

0800742c <__errno>:
 800742c:	4b01      	ldr	r3, [pc, #4]	; (8007434 <__errno+0x8>)
 800742e:	6818      	ldr	r0, [r3, #0]
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	20000014 	.word	0x20000014

08007438 <__libc_init_array>:
 8007438:	b570      	push	{r4, r5, r6, lr}
 800743a:	2600      	movs	r6, #0
 800743c:	4d0c      	ldr	r5, [pc, #48]	; (8007470 <__libc_init_array+0x38>)
 800743e:	4c0d      	ldr	r4, [pc, #52]	; (8007474 <__libc_init_array+0x3c>)
 8007440:	1b64      	subs	r4, r4, r5
 8007442:	10a4      	asrs	r4, r4, #2
 8007444:	42a6      	cmp	r6, r4
 8007446:	d109      	bne.n	800745c <__libc_init_array+0x24>
 8007448:	f000 ff28 	bl	800829c <_init>
 800744c:	2600      	movs	r6, #0
 800744e:	4d0a      	ldr	r5, [pc, #40]	; (8007478 <__libc_init_array+0x40>)
 8007450:	4c0a      	ldr	r4, [pc, #40]	; (800747c <__libc_init_array+0x44>)
 8007452:	1b64      	subs	r4, r4, r5
 8007454:	10a4      	asrs	r4, r4, #2
 8007456:	42a6      	cmp	r6, r4
 8007458:	d105      	bne.n	8007466 <__libc_init_array+0x2e>
 800745a:	bd70      	pop	{r4, r5, r6, pc}
 800745c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007460:	4798      	blx	r3
 8007462:	3601      	adds	r6, #1
 8007464:	e7ee      	b.n	8007444 <__libc_init_array+0xc>
 8007466:	f855 3b04 	ldr.w	r3, [r5], #4
 800746a:	4798      	blx	r3
 800746c:	3601      	adds	r6, #1
 800746e:	e7f2      	b.n	8007456 <__libc_init_array+0x1e>
 8007470:	08008518 	.word	0x08008518
 8007474:	08008518 	.word	0x08008518
 8007478:	08008518 	.word	0x08008518
 800747c:	0800851c 	.word	0x0800851c

08007480 <memset>:
 8007480:	4603      	mov	r3, r0
 8007482:	4402      	add	r2, r0
 8007484:	4293      	cmp	r3, r2
 8007486:	d100      	bne.n	800748a <memset+0xa>
 8007488:	4770      	bx	lr
 800748a:	f803 1b01 	strb.w	r1, [r3], #1
 800748e:	e7f9      	b.n	8007484 <memset+0x4>

08007490 <pow>:
 8007490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007494:	4614      	mov	r4, r2
 8007496:	461d      	mov	r5, r3
 8007498:	4680      	mov	r8, r0
 800749a:	4689      	mov	r9, r1
 800749c:	f000 f884 	bl	80075a8 <__ieee754_pow>
 80074a0:	4622      	mov	r2, r4
 80074a2:	4606      	mov	r6, r0
 80074a4:	460f      	mov	r7, r1
 80074a6:	462b      	mov	r3, r5
 80074a8:	4620      	mov	r0, r4
 80074aa:	4629      	mov	r1, r5
 80074ac:	f7f9 faa6 	bl	80009fc <__aeabi_dcmpun>
 80074b0:	bbc8      	cbnz	r0, 8007526 <pow+0x96>
 80074b2:	2200      	movs	r2, #0
 80074b4:	2300      	movs	r3, #0
 80074b6:	4640      	mov	r0, r8
 80074b8:	4649      	mov	r1, r9
 80074ba:	f7f9 fa6d 	bl	8000998 <__aeabi_dcmpeq>
 80074be:	b1b8      	cbz	r0, 80074f0 <pow+0x60>
 80074c0:	2200      	movs	r2, #0
 80074c2:	2300      	movs	r3, #0
 80074c4:	4620      	mov	r0, r4
 80074c6:	4629      	mov	r1, r5
 80074c8:	f7f9 fa66 	bl	8000998 <__aeabi_dcmpeq>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	d141      	bne.n	8007554 <pow+0xc4>
 80074d0:	4620      	mov	r0, r4
 80074d2:	4629      	mov	r1, r5
 80074d4:	f000 fe5d 	bl	8008192 <finite>
 80074d8:	b328      	cbz	r0, 8007526 <pow+0x96>
 80074da:	2200      	movs	r2, #0
 80074dc:	2300      	movs	r3, #0
 80074de:	4620      	mov	r0, r4
 80074e0:	4629      	mov	r1, r5
 80074e2:	f7f9 fa63 	bl	80009ac <__aeabi_dcmplt>
 80074e6:	b1f0      	cbz	r0, 8007526 <pow+0x96>
 80074e8:	f7ff ffa0 	bl	800742c <__errno>
 80074ec:	2322      	movs	r3, #34	; 0x22
 80074ee:	e019      	b.n	8007524 <pow+0x94>
 80074f0:	4630      	mov	r0, r6
 80074f2:	4639      	mov	r1, r7
 80074f4:	f000 fe4d 	bl	8008192 <finite>
 80074f8:	b9c8      	cbnz	r0, 800752e <pow+0x9e>
 80074fa:	4640      	mov	r0, r8
 80074fc:	4649      	mov	r1, r9
 80074fe:	f000 fe48 	bl	8008192 <finite>
 8007502:	b1a0      	cbz	r0, 800752e <pow+0x9e>
 8007504:	4620      	mov	r0, r4
 8007506:	4629      	mov	r1, r5
 8007508:	f000 fe43 	bl	8008192 <finite>
 800750c:	b178      	cbz	r0, 800752e <pow+0x9e>
 800750e:	4632      	mov	r2, r6
 8007510:	463b      	mov	r3, r7
 8007512:	4630      	mov	r0, r6
 8007514:	4639      	mov	r1, r7
 8007516:	f7f9 fa71 	bl	80009fc <__aeabi_dcmpun>
 800751a:	2800      	cmp	r0, #0
 800751c:	d0e4      	beq.n	80074e8 <pow+0x58>
 800751e:	f7ff ff85 	bl	800742c <__errno>
 8007522:	2321      	movs	r3, #33	; 0x21
 8007524:	6003      	str	r3, [r0, #0]
 8007526:	4630      	mov	r0, r6
 8007528:	4639      	mov	r1, r7
 800752a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800752e:	2200      	movs	r2, #0
 8007530:	2300      	movs	r3, #0
 8007532:	4630      	mov	r0, r6
 8007534:	4639      	mov	r1, r7
 8007536:	f7f9 fa2f 	bl	8000998 <__aeabi_dcmpeq>
 800753a:	2800      	cmp	r0, #0
 800753c:	d0f3      	beq.n	8007526 <pow+0x96>
 800753e:	4640      	mov	r0, r8
 8007540:	4649      	mov	r1, r9
 8007542:	f000 fe26 	bl	8008192 <finite>
 8007546:	2800      	cmp	r0, #0
 8007548:	d0ed      	beq.n	8007526 <pow+0x96>
 800754a:	4620      	mov	r0, r4
 800754c:	4629      	mov	r1, r5
 800754e:	f000 fe20 	bl	8008192 <finite>
 8007552:	e7c8      	b.n	80074e6 <pow+0x56>
 8007554:	2600      	movs	r6, #0
 8007556:	4f01      	ldr	r7, [pc, #4]	; (800755c <pow+0xcc>)
 8007558:	e7e5      	b.n	8007526 <pow+0x96>
 800755a:	bf00      	nop
 800755c:	3ff00000 	.word	0x3ff00000

08007560 <sqrt>:
 8007560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007562:	4606      	mov	r6, r0
 8007564:	460f      	mov	r7, r1
 8007566:	f000 fd35 	bl	8007fd4 <__ieee754_sqrt>
 800756a:	4632      	mov	r2, r6
 800756c:	4604      	mov	r4, r0
 800756e:	460d      	mov	r5, r1
 8007570:	463b      	mov	r3, r7
 8007572:	4630      	mov	r0, r6
 8007574:	4639      	mov	r1, r7
 8007576:	f7f9 fa41 	bl	80009fc <__aeabi_dcmpun>
 800757a:	b990      	cbnz	r0, 80075a2 <sqrt+0x42>
 800757c:	2200      	movs	r2, #0
 800757e:	2300      	movs	r3, #0
 8007580:	4630      	mov	r0, r6
 8007582:	4639      	mov	r1, r7
 8007584:	f7f9 fa12 	bl	80009ac <__aeabi_dcmplt>
 8007588:	b158      	cbz	r0, 80075a2 <sqrt+0x42>
 800758a:	f7ff ff4f 	bl	800742c <__errno>
 800758e:	2321      	movs	r3, #33	; 0x21
 8007590:	2200      	movs	r2, #0
 8007592:	6003      	str	r3, [r0, #0]
 8007594:	2300      	movs	r3, #0
 8007596:	4610      	mov	r0, r2
 8007598:	4619      	mov	r1, r3
 800759a:	f7f9 f8bf 	bl	800071c <__aeabi_ddiv>
 800759e:	4604      	mov	r4, r0
 80075a0:	460d      	mov	r5, r1
 80075a2:	4620      	mov	r0, r4
 80075a4:	4629      	mov	r1, r5
 80075a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080075a8 <__ieee754_pow>:
 80075a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ac:	b093      	sub	sp, #76	; 0x4c
 80075ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075b2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80075b6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80075ba:	4689      	mov	r9, r1
 80075bc:	ea56 0102 	orrs.w	r1, r6, r2
 80075c0:	4680      	mov	r8, r0
 80075c2:	d111      	bne.n	80075e8 <__ieee754_pow+0x40>
 80075c4:	1803      	adds	r3, r0, r0
 80075c6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80075ca:	4152      	adcs	r2, r2
 80075cc:	4299      	cmp	r1, r3
 80075ce:	4b82      	ldr	r3, [pc, #520]	; (80077d8 <__ieee754_pow+0x230>)
 80075d0:	4193      	sbcs	r3, r2
 80075d2:	f080 84b9 	bcs.w	8007f48 <__ieee754_pow+0x9a0>
 80075d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075da:	4640      	mov	r0, r8
 80075dc:	4649      	mov	r1, r9
 80075de:	f7f8 fdbd 	bl	800015c <__adddf3>
 80075e2:	4683      	mov	fp, r0
 80075e4:	468c      	mov	ip, r1
 80075e6:	e06f      	b.n	80076c8 <__ieee754_pow+0x120>
 80075e8:	4b7c      	ldr	r3, [pc, #496]	; (80077dc <__ieee754_pow+0x234>)
 80075ea:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80075ee:	429c      	cmp	r4, r3
 80075f0:	464d      	mov	r5, r9
 80075f2:	4682      	mov	sl, r0
 80075f4:	dc06      	bgt.n	8007604 <__ieee754_pow+0x5c>
 80075f6:	d101      	bne.n	80075fc <__ieee754_pow+0x54>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d1ec      	bne.n	80075d6 <__ieee754_pow+0x2e>
 80075fc:	429e      	cmp	r6, r3
 80075fe:	dc01      	bgt.n	8007604 <__ieee754_pow+0x5c>
 8007600:	d10f      	bne.n	8007622 <__ieee754_pow+0x7a>
 8007602:	b172      	cbz	r2, 8007622 <__ieee754_pow+0x7a>
 8007604:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007608:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800760c:	ea55 050a 	orrs.w	r5, r5, sl
 8007610:	d1e1      	bne.n	80075d6 <__ieee754_pow+0x2e>
 8007612:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007616:	18db      	adds	r3, r3, r3
 8007618:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800761c:	4152      	adcs	r2, r2
 800761e:	429d      	cmp	r5, r3
 8007620:	e7d5      	b.n	80075ce <__ieee754_pow+0x26>
 8007622:	2d00      	cmp	r5, #0
 8007624:	da39      	bge.n	800769a <__ieee754_pow+0xf2>
 8007626:	4b6e      	ldr	r3, [pc, #440]	; (80077e0 <__ieee754_pow+0x238>)
 8007628:	429e      	cmp	r6, r3
 800762a:	dc52      	bgt.n	80076d2 <__ieee754_pow+0x12a>
 800762c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007630:	429e      	cmp	r6, r3
 8007632:	f340 849c 	ble.w	8007f6e <__ieee754_pow+0x9c6>
 8007636:	1533      	asrs	r3, r6, #20
 8007638:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800763c:	2b14      	cmp	r3, #20
 800763e:	dd0f      	ble.n	8007660 <__ieee754_pow+0xb8>
 8007640:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007644:	fa22 f103 	lsr.w	r1, r2, r3
 8007648:	fa01 f303 	lsl.w	r3, r1, r3
 800764c:	4293      	cmp	r3, r2
 800764e:	f040 848e 	bne.w	8007f6e <__ieee754_pow+0x9c6>
 8007652:	f001 0101 	and.w	r1, r1, #1
 8007656:	f1c1 0302 	rsb	r3, r1, #2
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	b182      	cbz	r2, 8007680 <__ieee754_pow+0xd8>
 800765e:	e05d      	b.n	800771c <__ieee754_pow+0x174>
 8007660:	2a00      	cmp	r2, #0
 8007662:	d159      	bne.n	8007718 <__ieee754_pow+0x170>
 8007664:	f1c3 0314 	rsb	r3, r3, #20
 8007668:	fa46 f103 	asr.w	r1, r6, r3
 800766c:	fa01 f303 	lsl.w	r3, r1, r3
 8007670:	42b3      	cmp	r3, r6
 8007672:	f040 8479 	bne.w	8007f68 <__ieee754_pow+0x9c0>
 8007676:	f001 0101 	and.w	r1, r1, #1
 800767a:	f1c1 0302 	rsb	r3, r1, #2
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	4b58      	ldr	r3, [pc, #352]	; (80077e4 <__ieee754_pow+0x23c>)
 8007682:	429e      	cmp	r6, r3
 8007684:	d132      	bne.n	80076ec <__ieee754_pow+0x144>
 8007686:	2f00      	cmp	r7, #0
 8007688:	f280 846a 	bge.w	8007f60 <__ieee754_pow+0x9b8>
 800768c:	4642      	mov	r2, r8
 800768e:	464b      	mov	r3, r9
 8007690:	2000      	movs	r0, #0
 8007692:	4954      	ldr	r1, [pc, #336]	; (80077e4 <__ieee754_pow+0x23c>)
 8007694:	f7f9 f842 	bl	800071c <__aeabi_ddiv>
 8007698:	e7a3      	b.n	80075e2 <__ieee754_pow+0x3a>
 800769a:	2300      	movs	r3, #0
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	2a00      	cmp	r2, #0
 80076a0:	d13c      	bne.n	800771c <__ieee754_pow+0x174>
 80076a2:	4b4e      	ldr	r3, [pc, #312]	; (80077dc <__ieee754_pow+0x234>)
 80076a4:	429e      	cmp	r6, r3
 80076a6:	d1eb      	bne.n	8007680 <__ieee754_pow+0xd8>
 80076a8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80076ac:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80076b0:	ea53 030a 	orrs.w	r3, r3, sl
 80076b4:	f000 8448 	beq.w	8007f48 <__ieee754_pow+0x9a0>
 80076b8:	4b4b      	ldr	r3, [pc, #300]	; (80077e8 <__ieee754_pow+0x240>)
 80076ba:	429c      	cmp	r4, r3
 80076bc:	dd0b      	ble.n	80076d6 <__ieee754_pow+0x12e>
 80076be:	2f00      	cmp	r7, #0
 80076c0:	f2c0 8448 	blt.w	8007f54 <__ieee754_pow+0x9ac>
 80076c4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80076c8:	4658      	mov	r0, fp
 80076ca:	4661      	mov	r1, ip
 80076cc:	b013      	add	sp, #76	; 0x4c
 80076ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d2:	2302      	movs	r3, #2
 80076d4:	e7e2      	b.n	800769c <__ieee754_pow+0xf4>
 80076d6:	2f00      	cmp	r7, #0
 80076d8:	f04f 0b00 	mov.w	fp, #0
 80076dc:	f04f 0c00 	mov.w	ip, #0
 80076e0:	daf2      	bge.n	80076c8 <__ieee754_pow+0x120>
 80076e2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80076e6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80076ea:	e7ed      	b.n	80076c8 <__ieee754_pow+0x120>
 80076ec:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80076f0:	d106      	bne.n	8007700 <__ieee754_pow+0x158>
 80076f2:	4642      	mov	r2, r8
 80076f4:	464b      	mov	r3, r9
 80076f6:	4640      	mov	r0, r8
 80076f8:	4649      	mov	r1, r9
 80076fa:	f7f8 fee5 	bl	80004c8 <__aeabi_dmul>
 80076fe:	e770      	b.n	80075e2 <__ieee754_pow+0x3a>
 8007700:	4b3a      	ldr	r3, [pc, #232]	; (80077ec <__ieee754_pow+0x244>)
 8007702:	429f      	cmp	r7, r3
 8007704:	d10a      	bne.n	800771c <__ieee754_pow+0x174>
 8007706:	2d00      	cmp	r5, #0
 8007708:	db08      	blt.n	800771c <__ieee754_pow+0x174>
 800770a:	4640      	mov	r0, r8
 800770c:	4649      	mov	r1, r9
 800770e:	b013      	add	sp, #76	; 0x4c
 8007710:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007714:	f000 bc5e 	b.w	8007fd4 <__ieee754_sqrt>
 8007718:	2300      	movs	r3, #0
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	4640      	mov	r0, r8
 800771e:	4649      	mov	r1, r9
 8007720:	f000 fd34 	bl	800818c <fabs>
 8007724:	4683      	mov	fp, r0
 8007726:	468c      	mov	ip, r1
 8007728:	f1ba 0f00 	cmp.w	sl, #0
 800772c:	d128      	bne.n	8007780 <__ieee754_pow+0x1d8>
 800772e:	b124      	cbz	r4, 800773a <__ieee754_pow+0x192>
 8007730:	4b2c      	ldr	r3, [pc, #176]	; (80077e4 <__ieee754_pow+0x23c>)
 8007732:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007736:	429a      	cmp	r2, r3
 8007738:	d122      	bne.n	8007780 <__ieee754_pow+0x1d8>
 800773a:	2f00      	cmp	r7, #0
 800773c:	da07      	bge.n	800774e <__ieee754_pow+0x1a6>
 800773e:	465a      	mov	r2, fp
 8007740:	4663      	mov	r3, ip
 8007742:	2000      	movs	r0, #0
 8007744:	4927      	ldr	r1, [pc, #156]	; (80077e4 <__ieee754_pow+0x23c>)
 8007746:	f7f8 ffe9 	bl	800071c <__aeabi_ddiv>
 800774a:	4683      	mov	fp, r0
 800774c:	468c      	mov	ip, r1
 800774e:	2d00      	cmp	r5, #0
 8007750:	daba      	bge.n	80076c8 <__ieee754_pow+0x120>
 8007752:	9b00      	ldr	r3, [sp, #0]
 8007754:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007758:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800775c:	4323      	orrs	r3, r4
 800775e:	d108      	bne.n	8007772 <__ieee754_pow+0x1ca>
 8007760:	465a      	mov	r2, fp
 8007762:	4663      	mov	r3, ip
 8007764:	4658      	mov	r0, fp
 8007766:	4661      	mov	r1, ip
 8007768:	f7f8 fcf6 	bl	8000158 <__aeabi_dsub>
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	e790      	b.n	8007694 <__ieee754_pow+0xec>
 8007772:	9b00      	ldr	r3, [sp, #0]
 8007774:	2b01      	cmp	r3, #1
 8007776:	d1a7      	bne.n	80076c8 <__ieee754_pow+0x120>
 8007778:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800777c:	469c      	mov	ip, r3
 800777e:	e7a3      	b.n	80076c8 <__ieee754_pow+0x120>
 8007780:	0feb      	lsrs	r3, r5, #31
 8007782:	3b01      	subs	r3, #1
 8007784:	930c      	str	r3, [sp, #48]	; 0x30
 8007786:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007788:	9b00      	ldr	r3, [sp, #0]
 800778a:	4313      	orrs	r3, r2
 800778c:	d104      	bne.n	8007798 <__ieee754_pow+0x1f0>
 800778e:	4642      	mov	r2, r8
 8007790:	464b      	mov	r3, r9
 8007792:	4640      	mov	r0, r8
 8007794:	4649      	mov	r1, r9
 8007796:	e7e7      	b.n	8007768 <__ieee754_pow+0x1c0>
 8007798:	4b15      	ldr	r3, [pc, #84]	; (80077f0 <__ieee754_pow+0x248>)
 800779a:	429e      	cmp	r6, r3
 800779c:	f340 80f6 	ble.w	800798c <__ieee754_pow+0x3e4>
 80077a0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80077a4:	429e      	cmp	r6, r3
 80077a6:	4b10      	ldr	r3, [pc, #64]	; (80077e8 <__ieee754_pow+0x240>)
 80077a8:	dd09      	ble.n	80077be <__ieee754_pow+0x216>
 80077aa:	429c      	cmp	r4, r3
 80077ac:	dc0c      	bgt.n	80077c8 <__ieee754_pow+0x220>
 80077ae:	2f00      	cmp	r7, #0
 80077b0:	da0c      	bge.n	80077cc <__ieee754_pow+0x224>
 80077b2:	2000      	movs	r0, #0
 80077b4:	b013      	add	sp, #76	; 0x4c
 80077b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ba:	f000 bce2 	b.w	8008182 <__math_oflow>
 80077be:	429c      	cmp	r4, r3
 80077c0:	dbf5      	blt.n	80077ae <__ieee754_pow+0x206>
 80077c2:	4b08      	ldr	r3, [pc, #32]	; (80077e4 <__ieee754_pow+0x23c>)
 80077c4:	429c      	cmp	r4, r3
 80077c6:	dd15      	ble.n	80077f4 <__ieee754_pow+0x24c>
 80077c8:	2f00      	cmp	r7, #0
 80077ca:	dcf2      	bgt.n	80077b2 <__ieee754_pow+0x20a>
 80077cc:	2000      	movs	r0, #0
 80077ce:	b013      	add	sp, #76	; 0x4c
 80077d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d4:	f000 bcd0 	b.w	8008178 <__math_uflow>
 80077d8:	fff00000 	.word	0xfff00000
 80077dc:	7ff00000 	.word	0x7ff00000
 80077e0:	433fffff 	.word	0x433fffff
 80077e4:	3ff00000 	.word	0x3ff00000
 80077e8:	3fefffff 	.word	0x3fefffff
 80077ec:	3fe00000 	.word	0x3fe00000
 80077f0:	41e00000 	.word	0x41e00000
 80077f4:	4661      	mov	r1, ip
 80077f6:	2200      	movs	r2, #0
 80077f8:	4658      	mov	r0, fp
 80077fa:	4b5f      	ldr	r3, [pc, #380]	; (8007978 <__ieee754_pow+0x3d0>)
 80077fc:	f7f8 fcac 	bl	8000158 <__aeabi_dsub>
 8007800:	a355      	add	r3, pc, #340	; (adr r3, 8007958 <__ieee754_pow+0x3b0>)
 8007802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007806:	4604      	mov	r4, r0
 8007808:	460d      	mov	r5, r1
 800780a:	f7f8 fe5d 	bl	80004c8 <__aeabi_dmul>
 800780e:	a354      	add	r3, pc, #336	; (adr r3, 8007960 <__ieee754_pow+0x3b8>)
 8007810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007814:	4606      	mov	r6, r0
 8007816:	460f      	mov	r7, r1
 8007818:	4620      	mov	r0, r4
 800781a:	4629      	mov	r1, r5
 800781c:	f7f8 fe54 	bl	80004c8 <__aeabi_dmul>
 8007820:	2200      	movs	r2, #0
 8007822:	4682      	mov	sl, r0
 8007824:	468b      	mov	fp, r1
 8007826:	4620      	mov	r0, r4
 8007828:	4629      	mov	r1, r5
 800782a:	4b54      	ldr	r3, [pc, #336]	; (800797c <__ieee754_pow+0x3d4>)
 800782c:	f7f8 fe4c 	bl	80004c8 <__aeabi_dmul>
 8007830:	4602      	mov	r2, r0
 8007832:	460b      	mov	r3, r1
 8007834:	a14c      	add	r1, pc, #304	; (adr r1, 8007968 <__ieee754_pow+0x3c0>)
 8007836:	e9d1 0100 	ldrd	r0, r1, [r1]
 800783a:	f7f8 fc8d 	bl	8000158 <__aeabi_dsub>
 800783e:	4622      	mov	r2, r4
 8007840:	462b      	mov	r3, r5
 8007842:	f7f8 fe41 	bl	80004c8 <__aeabi_dmul>
 8007846:	4602      	mov	r2, r0
 8007848:	460b      	mov	r3, r1
 800784a:	2000      	movs	r0, #0
 800784c:	494c      	ldr	r1, [pc, #304]	; (8007980 <__ieee754_pow+0x3d8>)
 800784e:	f7f8 fc83 	bl	8000158 <__aeabi_dsub>
 8007852:	4622      	mov	r2, r4
 8007854:	462b      	mov	r3, r5
 8007856:	4680      	mov	r8, r0
 8007858:	4689      	mov	r9, r1
 800785a:	4620      	mov	r0, r4
 800785c:	4629      	mov	r1, r5
 800785e:	f7f8 fe33 	bl	80004c8 <__aeabi_dmul>
 8007862:	4602      	mov	r2, r0
 8007864:	460b      	mov	r3, r1
 8007866:	4640      	mov	r0, r8
 8007868:	4649      	mov	r1, r9
 800786a:	f7f8 fe2d 	bl	80004c8 <__aeabi_dmul>
 800786e:	a340      	add	r3, pc, #256	; (adr r3, 8007970 <__ieee754_pow+0x3c8>)
 8007870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007874:	f7f8 fe28 	bl	80004c8 <__aeabi_dmul>
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	4650      	mov	r0, sl
 800787e:	4659      	mov	r1, fp
 8007880:	f7f8 fc6a 	bl	8000158 <__aeabi_dsub>
 8007884:	f04f 0a00 	mov.w	sl, #0
 8007888:	4602      	mov	r2, r0
 800788a:	460b      	mov	r3, r1
 800788c:	4604      	mov	r4, r0
 800788e:	460d      	mov	r5, r1
 8007890:	4630      	mov	r0, r6
 8007892:	4639      	mov	r1, r7
 8007894:	f7f8 fc62 	bl	800015c <__adddf3>
 8007898:	4632      	mov	r2, r6
 800789a:	463b      	mov	r3, r7
 800789c:	4650      	mov	r0, sl
 800789e:	468b      	mov	fp, r1
 80078a0:	f7f8 fc5a 	bl	8000158 <__aeabi_dsub>
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	4620      	mov	r0, r4
 80078aa:	4629      	mov	r1, r5
 80078ac:	f7f8 fc54 	bl	8000158 <__aeabi_dsub>
 80078b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80078b4:	9b00      	ldr	r3, [sp, #0]
 80078b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078b8:	3b01      	subs	r3, #1
 80078ba:	4313      	orrs	r3, r2
 80078bc:	f04f 0600 	mov.w	r6, #0
 80078c0:	f04f 0200 	mov.w	r2, #0
 80078c4:	bf0c      	ite	eq
 80078c6:	4b2f      	ldreq	r3, [pc, #188]	; (8007984 <__ieee754_pow+0x3dc>)
 80078c8:	4b2b      	ldrne	r3, [pc, #172]	; (8007978 <__ieee754_pow+0x3d0>)
 80078ca:	4604      	mov	r4, r0
 80078cc:	460d      	mov	r5, r1
 80078ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078d2:	e9cd 2300 	strd	r2, r3, [sp]
 80078d6:	4632      	mov	r2, r6
 80078d8:	463b      	mov	r3, r7
 80078da:	f7f8 fc3d 	bl	8000158 <__aeabi_dsub>
 80078de:	4652      	mov	r2, sl
 80078e0:	465b      	mov	r3, fp
 80078e2:	f7f8 fdf1 	bl	80004c8 <__aeabi_dmul>
 80078e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078ea:	4680      	mov	r8, r0
 80078ec:	4689      	mov	r9, r1
 80078ee:	4620      	mov	r0, r4
 80078f0:	4629      	mov	r1, r5
 80078f2:	f7f8 fde9 	bl	80004c8 <__aeabi_dmul>
 80078f6:	4602      	mov	r2, r0
 80078f8:	460b      	mov	r3, r1
 80078fa:	4640      	mov	r0, r8
 80078fc:	4649      	mov	r1, r9
 80078fe:	f7f8 fc2d 	bl	800015c <__adddf3>
 8007902:	4632      	mov	r2, r6
 8007904:	463b      	mov	r3, r7
 8007906:	4680      	mov	r8, r0
 8007908:	4689      	mov	r9, r1
 800790a:	4650      	mov	r0, sl
 800790c:	4659      	mov	r1, fp
 800790e:	f7f8 fddb 	bl	80004c8 <__aeabi_dmul>
 8007912:	4604      	mov	r4, r0
 8007914:	460d      	mov	r5, r1
 8007916:	460b      	mov	r3, r1
 8007918:	4602      	mov	r2, r0
 800791a:	4649      	mov	r1, r9
 800791c:	4640      	mov	r0, r8
 800791e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007922:	f7f8 fc1b 	bl	800015c <__adddf3>
 8007926:	4b18      	ldr	r3, [pc, #96]	; (8007988 <__ieee754_pow+0x3e0>)
 8007928:	4682      	mov	sl, r0
 800792a:	4299      	cmp	r1, r3
 800792c:	460f      	mov	r7, r1
 800792e:	460e      	mov	r6, r1
 8007930:	f340 82e5 	ble.w	8007efe <__ieee754_pow+0x956>
 8007934:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007938:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800793c:	4303      	orrs	r3, r0
 800793e:	f000 81df 	beq.w	8007d00 <__ieee754_pow+0x758>
 8007942:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007946:	2200      	movs	r2, #0
 8007948:	2300      	movs	r3, #0
 800794a:	f7f9 f82f 	bl	80009ac <__aeabi_dcmplt>
 800794e:	3800      	subs	r0, #0
 8007950:	bf18      	it	ne
 8007952:	2001      	movne	r0, #1
 8007954:	e72e      	b.n	80077b4 <__ieee754_pow+0x20c>
 8007956:	bf00      	nop
 8007958:	60000000 	.word	0x60000000
 800795c:	3ff71547 	.word	0x3ff71547
 8007960:	f85ddf44 	.word	0xf85ddf44
 8007964:	3e54ae0b 	.word	0x3e54ae0b
 8007968:	55555555 	.word	0x55555555
 800796c:	3fd55555 	.word	0x3fd55555
 8007970:	652b82fe 	.word	0x652b82fe
 8007974:	3ff71547 	.word	0x3ff71547
 8007978:	3ff00000 	.word	0x3ff00000
 800797c:	3fd00000 	.word	0x3fd00000
 8007980:	3fe00000 	.word	0x3fe00000
 8007984:	bff00000 	.word	0xbff00000
 8007988:	408fffff 	.word	0x408fffff
 800798c:	4bd2      	ldr	r3, [pc, #840]	; (8007cd8 <__ieee754_pow+0x730>)
 800798e:	2200      	movs	r2, #0
 8007990:	402b      	ands	r3, r5
 8007992:	b943      	cbnz	r3, 80079a6 <__ieee754_pow+0x3fe>
 8007994:	4658      	mov	r0, fp
 8007996:	4661      	mov	r1, ip
 8007998:	4bd0      	ldr	r3, [pc, #832]	; (8007cdc <__ieee754_pow+0x734>)
 800799a:	f7f8 fd95 	bl	80004c8 <__aeabi_dmul>
 800799e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80079a2:	4683      	mov	fp, r0
 80079a4:	460c      	mov	r4, r1
 80079a6:	1523      	asrs	r3, r4, #20
 80079a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80079ac:	4413      	add	r3, r2
 80079ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80079b0:	4bcb      	ldr	r3, [pc, #812]	; (8007ce0 <__ieee754_pow+0x738>)
 80079b2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80079b6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80079ba:	429c      	cmp	r4, r3
 80079bc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80079c0:	dd08      	ble.n	80079d4 <__ieee754_pow+0x42c>
 80079c2:	4bc8      	ldr	r3, [pc, #800]	; (8007ce4 <__ieee754_pow+0x73c>)
 80079c4:	429c      	cmp	r4, r3
 80079c6:	f340 8199 	ble.w	8007cfc <__ieee754_pow+0x754>
 80079ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079cc:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80079d0:	3301      	adds	r3, #1
 80079d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80079d4:	2600      	movs	r6, #0
 80079d6:	00f3      	lsls	r3, r6, #3
 80079d8:	930d      	str	r3, [sp, #52]	; 0x34
 80079da:	4bc3      	ldr	r3, [pc, #780]	; (8007ce8 <__ieee754_pow+0x740>)
 80079dc:	4658      	mov	r0, fp
 80079de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80079e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80079e6:	4629      	mov	r1, r5
 80079e8:	461a      	mov	r2, r3
 80079ea:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80079ee:	4623      	mov	r3, r4
 80079f0:	f7f8 fbb2 	bl	8000158 <__aeabi_dsub>
 80079f4:	46da      	mov	sl, fp
 80079f6:	462b      	mov	r3, r5
 80079f8:	4652      	mov	r2, sl
 80079fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80079fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a02:	f7f8 fbab 	bl	800015c <__adddf3>
 8007a06:	4602      	mov	r2, r0
 8007a08:	460b      	mov	r3, r1
 8007a0a:	2000      	movs	r0, #0
 8007a0c:	49b7      	ldr	r1, [pc, #732]	; (8007cec <__ieee754_pow+0x744>)
 8007a0e:	f7f8 fe85 	bl	800071c <__aeabi_ddiv>
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
 8007a16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a1a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007a1e:	f7f8 fd53 	bl	80004c8 <__aeabi_dmul>
 8007a22:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007a26:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007a2a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007a2e:	2300      	movs	r3, #0
 8007a30:	2200      	movs	r2, #0
 8007a32:	46ab      	mov	fp, r5
 8007a34:	106d      	asrs	r5, r5, #1
 8007a36:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007a3a:	9304      	str	r3, [sp, #16]
 8007a3c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007a40:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007a44:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007a48:	4640      	mov	r0, r8
 8007a4a:	4649      	mov	r1, r9
 8007a4c:	4614      	mov	r4, r2
 8007a4e:	461d      	mov	r5, r3
 8007a50:	f7f8 fd3a 	bl	80004c8 <__aeabi_dmul>
 8007a54:	4602      	mov	r2, r0
 8007a56:	460b      	mov	r3, r1
 8007a58:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007a5c:	f7f8 fb7c 	bl	8000158 <__aeabi_dsub>
 8007a60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007a64:	4606      	mov	r6, r0
 8007a66:	460f      	mov	r7, r1
 8007a68:	4620      	mov	r0, r4
 8007a6a:	4629      	mov	r1, r5
 8007a6c:	f7f8 fb74 	bl	8000158 <__aeabi_dsub>
 8007a70:	4602      	mov	r2, r0
 8007a72:	460b      	mov	r3, r1
 8007a74:	4650      	mov	r0, sl
 8007a76:	4659      	mov	r1, fp
 8007a78:	f7f8 fb6e 	bl	8000158 <__aeabi_dsub>
 8007a7c:	4642      	mov	r2, r8
 8007a7e:	464b      	mov	r3, r9
 8007a80:	f7f8 fd22 	bl	80004c8 <__aeabi_dmul>
 8007a84:	4602      	mov	r2, r0
 8007a86:	460b      	mov	r3, r1
 8007a88:	4630      	mov	r0, r6
 8007a8a:	4639      	mov	r1, r7
 8007a8c:	f7f8 fb64 	bl	8000158 <__aeabi_dsub>
 8007a90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a94:	f7f8 fd18 	bl	80004c8 <__aeabi_dmul>
 8007a98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a9c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007aa0:	4610      	mov	r0, r2
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	f7f8 fd10 	bl	80004c8 <__aeabi_dmul>
 8007aa8:	a379      	add	r3, pc, #484	; (adr r3, 8007c90 <__ieee754_pow+0x6e8>)
 8007aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aae:	4604      	mov	r4, r0
 8007ab0:	460d      	mov	r5, r1
 8007ab2:	f7f8 fd09 	bl	80004c8 <__aeabi_dmul>
 8007ab6:	a378      	add	r3, pc, #480	; (adr r3, 8007c98 <__ieee754_pow+0x6f0>)
 8007ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abc:	f7f8 fb4e 	bl	800015c <__adddf3>
 8007ac0:	4622      	mov	r2, r4
 8007ac2:	462b      	mov	r3, r5
 8007ac4:	f7f8 fd00 	bl	80004c8 <__aeabi_dmul>
 8007ac8:	a375      	add	r3, pc, #468	; (adr r3, 8007ca0 <__ieee754_pow+0x6f8>)
 8007aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ace:	f7f8 fb45 	bl	800015c <__adddf3>
 8007ad2:	4622      	mov	r2, r4
 8007ad4:	462b      	mov	r3, r5
 8007ad6:	f7f8 fcf7 	bl	80004c8 <__aeabi_dmul>
 8007ada:	a373      	add	r3, pc, #460	; (adr r3, 8007ca8 <__ieee754_pow+0x700>)
 8007adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae0:	f7f8 fb3c 	bl	800015c <__adddf3>
 8007ae4:	4622      	mov	r2, r4
 8007ae6:	462b      	mov	r3, r5
 8007ae8:	f7f8 fcee 	bl	80004c8 <__aeabi_dmul>
 8007aec:	a370      	add	r3, pc, #448	; (adr r3, 8007cb0 <__ieee754_pow+0x708>)
 8007aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af2:	f7f8 fb33 	bl	800015c <__adddf3>
 8007af6:	4622      	mov	r2, r4
 8007af8:	462b      	mov	r3, r5
 8007afa:	f7f8 fce5 	bl	80004c8 <__aeabi_dmul>
 8007afe:	a36e      	add	r3, pc, #440	; (adr r3, 8007cb8 <__ieee754_pow+0x710>)
 8007b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b04:	f7f8 fb2a 	bl	800015c <__adddf3>
 8007b08:	4622      	mov	r2, r4
 8007b0a:	4606      	mov	r6, r0
 8007b0c:	460f      	mov	r7, r1
 8007b0e:	462b      	mov	r3, r5
 8007b10:	4620      	mov	r0, r4
 8007b12:	4629      	mov	r1, r5
 8007b14:	f7f8 fcd8 	bl	80004c8 <__aeabi_dmul>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	4639      	mov	r1, r7
 8007b20:	f7f8 fcd2 	bl	80004c8 <__aeabi_dmul>
 8007b24:	4604      	mov	r4, r0
 8007b26:	460d      	mov	r5, r1
 8007b28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b2c:	4642      	mov	r2, r8
 8007b2e:	464b      	mov	r3, r9
 8007b30:	f7f8 fb14 	bl	800015c <__adddf3>
 8007b34:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007b38:	f7f8 fcc6 	bl	80004c8 <__aeabi_dmul>
 8007b3c:	4622      	mov	r2, r4
 8007b3e:	462b      	mov	r3, r5
 8007b40:	f7f8 fb0c 	bl	800015c <__adddf3>
 8007b44:	4642      	mov	r2, r8
 8007b46:	4606      	mov	r6, r0
 8007b48:	460f      	mov	r7, r1
 8007b4a:	464b      	mov	r3, r9
 8007b4c:	4640      	mov	r0, r8
 8007b4e:	4649      	mov	r1, r9
 8007b50:	f7f8 fcba 	bl	80004c8 <__aeabi_dmul>
 8007b54:	2200      	movs	r2, #0
 8007b56:	4b66      	ldr	r3, [pc, #408]	; (8007cf0 <__ieee754_pow+0x748>)
 8007b58:	4682      	mov	sl, r0
 8007b5a:	468b      	mov	fp, r1
 8007b5c:	f7f8 fafe 	bl	800015c <__adddf3>
 8007b60:	4632      	mov	r2, r6
 8007b62:	463b      	mov	r3, r7
 8007b64:	f7f8 fafa 	bl	800015c <__adddf3>
 8007b68:	2400      	movs	r4, #0
 8007b6a:	460d      	mov	r5, r1
 8007b6c:	4622      	mov	r2, r4
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4640      	mov	r0, r8
 8007b72:	4649      	mov	r1, r9
 8007b74:	f7f8 fca8 	bl	80004c8 <__aeabi_dmul>
 8007b78:	2200      	movs	r2, #0
 8007b7a:	4680      	mov	r8, r0
 8007b7c:	4689      	mov	r9, r1
 8007b7e:	4620      	mov	r0, r4
 8007b80:	4629      	mov	r1, r5
 8007b82:	4b5b      	ldr	r3, [pc, #364]	; (8007cf0 <__ieee754_pow+0x748>)
 8007b84:	f7f8 fae8 	bl	8000158 <__aeabi_dsub>
 8007b88:	4652      	mov	r2, sl
 8007b8a:	465b      	mov	r3, fp
 8007b8c:	f7f8 fae4 	bl	8000158 <__aeabi_dsub>
 8007b90:	4602      	mov	r2, r0
 8007b92:	460b      	mov	r3, r1
 8007b94:	4630      	mov	r0, r6
 8007b96:	4639      	mov	r1, r7
 8007b98:	f7f8 fade 	bl	8000158 <__aeabi_dsub>
 8007b9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ba0:	f7f8 fc92 	bl	80004c8 <__aeabi_dmul>
 8007ba4:	4622      	mov	r2, r4
 8007ba6:	4606      	mov	r6, r0
 8007ba8:	460f      	mov	r7, r1
 8007baa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007bae:	462b      	mov	r3, r5
 8007bb0:	f7f8 fc8a 	bl	80004c8 <__aeabi_dmul>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	4630      	mov	r0, r6
 8007bba:	4639      	mov	r1, r7
 8007bbc:	f7f8 face 	bl	800015c <__adddf3>
 8007bc0:	2400      	movs	r4, #0
 8007bc2:	4606      	mov	r6, r0
 8007bc4:	460f      	mov	r7, r1
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	4640      	mov	r0, r8
 8007bcc:	4649      	mov	r1, r9
 8007bce:	f7f8 fac5 	bl	800015c <__adddf3>
 8007bd2:	a33b      	add	r3, pc, #236	; (adr r3, 8007cc0 <__ieee754_pow+0x718>)
 8007bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd8:	4620      	mov	r0, r4
 8007bda:	460d      	mov	r5, r1
 8007bdc:	f7f8 fc74 	bl	80004c8 <__aeabi_dmul>
 8007be0:	4642      	mov	r2, r8
 8007be2:	464b      	mov	r3, r9
 8007be4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007be8:	4620      	mov	r0, r4
 8007bea:	4629      	mov	r1, r5
 8007bec:	f7f8 fab4 	bl	8000158 <__aeabi_dsub>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	4639      	mov	r1, r7
 8007bf8:	f7f8 faae 	bl	8000158 <__aeabi_dsub>
 8007bfc:	a332      	add	r3, pc, #200	; (adr r3, 8007cc8 <__ieee754_pow+0x720>)
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	f7f8 fc61 	bl	80004c8 <__aeabi_dmul>
 8007c06:	a332      	add	r3, pc, #200	; (adr r3, 8007cd0 <__ieee754_pow+0x728>)
 8007c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0c:	4606      	mov	r6, r0
 8007c0e:	460f      	mov	r7, r1
 8007c10:	4620      	mov	r0, r4
 8007c12:	4629      	mov	r1, r5
 8007c14:	f7f8 fc58 	bl	80004c8 <__aeabi_dmul>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	4639      	mov	r1, r7
 8007c20:	f7f8 fa9c 	bl	800015c <__adddf3>
 8007c24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c26:	4b33      	ldr	r3, [pc, #204]	; (8007cf4 <__ieee754_pow+0x74c>)
 8007c28:	f04f 0a00 	mov.w	sl, #0
 8007c2c:	4413      	add	r3, r2
 8007c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c32:	f7f8 fa93 	bl	800015c <__adddf3>
 8007c36:	4680      	mov	r8, r0
 8007c38:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007c3a:	4689      	mov	r9, r1
 8007c3c:	f7f8 fbda 	bl	80003f4 <__aeabi_i2d>
 8007c40:	4604      	mov	r4, r0
 8007c42:	460d      	mov	r5, r1
 8007c44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c46:	4b2c      	ldr	r3, [pc, #176]	; (8007cf8 <__ieee754_pow+0x750>)
 8007c48:	4413      	add	r3, r2
 8007c4a:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007c4e:	4642      	mov	r2, r8
 8007c50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c54:	464b      	mov	r3, r9
 8007c56:	f7f8 fa81 	bl	800015c <__adddf3>
 8007c5a:	4632      	mov	r2, r6
 8007c5c:	463b      	mov	r3, r7
 8007c5e:	f7f8 fa7d 	bl	800015c <__adddf3>
 8007c62:	4622      	mov	r2, r4
 8007c64:	462b      	mov	r3, r5
 8007c66:	f7f8 fa79 	bl	800015c <__adddf3>
 8007c6a:	4622      	mov	r2, r4
 8007c6c:	462b      	mov	r3, r5
 8007c6e:	4650      	mov	r0, sl
 8007c70:	468b      	mov	fp, r1
 8007c72:	f7f8 fa71 	bl	8000158 <__aeabi_dsub>
 8007c76:	4632      	mov	r2, r6
 8007c78:	463b      	mov	r3, r7
 8007c7a:	f7f8 fa6d 	bl	8000158 <__aeabi_dsub>
 8007c7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c82:	f7f8 fa69 	bl	8000158 <__aeabi_dsub>
 8007c86:	4602      	mov	r2, r0
 8007c88:	460b      	mov	r3, r1
 8007c8a:	4640      	mov	r0, r8
 8007c8c:	4649      	mov	r1, r9
 8007c8e:	e60d      	b.n	80078ac <__ieee754_pow+0x304>
 8007c90:	4a454eef 	.word	0x4a454eef
 8007c94:	3fca7e28 	.word	0x3fca7e28
 8007c98:	93c9db65 	.word	0x93c9db65
 8007c9c:	3fcd864a 	.word	0x3fcd864a
 8007ca0:	a91d4101 	.word	0xa91d4101
 8007ca4:	3fd17460 	.word	0x3fd17460
 8007ca8:	518f264d 	.word	0x518f264d
 8007cac:	3fd55555 	.word	0x3fd55555
 8007cb0:	db6fabff 	.word	0xdb6fabff
 8007cb4:	3fdb6db6 	.word	0x3fdb6db6
 8007cb8:	33333303 	.word	0x33333303
 8007cbc:	3fe33333 	.word	0x3fe33333
 8007cc0:	e0000000 	.word	0xe0000000
 8007cc4:	3feec709 	.word	0x3feec709
 8007cc8:	dc3a03fd 	.word	0xdc3a03fd
 8007ccc:	3feec709 	.word	0x3feec709
 8007cd0:	145b01f5 	.word	0x145b01f5
 8007cd4:	be3e2fe0 	.word	0xbe3e2fe0
 8007cd8:	7ff00000 	.word	0x7ff00000
 8007cdc:	43400000 	.word	0x43400000
 8007ce0:	0003988e 	.word	0x0003988e
 8007ce4:	000bb679 	.word	0x000bb679
 8007ce8:	080084e8 	.word	0x080084e8
 8007cec:	3ff00000 	.word	0x3ff00000
 8007cf0:	40080000 	.word	0x40080000
 8007cf4:	08008508 	.word	0x08008508
 8007cf8:	080084f8 	.word	0x080084f8
 8007cfc:	2601      	movs	r6, #1
 8007cfe:	e66a      	b.n	80079d6 <__ieee754_pow+0x42e>
 8007d00:	a39d      	add	r3, pc, #628	; (adr r3, 8007f78 <__ieee754_pow+0x9d0>)
 8007d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d06:	4640      	mov	r0, r8
 8007d08:	4649      	mov	r1, r9
 8007d0a:	f7f8 fa27 	bl	800015c <__adddf3>
 8007d0e:	4622      	mov	r2, r4
 8007d10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d14:	462b      	mov	r3, r5
 8007d16:	4650      	mov	r0, sl
 8007d18:	4639      	mov	r1, r7
 8007d1a:	f7f8 fa1d 	bl	8000158 <__aeabi_dsub>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d26:	f7f8 fe5f 	bl	80009e8 <__aeabi_dcmpgt>
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	f47f ae09 	bne.w	8007942 <__ieee754_pow+0x39a>
 8007d30:	4aa3      	ldr	r2, [pc, #652]	; (8007fc0 <__ieee754_pow+0xa18>)
 8007d32:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8007d36:	4293      	cmp	r3, r2
 8007d38:	f340 8101 	ble.w	8007f3e <__ieee754_pow+0x996>
 8007d3c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007d40:	2000      	movs	r0, #0
 8007d42:	151b      	asrs	r3, r3, #20
 8007d44:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007d48:	fa4a f303 	asr.w	r3, sl, r3
 8007d4c:	4433      	add	r3, r6
 8007d4e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007d52:	4f9c      	ldr	r7, [pc, #624]	; (8007fc4 <__ieee754_pow+0xa1c>)
 8007d54:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007d58:	4117      	asrs	r7, r2
 8007d5a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007d5e:	ea23 0107 	bic.w	r1, r3, r7
 8007d62:	f1c2 0214 	rsb	r2, r2, #20
 8007d66:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	fa4a fa02 	asr.w	sl, sl, r2
 8007d70:	2e00      	cmp	r6, #0
 8007d72:	4602      	mov	r2, r0
 8007d74:	4629      	mov	r1, r5
 8007d76:	4620      	mov	r0, r4
 8007d78:	bfb8      	it	lt
 8007d7a:	f1ca 0a00 	rsblt	sl, sl, #0
 8007d7e:	f7f8 f9eb 	bl	8000158 <__aeabi_dsub>
 8007d82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d8a:	2400      	movs	r4, #0
 8007d8c:	4642      	mov	r2, r8
 8007d8e:	464b      	mov	r3, r9
 8007d90:	f7f8 f9e4 	bl	800015c <__adddf3>
 8007d94:	a37a      	add	r3, pc, #488	; (adr r3, 8007f80 <__ieee754_pow+0x9d8>)
 8007d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	460d      	mov	r5, r1
 8007d9e:	f7f8 fb93 	bl	80004c8 <__aeabi_dmul>
 8007da2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007da6:	4606      	mov	r6, r0
 8007da8:	460f      	mov	r7, r1
 8007daa:	4620      	mov	r0, r4
 8007dac:	4629      	mov	r1, r5
 8007dae:	f7f8 f9d3 	bl	8000158 <__aeabi_dsub>
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	4640      	mov	r0, r8
 8007db8:	4649      	mov	r1, r9
 8007dba:	f7f8 f9cd 	bl	8000158 <__aeabi_dsub>
 8007dbe:	a372      	add	r3, pc, #456	; (adr r3, 8007f88 <__ieee754_pow+0x9e0>)
 8007dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc4:	f7f8 fb80 	bl	80004c8 <__aeabi_dmul>
 8007dc8:	a371      	add	r3, pc, #452	; (adr r3, 8007f90 <__ieee754_pow+0x9e8>)
 8007dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dce:	4680      	mov	r8, r0
 8007dd0:	4689      	mov	r9, r1
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	4629      	mov	r1, r5
 8007dd6:	f7f8 fb77 	bl	80004c8 <__aeabi_dmul>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4640      	mov	r0, r8
 8007de0:	4649      	mov	r1, r9
 8007de2:	f7f8 f9bb 	bl	800015c <__adddf3>
 8007de6:	4604      	mov	r4, r0
 8007de8:	460d      	mov	r5, r1
 8007dea:	4602      	mov	r2, r0
 8007dec:	460b      	mov	r3, r1
 8007dee:	4630      	mov	r0, r6
 8007df0:	4639      	mov	r1, r7
 8007df2:	f7f8 f9b3 	bl	800015c <__adddf3>
 8007df6:	4632      	mov	r2, r6
 8007df8:	463b      	mov	r3, r7
 8007dfa:	4680      	mov	r8, r0
 8007dfc:	4689      	mov	r9, r1
 8007dfe:	f7f8 f9ab 	bl	8000158 <__aeabi_dsub>
 8007e02:	4602      	mov	r2, r0
 8007e04:	460b      	mov	r3, r1
 8007e06:	4620      	mov	r0, r4
 8007e08:	4629      	mov	r1, r5
 8007e0a:	f7f8 f9a5 	bl	8000158 <__aeabi_dsub>
 8007e0e:	4642      	mov	r2, r8
 8007e10:	4606      	mov	r6, r0
 8007e12:	460f      	mov	r7, r1
 8007e14:	464b      	mov	r3, r9
 8007e16:	4640      	mov	r0, r8
 8007e18:	4649      	mov	r1, r9
 8007e1a:	f7f8 fb55 	bl	80004c8 <__aeabi_dmul>
 8007e1e:	a35e      	add	r3, pc, #376	; (adr r3, 8007f98 <__ieee754_pow+0x9f0>)
 8007e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e24:	4604      	mov	r4, r0
 8007e26:	460d      	mov	r5, r1
 8007e28:	f7f8 fb4e 	bl	80004c8 <__aeabi_dmul>
 8007e2c:	a35c      	add	r3, pc, #368	; (adr r3, 8007fa0 <__ieee754_pow+0x9f8>)
 8007e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e32:	f7f8 f991 	bl	8000158 <__aeabi_dsub>
 8007e36:	4622      	mov	r2, r4
 8007e38:	462b      	mov	r3, r5
 8007e3a:	f7f8 fb45 	bl	80004c8 <__aeabi_dmul>
 8007e3e:	a35a      	add	r3, pc, #360	; (adr r3, 8007fa8 <__ieee754_pow+0xa00>)
 8007e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e44:	f7f8 f98a 	bl	800015c <__adddf3>
 8007e48:	4622      	mov	r2, r4
 8007e4a:	462b      	mov	r3, r5
 8007e4c:	f7f8 fb3c 	bl	80004c8 <__aeabi_dmul>
 8007e50:	a357      	add	r3, pc, #348	; (adr r3, 8007fb0 <__ieee754_pow+0xa08>)
 8007e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e56:	f7f8 f97f 	bl	8000158 <__aeabi_dsub>
 8007e5a:	4622      	mov	r2, r4
 8007e5c:	462b      	mov	r3, r5
 8007e5e:	f7f8 fb33 	bl	80004c8 <__aeabi_dmul>
 8007e62:	a355      	add	r3, pc, #340	; (adr r3, 8007fb8 <__ieee754_pow+0xa10>)
 8007e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e68:	f7f8 f978 	bl	800015c <__adddf3>
 8007e6c:	4622      	mov	r2, r4
 8007e6e:	462b      	mov	r3, r5
 8007e70:	f7f8 fb2a 	bl	80004c8 <__aeabi_dmul>
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	4640      	mov	r0, r8
 8007e7a:	4649      	mov	r1, r9
 8007e7c:	f7f8 f96c 	bl	8000158 <__aeabi_dsub>
 8007e80:	4604      	mov	r4, r0
 8007e82:	460d      	mov	r5, r1
 8007e84:	4602      	mov	r2, r0
 8007e86:	460b      	mov	r3, r1
 8007e88:	4640      	mov	r0, r8
 8007e8a:	4649      	mov	r1, r9
 8007e8c:	f7f8 fb1c 	bl	80004c8 <__aeabi_dmul>
 8007e90:	2200      	movs	r2, #0
 8007e92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	4629      	mov	r1, r5
 8007e9e:	f7f8 f95b 	bl	8000158 <__aeabi_dsub>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eaa:	f7f8 fc37 	bl	800071c <__aeabi_ddiv>
 8007eae:	4632      	mov	r2, r6
 8007eb0:	4604      	mov	r4, r0
 8007eb2:	460d      	mov	r5, r1
 8007eb4:	463b      	mov	r3, r7
 8007eb6:	4640      	mov	r0, r8
 8007eb8:	4649      	mov	r1, r9
 8007eba:	f7f8 fb05 	bl	80004c8 <__aeabi_dmul>
 8007ebe:	4632      	mov	r2, r6
 8007ec0:	463b      	mov	r3, r7
 8007ec2:	f7f8 f94b 	bl	800015c <__adddf3>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	460b      	mov	r3, r1
 8007eca:	4620      	mov	r0, r4
 8007ecc:	4629      	mov	r1, r5
 8007ece:	f7f8 f943 	bl	8000158 <__aeabi_dsub>
 8007ed2:	4642      	mov	r2, r8
 8007ed4:	464b      	mov	r3, r9
 8007ed6:	f7f8 f93f 	bl	8000158 <__aeabi_dsub>
 8007eda:	4602      	mov	r2, r0
 8007edc:	460b      	mov	r3, r1
 8007ede:	2000      	movs	r0, #0
 8007ee0:	4939      	ldr	r1, [pc, #228]	; (8007fc8 <__ieee754_pow+0xa20>)
 8007ee2:	f7f8 f939 	bl	8000158 <__aeabi_dsub>
 8007ee6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007eea:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007eee:	da29      	bge.n	8007f44 <__ieee754_pow+0x99c>
 8007ef0:	4652      	mov	r2, sl
 8007ef2:	f000 f955 	bl	80081a0 <scalbn>
 8007ef6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007efa:	f7ff bbfe 	b.w	80076fa <__ieee754_pow+0x152>
 8007efe:	4b33      	ldr	r3, [pc, #204]	; (8007fcc <__ieee754_pow+0xa24>)
 8007f00:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8007f04:	429f      	cmp	r7, r3
 8007f06:	f77f af13 	ble.w	8007d30 <__ieee754_pow+0x788>
 8007f0a:	4b31      	ldr	r3, [pc, #196]	; (8007fd0 <__ieee754_pow+0xa28>)
 8007f0c:	440b      	add	r3, r1
 8007f0e:	4303      	orrs	r3, r0
 8007f10:	d009      	beq.n	8007f26 <__ieee754_pow+0x97e>
 8007f12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f16:	2200      	movs	r2, #0
 8007f18:	2300      	movs	r3, #0
 8007f1a:	f7f8 fd47 	bl	80009ac <__aeabi_dcmplt>
 8007f1e:	3800      	subs	r0, #0
 8007f20:	bf18      	it	ne
 8007f22:	2001      	movne	r0, #1
 8007f24:	e453      	b.n	80077ce <__ieee754_pow+0x226>
 8007f26:	4622      	mov	r2, r4
 8007f28:	462b      	mov	r3, r5
 8007f2a:	f7f8 f915 	bl	8000158 <__aeabi_dsub>
 8007f2e:	4642      	mov	r2, r8
 8007f30:	464b      	mov	r3, r9
 8007f32:	f7f8 fd4f 	bl	80009d4 <__aeabi_dcmpge>
 8007f36:	2800      	cmp	r0, #0
 8007f38:	f43f aefa 	beq.w	8007d30 <__ieee754_pow+0x788>
 8007f3c:	e7e9      	b.n	8007f12 <__ieee754_pow+0x96a>
 8007f3e:	f04f 0a00 	mov.w	sl, #0
 8007f42:	e720      	b.n	8007d86 <__ieee754_pow+0x7de>
 8007f44:	4621      	mov	r1, r4
 8007f46:	e7d6      	b.n	8007ef6 <__ieee754_pow+0x94e>
 8007f48:	f04f 0b00 	mov.w	fp, #0
 8007f4c:	f8df c078 	ldr.w	ip, [pc, #120]	; 8007fc8 <__ieee754_pow+0xa20>
 8007f50:	f7ff bbba 	b.w	80076c8 <__ieee754_pow+0x120>
 8007f54:	f04f 0b00 	mov.w	fp, #0
 8007f58:	f04f 0c00 	mov.w	ip, #0
 8007f5c:	f7ff bbb4 	b.w	80076c8 <__ieee754_pow+0x120>
 8007f60:	4640      	mov	r0, r8
 8007f62:	4649      	mov	r1, r9
 8007f64:	f7ff bb3d 	b.w	80075e2 <__ieee754_pow+0x3a>
 8007f68:	9200      	str	r2, [sp, #0]
 8007f6a:	f7ff bb89 	b.w	8007680 <__ieee754_pow+0xd8>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f7ff bb73 	b.w	800765a <__ieee754_pow+0xb2>
 8007f74:	f3af 8000 	nop.w
 8007f78:	652b82fe 	.word	0x652b82fe
 8007f7c:	3c971547 	.word	0x3c971547
 8007f80:	00000000 	.word	0x00000000
 8007f84:	3fe62e43 	.word	0x3fe62e43
 8007f88:	fefa39ef 	.word	0xfefa39ef
 8007f8c:	3fe62e42 	.word	0x3fe62e42
 8007f90:	0ca86c39 	.word	0x0ca86c39
 8007f94:	be205c61 	.word	0xbe205c61
 8007f98:	72bea4d0 	.word	0x72bea4d0
 8007f9c:	3e663769 	.word	0x3e663769
 8007fa0:	c5d26bf1 	.word	0xc5d26bf1
 8007fa4:	3ebbbd41 	.word	0x3ebbbd41
 8007fa8:	af25de2c 	.word	0xaf25de2c
 8007fac:	3f11566a 	.word	0x3f11566a
 8007fb0:	16bebd93 	.word	0x16bebd93
 8007fb4:	3f66c16c 	.word	0x3f66c16c
 8007fb8:	5555553e 	.word	0x5555553e
 8007fbc:	3fc55555 	.word	0x3fc55555
 8007fc0:	3fe00000 	.word	0x3fe00000
 8007fc4:	000fffff 	.word	0x000fffff
 8007fc8:	3ff00000 	.word	0x3ff00000
 8007fcc:	4090cbff 	.word	0x4090cbff
 8007fd0:	3f6f3400 	.word	0x3f6f3400

08007fd4 <__ieee754_sqrt>:
 8007fd4:	f8df c158 	ldr.w	ip, [pc, #344]	; 8008130 <__ieee754_sqrt+0x15c>
 8007fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fdc:	ea3c 0c01 	bics.w	ip, ip, r1
 8007fe0:	4606      	mov	r6, r0
 8007fe2:	460d      	mov	r5, r1
 8007fe4:	460c      	mov	r4, r1
 8007fe6:	460a      	mov	r2, r1
 8007fe8:	4607      	mov	r7, r0
 8007fea:	4603      	mov	r3, r0
 8007fec:	d10f      	bne.n	800800e <__ieee754_sqrt+0x3a>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	f7f8 fa69 	bl	80004c8 <__aeabi_dmul>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	4629      	mov	r1, r5
 8007ffe:	f7f8 f8ad 	bl	800015c <__adddf3>
 8008002:	4606      	mov	r6, r0
 8008004:	460d      	mov	r5, r1
 8008006:	4630      	mov	r0, r6
 8008008:	4629      	mov	r1, r5
 800800a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800800e:	2900      	cmp	r1, #0
 8008010:	dc0e      	bgt.n	8008030 <__ieee754_sqrt+0x5c>
 8008012:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008016:	ea5c 0707 	orrs.w	r7, ip, r7
 800801a:	d0f4      	beq.n	8008006 <__ieee754_sqrt+0x32>
 800801c:	b141      	cbz	r1, 8008030 <__ieee754_sqrt+0x5c>
 800801e:	4602      	mov	r2, r0
 8008020:	460b      	mov	r3, r1
 8008022:	f7f8 f899 	bl	8000158 <__aeabi_dsub>
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	f7f8 fb77 	bl	800071c <__aeabi_ddiv>
 800802e:	e7e8      	b.n	8008002 <__ieee754_sqrt+0x2e>
 8008030:	1521      	asrs	r1, r4, #20
 8008032:	d075      	beq.n	8008120 <__ieee754_sqrt+0x14c>
 8008034:	07cc      	lsls	r4, r1, #31
 8008036:	f04f 0400 	mov.w	r4, #0
 800803a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800803e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8008042:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008046:	bf5e      	ittt	pl
 8008048:	0fd9      	lsrpl	r1, r3, #31
 800804a:	005b      	lslpl	r3, r3, #1
 800804c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8008050:	0fd9      	lsrs	r1, r3, #31
 8008052:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8008056:	2516      	movs	r5, #22
 8008058:	4620      	mov	r0, r4
 800805a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800805e:	107f      	asrs	r7, r7, #1
 8008060:	005b      	lsls	r3, r3, #1
 8008062:	1846      	adds	r6, r0, r1
 8008064:	4296      	cmp	r6, r2
 8008066:	bfde      	ittt	le
 8008068:	1b92      	suble	r2, r2, r6
 800806a:	1870      	addle	r0, r6, r1
 800806c:	1864      	addle	r4, r4, r1
 800806e:	0052      	lsls	r2, r2, #1
 8008070:	3d01      	subs	r5, #1
 8008072:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008076:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800807a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800807e:	d1f0      	bne.n	8008062 <__ieee754_sqrt+0x8e>
 8008080:	4629      	mov	r1, r5
 8008082:	f04f 0e20 	mov.w	lr, #32
 8008086:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800808a:	4282      	cmp	r2, r0
 800808c:	eb06 0c05 	add.w	ip, r6, r5
 8008090:	dc02      	bgt.n	8008098 <__ieee754_sqrt+0xc4>
 8008092:	d113      	bne.n	80080bc <__ieee754_sqrt+0xe8>
 8008094:	459c      	cmp	ip, r3
 8008096:	d811      	bhi.n	80080bc <__ieee754_sqrt+0xe8>
 8008098:	f1bc 0f00 	cmp.w	ip, #0
 800809c:	eb0c 0506 	add.w	r5, ip, r6
 80080a0:	da43      	bge.n	800812a <__ieee754_sqrt+0x156>
 80080a2:	2d00      	cmp	r5, #0
 80080a4:	db41      	blt.n	800812a <__ieee754_sqrt+0x156>
 80080a6:	f100 0801 	add.w	r8, r0, #1
 80080aa:	1a12      	subs	r2, r2, r0
 80080ac:	4640      	mov	r0, r8
 80080ae:	459c      	cmp	ip, r3
 80080b0:	bf88      	it	hi
 80080b2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80080b6:	eba3 030c 	sub.w	r3, r3, ip
 80080ba:	4431      	add	r1, r6
 80080bc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80080c0:	f1be 0e01 	subs.w	lr, lr, #1
 80080c4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80080c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80080cc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80080d0:	d1db      	bne.n	800808a <__ieee754_sqrt+0xb6>
 80080d2:	4313      	orrs	r3, r2
 80080d4:	d006      	beq.n	80080e4 <__ieee754_sqrt+0x110>
 80080d6:	1c48      	adds	r0, r1, #1
 80080d8:	bf0b      	itete	eq
 80080da:	4671      	moveq	r1, lr
 80080dc:	3101      	addne	r1, #1
 80080de:	3401      	addeq	r4, #1
 80080e0:	f021 0101 	bicne.w	r1, r1, #1
 80080e4:	1063      	asrs	r3, r4, #1
 80080e6:	0849      	lsrs	r1, r1, #1
 80080e8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80080ec:	07e2      	lsls	r2, r4, #31
 80080ee:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80080f2:	bf48      	it	mi
 80080f4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80080f8:	460e      	mov	r6, r1
 80080fa:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80080fe:	e782      	b.n	8008006 <__ieee754_sqrt+0x32>
 8008100:	0ada      	lsrs	r2, r3, #11
 8008102:	3815      	subs	r0, #21
 8008104:	055b      	lsls	r3, r3, #21
 8008106:	2a00      	cmp	r2, #0
 8008108:	d0fa      	beq.n	8008100 <__ieee754_sqrt+0x12c>
 800810a:	02d5      	lsls	r5, r2, #11
 800810c:	d50a      	bpl.n	8008124 <__ieee754_sqrt+0x150>
 800810e:	f1c1 0420 	rsb	r4, r1, #32
 8008112:	fa23 f404 	lsr.w	r4, r3, r4
 8008116:	1e4d      	subs	r5, r1, #1
 8008118:	408b      	lsls	r3, r1
 800811a:	4322      	orrs	r2, r4
 800811c:	1b41      	subs	r1, r0, r5
 800811e:	e789      	b.n	8008034 <__ieee754_sqrt+0x60>
 8008120:	4608      	mov	r0, r1
 8008122:	e7f0      	b.n	8008106 <__ieee754_sqrt+0x132>
 8008124:	0052      	lsls	r2, r2, #1
 8008126:	3101      	adds	r1, #1
 8008128:	e7ef      	b.n	800810a <__ieee754_sqrt+0x136>
 800812a:	4680      	mov	r8, r0
 800812c:	e7bd      	b.n	80080aa <__ieee754_sqrt+0xd6>
 800812e:	bf00      	nop
 8008130:	7ff00000 	.word	0x7ff00000

08008134 <with_errno>:
 8008134:	b570      	push	{r4, r5, r6, lr}
 8008136:	4604      	mov	r4, r0
 8008138:	460d      	mov	r5, r1
 800813a:	4616      	mov	r6, r2
 800813c:	f7ff f976 	bl	800742c <__errno>
 8008140:	4629      	mov	r1, r5
 8008142:	6006      	str	r6, [r0, #0]
 8008144:	4620      	mov	r0, r4
 8008146:	bd70      	pop	{r4, r5, r6, pc}

08008148 <xflow>:
 8008148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800814a:	4615      	mov	r5, r2
 800814c:	461c      	mov	r4, r3
 800814e:	b180      	cbz	r0, 8008172 <xflow+0x2a>
 8008150:	4610      	mov	r0, r2
 8008152:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008156:	e9cd 0100 	strd	r0, r1, [sp]
 800815a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800815e:	4628      	mov	r0, r5
 8008160:	4621      	mov	r1, r4
 8008162:	f7f8 f9b1 	bl	80004c8 <__aeabi_dmul>
 8008166:	2222      	movs	r2, #34	; 0x22
 8008168:	b003      	add	sp, #12
 800816a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800816e:	f7ff bfe1 	b.w	8008134 <with_errno>
 8008172:	4610      	mov	r0, r2
 8008174:	4619      	mov	r1, r3
 8008176:	e7ee      	b.n	8008156 <xflow+0xe>

08008178 <__math_uflow>:
 8008178:	2200      	movs	r2, #0
 800817a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800817e:	f7ff bfe3 	b.w	8008148 <xflow>

08008182 <__math_oflow>:
 8008182:	2200      	movs	r2, #0
 8008184:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008188:	f7ff bfde 	b.w	8008148 <xflow>

0800818c <fabs>:
 800818c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008190:	4770      	bx	lr

08008192 <finite>:
 8008192:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8008196:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800819a:	0fc0      	lsrs	r0, r0, #31
 800819c:	4770      	bx	lr
	...

080081a0 <scalbn>:
 80081a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80081a6:	4604      	mov	r4, r0
 80081a8:	460d      	mov	r5, r1
 80081aa:	4617      	mov	r7, r2
 80081ac:	460b      	mov	r3, r1
 80081ae:	b996      	cbnz	r6, 80081d6 <scalbn+0x36>
 80081b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80081b4:	4303      	orrs	r3, r0
 80081b6:	d039      	beq.n	800822c <scalbn+0x8c>
 80081b8:	4b33      	ldr	r3, [pc, #204]	; (8008288 <scalbn+0xe8>)
 80081ba:	2200      	movs	r2, #0
 80081bc:	f7f8 f984 	bl	80004c8 <__aeabi_dmul>
 80081c0:	4b32      	ldr	r3, [pc, #200]	; (800828c <scalbn+0xec>)
 80081c2:	4604      	mov	r4, r0
 80081c4:	429f      	cmp	r7, r3
 80081c6:	460d      	mov	r5, r1
 80081c8:	da0f      	bge.n	80081ea <scalbn+0x4a>
 80081ca:	a32b      	add	r3, pc, #172	; (adr r3, 8008278 <scalbn+0xd8>)
 80081cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d0:	f7f8 f97a 	bl	80004c8 <__aeabi_dmul>
 80081d4:	e006      	b.n	80081e4 <scalbn+0x44>
 80081d6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80081da:	4296      	cmp	r6, r2
 80081dc:	d10a      	bne.n	80081f4 <scalbn+0x54>
 80081de:	4602      	mov	r2, r0
 80081e0:	f7f7 ffbc 	bl	800015c <__adddf3>
 80081e4:	4604      	mov	r4, r0
 80081e6:	460d      	mov	r5, r1
 80081e8:	e020      	b.n	800822c <scalbn+0x8c>
 80081ea:	460b      	mov	r3, r1
 80081ec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80081f0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80081f4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80081f8:	19b9      	adds	r1, r7, r6
 80081fa:	4291      	cmp	r1, r2
 80081fc:	dd0e      	ble.n	800821c <scalbn+0x7c>
 80081fe:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8008202:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8008206:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800820a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800820e:	4820      	ldr	r0, [pc, #128]	; (8008290 <scalbn+0xf0>)
 8008210:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8008214:	a31a      	add	r3, pc, #104	; (adr r3, 8008280 <scalbn+0xe0>)
 8008216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821a:	e7d9      	b.n	80081d0 <scalbn+0x30>
 800821c:	2900      	cmp	r1, #0
 800821e:	dd08      	ble.n	8008232 <scalbn+0x92>
 8008220:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008224:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008228:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800822c:	4620      	mov	r0, r4
 800822e:	4629      	mov	r1, r5
 8008230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008232:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8008236:	da12      	bge.n	800825e <scalbn+0xbe>
 8008238:	f24c 3350 	movw	r3, #50000	; 0xc350
 800823c:	429f      	cmp	r7, r3
 800823e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8008242:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8008246:	dcdc      	bgt.n	8008202 <scalbn+0x62>
 8008248:	a30b      	add	r3, pc, #44	; (adr r3, 8008278 <scalbn+0xd8>)
 800824a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8008252:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8008256:	480f      	ldr	r0, [pc, #60]	; (8008294 <scalbn+0xf4>)
 8008258:	f041 011f 	orr.w	r1, r1, #31
 800825c:	e7b8      	b.n	80081d0 <scalbn+0x30>
 800825e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008262:	3136      	adds	r1, #54	; 0x36
 8008264:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008268:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800826c:	4620      	mov	r0, r4
 800826e:	4629      	mov	r1, r5
 8008270:	2200      	movs	r2, #0
 8008272:	4b09      	ldr	r3, [pc, #36]	; (8008298 <scalbn+0xf8>)
 8008274:	e7ac      	b.n	80081d0 <scalbn+0x30>
 8008276:	bf00      	nop
 8008278:	c2f8f359 	.word	0xc2f8f359
 800827c:	01a56e1f 	.word	0x01a56e1f
 8008280:	8800759c 	.word	0x8800759c
 8008284:	7e37e43c 	.word	0x7e37e43c
 8008288:	43500000 	.word	0x43500000
 800828c:	ffff3cb0 	.word	0xffff3cb0
 8008290:	8800759c 	.word	0x8800759c
 8008294:	c2f8f359 	.word	0xc2f8f359
 8008298:	3c900000 	.word	0x3c900000

0800829c <_init>:
 800829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829e:	bf00      	nop
 80082a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a2:	bc08      	pop	{r3}
 80082a4:	469e      	mov	lr, r3
 80082a6:	4770      	bx	lr

080082a8 <_fini>:
 80082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082aa:	bf00      	nop
 80082ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ae:	bc08      	pop	{r3}
 80082b0:	469e      	mov	lr, r3
 80082b2:	4770      	bx	lr
