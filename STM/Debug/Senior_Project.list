
Senior_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008994  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08008aa8  08008aa8  00018aa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d98  08008d98  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08008d98  08008d98  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d98  08008d98  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d98  08008d98  00018d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d9c  08008d9c  00018d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008bc  2000007c  08008e1c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000938  08008e1c  00020938  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5e6  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002636  00000000  00000000  0002e68b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  00030cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b48  00000000  00000000  000318f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019919  00000000  00000000  00032438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107e2  00000000  00000000  0004bd51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087f41  00000000  00000000  0005c533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4474  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003718  00000000  00000000  000e44c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08008a8c 	.word	0x08008a8c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08008a8c 	.word	0x08008a8c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dc6:	2afd      	cmp	r2, #253	; 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	; 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	; 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	; 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__gesf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295
 8001018:	e006      	b.n	8001028 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__lesf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpsf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001030:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	bf18      	it	ne
 800103a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800103e:	d011      	beq.n	8001064 <__cmpsf2+0x40>
 8001040:	b001      	add	sp, #4
 8001042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001046:	bf18      	it	ne
 8001048:	ea90 0f01 	teqne	r0, r1
 800104c:	bf58      	it	pl
 800104e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001052:	bf88      	it	hi
 8001054:	17c8      	asrhi	r0, r1, #31
 8001056:	bf38      	it	cc
 8001058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800105c:	bf18      	it	ne
 800105e:	f040 0001 	orrne.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	d102      	bne.n	8001070 <__cmpsf2+0x4c>
 800106a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800106e:	d105      	bne.n	800107c <__cmpsf2+0x58>
 8001070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001074:	d1e4      	bne.n	8001040 <__cmpsf2+0x1c>
 8001076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107a:	d0e1      	beq.n	8001040 <__cmpsf2+0x1c>
 800107c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_cfrcmple>:
 8001084:	4684      	mov	ip, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4661      	mov	r1, ip
 800108a:	e7ff      	b.n	800108c <__aeabi_cfcmpeq>

0800108c <__aeabi_cfcmpeq>:
 800108c:	b50f      	push	{r0, r1, r2, r3, lr}
 800108e:	f7ff ffc9 	bl	8001024 <__cmpsf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	bf48      	it	mi
 8001096:	f110 0f00 	cmnmi.w	r0, #0
 800109a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800109c <__aeabi_fcmpeq>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff fff4 	bl	800108c <__aeabi_cfcmpeq>
 80010a4:	bf0c      	ite	eq
 80010a6:	2001      	moveq	r0, #1
 80010a8:	2000      	movne	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmplt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffea 	bl	800108c <__aeabi_cfcmpeq>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmple>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffe0 	bl	800108c <__aeabi_cfcmpeq>
 80010cc:	bf94      	ite	ls
 80010ce:	2001      	movls	r0, #1
 80010d0:	2000      	movhi	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmpge>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffd2 	bl	8001084 <__aeabi_cfrcmple>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpgt>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffc8 	bl	8001084 <__aeabi_cfrcmple>
 80010f4:	bf34      	ite	cc
 80010f6:	2001      	movcc	r0, #1
 80010f8:	2000      	movcs	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_f2iz>:
 8001100:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001104:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001108:	d30f      	bcc.n	800112a <__aeabi_f2iz+0x2a>
 800110a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001112:	d90d      	bls.n	8001130 <__aeabi_f2iz+0x30>
 8001114:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001118:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800111c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001120:	fa23 f002 	lsr.w	r0, r3, r2
 8001124:	bf18      	it	ne
 8001126:	4240      	negne	r0, r0
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr
 8001130:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001134:	d101      	bne.n	800113a <__aeabi_f2iz+0x3a>
 8001136:	0242      	lsls	r2, r0, #9
 8001138:	d105      	bne.n	8001146 <__aeabi_f2iz+0x46>
 800113a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800113e:	bf08      	it	eq
 8001140:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001144:	4770      	bx	lr
 8001146:	f04f 0000 	mov.w	r0, #0
 800114a:	4770      	bx	lr

0800114c <init_bpm>:

//char KEY_CODE[] = "find a space:";
uint8_t KEY_CODE[]= {0x0d,0x0a,0x0d,0x0a};


void init_bpm(UART_HandleTypeDef* huart, GPIO_TypeDef* port, int num){
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
	huart_p = huart;
 8001158:	4a07      	ldr	r2, [pc, #28]	; (8001178 <init_bpm+0x2c>)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6013      	str	r3, [r2, #0]
	button_port = port;
 800115e:	4a07      	ldr	r2, [pc, #28]	; (800117c <init_bpm+0x30>)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	6013      	str	r3, [r2, #0]
	button_num = num;
 8001164:	4a06      	ldr	r2, [pc, #24]	; (8001180 <init_bpm+0x34>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6013      	str	r3, [r2, #0]
	debug_printf("blood preasure measurement system init\r\n");
 800116a:	4806      	ldr	r0, [pc, #24]	; (8001184 <init_bpm+0x38>)
 800116c:	f000 fb84 	bl	8001878 <debug_printf>
}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000098 	.word	0x20000098
 800117c:	2000009c 	.word	0x2000009c
 8001180:	200000a0 	.word	0x200000a0
 8001184:	08008aa8 	.word	0x08008aa8

08001188 <convert>:
	HAL_GPIO_WritePin(button_port, button_num, 1);
	HAL_Delay(10);
	HAL_GPIO_WritePin(button_port, button_num, 0);
}

int convert(uint8_t a, uint8_t b){
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	460a      	mov	r2, r1
 8001192:	71fb      	strb	r3, [r7, #7]
 8001194:	4613      	mov	r3, r2
 8001196:	71bb      	strb	r3, [r7, #6]
	int result = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
	if( a > '9'){
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	2b39      	cmp	r3, #57	; 0x39
 80011a0:	d904      	bls.n	80011ac <convert+0x24>
		result = (a - 'a' + 10) * 16;
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	3b57      	subs	r3, #87	; 0x57
 80011a6:	011b      	lsls	r3, r3, #4
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	e003      	b.n	80011b4 <convert+0x2c>
	}else{
		result = (a - '0')*16;
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	3b30      	subs	r3, #48	; 0x30
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	60fb      	str	r3, [r7, #12]
	}

	if( b > '9'){
 80011b4:	79bb      	ldrb	r3, [r7, #6]
 80011b6:	2b39      	cmp	r3, #57	; 0x39
 80011b8:	d905      	bls.n	80011c6 <convert+0x3e>
		result += b - 'a' + 10;
 80011ba:	79bb      	ldrb	r3, [r7, #6]
 80011bc:	3b57      	subs	r3, #87	; 0x57
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	4413      	add	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	e004      	b.n	80011d0 <convert+0x48>
	}else{
		result += b -'0';
 80011c6:	79bb      	ldrb	r3, [r7, #6]
 80011c8:	3b30      	subs	r3, #48	; 0x30
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	4413      	add	r3, r2
 80011ce:	60fb      	str	r3, [r7, #12]
	}
	return result;
 80011d0:	68fb      	ldr	r3, [r7, #12]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <analyze_it>:

void analyze_it (int* DIA, int* SYS, int* PUL){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]

	for(int q = 0; q < sizeof(buffer); q++){
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	e03a      	b.n	8001264 <analyze_it+0x88>
//			debug_printf("ai aqedan kidee %s\r\n", &buffer[q + strlen(KEY_CODE)]);
//			*SYS = buffer[q + strlen(KEY_CODE) + 2];
//			*DIA = buffer[q + strlen(KEY_CODE) + 4];
//			*PUL = buffer[q + strlen(KEY_CODE) + 5];
//		}
		if(memcmp(&buffer[q], KEY_CODE, sizeof(KEY_CODE)) == 0){
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	4a21      	ldr	r2, [pc, #132]	; (8001278 <analyze_it+0x9c>)
 80011f2:	4413      	add	r3, r2
 80011f4:	2204      	movs	r2, #4
 80011f6:	4921      	ldr	r1, [pc, #132]	; (800127c <analyze_it+0xa0>)
 80011f8:	4618      	mov	r0, r3
 80011fa:	f006 fd29 	bl	8007c50 <memcmp>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d12c      	bne.n	800125e <analyze_it+0x82>
			*SYS = convert(buffer[q + sizeof(KEY_CODE)], buffer[q + sizeof(KEY_CODE) + 1]);
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	3304      	adds	r3, #4
 8001208:	4a1b      	ldr	r2, [pc, #108]	; (8001278 <analyze_it+0x9c>)
 800120a:	5cd2      	ldrb	r2, [r2, r3]
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	3305      	adds	r3, #5
 8001210:	4919      	ldr	r1, [pc, #100]	; (8001278 <analyze_it+0x9c>)
 8001212:	5ccb      	ldrb	r3, [r1, r3]
 8001214:	4619      	mov	r1, r3
 8001216:	4610      	mov	r0, r2
 8001218:	f7ff ffb6 	bl	8001188 <convert>
 800121c:	4602      	mov	r2, r0
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	601a      	str	r2, [r3, #0]
			*DIA = convert(buffer[q + sizeof(KEY_CODE) + 2], buffer[q + sizeof(KEY_CODE) + 3]);
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	3306      	adds	r3, #6
 8001226:	4a14      	ldr	r2, [pc, #80]	; (8001278 <analyze_it+0x9c>)
 8001228:	5cd2      	ldrb	r2, [r2, r3]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	3307      	adds	r3, #7
 800122e:	4912      	ldr	r1, [pc, #72]	; (8001278 <analyze_it+0x9c>)
 8001230:	5ccb      	ldrb	r3, [r1, r3]
 8001232:	4619      	mov	r1, r3
 8001234:	4610      	mov	r0, r2
 8001236:	f7ff ffa7 	bl	8001188 <convert>
 800123a:	4602      	mov	r2, r0
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	601a      	str	r2, [r3, #0]
			*PUL = convert(buffer[q + sizeof(KEY_CODE) + 6], buffer[q + sizeof(KEY_CODE) + 7]);
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	330a      	adds	r3, #10
 8001244:	4a0c      	ldr	r2, [pc, #48]	; (8001278 <analyze_it+0x9c>)
 8001246:	5cd2      	ldrb	r2, [r2, r3]
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	330b      	adds	r3, #11
 800124c:	490a      	ldr	r1, [pc, #40]	; (8001278 <analyze_it+0x9c>)
 800124e:	5ccb      	ldrb	r3, [r1, r3]
 8001250:	4619      	mov	r1, r3
 8001252:	4610      	mov	r0, r2
 8001254:	f7ff ff98 	bl	8001188 <convert>
 8001258:	4602      	mov	r2, r0
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	601a      	str	r2, [r3, #0]
	for(int q = 0; q < sizeof(buffer); q++){
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3301      	adds	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800126a:	d3c0      	bcc.n	80011ee <analyze_it+0x12>
		}
	}

}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200000a4 	.word	0x200000a4
 800127c:	20000000 	.word	0x20000000

08001280 <bpm_thread>:

void bpm_thread(int* DIA, int* SYS, int* PUL){
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
	int start_time = HAL_GetTick();
 800128c:	f002 fe30 	bl	8003ef0 <HAL_GetTick>
 8001290:	4603      	mov	r3, r0
 8001292:	613b      	str	r3, [r7, #16]
	int rame = start_time;
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	617b      	str	r3, [r7, #20]
	memset(buffer, 0, sizeof(buffer));
 8001298:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800129c:	2100      	movs	r1, #0
 800129e:	481f      	ldr	r0, [pc, #124]	; (800131c <bpm_thread+0x9c>)
 80012a0:	f006 fce6 	bl	8007c70 <memset>
	curr_index = 0;
 80012a4:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <bpm_thread+0xa0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]

	debug_printf("me move %d\r\n", HAL_UART_Receive_IT(huart_p, &buffer[curr_index], 1));
 80012aa:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <bpm_thread+0xa4>)
 80012ac:	6818      	ldr	r0, [r3, #0]
 80012ae:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <bpm_thread+0xa0>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a1a      	ldr	r2, [pc, #104]	; (800131c <bpm_thread+0x9c>)
 80012b4:	4413      	add	r3, r2
 80012b6:	2201      	movs	r2, #1
 80012b8:	4619      	mov	r1, r3
 80012ba:	f005 fe23 	bl	8006f04 <HAL_UART_Receive_IT>
 80012be:	4603      	mov	r3, r0
 80012c0:	4619      	mov	r1, r3
 80012c2:	4819      	ldr	r0, [pc, #100]	; (8001328 <bpm_thread+0xa8>)
 80012c4:	f000 fad8 	bl	8001878 <debug_printf>

	while(HAL_GetTick() - start_time < WAIT_TIME){
 80012c8:	e016      	b.n	80012f8 <bpm_thread+0x78>
		if(HAL_GetTick() - rame > 5000){
 80012ca:	f002 fe11 	bl	8003ef0 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d8:	4293      	cmp	r3, r2
 80012da:	d90d      	bls.n	80012f8 <bpm_thread+0x78>
			debug_printf("buffer -> %s\r\n", buffer);
 80012dc:	490f      	ldr	r1, [pc, #60]	; (800131c <bpm_thread+0x9c>)
 80012de:	4813      	ldr	r0, [pc, #76]	; (800132c <bpm_thread+0xac>)
 80012e0:	f000 faca 	bl	8001878 <debug_printf>
			debug_printf("buffer -> %m\r\n", buffer, sizeof(buffer));
 80012e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012e8:	490c      	ldr	r1, [pc, #48]	; (800131c <bpm_thread+0x9c>)
 80012ea:	4811      	ldr	r0, [pc, #68]	; (8001330 <bpm_thread+0xb0>)
 80012ec:	f000 fac4 	bl	8001878 <debug_printf>
			rame = HAL_GetTick();
 80012f0:	f002 fdfe 	bl	8003ef0 <HAL_GetTick>
 80012f4:	4603      	mov	r3, r0
 80012f6:	617b      	str	r3, [r7, #20]
	while(HAL_GetTick() - start_time < WAIT_TIME){
 80012f8:	f002 fdfa 	bl	8003ef0 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001306:	4293      	cmp	r3, r2
 8001308:	d9df      	bls.n	80012ca <bpm_thread+0x4a>
		}
	}

	analyze_it(DIA,SYS,PUL);
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f7ff ff64 	bl	80011dc <analyze_it>


}
 8001314:	bf00      	nop
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200000a4 	.word	0x200000a4
 8001320:	200004a4 	.word	0x200004a4
 8001324:	20000098 	.word	0x20000098
 8001328:	08008ad4 	.word	0x08008ad4
 800132c:	08008ae4 	.word	0x08008ae4
 8001330:	08008af4 	.word	0x08008af4

08001334 <HAL_UART_RxCpltCallback>:
void get_status();


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
    // Check if the UART instance is UART2
    if (huart->Instance == USART2) {
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a0a      	ldr	r2, [pc, #40]	; (800136c <HAL_UART_RxCpltCallback+0x38>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d10e      	bne.n	8001364 <HAL_UART_RxCpltCallback+0x30>
    	curr_index++;
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <HAL_UART_RxCpltCallback+0x3c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	3301      	adds	r3, #1
 800134c:	4a08      	ldr	r2, [pc, #32]	; (8001370 <HAL_UART_RxCpltCallback+0x3c>)
 800134e:	6013      	str	r3, [r2, #0]
        HAL_UART_Receive_IT(huart_p, &buffer[curr_index], 1);
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_UART_RxCpltCallback+0x40>)
 8001352:	6818      	ldr	r0, [r3, #0]
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_UART_RxCpltCallback+0x3c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a07      	ldr	r2, [pc, #28]	; (8001378 <HAL_UART_RxCpltCallback+0x44>)
 800135a:	4413      	add	r3, r2
 800135c:	2201      	movs	r2, #1
 800135e:	4619      	mov	r1, r3
 8001360:	f005 fdd0 	bl	8006f04 <HAL_UART_Receive_IT>
    }
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40004400 	.word	0x40004400
 8001370:	200004a4 	.word	0x200004a4
 8001374:	20000098 	.word	0x20000098
 8001378:	200000a4 	.word	0x200000a4

0800137c <dev_trace_send_byte_int>:

//------------------------------------------------------------------------------
//         Local functions
//------------------------------------------------------------------------------
void dev_trace_send_byte_int(UINT8 b)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
		UINT8 i; 

		for (i=0; i<8; i++)
 8001386:	2300      	movs	r3, #0
 8001388:	73fb      	strb	r3, [r7, #15]
 800138a:	e015      	b.n	80013b8 <dev_trace_send_byte_int+0x3c>
		{
				dev_gpio_set(&trace_spi[TRACE_SPI_MOSI], b & 0x80); 
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001392:	b2db      	uxtb	r3, r3
 8001394:	4619      	mov	r1, r3
 8001396:	480c      	ldr	r0, [pc, #48]	; (80013c8 <dev_trace_send_byte_int+0x4c>)
 8001398:	f001 f8bc 	bl	8002514 <dev_gpio_set>
//				dev_gpio_set(&trace_spi[TRACE_SPI_MOSI], b & 0x80); 
				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 1); 
 800139c:	2101      	movs	r1, #1
 800139e:	480b      	ldr	r0, [pc, #44]	; (80013cc <dev_trace_send_byte_int+0x50>)
 80013a0:	f001 f8b8 	bl	8002514 <dev_gpio_set>
//				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 1); 
				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 0); 
 80013a4:	2100      	movs	r1, #0
 80013a6:	4809      	ldr	r0, [pc, #36]	; (80013cc <dev_trace_send_byte_int+0x50>)
 80013a8:	f001 f8b4 	bl	8002514 <dev_gpio_set>
//				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 0); 
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_SCK].port, trace_spi[TRACE_SPI_SCK].pin, b & 0x80);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 1);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
			
				b = b << 1;
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	71fb      	strb	r3, [r7, #7]
		for (i=0; i<8; i++)
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	3301      	adds	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	2b07      	cmp	r3, #7
 80013bc:	d9e6      	bls.n	800138c <dev_trace_send_byte_int+0x10>
		}
}
 80013be:	bf00      	nop
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200004ac 	.word	0x200004ac
 80013cc:	200004cc 	.word	0x200004cc

080013d0 <dev_trace_init>:

//------------------------------------------------------------------------------
//         Global functions
//------------------------------------------------------------------------------
UINT8 dev_trace_init(dev_trace_init_t* init)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
		UINT8 ret;


		ret = dev_gpio_init_simp(&trace_spi[TRACE_SPI_MOSI], init->mosi.port, init->mosi.pin, GPIO_MODE_OUTPUT_PP);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	7899      	ldrb	r1, [r3, #2]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	881a      	ldrh	r2, [r3, #0]
 80013e0:	2301      	movs	r3, #1
 80013e2:	4827      	ldr	r0, [pc, #156]	; (8001480 <dev_trace_init+0xb0>)
 80013e4:	f001 f866 	bl	80024b4 <dev_gpio_init_simp>
 80013e8:	4603      	mov	r3, r0
 80013ea:	73fb      	strb	r3, [r7, #15]
		if (ret) return TRACE_EERROR(ret);
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d007      	beq.n	8001402 <dev_trace_init+0x32>
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	224e      	movs	r2, #78	; 0x4e
 80013f6:	4923      	ldr	r1, [pc, #140]	; (8001484 <dev_trace_init+0xb4>)
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 f873 	bl	80014e4 <dev_trace_get_error>
 80013fe:	4603      	mov	r3, r0
 8001400:	e039      	b.n	8001476 <dev_trace_init+0xa6>
		ret = dev_gpio_init_simp(&trace_spi[TRACE_SPI_SCK], init->sck.port, init->sck.pin, GPIO_MODE_OUTPUT_PP);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	7999      	ldrb	r1, [r3, #6]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	889a      	ldrh	r2, [r3, #4]
 800140a:	2301      	movs	r3, #1
 800140c:	481e      	ldr	r0, [pc, #120]	; (8001488 <dev_trace_init+0xb8>)
 800140e:	f001 f851 	bl	80024b4 <dev_gpio_init_simp>
 8001412:	4603      	mov	r3, r0
 8001414:	73fb      	strb	r3, [r7, #15]
		if (ret) return TRACE_EERROR(ret);
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d007      	beq.n	800142c <dev_trace_init+0x5c>
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	2250      	movs	r2, #80	; 0x50
 8001420:	4918      	ldr	r1, [pc, #96]	; (8001484 <dev_trace_init+0xb4>)
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f85e 	bl	80014e4 <dev_trace_get_error>
 8001428:	4603      	mov	r3, r0
 800142a:	e024      	b.n	8001476 <dev_trace_init+0xa6>
		ret = dev_gpio_init_simp(&trace_spi[TRACE_SPI_NSS], init->nss.port, init->nss.pin, GPIO_MODE_OUTPUT_PP);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	7a99      	ldrb	r1, [r3, #10]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	891a      	ldrh	r2, [r3, #8]
 8001434:	2301      	movs	r3, #1
 8001436:	4815      	ldr	r0, [pc, #84]	; (800148c <dev_trace_init+0xbc>)
 8001438:	f001 f83c 	bl	80024b4 <dev_gpio_init_simp>
 800143c:	4603      	mov	r3, r0
 800143e:	73fb      	strb	r3, [r7, #15]
		if (ret) return TRACE_EERROR(ret);
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d007      	beq.n	8001456 <dev_trace_init+0x86>
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	2252      	movs	r2, #82	; 0x52
 800144a:	490e      	ldr	r1, [pc, #56]	; (8001484 <dev_trace_init+0xb4>)
 800144c:	4618      	mov	r0, r3
 800144e:	f000 f849 	bl	80014e4 <dev_trace_get_error>
 8001452:	4603      	mov	r3, r0
 8001454:	e00f      	b.n	8001476 <dev_trace_init+0xa6>
//  HAL_GPIO_Init(trace_spi[TRACE_SPI_NSS].port, &GPIO_InitStruct);	
	
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_NSS].port, trace_spi[TRACE_SPI_NSS].pin, 1);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_SCK].port, trace_spi[TRACE_SPI_SCK].pin, 0);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
		dev_gpio_set(&trace_spi[TRACE_SPI_NSS], 1);
 8001456:	2101      	movs	r1, #1
 8001458:	480c      	ldr	r0, [pc, #48]	; (800148c <dev_trace_init+0xbc>)
 800145a:	f001 f85b 	bl	8002514 <dev_gpio_set>
		dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 0);
 800145e:	2100      	movs	r1, #0
 8001460:	4809      	ldr	r0, [pc, #36]	; (8001488 <dev_trace_init+0xb8>)
 8001462:	f001 f857 	bl	8002514 <dev_gpio_set>
		dev_gpio_set(&trace_spi[TRACE_SPI_MOSI], 0);
 8001466:	2100      	movs	r1, #0
 8001468:	4805      	ldr	r0, [pc, #20]	; (8001480 <dev_trace_init+0xb0>)
 800146a:	f001 f853 	bl	8002514 <dev_gpio_set>

		trace_ready = 1;	
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <dev_trace_init+0xc0>)
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]

		return RET_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200004ac 	.word	0x200004ac
 8001484:	08008b04 	.word	0x08008b04
 8001488:	200004cc 	.word	0x200004cc
 800148c:	200004ec 	.word	0x200004ec
 8001490:	200004a8 	.word	0x200004a8

08001494 <dev_trace_send_byte>:

// Send one Byte 
void dev_trace_send_byte(UINT8 b)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
	if (trace_ready == 0) return;
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <dev_trace_send_byte+0x48>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d016      	beq.n	80014d4 <dev_trace_send_byte+0x40>

//		dev_gpio_set(&trace_spi[TRACE_SPI_NSS], 0);
		HAL_GPIO_WritePin(trace_spi[TRACE_SPI_NSS].port, trace_spi[TRACE_SPI_NSS].pin, 0);
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <dev_trace_send_byte+0x4c>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	4a0d      	ldr	r2, [pc, #52]	; (80014e0 <dev_trace_send_byte+0x4c>)
 80014ac:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 80014b0:	2200      	movs	r2, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 fb51 	bl	8004b5a <HAL_GPIO_WritePin>
		dev_trace_send_byte_int(b);
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff5e 	bl	800137c <dev_trace_send_byte_int>
//		dev_gpio_set(&trace_spi[TRACE_SPI_NSS], 1);
	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_NSS].port, trace_spi[TRACE_SPI_NSS].pin, 1);
 80014c0:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <dev_trace_send_byte+0x4c>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	4a06      	ldr	r2, [pc, #24]	; (80014e0 <dev_trace_send_byte+0x4c>)
 80014c6:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 80014ca:	2201      	movs	r2, #1
 80014cc:	4618      	mov	r0, r3
 80014ce:	f003 fb44 	bl	8004b5a <HAL_GPIO_WritePin>
 80014d2:	e000      	b.n	80014d6 <dev_trace_send_byte+0x42>
	if (trace_ready == 0) return;
 80014d4:	bf00      	nop
//		HAL_GPIO_WritePin(trace_spi[TRACE_SPI_SCK].port, trace_spi[TRACE_SPI_SCK].pin, 0);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
}
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200004a8 	.word	0x200004a8
 80014e0:	200004ac 	.word	0x200004ac

080014e4 <dev_trace_get_error>:
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
}

// Get Trace error
uint8_t dev_trace_get_error(uint8_t error_value, char* file_name, uint32_t file_line)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
 80014f0:	73fb      	strb	r3, [r7, #15]
		if (error_value == RET_OK) return RET_OK;
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <dev_trace_get_error+0x18>
 80014f8:	2300      	movs	r3, #0
 80014fa:	e006      	b.n	800150a <dev_trace_get_error+0x26>
	
		debug_printf("EE> %d at %s:%d\n\r", error_value, file_name, file_line); 
 80014fc:	7bf9      	ldrb	r1, [r7, #15]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	4804      	ldr	r0, [pc, #16]	; (8001514 <dev_trace_get_error+0x30>)
 8001504:	f000 f9b8 	bl	8001878 <debug_printf>

		return error_value;
 8001508:	7bfb      	ldrb	r3, [r7, #15]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	08008b1c 	.word	0x08008b1c

08001518 <dev_trace_generate_error>:

// Generate Trace error
uint8_t dev_trace_generate_error(char* error_name, char* file_name, uint32_t file_line)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af02      	add	r7, sp, #8
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
		trace_error_id++;
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <dev_trace_generate_error+0x54>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	3301      	adds	r3, #1
 800152a:	b2da      	uxtb	r2, r3
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <dev_trace_generate_error+0x54>)
 800152e:	701a      	strb	r2, [r3, #0]
		if (trace_error_id < 100) trace_error_id = 100;
 8001530:	4b0e      	ldr	r3, [pc, #56]	; (800156c <dev_trace_generate_error+0x54>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b63      	cmp	r3, #99	; 0x63
 8001536:	d802      	bhi.n	800153e <dev_trace_generate_error+0x26>
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <dev_trace_generate_error+0x54>)
 800153a:	2264      	movs	r2, #100	; 0x64
 800153c:	701a      	strb	r2, [r3, #0]
		if (trace_error_id >= 200) trace_error_id = 100;
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <dev_trace_generate_error+0x54>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2bc7      	cmp	r3, #199	; 0xc7
 8001544:	d902      	bls.n	800154c <dev_trace_generate_error+0x34>
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <dev_trace_generate_error+0x54>)
 8001548:	2264      	movs	r2, #100	; 0x64
 800154a:	701a      	strb	r2, [r3, #0]

		debug_printf("GE> %d %s at %s:%d\n\r", trace_error_id, error_name, file_name, file_line);
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <dev_trace_generate_error+0x54>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	4619      	mov	r1, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <dev_trace_generate_error+0x58>)
 800155c:	f000 f98c 	bl	8001878 <debug_printf>

		return trace_error_id;
 8001560:	4b02      	ldr	r3, [pc, #8]	; (800156c <dev_trace_generate_error+0x54>)
 8001562:	781b      	ldrb	r3, [r3, #0]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200004a9 	.word	0x200004a9
 8001570:	08008b30 	.word	0x08008b30

08001574 <debug_printf_char>:
}

// Custom Printf function
//////////////////////////////////////////////////////////////////////////
void debug_printf_char(UINT8 c)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
    if (c < ' ') 
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2b1f      	cmp	r3, #31
 8001582:	d82a      	bhi.n	80015da <debug_printf_char+0x66>
    {    
        dev_trace_send_byte('~');
 8001584:	207e      	movs	r0, #126	; 0x7e
 8001586:	f7ff ff85 	bl	8001494 <dev_trace_send_byte>
        dev_trace_send_byte(HB2HEX(c / 0x10));
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	2b9f      	cmp	r3, #159	; 0x9f
 800158e:	d905      	bls.n	800159c <debug_printf_char+0x28>
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	091b      	lsrs	r3, r3, #4
 8001594:	b2db      	uxtb	r3, r3
 8001596:	3337      	adds	r3, #55	; 0x37
 8001598:	b2db      	uxtb	r3, r3
 800159a:	e004      	b.n	80015a6 <debug_printf_char+0x32>
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	091b      	lsrs	r3, r3, #4
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	3330      	adds	r3, #48	; 0x30
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff ff74 	bl	8001494 <dev_trace_send_byte>
        dev_trace_send_byte(HB2HEX(c % 0x10));
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b09      	cmp	r3, #9
 80015b6:	d906      	bls.n	80015c6 <debug_printf_char+0x52>
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	3337      	adds	r3, #55	; 0x37
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	e005      	b.n	80015d2 <debug_printf_char+0x5e>
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	f003 030f 	and.w	r3, r3, #15
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	3330      	adds	r3, #48	; 0x30
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff ff5e 	bl	8001494 <dev_trace_send_byte>
    }
    else dev_trace_send_byte(c);
}
 80015d8:	e003      	b.n	80015e2 <debug_printf_char+0x6e>
    else dev_trace_send_byte(c);
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff59 	bl	8001494 <dev_trace_send_byte>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <debug_printf_text>:

void debug_printf_text(char* text)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b084      	sub	sp, #16
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
   int i = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]

   while(text[i] != 0)
 80015f6:	e009      	b.n	800160c <debug_printf_text+0x22>
   {   
      dev_trace_send_byte(text[i]);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff47 	bl	8001494 <dev_trace_send_byte>
      i++;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3301      	adds	r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
   while(text[i] != 0)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1ef      	bne.n	80015f8 <debug_printf_text+0xe>
   }   
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <debug_printf_ulong>:

void debug_printf_ulong(unsigned long d)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
   UINT8 buf[10], len = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	75fb      	strb	r3, [r7, #23]

   if (d == 0) 
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d11c      	bne.n	8001670 <debug_printf_ulong+0x4c>
   {
      dev_trace_send_byte('0');
 8001636:	2030      	movs	r0, #48	; 0x30
 8001638:	f7ff ff2c 	bl	8001494 <dev_trace_send_byte>
 800163c:	e02d      	b.n	800169a <debug_printf_ulong+0x76>
      return;
   }   
   
   while (d > 0)
   {   
      buf[len] = d % 10;
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <debug_printf_ulong+0x7c>)
 8001642:	fba3 2301 	umull	r2, r3, r3, r1
 8001646:	08da      	lsrs	r2, r3, #3
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	1aca      	subs	r2, r1, r3
 8001652:	7dfb      	ldrb	r3, [r7, #23]
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	3318      	adds	r3, #24
 8001658:	443b      	add	r3, r7
 800165a:	f803 2c0c 	strb.w	r2, [r3, #-12]
      d = d / 10;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a0f      	ldr	r2, [pc, #60]	; (80016a0 <debug_printf_ulong+0x7c>)
 8001662:	fba2 2303 	umull	r2, r3, r2, r3
 8001666:	08db      	lsrs	r3, r3, #3
 8001668:	607b      	str	r3, [r7, #4]
      len++;
 800166a:	7dfb      	ldrb	r3, [r7, #23]
 800166c:	3301      	adds	r3, #1
 800166e:	75fb      	strb	r3, [r7, #23]
   while (d > 0)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1e3      	bne.n	800163e <debug_printf_ulong+0x1a>
   }   

   while (len > 0)
 8001676:	e00d      	b.n	8001694 <debug_printf_ulong+0x70>
   {   
      dev_trace_send_byte(buf[len - 1] + 0x30);
 8001678:	7dfb      	ldrb	r3, [r7, #23]
 800167a:	3b01      	subs	r3, #1
 800167c:	3318      	adds	r3, #24
 800167e:	443b      	add	r3, r7
 8001680:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001684:	3330      	adds	r3, #48	; 0x30
 8001686:	b2db      	uxtb	r3, r3
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff03 	bl	8001494 <dev_trace_send_byte>
      len--;
 800168e:	7dfb      	ldrb	r3, [r7, #23]
 8001690:	3b01      	subs	r3, #1
 8001692:	75fb      	strb	r3, [r7, #23]
   while (len > 0)
 8001694:	7dfb      	ldrb	r3, [r7, #23]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1ee      	bne.n	8001678 <debug_printf_ulong+0x54>
   }   
}
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	cccccccd 	.word	0xcccccccd

080016a4 <debug_printf_long>:

   debug_printf_ulong(d);
}

void debug_printf_long(unsigned long d, UINT8 mode)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	70fb      	strb	r3, [r7, #3]
   UINT8 buf[10], len = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	75fb      	strb	r3, [r7, #23]

   if (d == 0) 
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d103      	bne.n	80016c2 <debug_printf_long+0x1e>
   {
      dev_trace_send_byte('0');
 80016ba:	2030      	movs	r0, #48	; 0x30
 80016bc:	f7ff feea 	bl	8001494 <dev_trace_send_byte>
 80016c0:	e03a      	b.n	8001738 <debug_printf_long+0x94>
      return;
   }   
   
   if (mode == 'd') 
 80016c2:	78fb      	ldrb	r3, [r7, #3]
 80016c4:	2b64      	cmp	r3, #100	; 0x64
 80016c6:	d122      	bne.n	800170e <debug_printf_long+0x6a>
   if ((signed long)d < 0) 
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	da1f      	bge.n	800170e <debug_printf_long+0x6a>
   {
      dev_trace_send_byte('-');
 80016ce:	202d      	movs	r0, #45	; 0x2d
 80016d0:	f7ff fee0 	bl	8001494 <dev_trace_send_byte>
      d = -((signed long)d);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	425b      	negs	r3, r3
 80016d8:	607b      	str	r3, [r7, #4]
   }   

   while (d > 0)
 80016da:	e018      	b.n	800170e <debug_printf_long+0x6a>
   {   
      buf[len] = d % 10;
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	4b18      	ldr	r3, [pc, #96]	; (8001740 <debug_printf_long+0x9c>)
 80016e0:	fba3 2301 	umull	r2, r3, r3, r1
 80016e4:	08da      	lsrs	r2, r3, #3
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	1aca      	subs	r2, r1, r3
 80016f0:	7dfb      	ldrb	r3, [r7, #23]
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	3318      	adds	r3, #24
 80016f6:	443b      	add	r3, r7
 80016f8:	f803 2c0c 	strb.w	r2, [r3, #-12]
      d = d / 10;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a10      	ldr	r2, [pc, #64]	; (8001740 <debug_printf_long+0x9c>)
 8001700:	fba2 2303 	umull	r2, r3, r2, r3
 8001704:	08db      	lsrs	r3, r3, #3
 8001706:	607b      	str	r3, [r7, #4]
      len++;
 8001708:	7dfb      	ldrb	r3, [r7, #23]
 800170a:	3301      	adds	r3, #1
 800170c:	75fb      	strb	r3, [r7, #23]
   while (d > 0)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1e3      	bne.n	80016dc <debug_printf_long+0x38>
   }   

   while (len > 0)
 8001714:	e00d      	b.n	8001732 <debug_printf_long+0x8e>
   {   
      dev_trace_send_byte(buf[len - 1] + 0x30);
 8001716:	7dfb      	ldrb	r3, [r7, #23]
 8001718:	3b01      	subs	r3, #1
 800171a:	3318      	adds	r3, #24
 800171c:	443b      	add	r3, r7
 800171e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001722:	3330      	adds	r3, #48	; 0x30
 8001724:	b2db      	uxtb	r3, r3
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff feb4 	bl	8001494 <dev_trace_send_byte>
      len--;
 800172c:	7dfb      	ldrb	r3, [r7, #23]
 800172e:	3b01      	subs	r3, #1
 8001730:	75fb      	strb	r3, [r7, #23]
   while (len > 0)
 8001732:	7dfb      	ldrb	r3, [r7, #23]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1ee      	bne.n	8001716 <debug_printf_long+0x72>
   }   
}
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	cccccccd 	.word	0xcccccccd

08001744 <debug_printf_hex>:

void debug_printf_hex(UINT32 d, UINT8 mode)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	70fb      	strb	r3, [r7, #3]
   UINT32 buf = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
   UINT8 b, len = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	72fb      	strb	r3, [r7, #11]

   if (d == 0) 
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d112      	bne.n	8001784 <debug_printf_hex+0x40>
   {
      dev_trace_send_byte('0');
 800175e:	2030      	movs	r0, #48	; 0x30
 8001760:	f7ff fe98 	bl	8001494 <dev_trace_send_byte>
      return;
 8001764:	e03a      	b.n	80017dc <debug_printf_hex+0x98>
   }   

   while (d > 0)
   {  
      buf = buf << 4;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	60fb      	str	r3, [r7, #12]
      buf = buf + d % 0x10;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	4413      	add	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]
      d = d >> 4;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	091b      	lsrs	r3, r3, #4
 800177c:	607b      	str	r3, [r7, #4]
      len++;
 800177e:	7afb      	ldrb	r3, [r7, #11]
 8001780:	3301      	adds	r3, #1
 8001782:	72fb      	strb	r3, [r7, #11]
   while (d > 0)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1ed      	bne.n	8001766 <debug_printf_hex+0x22>
   }   

   while (len > 0)
 800178a:	e024      	b.n	80017d6 <debug_printf_hex+0x92>
   {   
      b = buf % 0x10;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f003 030f 	and.w	r3, r3, #15
 8001794:	72bb      	strb	r3, [r7, #10]
   
      if (b < 0xA) dev_trace_send_byte(b + 0x30);
 8001796:	7abb      	ldrb	r3, [r7, #10]
 8001798:	2b09      	cmp	r3, #9
 800179a:	d806      	bhi.n	80017aa <debug_printf_hex+0x66>
 800179c:	7abb      	ldrb	r3, [r7, #10]
 800179e:	3330      	adds	r3, #48	; 0x30
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fe76 	bl	8001494 <dev_trace_send_byte>
 80017a8:	e00f      	b.n	80017ca <debug_printf_hex+0x86>
      else  
      {      
         if (mode == 'X') dev_trace_send_byte(b + 0x41 - 0xA);
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	2b58      	cmp	r3, #88	; 0x58
 80017ae:	d106      	bne.n	80017be <debug_printf_hex+0x7a>
 80017b0:	7abb      	ldrb	r3, [r7, #10]
 80017b2:	3337      	adds	r3, #55	; 0x37
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fe6c 	bl	8001494 <dev_trace_send_byte>
 80017bc:	e005      	b.n	80017ca <debug_printf_hex+0x86>
                  else  dev_trace_send_byte(b + 0x61 - 0xA);
 80017be:	7abb      	ldrb	r3, [r7, #10]
 80017c0:	3357      	adds	r3, #87	; 0x57
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fe65 	bl	8001494 <dev_trace_send_byte>
      }

      buf = buf >> 4;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	091b      	lsrs	r3, r3, #4
 80017ce:	60fb      	str	r3, [r7, #12]
      len--;
 80017d0:	7afb      	ldrb	r3, [r7, #11]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	72fb      	strb	r3, [r7, #11]
   while (len > 0)
 80017d6:	7afb      	ldrb	r3, [r7, #11]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1d7      	bne.n	800178c <debug_printf_hex+0x48>
   }   
}
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <debug_printf_bin>:

void debug_printf_bin(UINT32 d, UINT8 mode)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b084      	sub	sp, #16
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	460b      	mov	r3, r1
 80017ec:	70fb      	strb	r3, [r7, #3]
   UINT32 buf = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
   UINT8 i, len = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	72bb      	strb	r3, [r7, #10]

   if (mode == 'B') len = 32;
 80017f6:	78fb      	ldrb	r3, [r7, #3]
 80017f8:	2b42      	cmp	r3, #66	; 0x42
 80017fa:	d102      	bne.n	8001802 <debug_printf_bin+0x20>
 80017fc:	2320      	movs	r3, #32
 80017fe:	72bb      	strb	r3, [r7, #10]
 8001800:	e001      	b.n	8001806 <debug_printf_bin+0x24>
                else len = 8;
 8001802:	2308      	movs	r3, #8
 8001804:	72bb      	strb	r3, [r7, #10]

   for(i=0; i<len; i++)
 8001806:	2300      	movs	r3, #0
 8001808:	72fb      	strb	r3, [r7, #11]
 800180a:	e010      	b.n	800182e <debug_printf_bin+0x4c>
   {
      buf = buf << 1;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
      if (d % 2) buf++;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b00      	cmp	r3, #0
 800181a:	d002      	beq.n	8001822 <debug_printf_bin+0x40>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3301      	adds	r3, #1
 8001820:	60fb      	str	r3, [r7, #12]
      d = d >> 1;      
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	085b      	lsrs	r3, r3, #1
 8001826:	607b      	str	r3, [r7, #4]
   for(i=0; i<len; i++)
 8001828:	7afb      	ldrb	r3, [r7, #11]
 800182a:	3301      	adds	r3, #1
 800182c:	72fb      	strb	r3, [r7, #11]
 800182e:	7afa      	ldrb	r2, [r7, #11]
 8001830:	7abb      	ldrb	r3, [r7, #10]
 8001832:	429a      	cmp	r2, r3
 8001834:	d3ea      	bcc.n	800180c <debug_printf_bin+0x2a>
   }   
                
   for(i=0; i<len; i++)
 8001836:	2300      	movs	r3, #0
 8001838:	72fb      	strb	r3, [r7, #11]
 800183a:	e011      	b.n	8001860 <debug_printf_bin+0x7e>
   {
      if (buf % 2) dev_trace_send_byte('1');
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <debug_printf_bin+0x6c>
 8001846:	2031      	movs	r0, #49	; 0x31
 8001848:	f7ff fe24 	bl	8001494 <dev_trace_send_byte>
 800184c:	e002      	b.n	8001854 <debug_printf_bin+0x72>
            else dev_trace_send_byte('0');
 800184e:	2030      	movs	r0, #48	; 0x30
 8001850:	f7ff fe20 	bl	8001494 <dev_trace_send_byte>
               
      buf = buf >> 1;      
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	085b      	lsrs	r3, r3, #1
 8001858:	60fb      	str	r3, [r7, #12]
   for(i=0; i<len; i++)
 800185a:	7afb      	ldrb	r3, [r7, #11]
 800185c:	3301      	adds	r3, #1
 800185e:	72fb      	strb	r3, [r7, #11]
 8001860:	7afa      	ldrb	r2, [r7, #11]
 8001862:	7abb      	ldrb	r3, [r7, #10]
 8001864:	429a      	cmp	r2, r3
 8001866:	d3e9      	bcc.n	800183c <debug_printf_bin+0x5a>
   }   
}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	0000      	movs	r0, r0
 8001874:	0000      	movs	r0, r0
	...

08001878 <debug_printf>:

void debug_printf(char* text, ...)
{
 8001878:	b40f      	push	{r0, r1, r2, r3}
 800187a:	b5b0      	push	{r4, r5, r7, lr}
 800187c:	b098      	sub	sp, #96	; 0x60
 800187e:	af00      	add	r7, sp, #0
   va_list tag;
   int i = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	65fb      	str	r3, [r7, #92]	; 0x5c

   va_start(tag, text);
 8001884:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001888:	60bb      	str	r3, [r7, #8]
   
   while(text[i] != 0)
 800188a:	e225      	b.n	8001cd8 <debug_printf+0x460>
   {
      if (text[i] != '%') 
 800188c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800188e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001890:	4413      	add	r3, r2
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b25      	cmp	r3, #37	; 0x25
 8001896:	d00a      	beq.n	80018ae <debug_printf+0x36>
      {
         dev_trace_send_byte(text[i]);
 8001898:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800189a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800189c:	4413      	add	r3, r2
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fdf7 	bl	8001494 <dev_trace_send_byte>
         i++;
 80018a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018a8:	3301      	adds	r3, #1
 80018aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80018ac:	e214      	b.n	8001cd8 <debug_printf+0x460>
//         continue;
      }   
      else if (text[i + 1] != 0)
 80018ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018b0:	3301      	adds	r3, #1
 80018b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80018b4:	4413      	add	r3, r2
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 820d 	beq.w	8001cd8 <debug_printf+0x460>
      {   
         switch(text[i + 1])   
 80018be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018c0:	3301      	adds	r3, #1
 80018c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80018c4:	4413      	add	r3, r2
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	3b42      	subs	r3, #66	; 0x42
 80018ca:	2b36      	cmp	r3, #54	; 0x36
 80018cc:	f200 8201 	bhi.w	8001cd2 <debug_printf+0x45a>
 80018d0:	a201      	add	r2, pc, #4	; (adr r2, 80018d8 <debug_printf+0x60>)
 80018d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d6:	bf00      	nop
 80018d8:	08001b89 	.word	0x08001b89
 80018dc:	08001cd3 	.word	0x08001cd3
 80018e0:	08001cd3 	.word	0x08001cd3
 80018e4:	08001cd3 	.word	0x08001cd3
 80018e8:	08001cd3 	.word	0x08001cd3
 80018ec:	08001cd3 	.word	0x08001cd3
 80018f0:	08001cd3 	.word	0x08001cd3
 80018f4:	08001cd3 	.word	0x08001cd3
 80018f8:	08001cd3 	.word	0x08001cd3
 80018fc:	08001cd3 	.word	0x08001cd3
 8001900:	08001cd3 	.word	0x08001cd3
 8001904:	08001c3f 	.word	0x08001c3f
 8001908:	08001cd3 	.word	0x08001cd3
 800190c:	08001cd3 	.word	0x08001cd3
 8001910:	08001cd3 	.word	0x08001cd3
 8001914:	08001cd3 	.word	0x08001cd3
 8001918:	08001cd3 	.word	0x08001cd3
 800191c:	08001cd3 	.word	0x08001cd3
 8001920:	08001cd3 	.word	0x08001cd3
 8001924:	08001cd3 	.word	0x08001cd3
 8001928:	08001cd3 	.word	0x08001cd3
 800192c:	08001cd3 	.word	0x08001cd3
 8001930:	08001b61 	.word	0x08001b61
 8001934:	08001cd3 	.word	0x08001cd3
 8001938:	08001cd3 	.word	0x08001cd3
 800193c:	08001cd3 	.word	0x08001cd3
 8001940:	08001cd3 	.word	0x08001cd3
 8001944:	08001cd3 	.word	0x08001cd3
 8001948:	08001cd3 	.word	0x08001cd3
 800194c:	08001cd3 	.word	0x08001cd3
 8001950:	08001cd3 	.word	0x08001cd3
 8001954:	08001cd3 	.word	0x08001cd3
 8001958:	08001b75 	.word	0x08001b75
 800195c:	08001b35 	.word	0x08001b35
 8001960:	080019b5 	.word	0x080019b5
 8001964:	08001cd3 	.word	0x08001cd3
 8001968:	080019df 	.word	0x080019df
 800196c:	08001cd3 	.word	0x08001cd3
 8001970:	08001cd3 	.word	0x08001cd3
 8001974:	08001cd3 	.word	0x08001cd3
 8001978:	08001cd3 	.word	0x08001cd3
 800197c:	08001cd3 	.word	0x08001cd3
 8001980:	08001cd3 	.word	0x08001cd3
 8001984:	08001b9d 	.word	0x08001b9d
 8001988:	08001cd3 	.word	0x08001cd3
 800198c:	08001cd3 	.word	0x08001cd3
 8001990:	08001c7f 	.word	0x08001c7f
 8001994:	08001cd3 	.word	0x08001cd3
 8001998:	08001cd3 	.word	0x08001cd3
 800199c:	08001b23 	.word	0x08001b23
 80019a0:	08001cd3 	.word	0x08001cd3
 80019a4:	080019cb 	.word	0x080019cb
 80019a8:	08001cd3 	.word	0x08001cd3
 80019ac:	08001cd3 	.word	0x08001cd3
 80019b0:	08001b4d 	.word	0x08001b4d
         {
            case 'd' : 
               {
                  signed long d = va_arg(tag, signed long);
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	1d1a      	adds	r2, r3, #4
 80019b8:	60ba      	str	r2, [r7, #8]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
                  debug_printf_long(d, 'd');
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	2164      	movs	r1, #100	; 0x64
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fe6e 	bl	80016a4 <debug_printf_long>
               } break;
 80019c8:	e183      	b.n	8001cd2 <debug_printf+0x45a>

            case 'u' : 
               {
                  unsigned long d = va_arg(tag, unsigned long);
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	1d1a      	adds	r2, r3, #4
 80019ce:	60ba      	str	r2, [r7, #8]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	63bb      	str	r3, [r7, #56]	; 0x38
                  debug_printf_long(d, 'u');
 80019d4:	2175      	movs	r1, #117	; 0x75
 80019d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80019d8:	f7ff fe64 	bl	80016a4 <debug_printf_long>
               } break;
 80019dc:	e179      	b.n	8001cd2 <debug_printf+0x45a>

            case 'f' :
               {
                  signed long l;
                  unsigned char i, m[8];
                  double d = va_arg(tag, double);
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	3307      	adds	r3, #7
 80019e2:	f023 0307 	bic.w	r3, r3, #7
 80019e6:	f103 0208 	add.w	r2, r3, #8
 80019ea:	60ba      	str	r2, [r7, #8]
 80019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

                  if (d < 0)
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001a00:	f7fe ffd4 	bl	80009ac <__aeabi_dcmplt>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d008      	beq.n	8001a1c <debug_printf+0x1a4>
                  {
                    d = -d;
 8001a0a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8001a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a0e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001a12:	e9c7 4512 	strd	r4, r5, [r7, #72]	; 0x48
                    dev_trace_send_byte('-');
 8001a16:	202d      	movs	r0, #45	; 0x2d
 8001a18:	f7ff fd3c 	bl	8001494 <dev_trace_send_byte>
                  }

                  debug_printf_ulong(d);
 8001a1c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001a20:	f7ff f82a 	bl	8000a78 <__aeabi_d2uiz>
 8001a24:	4603      	mov	r3, r0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fdfc 	bl	8001624 <debug_printf_ulong>
                  dev_trace_send_byte('.');
 8001a2c:	202e      	movs	r0, #46	; 0x2e
 8001a2e:	f7ff fd31 	bl	8001494 <dev_trace_send_byte>

                  d =  d - (signed long)d;
 8001a32:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001a36:	f7fe fff7 	bl	8000a28 <__aeabi_d2iz>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fcd9 	bl	80003f4 <__aeabi_i2d>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001a4a:	f7fe fb85 	bl	8000158 <__aeabi_dsub>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
                  l = d * 1000000000;
 8001a56:	a3a8      	add	r3, pc, #672	; (adr r3, 8001cf8 <debug_printf+0x480>)
 8001a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001a60:	f7fe fd32 	bl	80004c8 <__aeabi_dmul>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f7fe ffdc 	bl	8000a28 <__aeabi_d2iz>
 8001a70:	4603      	mov	r3, r0
 8001a72:	65bb      	str	r3, [r7, #88]	; 0x58

                  if ((l % 1000) > 500) l = l / 1000 + 1;
 8001a74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a76:	4ba2      	ldr	r3, [pc, #648]	; (8001d00 <debug_printf+0x488>)
 8001a78:	fb83 1302 	smull	r1, r3, r3, r2
 8001a7c:	1199      	asrs	r1, r3, #6
 8001a7e:	17d3      	asrs	r3, r2, #31
 8001a80:	1acb      	subs	r3, r1, r3
 8001a82:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a86:	fb01 f303 	mul.w	r3, r1, r3
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a90:	dd09      	ble.n	8001aa6 <debug_printf+0x22e>
 8001a92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a94:	4a9a      	ldr	r2, [pc, #616]	; (8001d00 <debug_printf+0x488>)
 8001a96:	fb82 1203 	smull	r1, r2, r2, r3
 8001a9a:	1192      	asrs	r2, r2, #6
 8001a9c:	17db      	asrs	r3, r3, #31
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	65bb      	str	r3, [r7, #88]	; 0x58
 8001aa4:	e007      	b.n	8001ab6 <debug_printf+0x23e>
                                  else  l = l / 1000;
 8001aa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001aa8:	4a95      	ldr	r2, [pc, #596]	; (8001d00 <debug_printf+0x488>)
 8001aaa:	fb82 1203 	smull	r1, r2, r2, r3
 8001aae:	1192      	asrs	r2, r2, #6
 8001ab0:	17db      	asrs	r3, r3, #31
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	65bb      	str	r3, [r7, #88]	; 0x58
      //                m[1] = 0;
        //              debug_printf_text(m);
          //            break;
            //      }

                  i = 6; //sizeof(m);
 8001ab6:	2306      	movs	r3, #6
 8001ab8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  //                {
    //                 l = l / 10;
      //               i--;
        //          }

                  m[i] = 0;
 8001abc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001ac0:	3360      	adds	r3, #96	; 0x60
 8001ac2:	443b      	add	r3, r7
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f803 2c60 	strb.w	r2, [r3, #-96]
                  while (i)
 8001aca:	e021      	b.n	8001b10 <debug_printf+0x298>
                  {
                     i--;
 8001acc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                     m[i] = 0x30 + (l % 10);
 8001ad6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ad8:	4b8a      	ldr	r3, [pc, #552]	; (8001d04 <debug_printf+0x48c>)
 8001ada:	fb83 1302 	smull	r1, r3, r3, r2
 8001ade:	1099      	asrs	r1, r3, #2
 8001ae0:	17d3      	asrs	r3, r2, #31
 8001ae2:	1ac9      	subs	r1, r1, r3
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	1ad1      	subs	r1, r2, r3
 8001aee:	b2ca      	uxtb	r2, r1
 8001af0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001af4:	3230      	adds	r2, #48	; 0x30
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	3360      	adds	r3, #96	; 0x60
 8001afa:	443b      	add	r3, r7
 8001afc:	f803 2c60 	strb.w	r2, [r3, #-96]
                     l = l / 10;
 8001b00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b02:	4a80      	ldr	r2, [pc, #512]	; (8001d04 <debug_printf+0x48c>)
 8001b04:	fb82 1203 	smull	r1, r2, r2, r3
 8001b08:	1092      	asrs	r2, r2, #2
 8001b0a:	17db      	asrs	r3, r3, #31
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	65bb      	str	r3, [r7, #88]	; 0x58
                  while (i)
 8001b10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1d9      	bne.n	8001acc <debug_printf+0x254>
                  }

                  debug_printf_text((char*)m);
 8001b18:	463b      	mov	r3, r7
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fd65 	bl	80015ea <debug_printf_text>

               } break;
 8001b20:	e0d7      	b.n	8001cd2 <debug_printf+0x45a>
           
            case 's' : 
               {
                  char* s = va_arg(tag, char*);
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	1d1a      	adds	r2, r3, #4
 8001b26:	60ba      	str	r2, [r7, #8]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	637b      	str	r3, [r7, #52]	; 0x34
                  debug_printf_text(s);
 8001b2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b2e:	f7ff fd5c 	bl	80015ea <debug_printf_text>
               } break;
 8001b32:	e0ce      	b.n	8001cd2 <debug_printf+0x45a>

            case 'c' : 
               {
                  UINT8 b = va_arg(tag, unsigned long);
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	1d1a      	adds	r2, r3, #4
 8001b38:	60ba      	str	r2, [r7, #8]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                  debug_printf_char(b);
 8001b40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fd15 	bl	8001574 <debug_printf_char>
               } break;
 8001b4a:	e0c2      	b.n	8001cd2 <debug_printf+0x45a>
           
            case 'x' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	1d1a      	adds	r2, r3, #4
 8001b50:	60ba      	str	r2, [r7, #8]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	63fb      	str	r3, [r7, #60]	; 0x3c
                  debug_printf_hex(d, 'x');
 8001b56:	2178      	movs	r1, #120	; 0x78
 8001b58:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001b5a:	f7ff fdf3 	bl	8001744 <debug_printf_hex>
               } break;
 8001b5e:	e0b8      	b.n	8001cd2 <debug_printf+0x45a>
            
            case 'X' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	1d1a      	adds	r2, r3, #4
 8001b64:	60ba      	str	r2, [r7, #8]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	61bb      	str	r3, [r7, #24]
                  debug_printf_hex(d, 'X');
 8001b6a:	2158      	movs	r1, #88	; 0x58
 8001b6c:	69b8      	ldr	r0, [r7, #24]
 8001b6e:	f7ff fde9 	bl	8001744 <debug_printf_hex>
               } break;
 8001b72:	e0ae      	b.n	8001cd2 <debug_printf+0x45a>
            
            case 'b' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	1d1a      	adds	r2, r3, #4
 8001b78:	60ba      	str	r2, [r7, #8]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	61fb      	str	r3, [r7, #28]
                  debug_printf_bin(d, 'b');
 8001b7e:	2162      	movs	r1, #98	; 0x62
 8001b80:	69f8      	ldr	r0, [r7, #28]
 8001b82:	f7ff fe2e 	bl	80017e2 <debug_printf_bin>
               } break;
 8001b86:	e0a4      	b.n	8001cd2 <debug_printf+0x45a>
            
            case 'B' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	1d1a      	adds	r2, r3, #4
 8001b8c:	60ba      	str	r2, [r7, #8]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	60fb      	str	r3, [r7, #12]
                  debug_printf_bin(d, 'B');
 8001b92:	2142      	movs	r1, #66	; 0x42
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f7ff fe24 	bl	80017e2 <debug_printf_bin>
               } break;
 8001b9a:	e09a      	b.n	8001cd2 <debug_printf+0x45a>
            
            case 'm' : 
               {
                  UINT8* mm = va_arg(tag, UINT8*);
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	1d1a      	adds	r2, r3, #4
 8001ba0:	60ba      	str	r2, [r7, #8]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
                  UINT16 size = va_arg(tag, int);
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	1d1a      	adds	r2, r3, #4
 8001baa:	60ba      	str	r2, [r7, #8]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	857b      	strh	r3, [r7, #42]	; 0x2a
                  int ii;

                  for(ii=0; ii<size; ii++) 
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	647b      	str	r3, [r7, #68]	; 0x44
 8001bb4:	e03e      	b.n	8001c34 <debug_printf+0x3bc>
                  {   
                     dev_trace_send_byte(HB2HEX(mm[ii] / 0x10));
 8001bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bba:	4413      	add	r3, r2
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b9f      	cmp	r3, #159	; 0x9f
 8001bc0:	d908      	bls.n	8001bd4 <debug_printf+0x35c>
 8001bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bc6:	4413      	add	r3, r2
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	091b      	lsrs	r3, r3, #4
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	3337      	adds	r3, #55	; 0x37
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	e007      	b.n	8001be4 <debug_printf+0x36c>
 8001bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bd8:	4413      	add	r3, r2
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	3330      	adds	r3, #48	; 0x30
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fc55 	bl	8001494 <dev_trace_send_byte>
                     dev_trace_send_byte(HB2HEX(mm[ii] % 0x10));
 8001bea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bee:	4413      	add	r3, r2
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b09      	cmp	r3, #9
 8001bfa:	d909      	bls.n	8001c10 <debug_printf+0x398>
 8001bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c00:	4413      	add	r3, r2
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	f003 030f 	and.w	r3, r3, #15
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	3337      	adds	r3, #55	; 0x37
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	e008      	b.n	8001c22 <debug_printf+0x3aa>
 8001c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c14:	4413      	add	r3, r2
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	3330      	adds	r3, #48	; 0x30
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fc36 	bl	8001494 <dev_trace_send_byte>
                     dev_trace_send_byte(' ');
 8001c28:	2020      	movs	r0, #32
 8001c2a:	f7ff fc33 	bl	8001494 <dev_trace_send_byte>
                  for(ii=0; ii<size; ii++) 
 8001c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c30:	3301      	adds	r3, #1
 8001c32:	647b      	str	r3, [r7, #68]	; 0x44
 8001c34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	dbbc      	blt.n	8001bb6 <debug_printf+0x33e>
                  }
               
               } break;
 8001c3c:	e049      	b.n	8001cd2 <debug_printf+0x45a>

            case 'M' : 
               {
                  UINT8* mm = va_arg(tag, UINT8*);
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	1d1a      	adds	r2, r3, #4
 8001c42:	60ba      	str	r2, [r7, #8]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	617b      	str	r3, [r7, #20]
                  UINT16 size = va_arg(tag, int);
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	1d1a      	adds	r2, r3, #4
 8001c4c:	60ba      	str	r2, [r7, #8]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	827b      	strh	r3, [r7, #18]
                  int ii;

                  for(ii=0; ii<size; ii++) 
 8001c52:	2300      	movs	r3, #0
 8001c54:	643b      	str	r3, [r7, #64]	; 0x40
 8001c56:	e00d      	b.n	8001c74 <debug_printf+0x3fc>
                  {   
                     debug_printf_long(mm[ii], 'u');
 8001c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2175      	movs	r1, #117	; 0x75
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fd1e 	bl	80016a4 <debug_printf_long>
                     dev_trace_send_byte(' ');
 8001c68:	2020      	movs	r0, #32
 8001c6a:	f7ff fc13 	bl	8001494 <dev_trace_send_byte>
                  for(ii=0; ii<size; ii++) 
 8001c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c70:	3301      	adds	r3, #1
 8001c72:	643b      	str	r3, [r7, #64]	; 0x40
 8001c74:	8a7b      	ldrh	r3, [r7, #18]
 8001c76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	dbed      	blt.n	8001c58 <debug_printf+0x3e0>
                  }
               
               } break;
 8001c7c:	e029      	b.n	8001cd2 <debug_printf+0x45a>

            case 'p' : 
               {
                  UINT8* mm = va_arg(tag, UINT8*);
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	1d1a      	adds	r2, r3, #4
 8001c82:	60ba      	str	r2, [r7, #8]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	633b      	str	r3, [r7, #48]	; 0x30
               
                  debug_printf_long(mm[0], 'u');
 8001c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2175      	movs	r1, #117	; 0x75
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fd08 	bl	80016a4 <debug_printf_long>
                  dev_trace_send_byte('.');
 8001c94:	202e      	movs	r0, #46	; 0x2e
 8001c96:	f7ff fbfd 	bl	8001494 <dev_trace_send_byte>
                  debug_printf_long(mm[1], 'u');
 8001c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2175      	movs	r1, #117	; 0x75
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fcfe 	bl	80016a4 <debug_printf_long>
                  dev_trace_send_byte('.');
 8001ca8:	202e      	movs	r0, #46	; 0x2e
 8001caa:	f7ff fbf3 	bl	8001494 <dev_trace_send_byte>
                  debug_printf_long(mm[2], 'u');
 8001cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2175      	movs	r1, #117	; 0x75
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fcf4 	bl	80016a4 <debug_printf_long>
                  dev_trace_send_byte('.');
 8001cbc:	202e      	movs	r0, #46	; 0x2e
 8001cbe:	f7ff fbe9 	bl	8001494 <dev_trace_send_byte>
                  debug_printf_long(mm[3], 'u');
 8001cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc4:	3303      	adds	r3, #3
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2175      	movs	r1, #117	; 0x75
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fcea 	bl	80016a4 <debug_printf_long>
               
               } break;
 8001cd0:	bf00      	nop
           
         }
      
         i += 2;
 8001cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
   while(text[i] != 0)
 8001cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cda:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001cdc:	4413      	add	r3, r2
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f47f add3 	bne.w	800188c <debug_printf+0x14>
      }
   }   

}
 8001ce6:	bf00      	nop
 8001ce8:	bf00      	nop
 8001cea:	3760      	adds	r7, #96	; 0x60
 8001cec:	46bd      	mov	sp, r7
 8001cee:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001cf2:	b004      	add	sp, #16
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	00000000 	.word	0x00000000
 8001cfc:	41cdcd65 	.word	0x41cdcd65
 8001d00:	10624dd3 	.word	0x10624dd3
 8001d04:	66666667 	.word	0x66666667

08001d08 <hal_driver_set_info>:
static void* dma_2_irq_data[16];



void hal_driver_set_info(dev_info_t* info_1, dev_info_t* info_2)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
		info_2->id = info_1->id;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	781a      	ldrb	r2, [r3, #0]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	701a      	strb	r2, [r3, #0]
		info_2->status_in = info_1->status_in;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	605a      	str	r2, [r3, #4]
		info_2->status_out = info_1->status_out;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	609a      	str	r2, [r3, #8]
		info_2->name = info_1->name;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691a      	ldr	r2, [r3, #16]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	611a      	str	r2, [r3, #16]
	
		info_2->rx_mode = HAL_DEFAULT_MODE_SYNC;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2200      	movs	r2, #0
 8001d36:	731a      	strb	r2, [r3, #12]
		info_2->tx_mode = HAL_DEFAULT_MODE_SYNC;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	735a      	strb	r2, [r3, #13]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <EXTI1_IRQHandler>:
//------------------------------------------------------------------------------
//         internal Functions
//------------------------------------------------------------------------------

//void EXTI0_IRQHandler(void){ (*gpio_irq_cbf[0])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);}
void EXTI1_IRQHandler(void){ (*gpio_irq_cbf[1])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);}
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <EXTI1_IRQHandler+0x14>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	4798      	blx	r3
 8001d52:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <EXTI1_IRQHandler+0x18>)
 8001d54:	2202      	movs	r2, #2
 8001d56:	615a      	str	r2, [r3, #20]
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	2000050c 	.word	0x2000050c
 8001d60:	40010400 	.word	0x40010400

08001d64 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){ (*gpio_irq_cbf[2])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2);}
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <EXTI2_IRQHandler+0x14>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	4798      	blx	r3
 8001d6e:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <EXTI2_IRQHandler+0x18>)
 8001d70:	2204      	movs	r2, #4
 8001d72:	615a      	str	r2, [r3, #20]
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	2000050c 	.word	0x2000050c
 8001d7c:	40010400 	.word	0x40010400

08001d80 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){ (*gpio_irq_cbf[3])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);}
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <EXTI3_IRQHandler+0x14>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	4798      	blx	r3
 8001d8a:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <EXTI3_IRQHandler+0x18>)
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	615a      	str	r2, [r3, #20]
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	2000050c 	.word	0x2000050c
 8001d98:	40010400 	.word	0x40010400

08001d9c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){ (*gpio_irq_cbf[4])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);}
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4b03      	ldr	r3, [pc, #12]	; (8001db0 <EXTI4_IRQHandler+0x14>)
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	4798      	blx	r3
 8001da6:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <EXTI4_IRQHandler+0x18>)
 8001da8:	2210      	movs	r2, #16
 8001daa:	615a      	str	r2, [r3, #20]
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	2000050c 	.word	0x2000050c
 8001db4:	40010400 	.word	0x40010400

08001db8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{ 
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_5) != RESET) { (*gpio_irq_cbf[5])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5); }
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	; (8001e3c <EXTI9_5_IRQHandler+0x84>)
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	f003 0320 	and.w	r3, r3, #32
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <EXTI9_5_IRQHandler+0x1c>
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <EXTI9_5_IRQHandler+0x88>)
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	4798      	blx	r3
 8001dce:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <EXTI9_5_IRQHandler+0x84>)
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET) { (*gpio_irq_cbf[6])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6); }
 8001dd4:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <EXTI9_5_IRQHandler+0x84>)
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <EXTI9_5_IRQHandler+0x34>
 8001de0:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <EXTI9_5_IRQHandler+0x88>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	4798      	blx	r3
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <EXTI9_5_IRQHandler+0x84>)
 8001de8:	2240      	movs	r2, #64	; 0x40
 8001dea:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET) { (*gpio_irq_cbf[7])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7); }
 8001dec:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <EXTI9_5_IRQHandler+0x84>)
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <EXTI9_5_IRQHandler+0x4c>
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <EXTI9_5_IRQHandler+0x88>)
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	4798      	blx	r3
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <EXTI9_5_IRQHandler+0x84>)
 8001e00:	2280      	movs	r2, #128	; 0x80
 8001e02:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET) { (*gpio_irq_cbf[8])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8); }
 8001e04:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <EXTI9_5_IRQHandler+0x84>)
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d006      	beq.n	8001e1e <EXTI9_5_IRQHandler+0x66>
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <EXTI9_5_IRQHandler+0x88>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4798      	blx	r3
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <EXTI9_5_IRQHandler+0x84>)
 8001e18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e1c:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET) { (*gpio_irq_cbf[9])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9); }
 8001e1e:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <EXTI9_5_IRQHandler+0x84>)
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d006      	beq.n	8001e38 <EXTI9_5_IRQHandler+0x80>
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <EXTI9_5_IRQHandler+0x88>)
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	4798      	blx	r3
 8001e30:	4b02      	ldr	r3, [pc, #8]	; (8001e3c <EXTI9_5_IRQHandler+0x84>)
 8001e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e36:	615a      	str	r2, [r3, #20]
}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40010400 	.word	0x40010400
 8001e40:	2000050c 	.word	0x2000050c

08001e44 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{ 
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_10) != RESET) { (*gpio_irq_cbf[10])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10); }
 8001e48:	4b27      	ldr	r3, [pc, #156]	; (8001ee8 <EXTI15_10_IRQHandler+0xa4>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d006      	beq.n	8001e62 <EXTI15_10_IRQHandler+0x1e>
 8001e54:	4b25      	ldr	r3, [pc, #148]	; (8001eec <EXTI15_10_IRQHandler+0xa8>)
 8001e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e58:	4798      	blx	r3
 8001e5a:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <EXTI15_10_IRQHandler+0xa4>)
 8001e5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e60:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_11) != RESET) { (*gpio_irq_cbf[11])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11); }
 8001e62:	4b21      	ldr	r3, [pc, #132]	; (8001ee8 <EXTI15_10_IRQHandler+0xa4>)
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d006      	beq.n	8001e7c <EXTI15_10_IRQHandler+0x38>
 8001e6e:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <EXTI15_10_IRQHandler+0xa8>)
 8001e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e72:	4798      	blx	r3
 8001e74:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <EXTI15_10_IRQHandler+0xa4>)
 8001e76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e7a:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_12) != RESET) { (*gpio_irq_cbf[12])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12); }
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <EXTI15_10_IRQHandler+0xa4>)
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d006      	beq.n	8001e96 <EXTI15_10_IRQHandler+0x52>
 8001e88:	4b18      	ldr	r3, [pc, #96]	; (8001eec <EXTI15_10_IRQHandler+0xa8>)
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	4798      	blx	r3
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <EXTI15_10_IRQHandler+0xa4>)
 8001e90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e94:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET) { (*gpio_irq_cbf[13])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13); }
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <EXTI15_10_IRQHandler+0xa4>)
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d006      	beq.n	8001eb0 <EXTI15_10_IRQHandler+0x6c>
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <EXTI15_10_IRQHandler+0xa8>)
 8001ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea6:	4798      	blx	r3
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <EXTI15_10_IRQHandler+0xa4>)
 8001eaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eae:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_14) != RESET) { (*gpio_irq_cbf[14])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14); }
 8001eb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <EXTI15_10_IRQHandler+0xa4>)
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d006      	beq.n	8001eca <EXTI15_10_IRQHandler+0x86>
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <EXTI15_10_IRQHandler+0xa8>)
 8001ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec0:	4798      	blx	r3
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <EXTI15_10_IRQHandler+0xa4>)
 8001ec4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ec8:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_15) != RESET) { (*gpio_irq_cbf[15])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_15); }
 8001eca:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <EXTI15_10_IRQHandler+0xa4>)
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d006      	beq.n	8001ee4 <EXTI15_10_IRQHandler+0xa0>
 8001ed6:	4b05      	ldr	r3, [pc, #20]	; (8001eec <EXTI15_10_IRQHandler+0xa8>)
 8001ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eda:	4798      	blx	r3
 8001edc:	4b02      	ldr	r3, [pc, #8]	; (8001ee8 <EXTI15_10_IRQHandler+0xa4>)
 8001ede:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ee2:	615a      	str	r2, [r3, #20]
}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40010400 	.word	0x40010400
 8001eec:	2000050c 	.word	0x2000050c

08001ef0 <dev_gpio_id_port>:

//------------------------------------------------------------------------------
//         GPIO Local Functions
//------------------------------------------------------------------------------
GPIO_TypeDef* dev_gpio_id_port(UINT8 gpio_id)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
		switch(gpio_id)
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d817      	bhi.n	8001f30 <dev_gpio_id_port+0x40>
 8001f00:	a201      	add	r2, pc, #4	; (adr r2, 8001f08 <dev_gpio_id_port+0x18>)
 8001f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f06:	bf00      	nop
 8001f08:	08001f1d 	.word	0x08001f1d
 8001f0c:	08001f21 	.word	0x08001f21
 8001f10:	08001f25 	.word	0x08001f25
 8001f14:	08001f29 	.word	0x08001f29
 8001f18:	08001f2d 	.word	0x08001f2d
		{
				case GPIO_PA : return GPIOA;
 8001f1c:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <dev_gpio_id_port+0x4c>)
 8001f1e:	e008      	b.n	8001f32 <dev_gpio_id_port+0x42>
				case GPIO_PB : return GPIOB;
 8001f20:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <dev_gpio_id_port+0x50>)
 8001f22:	e006      	b.n	8001f32 <dev_gpio_id_port+0x42>
				case GPIO_PC : return GPIOC;
 8001f24:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <dev_gpio_id_port+0x54>)
 8001f26:	e004      	b.n	8001f32 <dev_gpio_id_port+0x42>
				case GPIO_PD : return GPIOD;
 8001f28:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <dev_gpio_id_port+0x58>)
 8001f2a:	e002      	b.n	8001f32 <dev_gpio_id_port+0x42>
				case GPIO_PE : return GPIOE;
 8001f2c:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <dev_gpio_id_port+0x5c>)
 8001f2e:	e000      	b.n	8001f32 <dev_gpio_id_port+0x42>
				case GPIO_PI : return GPIOI;
#endif

		}

		return (GPIO_TypeDef*)0;	
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	40010800 	.word	0x40010800
 8001f40:	40010c00 	.word	0x40010c00
 8001f44:	40011000 	.word	0x40011000
 8001f48:	40011400 	.word	0x40011400
 8001f4c:	40011800 	.word	0x40011800

08001f50 <dev_gpio_pin_id>:

		return 0;	
}

int dev_gpio_pin_id(UINT16 pin)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	80fb      	strh	r3, [r7, #6]
		if (pin & 0x0001) return 0;
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <dev_gpio_pin_id+0x18>
 8001f64:	2300      	movs	r3, #0
 8001f66:	e069      	b.n	800203c <dev_gpio_pin_id+0xec>
		if (pin & 0x0002) return 1;
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <dev_gpio_pin_id+0x26>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e062      	b.n	800203c <dev_gpio_pin_id+0xec>
		if (pin & 0x0004) return 2;
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <dev_gpio_pin_id+0x34>
 8001f80:	2302      	movs	r3, #2
 8001f82:	e05b      	b.n	800203c <dev_gpio_pin_id+0xec>
		if (pin & 0x0008) return 3;
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <dev_gpio_pin_id+0x42>
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e054      	b.n	800203c <dev_gpio_pin_id+0xec>
		if (pin & 0x0010) return 4;
 8001f92:	88fb      	ldrh	r3, [r7, #6]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <dev_gpio_pin_id+0x50>
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	e04d      	b.n	800203c <dev_gpio_pin_id+0xec>
		if (pin & 0x0020) return 5;
 8001fa0:	88fb      	ldrh	r3, [r7, #6]
 8001fa2:	f003 0320 	and.w	r3, r3, #32
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <dev_gpio_pin_id+0x5e>
 8001faa:	2305      	movs	r3, #5
 8001fac:	e046      	b.n	800203c <dev_gpio_pin_id+0xec>
		if (pin & 0x0040) return 6;
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <dev_gpio_pin_id+0x6c>
 8001fb8:	2306      	movs	r3, #6
 8001fba:	e03f      	b.n	800203c <dev_gpio_pin_id+0xec>
		if (pin & 0x0080) return 7;
 8001fbc:	88fb      	ldrh	r3, [r7, #6]
 8001fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <dev_gpio_pin_id+0x7a>
 8001fc6:	2307      	movs	r3, #7
 8001fc8:	e038      	b.n	800203c <dev_gpio_pin_id+0xec>
	
		if (pin & 0x0100) return 8;
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <dev_gpio_pin_id+0x88>
 8001fd4:	2308      	movs	r3, #8
 8001fd6:	e031      	b.n	800203c <dev_gpio_pin_id+0xec>
		if (pin & 0x0200) return 9;
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <dev_gpio_pin_id+0x96>
 8001fe2:	2309      	movs	r3, #9
 8001fe4:	e02a      	b.n	800203c <dev_gpio_pin_id+0xec>
		if (pin & 0x0400) return 10;
 8001fe6:	88fb      	ldrh	r3, [r7, #6]
 8001fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <dev_gpio_pin_id+0xa4>
 8001ff0:	230a      	movs	r3, #10
 8001ff2:	e023      	b.n	800203c <dev_gpio_pin_id+0xec>
		if (pin & 0x0800) return 11;
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <dev_gpio_pin_id+0xb2>
 8001ffe:	230b      	movs	r3, #11
 8002000:	e01c      	b.n	800203c <dev_gpio_pin_id+0xec>
		if (pin & 0x1000) return 12;
 8002002:	88fb      	ldrh	r3, [r7, #6]
 8002004:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <dev_gpio_pin_id+0xc0>
 800200c:	230c      	movs	r3, #12
 800200e:	e015      	b.n	800203c <dev_gpio_pin_id+0xec>
		if (pin & 0x2000) return 13;
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <dev_gpio_pin_id+0xce>
 800201a:	230d      	movs	r3, #13
 800201c:	e00e      	b.n	800203c <dev_gpio_pin_id+0xec>
		if (pin & 0x4000) return 14;
 800201e:	88fb      	ldrh	r3, [r7, #6]
 8002020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <dev_gpio_pin_id+0xdc>
 8002028:	230e      	movs	r3, #14
 800202a:	e007      	b.n	800203c <dev_gpio_pin_id+0xec>
		if (pin & 0x8000) return 15;
 800202c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002030:	2b00      	cmp	r3, #0
 8002032:	da01      	bge.n	8002038 <dev_gpio_pin_id+0xe8>
 8002034:	230f      	movs	r3, #15
 8002036:	e001      	b.n	800203c <dev_gpio_pin_id+0xec>

		return -1;	
 8002038:	f04f 33ff 	mov.w	r3, #4294967295
}
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr
	...

08002048 <dev_gpio_init_rcc>:

//------------------------------------------------------------------------------
//         GPIO Init Functions
//------------------------------------------------------------------------------
UINT8 dev_gpio_init_rcc(UINT8 gpio_id)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
		switch(gpio_id)
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	2b04      	cmp	r3, #4
 8002056:	d84e      	bhi.n	80020f6 <dev_gpio_init_rcc+0xae>
 8002058:	a201      	add	r2, pc, #4	; (adr r2, 8002060 <dev_gpio_init_rcc+0x18>)
 800205a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205e:	bf00      	nop
 8002060:	08002075 	.word	0x08002075
 8002064:	0800208f 	.word	0x0800208f
 8002068:	080020a9 	.word	0x080020a9
 800206c:	080020c3 	.word	0x080020c3
 8002070:	080020dd 	.word	0x080020dd
		{
				case GPIO_PA : __HAL_RCC_GPIOA_CLK_ENABLE(); break;
 8002074:	4b25      	ldr	r3, [pc, #148]	; (800210c <dev_gpio_init_rcc+0xc4>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	4a24      	ldr	r2, [pc, #144]	; (800210c <dev_gpio_init_rcc+0xc4>)
 800207a:	f043 0304 	orr.w	r3, r3, #4
 800207e:	6193      	str	r3, [r2, #24]
 8002080:	4b22      	ldr	r3, [pc, #136]	; (800210c <dev_gpio_init_rcc+0xc4>)
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	61fb      	str	r3, [r7, #28]
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	e038      	b.n	8002100 <dev_gpio_init_rcc+0xb8>
				case GPIO_PB : __HAL_RCC_GPIOB_CLK_ENABLE(); break;
 800208e:	4b1f      	ldr	r3, [pc, #124]	; (800210c <dev_gpio_init_rcc+0xc4>)
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	4a1e      	ldr	r2, [pc, #120]	; (800210c <dev_gpio_init_rcc+0xc4>)
 8002094:	f043 0308 	orr.w	r3, r3, #8
 8002098:	6193      	str	r3, [r2, #24]
 800209a:	4b1c      	ldr	r3, [pc, #112]	; (800210c <dev_gpio_init_rcc+0xc4>)
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	61bb      	str	r3, [r7, #24]
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	e02b      	b.n	8002100 <dev_gpio_init_rcc+0xb8>
				case GPIO_PC : __HAL_RCC_GPIOC_CLK_ENABLE(); break;
 80020a8:	4b18      	ldr	r3, [pc, #96]	; (800210c <dev_gpio_init_rcc+0xc4>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	4a17      	ldr	r2, [pc, #92]	; (800210c <dev_gpio_init_rcc+0xc4>)
 80020ae:	f043 0310 	orr.w	r3, r3, #16
 80020b2:	6193      	str	r3, [r2, #24]
 80020b4:	4b15      	ldr	r3, [pc, #84]	; (800210c <dev_gpio_init_rcc+0xc4>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f003 0310 	and.w	r3, r3, #16
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	e01e      	b.n	8002100 <dev_gpio_init_rcc+0xb8>
				case GPIO_PD : __HAL_RCC_GPIOD_CLK_ENABLE(); break;
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <dev_gpio_init_rcc+0xc4>)
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	4a11      	ldr	r2, [pc, #68]	; (800210c <dev_gpio_init_rcc+0xc4>)
 80020c8:	f043 0320 	orr.w	r3, r3, #32
 80020cc:	6193      	str	r3, [r2, #24]
 80020ce:	4b0f      	ldr	r3, [pc, #60]	; (800210c <dev_gpio_init_rcc+0xc4>)
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	f003 0320 	and.w	r3, r3, #32
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	e011      	b.n	8002100 <dev_gpio_init_rcc+0xb8>
				case GPIO_PE : __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <dev_gpio_init_rcc+0xc4>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	4a0a      	ldr	r2, [pc, #40]	; (800210c <dev_gpio_init_rcc+0xc4>)
 80020e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020e6:	6193      	str	r3, [r2, #24]
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <dev_gpio_init_rcc+0xc4>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	e004      	b.n	8002100 <dev_gpio_init_rcc+0xb8>
			
#ifdef	GPIOI			
				case GPIO_PI : __HAL_RCC_GPIOI_CLK_ENABLE(); break;
#endif
			
				default : TRACE_GERROR("Unknow GPIO !!!");
 80020f6:	22a4      	movs	r2, #164	; 0xa4
 80020f8:	4905      	ldr	r1, [pc, #20]	; (8002110 <dev_gpio_init_rcc+0xc8>)
 80020fa:	4806      	ldr	r0, [pc, #24]	; (8002114 <dev_gpio_init_rcc+0xcc>)
 80020fc:	f7ff fa0c 	bl	8001518 <dev_trace_generate_error>
		}
		
		return RET_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3720      	adds	r7, #32
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40021000 	.word	0x40021000
 8002110:	08008b74 	.word	0x08008b74
 8002114:	08008b8c 	.word	0x08008b8c

08002118 <dev_gpio_init_mode>:
			
		return RET_OK;
}

UINT8 dev_gpio_init_mode(GPIO_InitTypeDef* init, UINT8 gpio_mode)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	70fb      	strb	r3, [r7, #3]
	
		switch(gpio_mode)
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	2b0b      	cmp	r3, #11
 8002128:	d859      	bhi.n	80021de <dev_gpio_init_mode+0xc6>
 800212a:	a201      	add	r2, pc, #4	; (adr r2, 8002130 <dev_gpio_init_mode+0x18>)
 800212c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002130:	08002161 	.word	0x08002161
 8002134:	0800218b 	.word	0x0800218b
 8002138:	08002161 	.word	0x08002161
 800213c:	0800217d 	.word	0x0800217d
 8002140:	0800216f 	.word	0x0800216f
 8002144:	0800218b 	.word	0x0800218b
 8002148:	08002199 	.word	0x08002199
 800214c:	080021a7 	.word	0x080021a7
 8002150:	080021b5 	.word	0x080021b5
 8002154:	080021c3 	.word	0x080021c3
 8002158:	080021a7 	.word	0x080021a7
 800215c:	080021d1 	.word	0x080021d1
		{
				case GPIO_MODE_IN : 
				case GPIO_MODE_IN_FLOAT : 	init->Mode = GPIO_MODE_INPUT;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	605a      	str	r2, [r3, #4]
																		init->Pull = GPIO_NOPULL; break;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	e03e      	b.n	80021ec <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_IN_UP : 			init->Mode = GPIO_MODE_INPUT;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	605a      	str	r2, [r3, #4]
																		init->Pull = GPIO_PULLUP; break;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	609a      	str	r2, [r3, #8]
 800217a:	e037      	b.n	80021ec <dev_gpio_init_mode+0xd4>
				
				case GPIO_MODE_IN_DOWN : 		init->Mode = GPIO_MODE_INPUT;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	605a      	str	r2, [r3, #4]
																		init->Pull = GPIO_PULLDOWN; break;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2202      	movs	r2, #2
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	e030      	b.n	80021ec <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_OUT : 
				case GPIO_MODE_OUT_PP : 		init->Mode 	= GPIO_MODE_OUTPUT_PP;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	e029      	b.n	80021ec <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_OUT_OD : 		init->Mode 	= GPIO_MODE_OUTPUT_OD;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2211      	movs	r2, #17
 800219c:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	e022      	b.n	80021ec <dev_gpio_init_mode+0xd4>
#ifdef GPIO_MODE_AF_INPUT				
				case GPIO_MODE_ALF : 
				case GPIO_MODE_ALF_IN : 		init->Mode 	= GPIO_MODE_AF_INPUT;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	e01b      	b.n	80021ec <dev_gpio_init_mode+0xd4>
#endif				
				
				case GPIO_MODE_ALF_PP : 		init->Mode 	= GPIO_MODE_AF_PP;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2202      	movs	r2, #2
 80021b8:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	e014      	b.n	80021ec <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_ALF_OD : 		init->Mode 	= GPIO_MODE_AF_OD;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2212      	movs	r2, #18
 80021c6:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
 80021ce:	e00d      	b.n	80021ec <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_AN : 				init->Mode 	= GPIO_MODE_ANALOG;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2203      	movs	r2, #3
 80021d4:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	e006      	b.n	80021ec <dev_gpio_init_mode+0xd4>

				default : 									return TRACE_GERROR("Unknow GPIO Mode !!!");
 80021de:	22e9      	movs	r2, #233	; 0xe9
 80021e0:	4905      	ldr	r1, [pc, #20]	; (80021f8 <dev_gpio_init_mode+0xe0>)
 80021e2:	4806      	ldr	r0, [pc, #24]	; (80021fc <dev_gpio_init_mode+0xe4>)
 80021e4:	f7ff f998 	bl	8001518 <dev_trace_generate_error>
 80021e8:	4603      	mov	r3, r0
 80021ea:	e000      	b.n	80021ee <dev_gpio_init_mode+0xd6>
				
		};
		
		return RET_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	08008b74 	.word	0x08008b74
 80021fc:	08008b9c 	.word	0x08008b9c

08002200 <dev_gpio_init_speed>:

UINT8 dev_gpio_init_speed(GPIO_InitTypeDef* init, UINT8 gpio_speed)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	70fb      	strb	r3, [r7, #3]
		switch(gpio_speed)
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	2b03      	cmp	r3, #3
 8002210:	d81a      	bhi.n	8002248 <dev_gpio_init_speed+0x48>
 8002212:	a201      	add	r2, pc, #4	; (adr r2, 8002218 <dev_gpio_init_speed+0x18>)
 8002214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002218:	08002229 	.word	0x08002229
 800221c:	08002231 	.word	0x08002231
 8002220:	08002239 	.word	0x08002239
 8002224:	08002241 	.word	0x08002241
		{
				case GPIO_PIN_SPEED_VHIGH : 			init->Speed = GPIO_SPEED_FREQ_HIGH; break;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2203      	movs	r2, #3
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	e012      	b.n	8002256 <dev_gpio_init_speed+0x56>
				case GPIO_PIN_SPEED_HIGH : 				init->Speed = GPIO_SPEED_FREQ_HIGH; break;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2203      	movs	r2, #3
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	e00e      	b.n	8002256 <dev_gpio_init_speed+0x56>
				case GPIO_PIN_SPEED_MED : 				init->Speed = GPIO_SPEED_FREQ_MEDIUM; break;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	e00a      	b.n	8002256 <dev_gpio_init_speed+0x56>
				case GPIO_PIN_SPEED_LOW : 				init->Speed = GPIO_SPEED_FREQ_LOW; break;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	e006      	b.n	8002256 <dev_gpio_init_speed+0x56>
			
				default : 									return TRACE_GERROR("Unknow GPIO Speed !!!");
 8002248:	22f9      	movs	r2, #249	; 0xf9
 800224a:	4905      	ldr	r1, [pc, #20]	; (8002260 <dev_gpio_init_speed+0x60>)
 800224c:	4805      	ldr	r0, [pc, #20]	; (8002264 <dev_gpio_init_speed+0x64>)
 800224e:	f7ff f963 	bl	8001518 <dev_trace_generate_error>
 8002252:	4603      	mov	r3, r0
 8002254:	e000      	b.n	8002258 <dev_gpio_init_speed+0x58>
		};

		return RET_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	08008b74 	.word	0x08008b74
 8002264:	08008bb4 	.word	0x08008bb4

08002268 <dev_gpio_init>:
	
		return RET_OK;
}

UINT8 dev_gpio_init(dev_gpio_t* gpio, dev_gpio_init_t* init)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
		UINT8 ret;
		GPIO_InitTypeDef GPIO_InitStructure;

		hal_driver_set_info(&init->info, &gpio->info);
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3304      	adds	r3, #4
 8002278:	4619      	mov	r1, r3
 800227a:	4610      	mov	r0, r2
 800227c:	f7ff fd44 	bl	8001d08 <hal_driver_set_info>
	
		gpio->port = dev_gpio_id_port(gpio->info.id);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	791b      	ldrb	r3, [r3, #4]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fe33 	bl	8001ef0 <dev_gpio_id_port>
 800228a:	4602      	mov	r2, r0
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	601a      	str	r2, [r3, #0]
		gpio->pin = init->pin;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	8b1a      	ldrh	r2, [r3, #24]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	839a      	strh	r2, [r3, #28]
	
		GPIO_InitStructure.Pin = gpio->pin; 
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	8b9b      	ldrh	r3, [r3, #28]
 800229c:	60bb      	str	r3, [r7, #8]
	
		ret = dev_gpio_init_rcc(gpio->info.id);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	791b      	ldrb	r3, [r3, #4]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fed0 	bl	8002048 <dev_gpio_init_rcc>
 80022a8:	4603      	mov	r3, r0
 80022aa:	77fb      	strb	r3, [r7, #31]
		if (ret) return TRACE_EERROR(ret);
 80022ac:	7ffb      	ldrb	r3, [r7, #31]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d008      	beq.n	80022c4 <dev_gpio_init+0x5c>
 80022b2:	7ffb      	ldrb	r3, [r7, #31]
 80022b4:	f240 1213 	movw	r2, #275	; 0x113
 80022b8:	4978      	ldr	r1, [pc, #480]	; (800249c <dev_gpio_init+0x234>)
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff f912 	bl	80014e4 <dev_trace_get_error>
 80022c0:	4603      	mov	r3, r0
 80022c2:	e0e7      	b.n	8002494 <dev_gpio_init+0x22c>
	
		ret = dev_gpio_init_mode(&GPIO_InitStructure, init->mode);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	7e9a      	ldrb	r2, [r3, #26]
 80022c8:	f107 0308 	add.w	r3, r7, #8
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff ff22 	bl	8002118 <dev_gpio_init_mode>
 80022d4:	4603      	mov	r3, r0
 80022d6:	77fb      	strb	r3, [r7, #31]
		if (ret) return TRACE_EERROR(ret);
 80022d8:	7ffb      	ldrb	r3, [r7, #31]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d008      	beq.n	80022f0 <dev_gpio_init+0x88>
 80022de:	7ffb      	ldrb	r3, [r7, #31]
 80022e0:	f44f 728b 	mov.w	r2, #278	; 0x116
 80022e4:	496d      	ldr	r1, [pc, #436]	; (800249c <dev_gpio_init+0x234>)
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff f8fc 	bl	80014e4 <dev_trace_get_error>
 80022ec:	4603      	mov	r3, r0
 80022ee:	e0d1      	b.n	8002494 <dev_gpio_init+0x22c>
	
		ret = dev_gpio_init_speed(&GPIO_InitStructure, init->speed);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	7eda      	ldrb	r2, [r3, #27]
 80022f4:	f107 0308 	add.w	r3, r7, #8
 80022f8:	4611      	mov	r1, r2
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff ff80 	bl	8002200 <dev_gpio_init_speed>
 8002300:	4603      	mov	r3, r0
 8002302:	77fb      	strb	r3, [r7, #31]
		if (ret) return TRACE_EERROR(ret);
 8002304:	7ffb      	ldrb	r3, [r7, #31]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d008      	beq.n	800231c <dev_gpio_init+0xb4>
 800230a:	7ffb      	ldrb	r3, [r7, #31]
 800230c:	f240 1219 	movw	r2, #281	; 0x119
 8002310:	4962      	ldr	r1, [pc, #392]	; (800249c <dev_gpio_init+0x234>)
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff f8e6 	bl	80014e4 <dev_trace_get_error>
 8002318:	4603      	mov	r3, r0
 800231a:	e0bb      	b.n	8002494 <dev_gpio_init+0x22c>
	
	  // EXTI interrupt init
		if (init->irq_cbf)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d013      	beq.n	800234c <dev_gpio_init+0xe4>
		{
				switch(init->irq_mode)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	7f1b      	ldrb	r3, [r3, #28]
 8002328:	2b03      	cmp	r3, #3
 800232a:	d00c      	beq.n	8002346 <dev_gpio_init+0xde>
 800232c:	2b03      	cmp	r3, #3
 800232e:	dc0e      	bgt.n	800234e <dev_gpio_init+0xe6>
 8002330:	2b01      	cmp	r3, #1
 8002332:	d002      	beq.n	800233a <dev_gpio_init+0xd2>
 8002334:	2b02      	cmp	r3, #2
 8002336:	d003      	beq.n	8002340 <dev_gpio_init+0xd8>
 8002338:	e009      	b.n	800234e <dev_gpio_init+0xe6>
				{
						case GPIO_IRQ_RISING : 		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING; break;
 800233a:	4b59      	ldr	r3, [pc, #356]	; (80024a0 <dev_gpio_init+0x238>)
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	e006      	b.n	800234e <dev_gpio_init+0xe6>
						case GPIO_IRQ_FALLING : 	GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING; break;
 8002340:	4b57      	ldr	r3, [pc, #348]	; (80024a0 <dev_gpio_init+0x238>)
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	e003      	b.n	800234e <dev_gpio_init+0xe6>
						case GPIO_IRQ_CHANGE : 		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING; break;
 8002346:	4b56      	ldr	r3, [pc, #344]	; (80024a0 <dev_gpio_init+0x238>)
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	e000      	b.n	800234e <dev_gpio_init+0xe6>
				}
		}	
 800234c:	bf00      	nop
	
		HAL_GPIO_Init(gpio->port, &GPIO_InitStructure);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f107 0208 	add.w	r2, r7, #8
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f002 f9a7 	bl	80046ac <HAL_GPIO_Init>

		HAL_DRIVER_DEBUG(gpio->info.status_in, debug_printf("Init Gpio %s - %d, %X\n\r", gpio->info.name, gpio->info.id, gpio->pin));		
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00e      	beq.n	8002384 <dev_gpio_init+0x11c>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d009      	beq.n	8002384 <dev_gpio_init+0x11c>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6959      	ldr	r1, [r3, #20]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	791b      	ldrb	r3, [r3, #4]
 8002378:	461a      	mov	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	8b9b      	ldrh	r3, [r3, #28]
 800237e:	4849      	ldr	r0, [pc, #292]	; (80024a4 <dev_gpio_init+0x23c>)
 8002380:	f7ff fa7a 	bl	8001878 <debug_printf>

	  // EXTI interrupt init
		if (init->irq_cbf)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 8082 	beq.w	8002492 <dev_gpio_init+0x22a>
		{
				int pin_id = dev_gpio_pin_id(gpio->pin);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	8b9b      	ldrh	r3, [r3, #28]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fddc 	bl	8001f50 <dev_gpio_pin_id>
 8002398:	61b8      	str	r0, [r7, #24]
			
				if (pin_id < 0) return TRACE_GERROR("Irq Line!!!");
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	2b00      	cmp	r3, #0
 800239e:	da07      	bge.n	80023b0 <dev_gpio_init+0x148>
 80023a0:	f240 122f 	movw	r2, #303	; 0x12f
 80023a4:	493d      	ldr	r1, [pc, #244]	; (800249c <dev_gpio_init+0x234>)
 80023a6:	4840      	ldr	r0, [pc, #256]	; (80024a8 <dev_gpio_init+0x240>)
 80023a8:	f7ff f8b6 	bl	8001518 <dev_trace_generate_error>
 80023ac:	4603      	mov	r3, r0
 80023ae:	e071      	b.n	8002494 <dev_gpio_init+0x22c>
			
				gpio_irq_cbf[pin_id] = init->irq_cbf;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	6a1a      	ldr	r2, [r3, #32]
 80023b4:	493d      	ldr	r1, [pc, #244]	; (80024ac <dev_gpio_init+0x244>)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			
				switch(pin_id)
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	2b0f      	cmp	r3, #15
 80023c0:	d83e      	bhi.n	8002440 <dev_gpio_init+0x1d8>
 80023c2:	a201      	add	r2, pc, #4	; (adr r2, 80023c8 <dev_gpio_init+0x160>)
 80023c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c8:	08002409 	.word	0x08002409
 80023cc:	08002411 	.word	0x08002411
 80023d0:	08002419 	.word	0x08002419
 80023d4:	08002421 	.word	0x08002421
 80023d8:	08002429 	.word	0x08002429
 80023dc:	08002431 	.word	0x08002431
 80023e0:	08002431 	.word	0x08002431
 80023e4:	08002431 	.word	0x08002431
 80023e8:	08002431 	.word	0x08002431
 80023ec:	08002431 	.word	0x08002431
 80023f0:	08002439 	.word	0x08002439
 80023f4:	08002439 	.word	0x08002439
 80023f8:	08002439 	.word	0x08002439
 80023fc:	08002439 	.word	0x08002439
 8002400:	08002439 	.word	0x08002439
 8002404:	08002439 	.word	0x08002439
				{
						case 0 : gpio->irq_line = EXTI0_IRQn; break;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2206      	movs	r2, #6
 800240c:	779a      	strb	r2, [r3, #30]
 800240e:	e017      	b.n	8002440 <dev_gpio_init+0x1d8>
						case 1 : gpio->irq_line = EXTI1_IRQn; break;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2207      	movs	r2, #7
 8002414:	779a      	strb	r2, [r3, #30]
 8002416:	e013      	b.n	8002440 <dev_gpio_init+0x1d8>
						case 2 : gpio->irq_line = EXTI2_IRQn; break;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2208      	movs	r2, #8
 800241c:	779a      	strb	r2, [r3, #30]
 800241e:	e00f      	b.n	8002440 <dev_gpio_init+0x1d8>
						case 3 : gpio->irq_line = EXTI3_IRQn; break;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2209      	movs	r2, #9
 8002424:	779a      	strb	r2, [r3, #30]
 8002426:	e00b      	b.n	8002440 <dev_gpio_init+0x1d8>
						case 4 : gpio->irq_line = EXTI4_IRQn; break;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	220a      	movs	r2, #10
 800242c:	779a      	strb	r2, [r3, #30]
 800242e:	e007      	b.n	8002440 <dev_gpio_init+0x1d8>

						case 5 : 
						case 6 : 
						case 7 : 
						case 8 : 
						case 9 : gpio->irq_line = EXTI9_5_IRQn; break;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2217      	movs	r2, #23
 8002434:	779a      	strb	r2, [r3, #30]
 8002436:	e003      	b.n	8002440 <dev_gpio_init+0x1d8>
						case 10 : 
						case 11 : 
						case 12 : 
						case 13 : 
						case 14 : 
						case 15 : gpio->irq_line = EXTI15_10_IRQn; break;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2228      	movs	r2, #40	; 0x28
 800243c:	779a      	strb	r2, [r3, #30]
 800243e:	bf00      	nop
				}
			
				HAL_NVIC_SetPriority((IRQn_Type)gpio->irq_line, (init->irq_prior >> 4) & 0x0F, init->irq_prior & 0x0F);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	7f9b      	ldrb	r3, [r3, #30]
 8002444:	b258      	sxtb	r0, r3
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	7f5b      	ldrb	r3, [r3, #29]
 800244a:	091b      	lsrs	r3, r3, #4
 800244c:	b2db      	uxtb	r3, r3
 800244e:	f003 010f 	and.w	r1, r3, #15
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	7f5b      	ldrb	r3, [r3, #29]
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	461a      	mov	r2, r3
 800245c:	f001 fe4d 	bl	80040fa <HAL_NVIC_SetPriority>
				HAL_NVIC_EnableIRQ((IRQn_Type)gpio->irq_line);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	7f9b      	ldrb	r3, [r3, #30]
 8002464:	b25b      	sxtb	r3, r3
 8002466:	4618      	mov	r0, r3
 8002468:	f001 fe63 	bl	8004132 <HAL_NVIC_EnableIRQ>

			
				HAL_DRIVER_DEBUG(gpio->info.status_in, debug_printf("Init Gpio IRQ %s -, %d, %X\n\r", gpio->info.name, gpio->info.id, gpio->irq_line));		
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00e      	beq.n	8002492 <dev_gpio_init+0x22a>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d009      	beq.n	8002492 <dev_gpio_init+0x22a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6959      	ldr	r1, [r3, #20]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	791b      	ldrb	r3, [r3, #4]
 8002486:	461a      	mov	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	7f9b      	ldrb	r3, [r3, #30]
 800248c:	4808      	ldr	r0, [pc, #32]	; (80024b0 <dev_gpio_init+0x248>)
 800248e:	f7ff f9f3 	bl	8001878 <debug_printf>
		}	

		return RET_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3720      	adds	r7, #32
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	08008b74 	.word	0x08008b74
 80024a0:	10110000 	.word	0x10110000
 80024a4:	08008bcc 	.word	0x08008bcc
 80024a8:	08008be4 	.word	0x08008be4
 80024ac:	2000050c 	.word	0x2000050c
 80024b0:	08008bf0 	.word	0x08008bf0

080024b4 <dev_gpio_init_simp>:

UINT8 dev_gpio_init_simp(dev_gpio_t* gpio, UINT8 gpio_id, UINT16 gpio_pin, UINT8 gpio_mode)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08c      	sub	sp, #48	; 0x30
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	4608      	mov	r0, r1
 80024be:	4611      	mov	r1, r2
 80024c0:	461a      	mov	r2, r3
 80024c2:	4603      	mov	r3, r0
 80024c4:	70fb      	strb	r3, [r7, #3]
 80024c6:	460b      	mov	r3, r1
 80024c8:	803b      	strh	r3, [r7, #0]
 80024ca:	4613      	mov	r3, r2
 80024cc:	70bb      	strb	r3, [r7, #2]
		dev_gpio_init_t init;
	
		init.info.id = gpio_id;
 80024ce:	78fb      	ldrb	r3, [r7, #3]
 80024d0:	733b      	strb	r3, [r7, #12]
		init.info.name = "";
 80024d2:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <dev_gpio_init_simp+0x5c>)
 80024d4:	61fb      	str	r3, [r7, #28]
		init.info.status_in = 0; 
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
		init.info.status_out = 0; 
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]

		init.pin = gpio_pin;
 80024de:	883b      	ldrh	r3, [r7, #0]
 80024e0:	84bb      	strh	r3, [r7, #36]	; 0x24
		init.mode = gpio_mode;
 80024e2:	78bb      	ldrb	r3, [r7, #2]
 80024e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		init.speed = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		init.irq_cbf = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		init.irq_mode = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	
		return dev_gpio_init(gpio, &init);
 80024f8:	f107 030c 	add.w	r3, r7, #12
 80024fc:	4619      	mov	r1, r3
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff feb2 	bl	8002268 <dev_gpio_init>
 8002504:	4603      	mov	r3, r0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3730      	adds	r7, #48	; 0x30
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	08008c10 	.word	0x08008c10

08002514 <dev_gpio_set>:
{
		return 0; //HAL_GPIO_ReadPins(gpio->port, gpio->pin); 
}

void dev_gpio_set(dev_gpio_t* gpio, UINT8 val)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	70fb      	strb	r3, [r7, #3]
		if (val) HAL_GPIO_WritePin(gpio->port, gpio->pin, (GPIO_PinState)1); 
 8002520:	78fb      	ldrb	r3, [r7, #3]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d008      	beq.n	8002538 <dev_gpio_set+0x24>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	8b9b      	ldrh	r3, [r3, #28]
 800252e:	2201      	movs	r2, #1
 8002530:	4619      	mov	r1, r3
 8002532:	f002 fb12 	bl	8004b5a <HAL_GPIO_WritePin>
				else HAL_GPIO_WritePin(gpio->port, gpio->pin, (GPIO_PinState)0);
}
 8002536:	e007      	b.n	8002548 <dev_gpio_set+0x34>
				else HAL_GPIO_WritePin(gpio->port, gpio->pin, (GPIO_PinState)0);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	8b9b      	ldrh	r3, [r3, #28]
 8002540:	2200      	movs	r2, #0
 8002542:	4619      	mov	r1, r3
 8002544:	f002 fb09 	bl	8004b5a <HAL_GPIO_WritePin>
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <Max30102Setup>:
float n_spo2_sum;
int32_t n_heart_rate_sum;


void Max30102Setup()
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
  uint8_t uch_dummy;

  maxim_max30102_reset();
 8002556:	f001 f9d5 	bl	8003904 <maxim_max30102_reset>
  maxim_max30102_read_reg(REG_INTR_STATUS_1, &uch_dummy);  // reads/clears the interrupt status register
 800255a:	1dfb      	adds	r3, r7, #7
 800255c:	4619      	mov	r1, r3
 800255e:	2000      	movs	r0, #0
 8002560:	f001 f914 	bl	800378c <maxim_max30102_read_reg>
  maxim_max30102_init();
 8002564:	f001 f92c 	bl	80037c0 <maxim_max30102_init>
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <Max30102Loop>:

// Takes samples from MAX30102.  Heart rate and SpO2 are calculated every ST seconds
void Max30102Loop(float *spo2_mean, uint32_t *heart_rate_mean, uint8_t *finger_on)
{
 8002570:	b590      	push	{r4, r7, lr}
 8002572:	b093      	sub	sp, #76	; 0x4c
 8002574:	af06      	add	r7, sp, #24
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]

//  static int16_t x = 1;
//  static int16_t lastY = 35;

  // buffer length of BUFFER_SIZE stores ST seconds of samples running at FS sps
  for (i = 0U; i < BUFFER_SIZE; i++)
 800257c:	2300      	movs	r3, #0
 800257e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002582:	e093      	b.n	80026ac <Max30102Loop+0x13c>
  {
//	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET);	// wait until the interrupt pin asserts

#ifdef FAKE_MAX30102_CLONE
    maxim_max30102_read_fifo((aun_ir_buffer + i), (aun_red_buffer + i));  // read from MAX30102 FIFO
 8002584:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4a9e      	ldr	r2, [pc, #632]	; (8002804 <Max30102Loop+0x294>)
 800258c:	441a      	add	r2, r3
 800258e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	499c      	ldr	r1, [pc, #624]	; (8002808 <Max30102Loop+0x298>)
 8002596:	440b      	add	r3, r1
 8002598:	4619      	mov	r1, r3
 800259a:	4610      	mov	r0, r2
 800259c:	f001 f940 	bl	8003820 <maxim_max30102_read_fifo>
#else
    maxim_max30102_read_fifo((aun_red_buffer + i), (aun_ir_buffer + i));  // read from MAX30102 FIFO
#endif
    // calculate LED brightness
    if (aun_red_buffer[i] > un_prev_data)
 80025a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025a4:	4a98      	ldr	r2, [pc, #608]	; (8002808 <Max30102Loop+0x298>)
 80025a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80025aa:	4b98      	ldr	r3, [pc, #608]	; (800280c <Max30102Loop+0x29c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d938      	bls.n	8002624 <Max30102Loop+0xb4>
    {
      f_temp = aun_red_buffer[i] - un_prev_data;
 80025b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025b6:	4a94      	ldr	r2, [pc, #592]	; (8002808 <Max30102Loop+0x298>)
 80025b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80025bc:	4b93      	ldr	r3, [pc, #588]	; (800280c <Max30102Loop+0x29c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fb7e 	bl	8000cc4 <__aeabi_ui2f>
 80025c8:	4603      	mov	r3, r0
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
      f_temp /= (un_max - un_min);
 80025cc:	4b90      	ldr	r3, [pc, #576]	; (8002810 <Max30102Loop+0x2a0>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	4b90      	ldr	r3, [pc, #576]	; (8002814 <Max30102Loop+0x2a4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe fb74 	bl	8000cc4 <__aeabi_ui2f>
 80025dc:	4603      	mov	r3, r0
 80025de:	4619      	mov	r1, r3
 80025e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025e2:	f7fe fc7b 	bl	8000edc <__aeabi_fdiv>
 80025e6:	4603      	mov	r3, r0
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
      f_temp *= MAX_HEART_BEAT_TRACE;
 80025ea:	498b      	ldr	r1, [pc, #556]	; (8002818 <Max30102Loop+0x2a8>)
 80025ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025ee:	f7fe fbc1 	bl	8000d74 <__aeabi_fmul>
 80025f2:	4603      	mov	r3, r0
 80025f4:	62bb      	str	r3, [r7, #40]	; 0x28
      f_heartbeatTrace -= f_temp;
 80025f6:	4b89      	ldr	r3, [pc, #548]	; (800281c <Max30102Loop+0x2ac>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fe faaf 	bl	8000b60 <__aeabi_fsub>
 8002602:	4603      	mov	r3, r0
 8002604:	461a      	mov	r2, r3
 8002606:	4b85      	ldr	r3, [pc, #532]	; (800281c <Max30102Loop+0x2ac>)
 8002608:	601a      	str	r2, [r3, #0]
      if (f_heartbeatTrace < -25.0f)
 800260a:	4b84      	ldr	r3, [pc, #528]	; (800281c <Max30102Loop+0x2ac>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4984      	ldr	r1, [pc, #528]	; (8002820 <Max30102Loop+0x2b0>)
 8002610:	4618      	mov	r0, r3
 8002612:	f7fe fd4d 	bl	80010b0 <__aeabi_fcmplt>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d03b      	beq.n	8002694 <Max30102Loop+0x124>
      {
        f_heartbeatTrace = -25.0f;
 800261c:	4b7f      	ldr	r3, [pc, #508]	; (800281c <Max30102Loop+0x2ac>)
 800261e:	4a80      	ldr	r2, [pc, #512]	; (8002820 <Max30102Loop+0x2b0>)
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	e037      	b.n	8002694 <Max30102Loop+0x124>
      }
    }
    else
    {
	  f_temp = un_prev_data - aun_red_buffer[i];
 8002624:	4b79      	ldr	r3, [pc, #484]	; (800280c <Max30102Loop+0x29c>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800262c:	4976      	ldr	r1, [pc, #472]	; (8002808 <Max30102Loop+0x298>)
 800262e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	4618      	mov	r0, r3
 8002636:	f7fe fb45 	bl	8000cc4 <__aeabi_ui2f>
 800263a:	4603      	mov	r3, r0
 800263c:	62bb      	str	r3, [r7, #40]	; 0x28
	  f_temp /= (un_max - un_min);
 800263e:	4b74      	ldr	r3, [pc, #464]	; (8002810 <Max30102Loop+0x2a0>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	4b74      	ldr	r3, [pc, #464]	; (8002814 <Max30102Loop+0x2a4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	4618      	mov	r0, r3
 800264a:	f7fe fb3b 	bl	8000cc4 <__aeabi_ui2f>
 800264e:	4603      	mov	r3, r0
 8002650:	4619      	mov	r1, r3
 8002652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002654:	f7fe fc42 	bl	8000edc <__aeabi_fdiv>
 8002658:	4603      	mov	r3, r0
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28
	  f_temp *= MAX_HEART_BEAT_TRACE;
 800265c:	496e      	ldr	r1, [pc, #440]	; (8002818 <Max30102Loop+0x2a8>)
 800265e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002660:	f7fe fb88 	bl	8000d74 <__aeabi_fmul>
 8002664:	4603      	mov	r3, r0
 8002666:	62bb      	str	r3, [r7, #40]	; 0x28
	  f_heartbeatTrace += f_temp;
 8002668:	4b6c      	ldr	r3, [pc, #432]	; (800281c <Max30102Loop+0x2ac>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe fa78 	bl	8000b64 <__addsf3>
 8002674:	4603      	mov	r3, r0
 8002676:	461a      	mov	r2, r3
 8002678:	4b68      	ldr	r3, [pc, #416]	; (800281c <Max30102Loop+0x2ac>)
 800267a:	601a      	str	r2, [r3, #0]
	  if (f_heartbeatTrace > MAX_HEART_BEAT_TRACE + 25.0f)
 800267c:	4b67      	ldr	r3, [pc, #412]	; (800281c <Max30102Loop+0x2ac>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4968      	ldr	r1, [pc, #416]	; (8002824 <Max30102Loop+0x2b4>)
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe fd32 	bl	80010ec <__aeabi_fcmpgt>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <Max30102Loop+0x124>
	  {
		f_heartbeatTrace = MAX_HEART_BEAT_TRACE + 25.0f;
 800268e:	4b63      	ldr	r3, [pc, #396]	; (800281c <Max30102Loop+0x2ac>)
 8002690:	4a64      	ldr	r2, [pc, #400]	; (8002824 <Max30102Loop+0x2b4>)
 8002692:	601a      	str	r2, [r3, #0]
//    if (x == 238)
//    {
//    	GraphicsFilledRectangle(1, 1, 238, 208, BLACK);
//    	x = 1;
//    }
    un_prev_data = aun_red_buffer[i];
 8002694:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002698:	4a5b      	ldr	r2, [pc, #364]	; (8002808 <Max30102Loop+0x298>)
 800269a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269e:	4a5b      	ldr	r2, [pc, #364]	; (800280c <Max30102Loop+0x29c>)
 80026a0:	6013      	str	r3, [r2, #0]
  for (i = 0U; i < BUFFER_SIZE; i++)
 80026a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026a6:	3301      	adds	r3, #1
 80026a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80026ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026b0:	2b1f      	cmp	r3, #31
 80026b2:	f67f af67 	bls.w	8002584 <Max30102Loop+0x14>
  }

  un_min = 0x3FFFFUL;
 80026b6:	4b57      	ldr	r3, [pc, #348]	; (8002814 <Max30102Loop+0x2a4>)
 80026b8:	4a5b      	ldr	r2, [pc, #364]	; (8002828 <Max30102Loop+0x2b8>)
 80026ba:	601a      	str	r2, [r3, #0]
  un_max = 0UL;
 80026bc:	4b54      	ldr	r3, [pc, #336]	; (8002810 <Max30102Loop+0x2a0>)
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < BUFFER_SIZE; i++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80026c8:	e024      	b.n	8002714 <Max30102Loop+0x1a4>
  {
    if (un_min > aun_red_buffer[i])
 80026ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026ce:	4a4e      	ldr	r2, [pc, #312]	; (8002808 <Max30102Loop+0x298>)
 80026d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80026d4:	4b4f      	ldr	r3, [pc, #316]	; (8002814 <Max30102Loop+0x2a4>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d206      	bcs.n	80026ea <Max30102Loop+0x17a>
    {
      un_min = aun_red_buffer[i];    //update signal min for next cycle using values from this cycle
 80026dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026e0:	4a49      	ldr	r2, [pc, #292]	; (8002808 <Max30102Loop+0x298>)
 80026e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e6:	4a4b      	ldr	r2, [pc, #300]	; (8002814 <Max30102Loop+0x2a4>)
 80026e8:	6013      	str	r3, [r2, #0]
    }
    if (un_max < aun_red_buffer[i])
 80026ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026ee:	4a46      	ldr	r2, [pc, #280]	; (8002808 <Max30102Loop+0x298>)
 80026f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80026f4:	4b46      	ldr	r3, [pc, #280]	; (8002810 <Max30102Loop+0x2a0>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d906      	bls.n	800270a <Max30102Loop+0x19a>
    {
      un_max = aun_red_buffer[i];    //update signal max for next cycle using values from this cycle
 80026fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002700:	4a41      	ldr	r2, [pc, #260]	; (8002808 <Max30102Loop+0x298>)
 8002702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002706:	4a42      	ldr	r2, [pc, #264]	; (8002810 <Max30102Loop+0x2a0>)
 8002708:	6013      	str	r3, [r2, #0]
  for (i = 0U; i < BUFFER_SIZE; i++)
 800270a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800270e:	3301      	adds	r3, #1
 8002710:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002714:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002718:	2b1f      	cmp	r3, #31
 800271a:	d9d6      	bls.n	80026ca <Max30102Loop+0x15a>
    }
  }

  // calculate heart rate and SpO2 after BUFFER_SIZE samples (ST seconds of samples) using Robert's method
  rf_heart_rate_and_oxygen_saturation(aun_ir_buffer, BUFFER_SIZE, aun_red_buffer, &n_spo2, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid, &ratio, &correl);
 800271c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002720:	f107 031c 	add.w	r3, r7, #28
 8002724:	9304      	str	r3, [sp, #16]
 8002726:	f107 0320 	add.w	r3, r7, #32
 800272a:	9303      	str	r3, [sp, #12]
 800272c:	f107 0313 	add.w	r3, r7, #19
 8002730:	9302      	str	r3, [sp, #8]
 8002732:	f107 0314 	add.w	r3, r7, #20
 8002736:	9301      	str	r3, [sp, #4]
 8002738:	f107 031b 	add.w	r3, r7, #27
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	4613      	mov	r3, r2
 8002740:	4a31      	ldr	r2, [pc, #196]	; (8002808 <Max30102Loop+0x298>)
 8002742:	2120      	movs	r1, #32
 8002744:	482f      	ldr	r0, [pc, #188]	; (8002804 <Max30102Loop+0x294>)
 8002746:	f000 f87b 	bl	8002840 <rf_heart_rate_and_oxygen_saturation>


  if (ch_hr_valid && ch_spo2_valid)
 800274a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d050      	beq.n	80027f4 <Max30102Loop+0x284>
 8002752:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d04c      	beq.n	80027f4 <Max30102Loop+0x284>
  {
	  *finger_on = 1;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	701a      	strb	r2, [r3, #0]
	  *spo2_mean = n_spo2_sum/num;
 8002760:	4b32      	ldr	r3, [pc, #200]	; (800282c <Max30102Loop+0x2bc>)
 8002762:	681c      	ldr	r4, [r3, #0]
 8002764:	4b32      	ldr	r3, [pc, #200]	; (8002830 <Max30102Loop+0x2c0>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f7fe faaf 	bl	8000ccc <__aeabi_i2f>
 800276e:	4603      	mov	r3, r0
 8002770:	4619      	mov	r1, r3
 8002772:	4620      	mov	r0, r4
 8002774:	f7fe fbb2 	bl	8000edc <__aeabi_fdiv>
 8002778:	4603      	mov	r3, r0
 800277a:	461a      	mov	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	601a      	str	r2, [r3, #0]
	  *heart_rate_mean = n_heart_rate_sum/num;
 8002780:	4b2c      	ldr	r3, [pc, #176]	; (8002834 <Max30102Loop+0x2c4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a2a      	ldr	r2, [pc, #168]	; (8002830 <Max30102Loop+0x2c0>)
 8002786:	7812      	ldrb	r2, [r2, #0]
 8002788:	fb93 f3f2 	sdiv	r3, r3, r2
 800278c:	461a      	mov	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	601a      	str	r2, [r3, #0]
	  if (HAL_GetTick()-last_time > 10000){
 8002792:	f001 fbad 	bl	8003ef0 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	4b27      	ldr	r3, [pc, #156]	; (8002838 <Max30102Loop+0x2c8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f242 7210 	movw	r2, #10000	; 0x2710
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d90e      	bls.n	80027c4 <Max30102Loop+0x254>
//		  *spo2_mean = n_spo2_sum/num;
//		  *heart_rate_mean = n_heart_rate_sum/num;
//		  debug_printf(">>>>>>>>>>>>SPO2: %f , Heart Rate: %d\r\n", *spo2_mean, *heart_rate_mean);
		  num = 0;
 80027a6:	4b22      	ldr	r3, [pc, #136]	; (8002830 <Max30102Loop+0x2c0>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
		  n_spo2_sum = 0;
 80027ac:	4b1f      	ldr	r3, [pc, #124]	; (800282c <Max30102Loop+0x2bc>)
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
		  n_heart_rate_sum = 0;
 80027b4:	4b1f      	ldr	r3, [pc, #124]	; (8002834 <Max30102Loop+0x2c4>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
		  last_time = HAL_GetTick();
 80027ba:	f001 fb99 	bl	8003ef0 <HAL_GetTick>
 80027be:	4603      	mov	r3, r0
 80027c0:	4a1d      	ldr	r2, [pc, #116]	; (8002838 <Max30102Loop+0x2c8>)
 80027c2:	6013      	str	r3, [r2, #0]
	  }

	  n_spo2_sum += n_spo2;
 80027c4:	4b19      	ldr	r3, [pc, #100]	; (800282c <Max30102Loop+0x2bc>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fe f9c9 	bl	8000b64 <__addsf3>
 80027d2:	4603      	mov	r3, r0
 80027d4:	461a      	mov	r2, r3
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <Max30102Loop+0x2bc>)
 80027d8:	601a      	str	r2, [r3, #0]
	  n_heart_rate_sum += n_heart_rate;
 80027da:	4b16      	ldr	r3, [pc, #88]	; (8002834 <Max30102Loop+0x2c4>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	4413      	add	r3, r2
 80027e2:	4a14      	ldr	r2, [pc, #80]	; (8002834 <Max30102Loop+0x2c4>)
 80027e4:	6013      	str	r3, [r2, #0]
	  num += 1;
 80027e6:	4b12      	ldr	r3, [pc, #72]	; (8002830 <Max30102Loop+0x2c0>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	3301      	adds	r3, #1
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	4b10      	ldr	r3, [pc, #64]	; (8002830 <Max30102Loop+0x2c0>)
 80027f0:	701a      	strb	r2, [r3, #0]
 80027f2:	e003      	b.n	80027fc <Max30102Loop+0x28c>
//	  debug_printf("SPO2: %f , Heart Rate: %d\r\n", n_spo2, n_heart_rate);
  }
  else
  {
	  *finger_on = 0;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
//	  debug_printf("..........................\r\n");
  }
}
 80027fa:	bf00      	nop
 80027fc:	bf00      	nop
 80027fe:	3734      	adds	r7, #52	; 0x34
 8002800:	46bd      	mov	sp, r7
 8002802:	bd90      	pop	{r4, r7, pc}
 8002804:	2000054c 	.word	0x2000054c
 8002808:	200005cc 	.word	0x200005cc
 800280c:	2000065c 	.word	0x2000065c
 8002810:	20000660 	.word	0x20000660
 8002814:	20000004 	.word	0x20000004
 8002818:	430c0000 	.word	0x430c0000
 800281c:	20000664 	.word	0x20000664
 8002820:	c1c80000 	.word	0xc1c80000
 8002824:	43250000 	.word	0x43250000
 8002828:	0003ffff 	.word	0x0003ffff
 800282c:	20000654 	.word	0x20000654
 8002830:	20000650 	.word	0x20000650
 8002834:	20000658 	.word	0x20000658
 8002838:	2000064c 	.word	0x2000064c
 800283c:	00000000 	.word	0x00000000

08002840 <rf_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 8002840:	b5b0      	push	{r4, r5, r7, lr}
 8002842:	b0d6      	sub	sp, #344	; 0x158
 8002844:	af04      	add	r7, sp, #16
 8002846:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 800284a:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
 800284e:	6020      	str	r0, [r4, #0]
 8002850:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8002854:	f5a0 70a0 	sub.w	r0, r0, #320	; 0x140
 8002858:	6001      	str	r1, [r0, #0]
 800285a:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 800285e:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 8002862:	600a      	str	r2, [r1, #0]
 8002864:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002868:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 800286c:	6013      	str	r3, [r2, #0]
  float beta_ir, beta_red, x;
  float an_x[BUFFER_SIZE], *ptr_x; //ir
  float an_y[BUFFER_SIZE], *ptr_y; //red

  // calculates DC mean and subtracts DC from ir and red
  f_ir_mean=0.0;
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  f_red_mean=0.0;
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  for (k=0; k<n_ir_buffer_length; ++k) {
 800287e:	2300      	movs	r3, #0
 8002880:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002884:	e030      	b.n	80028e8 <rf_heart_rate_and_oxygen_saturation+0xa8>
    f_ir_mean += pun_ir_buffer[k];
 8002886:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002890:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8002894:	6812      	ldr	r2, [r2, #0]
 8002896:	4413      	add	r3, r2
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe fa12 	bl	8000cc4 <__aeabi_ui2f>
 80028a0:	4603      	mov	r3, r0
 80028a2:	4619      	mov	r1, r3
 80028a4:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 80028a8:	f7fe f95c 	bl	8000b64 <__addsf3>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    f_red_mean += pun_red_buffer[k];
 80028b2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80028bc:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	4413      	add	r3, r2
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe f9fc 	bl	8000cc4 <__aeabi_ui2f>
 80028cc:	4603      	mov	r3, r0
 80028ce:	4619      	mov	r1, r3
 80028d0:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80028d4:	f7fe f946 	bl	8000b64 <__addsf3>
 80028d8:	4603      	mov	r3, r0
 80028da:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  for (k=0; k<n_ir_buffer_length; ++k) {
 80028de:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80028e2:	3301      	adds	r3, #1
 80028e4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80028e8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80028ec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80028f0:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	dbc5      	blt.n	8002886 <rf_heart_rate_and_oxygen_saturation+0x46>
  }
  f_ir_mean=f_ir_mean/n_ir_buffer_length ;
 80028fa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80028fe:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	f7fe f9e2 	bl	8000ccc <__aeabi_i2f>
 8002908:	4603      	mov	r3, r0
 800290a:	4619      	mov	r1, r3
 800290c:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8002910:	f7fe fae4 	bl	8000edc <__aeabi_fdiv>
 8002914:	4603      	mov	r3, r0
 8002916:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  f_red_mean=f_red_mean/n_ir_buffer_length ;
 800291a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800291e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	f7fe f9d2 	bl	8000ccc <__aeabi_i2f>
 8002928:	4603      	mov	r3, r0
 800292a:	4619      	mov	r1, r3
 800292c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8002930:	f7fe fad4 	bl	8000edc <__aeabi_fdiv>
 8002934:	4603      	mov	r3, r0
 8002936:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

  // remove DC
  for (k=0,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++ptr_x,++ptr_y) {
 800293a:	2300      	movs	r3, #0
 800293c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002940:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002944:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002948:	f107 0314 	add.w	r3, r7, #20
 800294c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002950:	e03e      	b.n	80029d0 <rf_heart_rate_and_oxygen_saturation+0x190>
    *ptr_x = pun_ir_buffer[k] - f_ir_mean;
 8002952:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800295c:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	4413      	add	r3, r2
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f7fe f9ac 	bl	8000cc4 <__aeabi_ui2f>
 800296c:	4603      	mov	r3, r0
 800296e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002972:	4618      	mov	r0, r3
 8002974:	f7fe f8f4 	bl	8000b60 <__aeabi_fsub>
 8002978:	4603      	mov	r3, r0
 800297a:	461a      	mov	r2, r3
 800297c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002980:	601a      	str	r2, [r3, #0]
    *ptr_y = pun_red_buffer[k] - f_red_mean;
 8002982:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800298c:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8002990:	6812      	ldr	r2, [r2, #0]
 8002992:	4413      	add	r3, r2
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe f994 	bl	8000cc4 <__aeabi_ui2f>
 800299c:	4603      	mov	r3, r0
 800299e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe f8dc 	bl	8000b60 <__aeabi_fsub>
 80029a8:	4603      	mov	r3, r0
 80029aa:	461a      	mov	r2, r3
 80029ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80029b0:	601a      	str	r2, [r3, #0]
  for (k=0,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++ptr_x,++ptr_y) {
 80029b2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80029b6:	3301      	adds	r3, #1
 80029b8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80029bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80029c0:	3304      	adds	r3, #4
 80029c2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80029c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80029ca:	3304      	adds	r3, #4
 80029cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80029d0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80029d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80029d8:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	dbb7      	blt.n	8002952 <rf_heart_rate_and_oxygen_saturation+0x112>
  }

  // RF, remove linear trend (baseline leveling)
  beta_ir = rf_linear_regression_beta(an_x, mean_X, sum_X2);
 80029e2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80029e6:	4ac8      	ldr	r2, [pc, #800]	; (8002d08 <rf_heart_rate_and_oxygen_saturation+0x4c8>)
 80029e8:	49c8      	ldr	r1, [pc, #800]	; (8002d0c <rf_heart_rate_and_oxygen_saturation+0x4cc>)
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 f9ac 	bl	8002d48 <rf_linear_regression_beta>
 80029f0:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
  beta_red = rf_linear_regression_beta(an_y, mean_X, sum_X2);
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	4ac3      	ldr	r2, [pc, #780]	; (8002d08 <rf_heart_rate_and_oxygen_saturation+0x4c8>)
 80029fa:	49c4      	ldr	r1, [pc, #784]	; (8002d0c <rf_heart_rate_and_oxygen_saturation+0x4cc>)
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 f9a3 	bl	8002d48 <rf_linear_regression_beta>
 8002a02:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  for(k=0,x=-mean_X,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++x,++ptr_x,++ptr_y) {
 8002a06:	2300      	movs	r3, #0
 8002a08:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002a0c:	4bc0      	ldr	r3, [pc, #768]	; (8002d10 <rf_heart_rate_and_oxygen_saturation+0x4d0>)
 8002a0e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002a12:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a16:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002a1a:	f107 0314 	add.w	r3, r7, #20
 8002a1e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002a22:	e03d      	b.n	8002aa0 <rf_heart_rate_and_oxygen_saturation+0x260>
    *ptr_x -= beta_ir*x;
 8002a24:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002a28:	681c      	ldr	r4, [r3, #0]
 8002a2a:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8002a2e:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8002a32:	f7fe f99f 	bl	8000d74 <__aeabi_fmul>
 8002a36:	4603      	mov	r3, r0
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	f7fe f890 	bl	8000b60 <__aeabi_fsub>
 8002a40:	4603      	mov	r3, r0
 8002a42:	461a      	mov	r2, r3
 8002a44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002a48:	601a      	str	r2, [r3, #0]
    *ptr_y -= beta_red*x;
 8002a4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002a4e:	681c      	ldr	r4, [r3, #0]
 8002a50:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8002a54:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8002a58:	f7fe f98c 	bl	8000d74 <__aeabi_fmul>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4620      	mov	r0, r4
 8002a62:	f7fe f87d 	bl	8000b60 <__aeabi_fsub>
 8002a66:	4603      	mov	r3, r0
 8002a68:	461a      	mov	r2, r3
 8002a6a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002a6e:	601a      	str	r2, [r3, #0]
  for(k=0,x=-mean_X,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++x,++ptr_x,++ptr_y) {
 8002a70:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002a74:	3301      	adds	r3, #1
 8002a76:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002a7a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002a7e:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8002a82:	f7fe f86f 	bl	8000b64 <__addsf3>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002a8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002a90:	3304      	adds	r3, #4
 8002a92:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002a96:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002aa0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002aa4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002aa8:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	dbb8      	blt.n	8002a24 <rf_heart_rate_and_oxygen_saturation+0x1e4>
  }

    // For SpO2 calculate RMS of both AC signals. In addition, pulse detector needs raw sum of squares for IR
  f_y_ac=rf_rms(an_y,n_ir_buffer_length,&f_red_sumsq);
 8002ab2:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8002ab6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002aba:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002abe:	f107 0014 	add.w	r0, r7, #20
 8002ac2:	6819      	ldr	r1, [r3, #0]
 8002ac4:	f000 fab8 	bl	8003038 <rf_rms>
 8002ac8:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  f_x_ac=rf_rms(an_x,n_ir_buffer_length,&f_ir_sumsq);
 8002acc:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002ad0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002ad4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ad8:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8002adc:	6819      	ldr	r1, [r3, #0]
 8002ade:	f000 faab 	bl	8003038 <rf_rms>
 8002ae2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

  // Calculate Pearson correlation between red and IR
  *correl=rf_Pcorrelation(an_x, an_y, n_ir_buffer_length)/sqrt(f_red_sumsq*f_ir_sumsq);
 8002ae6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002aea:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002aee:	f107 0114 	add.w	r1, r7, #20
 8002af2:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	f000 faef 	bl	80030da <rf_Pcorrelation>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fd fc8a 	bl	8000418 <__aeabi_f2d>
 8002b04:	4604      	mov	r4, r0
 8002b06:	460d      	mov	r5, r1
 8002b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b0c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b10:	4611      	mov	r1, r2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fe f92e 	bl	8000d74 <__aeabi_fmul>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fd fc7c 	bl	8000418 <__aeabi_f2d>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4610      	mov	r0, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	f005 f912 	bl	8007d50 <sqrt>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4620      	mov	r0, r4
 8002b32:	4629      	mov	r1, r5
 8002b34:	f7fd fdf2 	bl	800071c <__aeabi_ddiv>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	4619      	mov	r1, r3
 8002b40:	f7fd ffba 	bl	8000ab8 <__aeabi_d2f>
 8002b44:	4602      	mov	r2, r0
 8002b46:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002b4a:	601a      	str	r2, [r3, #0]

  // Find signal periodicity
  if(*correl>=min_pearson_correlation) {
 8002b4c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4970      	ldr	r1, [pc, #448]	; (8002d14 <rf_heart_rate_and_oxygen_saturation+0x4d4>)
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe fabf 	bl	80010d8 <__aeabi_fcmpge>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d027      	beq.n	8002bb0 <rf_heart_rate_and_oxygen_saturation+0x370>
    // At the beginning of oximetry run the exact range of heart rate is unknown. This may lead to wrong rate if the next call does not find the _first_
    // peak of the autocorrelation function. E.g., second peak would yield only 50% of the true rate.
    if(LOWEST_PERIOD==n_last_peak_interval)
 8002b60:	4b6d      	ldr	r3, [pc, #436]	; (8002d18 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d10c      	bne.n	8002b82 <rf_heart_rate_and_oxygen_saturation+0x342>
      rf_initialize_periodicity_search(an_x, BUFFER_SIZE, &n_last_peak_interval, HIGHEST_PERIOD, min_autocorrelation_ratio, f_ir_sumsq);
 8002b68:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002b6c:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	2325      	movs	r3, #37	; 0x25
 8002b7a:	4a67      	ldr	r2, [pc, #412]	; (8002d18 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 8002b7c:	2120      	movs	r1, #32
 8002b7e:	f000 f962 	bl	8002e46 <rf_initialize_periodicity_search>
    // RF, If correlation os good, then find average periodicity of the IR signal. If aperiodic, return periodicity of 0
    if(n_last_peak_interval!=0)
 8002b82:	4b65      	ldr	r3, [pc, #404]	; (8002d18 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d015      	beq.n	8002bb6 <rf_heart_rate_and_oxygen_saturation+0x376>
      rf_signal_periodicity(an_x, BUFFER_SIZE, &n_last_peak_interval, LOWEST_PERIOD, HIGHEST_PERIOD, min_autocorrelation_ratio, f_ir_sumsq, ratio);
 8002b8a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002b8e:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8002b92:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8002b96:	9203      	str	r2, [sp, #12]
 8002b98:	9302      	str	r3, [sp, #8]
 8002b9a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002b9e:	9301      	str	r3, [sp, #4]
 8002ba0:	2325      	movs	r3, #37	; 0x25
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	2308      	movs	r3, #8
 8002ba6:	4a5c      	ldr	r2, [pc, #368]	; (8002d18 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 8002ba8:	2120      	movs	r1, #32
 8002baa:	f000 f9bf 	bl	8002f2c <rf_signal_periodicity>
 8002bae:	e002      	b.n	8002bb6 <rf_heart_rate_and_oxygen_saturation+0x376>
  } else n_last_peak_interval=0;
 8002bb0:	4b59      	ldr	r3, [pc, #356]	; (8002d18 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]

  // Calculate heart rate if periodicity detector was successful. Otherwise, reset peak interval to its initial value and report error.
  if(n_last_peak_interval!=0) {
 8002bb6:	4b58      	ldr	r3, [pc, #352]	; (8002d18 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d02f      	beq.n	8002c1e <rf_heart_rate_and_oxygen_saturation+0x3de>
    *pn_heart_rate = (int32_t)(FS60/n_last_peak_interval);
 8002bbe:	4b56      	ldr	r3, [pc, #344]	; (8002d18 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002bc6:	fb92 f2f3 	sdiv	r2, r2, r3
 8002bca:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002bce:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 1;
 8002bd0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	701a      	strb	r2, [r3, #0]
    *pch_spo2_valid  = 0;
    return;
  }

  // After trend removal, the mean represents DC level
  xy_ratio= (f_y_ac*f_ir_mean)/(f_x_ac*f_red_mean);  //formula is (f_y_ac*f_x_dc) / (f_x_ac*f_y_dc) ;
 8002bd8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002bdc:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8002be0:	f7fe f8c8 	bl	8000d74 <__aeabi_fmul>
 8002be4:	4603      	mov	r3, r0
 8002be6:	461c      	mov	r4, r3
 8002be8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002bec:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002bf0:	f7fe f8c0 	bl	8000d74 <__aeabi_fmul>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	f7fe f96f 	bl	8000edc <__aeabi_fdiv>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  if(xy_ratio>0.02 && xy_ratio<1.84) { // Check boundaries of applicability
 8002c04:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8002c08:	f7fd fc06 	bl	8000418 <__aeabi_f2d>
 8002c0c:	a334      	add	r3, pc, #208	; (adr r3, 8002ce0 <rf_heart_rate_and_oxygen_saturation+0x4a0>)
 8002c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c12:	f7fd fee9 	bl	80009e8 <__aeabi_dcmpgt>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d117      	bne.n	8002c4c <rf_heart_rate_and_oxygen_saturation+0x40c>
 8002c1c:	e082      	b.n	8002d24 <rf_heart_rate_and_oxygen_saturation+0x4e4>
    n_last_peak_interval=LOWEST_PERIOD;
 8002c1e:	4b3e      	ldr	r3, [pc, #248]	; (8002d18 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 8002c20:	2208      	movs	r2, #8
 8002c22:	601a      	str	r2, [r3, #0]
    *pn_heart_rate = -999; // unable to calculate because signal looks aperiodic
 8002c24:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002c28:	4a3c      	ldr	r2, [pc, #240]	; (8002d1c <rf_heart_rate_and_oxygen_saturation+0x4dc>)
 8002c2a:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 0;
 8002c2c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002c30:	2200      	movs	r2, #0
 8002c32:	701a      	strb	r2, [r3, #0]
    *pn_spo2 =  -999 ; // do not use SPO2 from this corrupt signal
 8002c34:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002c38:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a38      	ldr	r2, [pc, #224]	; (8002d20 <rf_heart_rate_and_oxygen_saturation+0x4e0>)
 8002c40:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 0;
 8002c42:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002c46:	2200      	movs	r2, #0
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	e076      	b.n	8002d3a <rf_heart_rate_and_oxygen_saturation+0x4fa>
  if(xy_ratio>0.02 && xy_ratio<1.84) { // Check boundaries of applicability
 8002c4c:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8002c50:	f7fd fbe2 	bl	8000418 <__aeabi_f2d>
 8002c54:	a324      	add	r3, pc, #144	; (adr r3, 8002ce8 <rf_heart_rate_and_oxygen_saturation+0x4a8>)
 8002c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5a:	f7fd fea7 	bl	80009ac <__aeabi_dcmplt>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d05f      	beq.n	8002d24 <rf_heart_rate_and_oxygen_saturation+0x4e4>
    *pn_spo2 = (-45.060*xy_ratio + 30.354)*xy_ratio + 94.845;
 8002c64:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8002c68:	f7fd fbd6 	bl	8000418 <__aeabi_f2d>
 8002c6c:	a320      	add	r3, pc, #128	; (adr r3, 8002cf0 <rf_heart_rate_and_oxygen_saturation+0x4b0>)
 8002c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c72:	f7fd fc29 	bl	80004c8 <__aeabi_dmul>
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	a31e      	add	r3, pc, #120	; (adr r3, 8002cf8 <rf_heart_rate_and_oxygen_saturation+0x4b8>)
 8002c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c84:	f7fd fa6a 	bl	800015c <__adddf3>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4614      	mov	r4, r2
 8002c8e:	461d      	mov	r5, r3
 8002c90:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8002c94:	f7fd fbc0 	bl	8000418 <__aeabi_f2d>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	4629      	mov	r1, r5
 8002ca0:	f7fd fc12 	bl	80004c8 <__aeabi_dmul>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	a314      	add	r3, pc, #80	; (adr r3, 8002d00 <rf_heart_rate_and_oxygen_saturation+0x4c0>)
 8002cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb2:	f7fd fa53 	bl	800015c <__adddf3>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f7fd fefb 	bl	8000ab8 <__aeabi_d2f>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002cc8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid = 1;
 8002cd0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	701a      	strb	r2, [r3, #0]
 8002cd8:	e02f      	b.n	8002d3a <rf_heart_rate_and_oxygen_saturation+0x4fa>
 8002cda:	bf00      	nop
 8002cdc:	f3af 8000 	nop.w
 8002ce0:	47ae147b 	.word	0x47ae147b
 8002ce4:	3f947ae1 	.word	0x3f947ae1
 8002ce8:	d70a3d71 	.word	0xd70a3d71
 8002cec:	3ffd70a3 	.word	0x3ffd70a3
 8002cf0:	147ae148 	.word	0x147ae148
 8002cf4:	c04687ae 	.word	0xc04687ae
 8002cf8:	be76c8b4 	.word	0xbe76c8b4
 8002cfc:	403e5a9f 	.word	0x403e5a9f
 8002d00:	7ae147ae 	.word	0x7ae147ae
 8002d04:	4057b614 	.word	0x4057b614
 8002d08:	47a2be80 	.word	0x47a2be80
 8002d0c:	41780000 	.word	0x41780000
 8002d10:	c1780000 	.word	0xc1780000
 8002d14:	3f4ccccd 	.word	0x3f4ccccd
 8002d18:	20000008 	.word	0x20000008
 8002d1c:	fffffc19 	.word	0xfffffc19
 8002d20:	c479c000 	.word	0xc479c000
  } else {
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
 8002d24:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002d28:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a05      	ldr	r2, [pc, #20]	; (8002d44 <rf_heart_rate_and_oxygen_saturation+0x504>)
 8002d30:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 0;
 8002d32:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
  }
}
 8002d3a:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bdb0      	pop	{r4, r5, r7, pc}
 8002d42:	bf00      	nop
 8002d44:	c479c000 	.word	0xc479c000

08002d48 <rf_linear_regression_beta>:
*               point index values (0 to BUFFER_SIZE-1). xmean must equal to (BUFFER_SIZE-1)/2! sum_x2 is
*               the sum of squares of the mean-centered index values.
*               Robert Fraczkiewicz, 12/22/2017
* \retval       Beta
*/
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  float x,beta,*pn_ptr;
  beta=0.0;
 8002d54:	f04f 0300 	mov.w	r3, #0
 8002d58:	61bb      	str	r3, [r7, #24]
  for(x=-xmean,pn_ptr=pn_x;x<=xmean;++x,++pn_ptr)
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	e016      	b.n	8002d96 <rf_linear_regression_beta+0x4e>
    beta+=x*(*pn_ptr);
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	69f9      	ldr	r1, [r7, #28]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fe f800 	bl	8000d74 <__aeabi_fmul>
 8002d74:	4603      	mov	r3, r0
 8002d76:	4619      	mov	r1, r3
 8002d78:	69b8      	ldr	r0, [r7, #24]
 8002d7a:	f7fd fef3 	bl	8000b64 <__addsf3>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	61bb      	str	r3, [r7, #24]
  for(x=-xmean,pn_ptr=pn_x;x<=xmean;++x,++pn_ptr)
 8002d82:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002d86:	69f8      	ldr	r0, [r7, #28]
 8002d88:	f7fd feec 	bl	8000b64 <__addsf3>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	61fb      	str	r3, [r7, #28]
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	3304      	adds	r3, #4
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	68b9      	ldr	r1, [r7, #8]
 8002d98:	69f8      	ldr	r0, [r7, #28]
 8002d9a:	f7fe f993 	bl	80010c4 <__aeabi_fcmple>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1e1      	bne.n	8002d68 <rf_linear_regression_beta+0x20>
  return beta/sum_x2;
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	69b8      	ldr	r0, [r7, #24]
 8002da8:	f7fe f898 	bl	8000edc <__aeabi_fdiv>
 8002dac:	4603      	mov	r3, r0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3720      	adds	r7, #32
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <rf_autocorrelation>:
* \par          Details
*               Compute autocorrelation sequence's n_lag's element for a given series pn_x
*               Robert Fraczkiewicz, 12/21/2017
* \retval       Autocorrelation sum
*/
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b088      	sub	sp, #32
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	607a      	str	r2, [r7, #4]
  int16_t i, n_temp=n_size-n_lag;
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	827b      	strh	r3, [r7, #18]
  float sum=0.0,*pn_ptr;
 8002dd0:	f04f 0300 	mov.w	r3, #0
 8002dd4:	61bb      	str	r3, [r7, #24]
  if(n_temp<=0) return sum;
 8002dd6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	dc01      	bgt.n	8002de2 <rf_autocorrelation+0x2c>
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	e02d      	b.n	8002e3e <rf_autocorrelation+0x88>
  for (i=0,pn_ptr=pn_x; i<n_temp; ++i,++pn_ptr) {
 8002de2:	2300      	movs	r3, #0
 8002de4:	83fb      	strh	r3, [r7, #30]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	e017      	b.n	8002e1c <rf_autocorrelation+0x66>
    sum += (*pn_ptr)*(*(pn_ptr+n_lag));
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	4413      	add	r3, r2
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	f7fd ffba 	bl	8000d74 <__aeabi_fmul>
 8002e00:	4603      	mov	r3, r0
 8002e02:	4619      	mov	r1, r3
 8002e04:	69b8      	ldr	r0, [r7, #24]
 8002e06:	f7fd fead 	bl	8000b64 <__addsf3>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	61bb      	str	r3, [r7, #24]
  for (i=0,pn_ptr=pn_x; i<n_temp; ++i,++pn_ptr) {
 8002e0e:	8bfb      	ldrh	r3, [r7, #30]
 8002e10:	3301      	adds	r3, #1
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	83fb      	strh	r3, [r7, #30]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	3304      	adds	r3, #4
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8002e20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	dbe1      	blt.n	8002dec <rf_autocorrelation+0x36>
  }
  return sum/n_temp;
 8002e28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fd ff4d 	bl	8000ccc <__aeabi_i2f>
 8002e32:	4603      	mov	r3, r0
 8002e34:	4619      	mov	r1, r3
 8002e36:	69b8      	ldr	r0, [r7, #24]
 8002e38:	f7fe f850 	bl	8000edc <__aeabi_fdiv>
 8002e3c:	4603      	mov	r3, r0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3720      	adds	r7, #32
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <rf_initialize_periodicity_search>:
*               of the autocorrelation at lag=0, then the input signal is insufficiently
*               periodic and probably indicates motion artifacts.
*               Robert Fraczkiewicz, 04/25/2020
* \retval       Average distance between peaks
*/
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b088      	sub	sp, #32
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	603b      	str	r3, [r7, #0]
  int32_t n_lag;
  float aut,aut_right;
  // At this point, *p_last_periodicity = LOWEST_PERIOD. Start walking to the right,
  // two steps at a time, until lag ratio fulfills quality criteria or HIGHEST_PERIOD
  // is reached.
  n_lag=*p_last_periodicity;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	61fb      	str	r3, [r7, #28]
  aut_right=aut=rf_autocorrelation(pn_x, n_size, n_lag);
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	68b9      	ldr	r1, [r7, #8]
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f7ff ffa9 	bl	8002db6 <rf_autocorrelation>
 8002e64:	6178      	str	r0, [r7, #20]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	61bb      	str	r3, [r7, #24]
  // Check sanity
  if(aut/aut_lag0 >= min_aut_ratio) {
 8002e6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e6c:	6978      	ldr	r0, [r7, #20]
 8002e6e:	f7fe f835 	bl	8000edc <__aeabi_fdiv>
 8002e72:	4603      	mov	r3, r0
 8002e74:	4619      	mov	r1, r3
 8002e76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e78:	f7fe f924 	bl	80010c4 <__aeabi_fcmple>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d02b      	beq.n	8002eda <rf_initialize_periodicity_search+0x94>
    // Either quality criterion, min_aut_ratio, is too low, or heart rate is too high.
    // Are we on autocorrelation's downward slope? If yes, continue to a local minimum.
    // If not, continue to the next block.
    do {
      aut=aut_right;
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	617b      	str	r3, [r7, #20]
      n_lag+=2;
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	3302      	adds	r3, #2
 8002e8a:	61fb      	str	r3, [r7, #28]
      aut_right=rf_autocorrelation(pn_x, n_size, n_lag);
 8002e8c:	69fa      	ldr	r2, [r7, #28]
 8002e8e:	68b9      	ldr	r1, [r7, #8]
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f7ff ff90 	bl	8002db6 <rf_autocorrelation>
 8002e96:	61b8      	str	r0, [r7, #24]
    } while(aut_right/aut_lag0 >= min_aut_ratio && aut_right<aut && n_lag<=n_max_distance);
 8002e98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e9a:	69b8      	ldr	r0, [r7, #24]
 8002e9c:	f7fe f81e 	bl	8000edc <__aeabi_fdiv>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ea6:	f7fe f90d 	bl	80010c4 <__aeabi_fcmple>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00a      	beq.n	8002ec6 <rf_initialize_periodicity_search+0x80>
 8002eb0:	6979      	ldr	r1, [r7, #20]
 8002eb2:	69b8      	ldr	r0, [r7, #24]
 8002eb4:	f7fe f8fc 	bl	80010b0 <__aeabi_fcmplt>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <rf_initialize_periodicity_search+0x80>
 8002ebe:	69fa      	ldr	r2, [r7, #28]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	dddd      	ble.n	8002e82 <rf_initialize_periodicity_search+0x3c>
    if(n_lag>n_max_distance) {
 8002ec6:	69fa      	ldr	r2, [r7, #28]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	dd03      	ble.n	8002ed6 <rf_initialize_periodicity_search+0x90>
      // This should never happen, but if does return failure
      *p_last_periodicity=0;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
      return;
 8002ed4:	e027      	b.n	8002f26 <rf_initialize_periodicity_search+0xe0>
    }
    aut=aut_right;
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	617b      	str	r3, [r7, #20]
  }
  // Walk to the right.
  do {
    aut=aut_right;
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	617b      	str	r3, [r7, #20]
    n_lag+=2;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3302      	adds	r3, #2
 8002ee2:	61fb      	str	r3, [r7, #28]
    aut_right=rf_autocorrelation(pn_x, n_size, n_lag);
 8002ee4:	69fa      	ldr	r2, [r7, #28]
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f7ff ff64 	bl	8002db6 <rf_autocorrelation>
 8002eee:	61b8      	str	r0, [r7, #24]
  } while(aut_right/aut_lag0 < min_aut_ratio && n_lag<=n_max_distance);
 8002ef0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ef2:	69b8      	ldr	r0, [r7, #24]
 8002ef4:	f7fd fff2 	bl	8000edc <__aeabi_fdiv>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	4619      	mov	r1, r3
 8002efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002efe:	f7fe f8f5 	bl	80010ec <__aeabi_fcmpgt>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <rf_initialize_periodicity_search+0xca>
 8002f08:	69fa      	ldr	r2, [r7, #28]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	dde4      	ble.n	8002eda <rf_initialize_periodicity_search+0x94>
  if(n_lag>n_max_distance) {
 8002f10:	69fa      	ldr	r2, [r7, #28]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	dd03      	ble.n	8002f20 <rf_initialize_periodicity_search+0xda>
    // This should never happen, but if does return failure
    *p_last_periodicity=0;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	e002      	b.n	8002f26 <rf_initialize_periodicity_search+0xe0>
  } else
    *p_last_periodicity=n_lag;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69fa      	ldr	r2, [r7, #28]
 8002f24:	601a      	str	r2, [r3, #0]
}
 8002f26:	3720      	adds	r7, #32
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <rf_signal_periodicity>:
*               than min_aut_ratio fraction of the autocorrelation at lag=0, then the input
*               signal is insufficiently periodic and probably indicates motion artifacts.
*               Robert Fraczkiewicz, 01/07/2018
* \retval       Average distance between peaks
*/
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08a      	sub	sp, #40	; 0x28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
 8002f38:	603b      	str	r3, [r7, #0]
  int32_t n_lag;
  float aut,aut_left,aut_right,aut_save;
  bool left_limit_reached=false;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	75fb      	strb	r3, [r7, #23]
  // Start from the last periodicity computing the corresponding autocorrelation
  n_lag=*p_last_periodicity;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
  aut_save=aut=rf_autocorrelation(pn_x, n_size, n_lag);
 8002f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f46:	68b9      	ldr	r1, [r7, #8]
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f7ff ff34 	bl	8002db6 <rf_autocorrelation>
 8002f4e:	6238      	str	r0, [r7, #32]
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	613b      	str	r3, [r7, #16]
  // Is autocorrelation one lag to the left greater?
  aut_left=aut;
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	61fb      	str	r3, [r7, #28]
  do {
    aut=aut_left;
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	623b      	str	r3, [r7, #32]
    n_lag--;
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
    aut_left=rf_autocorrelation(pn_x, n_size, n_lag);
 8002f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f7ff ff25 	bl	8002db6 <rf_autocorrelation>
 8002f6c:	61f8      	str	r0, [r7, #28]
  } while(aut_left>aut && n_lag>=n_min_distance);
 8002f6e:	6a39      	ldr	r1, [r7, #32]
 8002f70:	69f8      	ldr	r0, [r7, #28]
 8002f72:	f7fe f8bb 	bl	80010ec <__aeabi_fcmpgt>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <rf_signal_periodicity+0x58>
 8002f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	dae9      	bge.n	8002f58 <rf_signal_periodicity+0x2c>
  // Restore lag of the highest aut
  if(n_lag<n_min_distance) {
 8002f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	da07      	bge.n	8002f9c <rf_signal_periodicity+0x70>
    left_limit_reached=true;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	75fb      	strb	r3, [r7, #23]
    n_lag=*p_last_periodicity;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	627b      	str	r3, [r7, #36]	; 0x24
    aut=aut_save;
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	623b      	str	r3, [r7, #32]
 8002f9a:	e002      	b.n	8002fa2 <rf_signal_periodicity+0x76>
  } else n_lag++;
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
  if(n_lag==*p_last_periodicity) {
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d12b      	bne.n	8003004 <rf_signal_periodicity+0xd8>
    // Trip to the left made no progress. Walk to the right.
    aut_right=aut;
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	61bb      	str	r3, [r7, #24]
    do {
      aut=aut_right;
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	623b      	str	r3, [r7, #32]
      n_lag++;
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24
      aut_right=rf_autocorrelation(pn_x, n_size, n_lag);
 8002fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fbc:	68b9      	ldr	r1, [r7, #8]
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f7ff fef9 	bl	8002db6 <rf_autocorrelation>
 8002fc4:	61b8      	str	r0, [r7, #24]
    } while(aut_right>aut && n_lag<=n_max_distance);
 8002fc6:	6a39      	ldr	r1, [r7, #32]
 8002fc8:	69b8      	ldr	r0, [r7, #24]
 8002fca:	f7fe f88f 	bl	80010ec <__aeabi_fcmpgt>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <rf_signal_periodicity+0xb0>
 8002fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	dde9      	ble.n	8002fb0 <rf_signal_periodicity+0x84>
    // Restore lag of the highest aut
    if(n_lag>n_max_distance) n_lag=0; // Indicates failure
 8002fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	dd02      	ble.n	8002fea <rf_signal_periodicity+0xbe>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe8:	e002      	b.n	8002ff0 <rf_signal_periodicity+0xc4>
    else n_lag--;
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	3b01      	subs	r3, #1
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
    if(n_lag==*p_last_periodicity && left_limit_reached) n_lag=0; // Indicates failure
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d104      	bne.n	8003004 <rf_signal_periodicity+0xd8>
 8002ffa:	7dfb      	ldrb	r3, [r7, #23]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <rf_signal_periodicity+0xd8>
 8003000:	2300      	movs	r3, #0
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
  }
  *ratio=aut/aut_lag0;
 8003004:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003006:	6a38      	ldr	r0, [r7, #32]
 8003008:	f7fd ff68 	bl	8000edc <__aeabi_fdiv>
 800300c:	4603      	mov	r3, r0
 800300e:	461a      	mov	r2, r3
 8003010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003012:	601a      	str	r2, [r3, #0]
  if(*ratio < min_aut_ratio) n_lag=0; // Indicates failure
 8003014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4619      	mov	r1, r3
 800301a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800301c:	f7fe f866 	bl	80010ec <__aeabi_fcmpgt>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <rf_signal_periodicity+0xfe>
 8003026:	2300      	movs	r3, #0
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
  *p_last_periodicity=n_lag;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302e:	601a      	str	r2, [r3, #0]
}
 8003030:	bf00      	nop
 8003032:	3728      	adds	r7, #40	; 0x28
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <rf_rms>:
* \par          Details
*               Compute root-mean-square variation for a given series pn_x
*               Robert Fraczkiewicz, 12/25/2017
* \retval       RMS value and raw sum of squares
*/
{
 8003038:	b590      	push	{r4, r7, lr}
 800303a:	b089      	sub	sp, #36	; 0x24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  int16_t i;
  float r,*pn_ptr;
  (*sumsq)=0.0;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
  for (i=0,pn_ptr=pn_x; i<n_size; ++i,++pn_ptr) {
 800304c:	2300      	movs	r3, #0
 800304e:	83fb      	strh	r3, [r7, #30]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	61bb      	str	r3, [r7, #24]
 8003054:	e018      	b.n	8003088 <rf_rms+0x50>
    r=(*pn_ptr);
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	617b      	str	r3, [r7, #20]
    (*sumsq) += r*r;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681c      	ldr	r4, [r3, #0]
 8003060:	6979      	ldr	r1, [r7, #20]
 8003062:	6978      	ldr	r0, [r7, #20]
 8003064:	f7fd fe86 	bl	8000d74 <__aeabi_fmul>
 8003068:	4603      	mov	r3, r0
 800306a:	4619      	mov	r1, r3
 800306c:	4620      	mov	r0, r4
 800306e:	f7fd fd79 	bl	8000b64 <__addsf3>
 8003072:	4603      	mov	r3, r0
 8003074:	461a      	mov	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	601a      	str	r2, [r3, #0]
  for (i=0,pn_ptr=pn_x; i<n_size; ++i,++pn_ptr) {
 800307a:	8bfb      	ldrh	r3, [r7, #30]
 800307c:	3301      	adds	r3, #1
 800307e:	b29b      	uxth	r3, r3
 8003080:	83fb      	strh	r3, [r7, #30]
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	3304      	adds	r3, #4
 8003086:	61bb      	str	r3, [r7, #24]
 8003088:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	429a      	cmp	r2, r3
 8003090:	dce1      	bgt.n	8003056 <rf_rms+0x1e>
  }
  (*sumsq)/=n_size; // This corresponds to autocorrelation at lag=0
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681c      	ldr	r4, [r3, #0]
 8003096:	68b8      	ldr	r0, [r7, #8]
 8003098:	f7fd fe18 	bl	8000ccc <__aeabi_i2f>
 800309c:	4603      	mov	r3, r0
 800309e:	4619      	mov	r1, r3
 80030a0:	4620      	mov	r0, r4
 80030a2:	f7fd ff1b 	bl	8000edc <__aeabi_fdiv>
 80030a6:	4603      	mov	r3, r0
 80030a8:	461a      	mov	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	601a      	str	r2, [r3, #0]
  return sqrt(*sumsq);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fd f9b0 	bl	8000418 <__aeabi_f2d>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	4610      	mov	r0, r2
 80030be:	4619      	mov	r1, r3
 80030c0:	f004 fe46 	bl	8007d50 <sqrt>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4610      	mov	r0, r2
 80030ca:	4619      	mov	r1, r3
 80030cc:	f7fd fcf4 	bl	8000ab8 <__aeabi_d2f>
 80030d0:	4603      	mov	r3, r0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3724      	adds	r7, #36	; 0x24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd90      	pop	{r4, r7, pc}

080030da <rf_Pcorrelation>:
* \par          Details
*               Compute scalar product between *pn_x and *pn_y vectors
*               Robert Fraczkiewicz, 12/25/2017
* \retval       Correlation product
*/
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b088      	sub	sp, #32
 80030de:	af00      	add	r7, sp, #0
 80030e0:	60f8      	str	r0, [r7, #12]
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	607a      	str	r2, [r7, #4]
  int16_t i;
  float r,*x_ptr,*y_ptr;
  r=0.0;
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	61bb      	str	r3, [r7, #24]
  for (i=0,x_ptr=pn_x,y_ptr=pn_y; i<n_size; ++i,++x_ptr,++y_ptr) {
 80030ec:	2300      	movs	r3, #0
 80030ee:	83fb      	strh	r3, [r7, #30]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	613b      	str	r3, [r7, #16]
 80030f8:	e018      	b.n	800312c <rf_Pcorrelation+0x52>
    r+=(*x_ptr)*(*y_ptr);
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4619      	mov	r1, r3
 8003104:	4610      	mov	r0, r2
 8003106:	f7fd fe35 	bl	8000d74 <__aeabi_fmul>
 800310a:	4603      	mov	r3, r0
 800310c:	4619      	mov	r1, r3
 800310e:	69b8      	ldr	r0, [r7, #24]
 8003110:	f7fd fd28 	bl	8000b64 <__addsf3>
 8003114:	4603      	mov	r3, r0
 8003116:	61bb      	str	r3, [r7, #24]
  for (i=0,x_ptr=pn_x,y_ptr=pn_y; i<n_size; ++i,++x_ptr,++y_ptr) {
 8003118:	8bfb      	ldrh	r3, [r7, #30]
 800311a:	3301      	adds	r3, #1
 800311c:	b29b      	uxth	r3, r3
 800311e:	83fb      	strh	r3, [r7, #30]
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	3304      	adds	r3, #4
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	3304      	adds	r3, #4
 800312a:	613b      	str	r3, [r7, #16]
 800312c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	429a      	cmp	r2, r3
 8003134:	dce1      	bgt.n	80030fa <rf_Pcorrelation+0x20>
  }
  r/=n_size;
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7fd fdc8 	bl	8000ccc <__aeabi_i2f>
 800313c:	4603      	mov	r3, r0
 800313e:	4619      	mov	r1, r3
 8003140:	69b8      	ldr	r0, [r7, #24]
 8003142:	f7fd fecb 	bl	8000edc <__aeabi_fdiv>
 8003146:	4603      	mov	r3, r0
 8003148:	61bb      	str	r3, [r7, #24]
  return r;
 800314a:	69bb      	ldr	r3, [r7, #24]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3720      	adds	r7, #32
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08e      	sub	sp, #56	; 0x38
 8003158:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800315a:	f000 fe71 	bl	8003e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800315e:	f000 f8e1 	bl	8003324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003162:	f000 fa0b 	bl	800357c <MX_GPIO_Init>
  MX_DMA_Init();
 8003166:	f000 f9d3 	bl	8003510 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800316a:	f000 f97d 	bl	8003468 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800316e:	f000 f91f 	bl	80033b0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8003172:	f000 f94b 	bl	800340c <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8003176:	f000 f9a1 	bl	80034bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  dev_trace_init_t trace_init;
  trace_init.mosi.port = GPIO_PA;
 800317a:	2300      	movs	r3, #0
 800317c:	77bb      	strb	r3, [r7, #30]
  trace_init.sck. port = GPIO_PA;
 800317e:	2300      	movs	r3, #0
 8003180:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  trace_init.nss.port = GPIO_PA;
 8003184:	2300      	movs	r3, #0
 8003186:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  trace_init.mosi.pin =BB(0, b00010000);
 800318a:	2310      	movs	r3, #16
 800318c:	83bb      	strh	r3, [r7, #28]
  trace_init.sck.pin = BB(0, b00100000);
 800318e:	2320      	movs	r3, #32
 8003190:	843b      	strh	r3, [r7, #32]
  trace_init.nss.pin = BB(0, b01000000);
 8003192:	2340      	movs	r3, #64	; 0x40
 8003194:	84bb      	strh	r3, [r7, #36]	; 0x24
  dev_trace_init(&trace_init);
 8003196:	f107 031c 	add.w	r3, r7, #28
 800319a:	4618      	mov	r0, r3
 800319c:	f7fe f918 	bl	80013d0 <dev_trace_init>

  debug_printf("\r\n\n\n\n******HUMAN HEALTH MONITORING SENSOR******\r\n");
 80031a0:	4852      	ldr	r0, [pc, #328]	; (80032ec <main+0x198>)
 80031a2:	f7fe fb69 	bl	8001878 <debug_printf>

  uint32_t serial_id = 1717;
 80031a6:	f240 63b5 	movw	r3, #1717	; 0x6b5
 80031aa:	61bb      	str	r3, [r7, #24]
//  uint32_t temperature = 3755;
  uint32_t heart_rate;
  float saturation = 0;
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	613b      	str	r3, [r7, #16]
  uint8_t finger_on = 1;
 80031b2:	2301      	movs	r3, #1
 80031b4:	73fb      	strb	r3, [r7, #15]
  int SYS = 0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	60bb      	str	r3, [r7, #8]
  int DIA = 0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	607b      	str	r3, [r7, #4]
  int PUL = 0;
 80031be:	2300      	movs	r3, #0
 80031c0:	603b      	str	r3, [r7, #0]
  uint32_t last_time = HAL_GetTick();
 80031c2:	f000 fe95 	bl	8003ef0 <HAL_GetTick>
 80031c6:	62f8      	str	r0, [r7, #44]	; 0x2c


  init_bpm(&huart2, GPIOA, GPIO_PIN_1);
 80031c8:	2202      	movs	r2, #2
 80031ca:	4949      	ldr	r1, [pc, #292]	; (80032f0 <main+0x19c>)
 80031cc:	4849      	ldr	r0, [pc, #292]	; (80032f4 <main+0x1a0>)
 80031ce:	f7fd ffbd 	bl	800114c <init_bpm>

  Max30102Setup();
 80031d2:	f7ff f9bd 	bl	8002550 <Max30102Setup>
  uint8_t faile_counter = 0;
 80031d6:	2300      	movs	r3, #0
 80031d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  bpm_thread(&DIA,&SYS,&PUL);
 80031dc:	463a      	mov	r2, r7
 80031de:	f107 0108 	add.w	r1, r7, #8
 80031e2:	1d3b      	adds	r3, r7, #4
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fe f84b 	bl	8001280 <bpm_thread>
  debug_printf("\r\n\n\n\n PUL: %d  SYS: %d  DIA: %d\r\n\n\n\n", PUL, SYS, DIA);
 80031ea:	6839      	ldr	r1, [r7, #0]
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4841      	ldr	r0, [pc, #260]	; (80032f8 <main+0x1a4>)
 80031f2:	f7fe fb41 	bl	8001878 <debug_printf>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//	  Max30102Loop();
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET){
 80031f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031fa:	4840      	ldr	r0, [pc, #256]	; (80032fc <main+0x1a8>)
 80031fc:	f001 fc96 	bl	8004b2c <HAL_GPIO_ReadPin>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d123      	bne.n	800324e <main+0xfa>
		  Max30102Loop(&saturation, &heart_rate, &finger_on);
 8003206:	f107 020f 	add.w	r2, r7, #15
 800320a:	f107 0114 	add.w	r1, r7, #20
 800320e:	f107 0310 	add.w	r3, r7, #16
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff f9ac 	bl	8002570 <Max30102Loop>
		  if(finger_on == 0)faile_counter++;
 8003218:	7bfb      	ldrb	r3, [r7, #15]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d104      	bne.n	8003228 <main+0xd4>
 800321e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003222:	3301      	adds	r3, #1
 8003224:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		  if(faile_counter > 20){
 8003228:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800322c:	2b14      	cmp	r3, #20
 800322e:	d90e      	bls.n	800324e <main+0xfa>
			  HAL_I2C_DeInit(&hi2c1);
 8003230:	4833      	ldr	r0, [pc, #204]	; (8003300 <main+0x1ac>)
 8003232:	f001 fe07 	bl	8004e44 <HAL_I2C_DeInit>
			  HAL_Delay(10);
 8003236:	200a      	movs	r0, #10
 8003238:	f000 fe64 	bl	8003f04 <HAL_Delay>
			  HAL_I2C_Init(&hi2c1);
 800323c:	4830      	ldr	r0, [pc, #192]	; (8003300 <main+0x1ac>)
 800323e:	f001 fcbd 	bl	8004bbc <HAL_I2C_Init>
			  faile_counter = 0;
 8003242:	2300      	movs	r3, #0
 8003244:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			  debug_printf("me movel\r\n");
 8003248:	482e      	ldr	r0, [pc, #184]	; (8003304 <main+0x1b0>)
 800324a:	f7fe fb15 	bl	8001878 <debug_printf>
		  }
	  }

	  if (HAL_GetTick() - last_time > 1000){
 800324e:	f000 fe4f 	bl	8003ef0 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800325c:	d9cb      	bls.n	80031f6 <main+0xa2>
		  HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13);
 800325e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003262:	4829      	ldr	r0, [pc, #164]	; (8003308 <main+0x1b4>)
 8003264:	f001 fc91 	bl	8004b8a <HAL_GPIO_TogglePin>
		  get_temp();
 8003268:	f000 f9f0 	bl	800364c <get_temp>
		  if (finger_on == 1){
 800326c:	7bfb      	ldrb	r3, [r7, #15]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d10b      	bne.n	800328a <main+0x136>
			  debug_printf("........................................new SPO2: %f , Heart Rate: %d\r\n",saturation, heart_rate);
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4618      	mov	r0, r3
 8003276:	f7fd f8cf 	bl	8000418 <__aeabi_f2d>
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	6979      	ldr	r1, [r7, #20]
 8003280:	9100      	str	r1, [sp, #0]
 8003282:	4822      	ldr	r0, [pc, #136]	; (800330c <main+0x1b8>)
 8003284:	f7fe faf8 	bl	8001878 <debug_printf>
 8003288:	e002      	b.n	8003290 <main+0x13c>
		  }else{
			  debug_printf("........................................Not valid. Are you still alive?\r\n");
 800328a:	4821      	ldr	r0, [pc, #132]	; (8003310 <main+0x1bc>)
 800328c:	f7fe faf4 	bl	8001878 <debug_printf>
		  }
		  tx_buffer[0] = START_MESSAGE;
 8003290:	4b20      	ldr	r3, [pc, #128]	; (8003314 <main+0x1c0>)
 8003292:	22aa      	movs	r2, #170	; 0xaa
 8003294:	701a      	strb	r2, [r3, #0]
 8003296:	69bb      	ldr	r3, [r7, #24]
		  memcpy(&tx_buffer[1], &serial_id, 4);
 8003298:	4a1e      	ldr	r2, [pc, #120]	; (8003314 <main+0x1c0>)
 800329a:	f8c2 3001 	str.w	r3, [r2, #1]
 800329e:	697b      	ldr	r3, [r7, #20]
		  // tx_buffer[5], temp;
		  memcpy(&tx_buffer[9], &heart_rate, 4);
 80032a0:	4a1c      	ldr	r2, [pc, #112]	; (8003314 <main+0x1c0>)
 80032a2:	f8c2 3009 	str.w	r3, [r2, #9]
		  saturation *= 1000;
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	491b      	ldr	r1, [pc, #108]	; (8003318 <main+0x1c4>)
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fd fd62 	bl	8000d74 <__aeabi_fmul>
 80032b0:	4603      	mov	r3, r0
 80032b2:	613b      	str	r3, [r7, #16]
		  temporary_int = (int)saturation;
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fd ff22 	bl	8001100 <__aeabi_f2iz>
 80032bc:	4603      	mov	r3, r0
 80032be:	461a      	mov	r2, r3
 80032c0:	4b16      	ldr	r3, [pc, #88]	; (800331c <main+0x1c8>)
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	4b15      	ldr	r3, [pc, #84]	; (800331c <main+0x1c8>)
 80032c6:	681b      	ldr	r3, [r3, #0]
		  memcpy(&tx_buffer[13], &temporary_int, 4);
 80032c8:	4a12      	ldr	r2, [pc, #72]	; (8003314 <main+0x1c0>)
 80032ca:	f8c2 300d 	str.w	r3, [r2, #13]
		  tx_buffer[17] = finger_on;
 80032ce:	7bfa      	ldrb	r2, [r7, #15]
 80032d0:	4b10      	ldr	r3, [pc, #64]	; (8003314 <main+0x1c0>)
 80032d2:	745a      	strb	r2, [r3, #17]
		  tx_buffer[18] = END_MESSAGE;
 80032d4:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <main+0x1c0>)
 80032d6:	2255      	movs	r2, #85	; 0x55
 80032d8:	749a      	strb	r2, [r3, #18]
		  HAL_UART_Transmit_DMA(&huart1, tx_buffer, 32);
 80032da:	2220      	movs	r2, #32
 80032dc:	490d      	ldr	r1, [pc, #52]	; (8003314 <main+0x1c0>)
 80032de:	4810      	ldr	r0, [pc, #64]	; (8003320 <main+0x1cc>)
 80032e0:	f003 fe36 	bl	8006f50 <HAL_UART_Transmit_DMA>
		  last_time = HAL_GetTick();
 80032e4:	f000 fe04 	bl	8003ef0 <HAL_GetTick>
 80032e8:	62f8      	str	r0, [r7, #44]	; 0x2c
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET){
 80032ea:	e784      	b.n	80031f6 <main+0xa2>
 80032ec:	08008c34 	.word	0x08008c34
 80032f0:	40010800 	.word	0x40010800
 80032f4:	20000758 	.word	0x20000758
 80032f8:	08008c68 	.word	0x08008c68
 80032fc:	40010c00 	.word	0x40010c00
 8003300:	20000668 	.word	0x20000668
 8003304:	08008c90 	.word	0x08008c90
 8003308:	40011000 	.word	0x40011000
 800330c:	08008c9c 	.word	0x08008c9c
 8003310:	08008ce4 	.word	0x08008ce4
 8003314:	200008b0 	.word	0x200008b0
 8003318:	447a0000 	.word	0x447a0000
 800331c:	20000930 	.word	0x20000930
 8003320:	20000710 	.word	0x20000710

08003324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b090      	sub	sp, #64	; 0x40
 8003328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800332a:	f107 0318 	add.w	r3, r7, #24
 800332e:	2228      	movs	r2, #40	; 0x28
 8003330:	2100      	movs	r1, #0
 8003332:	4618      	mov	r0, r3
 8003334:	f004 fc9c 	bl	8007c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003338:	1d3b      	adds	r3, r7, #4
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	605a      	str	r2, [r3, #4]
 8003340:	609a      	str	r2, [r3, #8]
 8003342:	60da      	str	r2, [r3, #12]
 8003344:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003346:	2301      	movs	r3, #1
 8003348:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800334a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800334e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003350:	2300      	movs	r3, #0
 8003352:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003354:	2301      	movs	r3, #1
 8003356:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003358:	2302      	movs	r3, #2
 800335a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800335c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003360:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003362:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003366:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003368:	f107 0318 	add.w	r3, r7, #24
 800336c:	4618      	mov	r0, r3
 800336e:	f003 f969 	bl	8006644 <HAL_RCC_OscConfig>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003378:	f000 f9e6 	bl	8003748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800337c:	230f      	movs	r3, #15
 800337e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003380:	2302      	movs	r3, #2
 8003382:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800338c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003392:	1d3b      	adds	r3, r7, #4
 8003394:	2102      	movs	r1, #2
 8003396:	4618      	mov	r0, r3
 8003398:	f003 fbd6 	bl	8006b48 <HAL_RCC_ClockConfig>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80033a2:	f000 f9d1 	bl	8003748 <Error_Handler>
  }
}
 80033a6:	bf00      	nop
 80033a8:	3740      	adds	r7, #64	; 0x40
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80033b4:	4b12      	ldr	r3, [pc, #72]	; (8003400 <MX_I2C1_Init+0x50>)
 80033b6:	4a13      	ldr	r2, [pc, #76]	; (8003404 <MX_I2C1_Init+0x54>)
 80033b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80033ba:	4b11      	ldr	r3, [pc, #68]	; (8003400 <MX_I2C1_Init+0x50>)
 80033bc:	4a12      	ldr	r2, [pc, #72]	; (8003408 <MX_I2C1_Init+0x58>)
 80033be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80033c0:	4b0f      	ldr	r3, [pc, #60]	; (8003400 <MX_I2C1_Init+0x50>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80033c6:	4b0e      	ldr	r3, [pc, #56]	; (8003400 <MX_I2C1_Init+0x50>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033cc:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <MX_I2C1_Init+0x50>)
 80033ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033d4:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <MX_I2C1_Init+0x50>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80033da:	4b09      	ldr	r3, [pc, #36]	; (8003400 <MX_I2C1_Init+0x50>)
 80033dc:	2200      	movs	r2, #0
 80033de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033e0:	4b07      	ldr	r3, [pc, #28]	; (8003400 <MX_I2C1_Init+0x50>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033e6:	4b06      	ldr	r3, [pc, #24]	; (8003400 <MX_I2C1_Init+0x50>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80033ec:	4804      	ldr	r0, [pc, #16]	; (8003400 <MX_I2C1_Init+0x50>)
 80033ee:	f001 fbe5 	bl	8004bbc <HAL_I2C_Init>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80033f8:	f000 f9a6 	bl	8003748 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80033fc:	bf00      	nop
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	20000668 	.word	0x20000668
 8003404:	40005400 	.word	0x40005400
 8003408:	000186a0 	.word	0x000186a0

0800340c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003410:	4b12      	ldr	r3, [pc, #72]	; (800345c <MX_I2C2_Init+0x50>)
 8003412:	4a13      	ldr	r2, [pc, #76]	; (8003460 <MX_I2C2_Init+0x54>)
 8003414:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003416:	4b11      	ldr	r3, [pc, #68]	; (800345c <MX_I2C2_Init+0x50>)
 8003418:	4a12      	ldr	r2, [pc, #72]	; (8003464 <MX_I2C2_Init+0x58>)
 800341a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800341c:	4b0f      	ldr	r3, [pc, #60]	; (800345c <MX_I2C2_Init+0x50>)
 800341e:	2200      	movs	r2, #0
 8003420:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003422:	4b0e      	ldr	r3, [pc, #56]	; (800345c <MX_I2C2_Init+0x50>)
 8003424:	2200      	movs	r2, #0
 8003426:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003428:	4b0c      	ldr	r3, [pc, #48]	; (800345c <MX_I2C2_Init+0x50>)
 800342a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800342e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003430:	4b0a      	ldr	r3, [pc, #40]	; (800345c <MX_I2C2_Init+0x50>)
 8003432:	2200      	movs	r2, #0
 8003434:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003436:	4b09      	ldr	r3, [pc, #36]	; (800345c <MX_I2C2_Init+0x50>)
 8003438:	2200      	movs	r2, #0
 800343a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800343c:	4b07      	ldr	r3, [pc, #28]	; (800345c <MX_I2C2_Init+0x50>)
 800343e:	2200      	movs	r2, #0
 8003440:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003442:	4b06      	ldr	r3, [pc, #24]	; (800345c <MX_I2C2_Init+0x50>)
 8003444:	2200      	movs	r2, #0
 8003446:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003448:	4804      	ldr	r0, [pc, #16]	; (800345c <MX_I2C2_Init+0x50>)
 800344a:	f001 fbb7 	bl	8004bbc <HAL_I2C_Init>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003454:	f000 f978 	bl	8003748 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003458:	bf00      	nop
 800345a:	bd80      	pop	{r7, pc}
 800345c:	200006bc 	.word	0x200006bc
 8003460:	40005800 	.word	0x40005800
 8003464:	000186a0 	.word	0x000186a0

08003468 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800346c:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <MX_USART1_UART_Init+0x4c>)
 800346e:	4a12      	ldr	r2, [pc, #72]	; (80034b8 <MX_USART1_UART_Init+0x50>)
 8003470:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003472:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <MX_USART1_UART_Init+0x4c>)
 8003474:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003478:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800347a:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <MX_USART1_UART_Init+0x4c>)
 800347c:	2200      	movs	r2, #0
 800347e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003480:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <MX_USART1_UART_Init+0x4c>)
 8003482:	2200      	movs	r2, #0
 8003484:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003486:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <MX_USART1_UART_Init+0x4c>)
 8003488:	2200      	movs	r2, #0
 800348a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800348c:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <MX_USART1_UART_Init+0x4c>)
 800348e:	220c      	movs	r2, #12
 8003490:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003492:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <MX_USART1_UART_Init+0x4c>)
 8003494:	2200      	movs	r2, #0
 8003496:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <MX_USART1_UART_Init+0x4c>)
 800349a:	2200      	movs	r2, #0
 800349c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800349e:	4805      	ldr	r0, [pc, #20]	; (80034b4 <MX_USART1_UART_Init+0x4c>)
 80034a0:	f003 fce0 	bl	8006e64 <HAL_UART_Init>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80034aa:	f000 f94d 	bl	8003748 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80034ae:	bf00      	nop
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20000710 	.word	0x20000710
 80034b8:	40013800 	.word	0x40013800

080034bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80034c0:	4b11      	ldr	r3, [pc, #68]	; (8003508 <MX_USART2_UART_Init+0x4c>)
 80034c2:	4a12      	ldr	r2, [pc, #72]	; (800350c <MX_USART2_UART_Init+0x50>)
 80034c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80034c6:	4b10      	ldr	r3, [pc, #64]	; (8003508 <MX_USART2_UART_Init+0x4c>)
 80034c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034ce:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <MX_USART2_UART_Init+0x4c>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80034d4:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <MX_USART2_UART_Init+0x4c>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80034da:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <MX_USART2_UART_Init+0x4c>)
 80034dc:	2200      	movs	r2, #0
 80034de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80034e0:	4b09      	ldr	r3, [pc, #36]	; (8003508 <MX_USART2_UART_Init+0x4c>)
 80034e2:	220c      	movs	r2, #12
 80034e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034e6:	4b08      	ldr	r3, [pc, #32]	; (8003508 <MX_USART2_UART_Init+0x4c>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80034ec:	4b06      	ldr	r3, [pc, #24]	; (8003508 <MX_USART2_UART_Init+0x4c>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80034f2:	4805      	ldr	r0, [pc, #20]	; (8003508 <MX_USART2_UART_Init+0x4c>)
 80034f4:	f003 fcb6 	bl	8006e64 <HAL_UART_Init>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80034fe:	f000 f923 	bl	8003748 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20000758 	.word	0x20000758
 800350c:	40004400 	.word	0x40004400

08003510 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003516:	4b18      	ldr	r3, [pc, #96]	; (8003578 <MX_DMA_Init+0x68>)
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	4a17      	ldr	r2, [pc, #92]	; (8003578 <MX_DMA_Init+0x68>)
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	6153      	str	r3, [r2, #20]
 8003522:	4b15      	ldr	r3, [pc, #84]	; (8003578 <MX_DMA_Init+0x68>)
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	607b      	str	r3, [r7, #4]
 800352c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800352e:	2200      	movs	r2, #0
 8003530:	2100      	movs	r1, #0
 8003532:	200e      	movs	r0, #14
 8003534:	f000 fde1 	bl	80040fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003538:	200e      	movs	r0, #14
 800353a:	f000 fdfa 	bl	8004132 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800353e:	2200      	movs	r2, #0
 8003540:	2100      	movs	r1, #0
 8003542:	200f      	movs	r0, #15
 8003544:	f000 fdd9 	bl	80040fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003548:	200f      	movs	r0, #15
 800354a:	f000 fdf2 	bl	8004132 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800354e:	2200      	movs	r2, #0
 8003550:	2100      	movs	r1, #0
 8003552:	2010      	movs	r0, #16
 8003554:	f000 fdd1 	bl	80040fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003558:	2010      	movs	r0, #16
 800355a:	f000 fdea 	bl	8004132 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800355e:	2200      	movs	r2, #0
 8003560:	2100      	movs	r1, #0
 8003562:	2011      	movs	r0, #17
 8003564:	f000 fdc9 	bl	80040fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003568:	2011      	movs	r0, #17
 800356a:	f000 fde2 	bl	8004132 <HAL_NVIC_EnableIRQ>

}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000

0800357c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b088      	sub	sp, #32
 8003580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003582:	f107 0310 	add.w	r3, r7, #16
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	605a      	str	r2, [r3, #4]
 800358c:	609a      	str	r2, [r3, #8]
 800358e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003590:	4b2a      	ldr	r3, [pc, #168]	; (800363c <MX_GPIO_Init+0xc0>)
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	4a29      	ldr	r2, [pc, #164]	; (800363c <MX_GPIO_Init+0xc0>)
 8003596:	f043 0310 	orr.w	r3, r3, #16
 800359a:	6193      	str	r3, [r2, #24]
 800359c:	4b27      	ldr	r3, [pc, #156]	; (800363c <MX_GPIO_Init+0xc0>)
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035a8:	4b24      	ldr	r3, [pc, #144]	; (800363c <MX_GPIO_Init+0xc0>)
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	4a23      	ldr	r2, [pc, #140]	; (800363c <MX_GPIO_Init+0xc0>)
 80035ae:	f043 0320 	orr.w	r3, r3, #32
 80035b2:	6193      	str	r3, [r2, #24]
 80035b4:	4b21      	ldr	r3, [pc, #132]	; (800363c <MX_GPIO_Init+0xc0>)
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035c0:	4b1e      	ldr	r3, [pc, #120]	; (800363c <MX_GPIO_Init+0xc0>)
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	4a1d      	ldr	r2, [pc, #116]	; (800363c <MX_GPIO_Init+0xc0>)
 80035c6:	f043 0304 	orr.w	r3, r3, #4
 80035ca:	6193      	str	r3, [r2, #24]
 80035cc:	4b1b      	ldr	r3, [pc, #108]	; (800363c <MX_GPIO_Init+0xc0>)
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	607b      	str	r3, [r7, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035d8:	4b18      	ldr	r3, [pc, #96]	; (800363c <MX_GPIO_Init+0xc0>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	4a17      	ldr	r2, [pc, #92]	; (800363c <MX_GPIO_Init+0xc0>)
 80035de:	f043 0308 	orr.w	r3, r3, #8
 80035e2:	6193      	str	r3, [r2, #24]
 80035e4:	4b15      	ldr	r3, [pc, #84]	; (800363c <MX_GPIO_Init+0xc0>)
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80035f0:	2200      	movs	r2, #0
 80035f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035f6:	4812      	ldr	r0, [pc, #72]	; (8003640 <MX_GPIO_Init+0xc4>)
 80035f8:	f001 faaf 	bl	8004b5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80035fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003602:	2301      	movs	r3, #1
 8003604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003606:	2300      	movs	r3, #0
 8003608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800360a:	2302      	movs	r3, #2
 800360c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800360e:	f107 0310 	add.w	r3, r7, #16
 8003612:	4619      	mov	r1, r3
 8003614:	480a      	ldr	r0, [pc, #40]	; (8003640 <MX_GPIO_Init+0xc4>)
 8003616:	f001 f849 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800361a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800361e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003620:	4b08      	ldr	r3, [pc, #32]	; (8003644 <MX_GPIO_Init+0xc8>)
 8003622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003624:	2301      	movs	r3, #1
 8003626:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003628:	f107 0310 	add.w	r3, r7, #16
 800362c:	4619      	mov	r1, r3
 800362e:	4806      	ldr	r0, [pc, #24]	; (8003648 <MX_GPIO_Init+0xcc>)
 8003630:	f001 f83c 	bl	80046ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003634:	bf00      	nop
 8003636:	3720      	adds	r7, #32
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40021000 	.word	0x40021000
 8003640:	40011000 	.word	0x40011000
 8003644:	10210000 	.word	0x10210000
 8003648:	40010800 	.word	0x40010800

0800364c <get_temp>:

/* USER CODE BEGIN 4 */
float get_temp(void){
 800364c:	b5b0      	push	{r4, r5, r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af02      	add	r7, sp, #8
	uint8_t temp_buff[2] = {0};
 8003652:	2300      	movs	r3, #0
 8003654:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c2, TEMP_I2C_ADDRESS, TEMP_READ_ADDRESS, 1, TEMP_TIMEOUT);
 8003656:	230a      	movs	r3, #10
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	2301      	movs	r3, #1
 800365c:	2200      	movs	r2, #0
 800365e:	2190      	movs	r1, #144	; 0x90
 8003660:	4834      	ldr	r0, [pc, #208]	; (8003734 <get_temp+0xe8>)
 8003662:	f001 fc1f 	bl	8004ea4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, TEMP_I2C_ADDRESS, temp_buff, sizeof(temp_buff), TEMP_TIMEOUT);
 8003666:	1d3a      	adds	r2, r7, #4
 8003668:	230a      	movs	r3, #10
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	2302      	movs	r3, #2
 800366e:	2190      	movs	r1, #144	; 0x90
 8003670:	4830      	ldr	r0, [pc, #192]	; (8003734 <get_temp+0xe8>)
 8003672:	f001 fd15 	bl	80050a0 <HAL_I2C_Master_Receive>

	float ans = 0;
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	60fb      	str	r3, [r7, #12]
	for(int q = -8; q < 0; q++){
 800367c:	f06f 0307 	mvn.w	r3, #7
 8003680:	60bb      	str	r3, [r7, #8]
 8003682:	e02a      	b.n	80036da <get_temp+0x8e>
	  if(temp_buff[1] & (1 << q + 8)){
 8003684:	797b      	ldrb	r3, [r7, #5]
 8003686:	461a      	mov	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	3308      	adds	r3, #8
 800368c:	fa42 f303 	asr.w	r3, r2, r3
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d01d      	beq.n	80036d4 <get_temp+0x88>
		  ans += pow(2,q);
 8003698:	68b8      	ldr	r0, [r7, #8]
 800369a:	f7fc feab 	bl	80003f4 <__aeabi_i2d>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	f04f 0000 	mov.w	r0, #0
 80036a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80036aa:	f004 fae9 	bl	8007c80 <pow>
 80036ae:	4604      	mov	r4, r0
 80036b0:	460d      	mov	r5, r1
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f7fc feb0 	bl	8000418 <__aeabi_f2d>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4620      	mov	r0, r4
 80036be:	4629      	mov	r1, r5
 80036c0:	f7fc fd4c 	bl	800015c <__adddf3>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4610      	mov	r0, r2
 80036ca:	4619      	mov	r1, r3
 80036cc:	f7fd f9f4 	bl	8000ab8 <__aeabi_d2f>
 80036d0:	4603      	mov	r3, r0
 80036d2:	60fb      	str	r3, [r7, #12]
	for(int q = -8; q < 0; q++){
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	3301      	adds	r3, #1
 80036d8:	60bb      	str	r3, [r7, #8]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	dbd1      	blt.n	8003684 <get_temp+0x38>
	  }
    }
	ans += temp_buff[0];
 80036e0:	793b      	ldrb	r3, [r7, #4]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fd faf2 	bl	8000ccc <__aeabi_i2f>
 80036e8:	4603      	mov	r3, r0
 80036ea:	4619      	mov	r1, r3
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f7fd fa39 	bl	8000b64 <__addsf3>
 80036f2:	4603      	mov	r3, r0
 80036f4:	60fb      	str	r3, [r7, #12]
	ans *= 1000;
 80036f6:	4910      	ldr	r1, [pc, #64]	; (8003738 <get_temp+0xec>)
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f7fd fb3b 	bl	8000d74 <__aeabi_fmul>
 80036fe:	4603      	mov	r3, r0
 8003700:	60fb      	str	r3, [r7, #12]
	temporary_int = (int)ans;
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f7fd fcfc 	bl	8001100 <__aeabi_f2iz>
 8003708:	4603      	mov	r3, r0
 800370a:	461a      	mov	r2, r3
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <get_temp+0xf0>)
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	4b0a      	ldr	r3, [pc, #40]	; (800373c <get_temp+0xf0>)
 8003712:	681b      	ldr	r3, [r3, #0]
	memcpy(&tx_buffer[5], &temporary_int, 4);
 8003714:	4a0a      	ldr	r2, [pc, #40]	; (8003740 <get_temp+0xf4>)
 8003716:	f8c2 3005 	str.w	r3, [r2, #5]
	debug_printf("temp %f\n\r" , ans);
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f7fc fe7c 	bl	8000418 <__aeabi_f2d>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4807      	ldr	r0, [pc, #28]	; (8003744 <get_temp+0xf8>)
 8003726:	f7fe f8a7 	bl	8001878 <debug_printf>

}
 800372a:	bf00      	nop
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bdb0      	pop	{r4, r5, r7, pc}
 8003734:	200006bc 	.word	0x200006bc
 8003738:	447a0000 	.word	0x447a0000
 800373c:	20000930 	.word	0x20000930
 8003740:	200008b0 	.word	0x200008b0
 8003744:	08008d30 	.word	0x08008d30

08003748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800374c:	b672      	cpsid	i
}
 800374e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003750:	e7fe      	b.n	8003750 <Error_Handler+0x8>
	...

08003754 <maxim_max30102_write_reg>:
*
* \param[in]    uch_addr    - register address
* \param[in]    uch_data    - register data
*/
void maxim_max30102_write_reg(uint8_t uch_addr, uint8_t uch_data)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af04      	add	r7, sp, #16
 800375a:	4603      	mov	r3, r0
 800375c:	460a      	mov	r2, r1
 800375e:	71fb      	strb	r3, [r7, #7]
 8003760:	4613      	mov	r3, r2
 8003762:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, I2C_WRITE_ADDR, uch_addr, 1U, &uch_data, 1U, 100U);
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	b29a      	uxth	r2, r3
 8003768:	2364      	movs	r3, #100	; 0x64
 800376a:	9302      	str	r3, [sp, #8]
 800376c:	2301      	movs	r3, #1
 800376e:	9301      	str	r3, [sp, #4]
 8003770:	1dbb      	adds	r3, r7, #6
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	2301      	movs	r3, #1
 8003776:	21ae      	movs	r1, #174	; 0xae
 8003778:	4803      	ldr	r0, [pc, #12]	; (8003788 <maxim_max30102_write_reg+0x34>)
 800377a:	f001 fefd 	bl	8005578 <HAL_I2C_Mem_Write>
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	20000668 	.word	0x20000668

0800378c <maxim_max30102_read_reg>:
*
* \param[in]    uch_addr    - register address
* \param[out]   puch_data    - pointer that stores the register data
*/
void maxim_max30102_read_reg(uint8_t uch_addr, uint8_t *puch_data)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af04      	add	r7, sp, #16
 8003792:	4603      	mov	r3, r0
 8003794:	6039      	str	r1, [r7, #0]
 8003796:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, I2C_READ_ADDR, uch_addr, 1U, puch_data, 1U, 250U);
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	b29a      	uxth	r2, r3
 800379c:	23fa      	movs	r3, #250	; 0xfa
 800379e:	9302      	str	r3, [sp, #8]
 80037a0:	2301      	movs	r3, #1
 80037a2:	9301      	str	r3, [sp, #4]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	2301      	movs	r3, #1
 80037aa:	21af      	movs	r1, #175	; 0xaf
 80037ac:	4803      	ldr	r0, [pc, #12]	; (80037bc <maxim_max30102_read_reg+0x30>)
 80037ae:	f001 ffdd 	bl	800576c <HAL_I2C_Mem_Read>
}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000668 	.word	0x20000668

080037c0 <maxim_max30102_init>:
* \par          Details
*               This function initializes the MAX30102
*
* \param        None
*/
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
	maxim_max30102_write_reg(REG_INTR_ENABLE_1, 0xc0U); 	// INTR setting
 80037c4:	21c0      	movs	r1, #192	; 0xc0
 80037c6:	2002      	movs	r0, #2
 80037c8:	f7ff ffc4 	bl	8003754 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_INTR_ENABLE_2, 0x00U);
 80037cc:	2100      	movs	r1, #0
 80037ce:	2003      	movs	r0, #3
 80037d0:	f7ff ffc0 	bl	8003754 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_FIFO_WR_PTR, 0x00U);  		//FIFO_WR_PTR[4:0]
 80037d4:	2100      	movs	r1, #0
 80037d6:	2004      	movs	r0, #4
 80037d8:	f7ff ffbc 	bl	8003754 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_OVF_COUNTER, 0x00U);  		//OVF_COUNTER[4:0]
 80037dc:	2100      	movs	r1, #0
 80037de:	2005      	movs	r0, #5
 80037e0:	f7ff ffb8 	bl	8003754 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_FIFO_RD_PTR, 0x00U);  		//FIFO_RD_PTR[4:0]
 80037e4:	2100      	movs	r1, #0
 80037e6:	2006      	movs	r0, #6
 80037e8:	f7ff ffb4 	bl	8003754 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_FIFO_CONFIG, 0x4fU);  		//sample avg = 4, fifo rollover=false, fifo almost full = 17
 80037ec:	214f      	movs	r1, #79	; 0x4f
 80037ee:	2008      	movs	r0, #8
 80037f0:	f7ff ffb0 	bl	8003754 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_MODE_CONFIG, 0x03U);   	//0x02 for Red only, 0x03 for SpO2 mode 0x07 multimode LED
 80037f4:	2103      	movs	r1, #3
 80037f6:	2009      	movs	r0, #9
 80037f8:	f7ff ffac 	bl	8003754 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_SPO2_CONFIG, 0x27U);  		// SPO2_ADC range = 4096nA, SPO2 sample rate (100 Hz), LED pulseWidth (411uS)
 80037fc:	2127      	movs	r1, #39	; 0x27
 80037fe:	200a      	movs	r0, #10
 8003800:	f7ff ffa8 	bl	8003754 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_LED1_PA, 0x24U);   		//Choose value for ~ 7mA for LED1
 8003804:	2124      	movs	r1, #36	; 0x24
 8003806:	200c      	movs	r0, #12
 8003808:	f7ff ffa4 	bl	8003754 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_LED2_PA, 0x24U);   		// Choose value for ~ 7mA for LED2
 800380c:	2124      	movs	r1, #36	; 0x24
 800380e:	200d      	movs	r0, #13
 8003810:	f7ff ffa0 	bl	8003754 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_PILOT_PA, 0x7fU);   		// Choose value for ~ 25mA for Pilot LED
 8003814:	217f      	movs	r1, #127	; 0x7f
 8003816:	2010      	movs	r0, #16
 8003818:	f7ff ff9c 	bl	8003754 <maxim_max30102_write_reg>
}
 800381c:	bf00      	nop
 800381e:	bd80      	pop	{r7, pc}

08003820 <maxim_max30102_read_fifo>:
*
* \param[out]   *pun_red_led   - pointer that stores the red LED reading data
* \param[out]   *pun_ir_led    - pointer that stores the IR LED reading data
*/
void maxim_max30102_read_fifo(uint32_t *pun_red_led, uint32_t *pun_ir_led)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08a      	sub	sp, #40	; 0x28
 8003824:	af04      	add	r7, sp, #16
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t un_temp;
  uint8_t uch_temp;
  uint8_t uch_i2c_data[6];

  maxim_max30102_read_reg(REG_INTR_STATUS_1, &uch_temp);
 800382a:	f107 0313 	add.w	r3, r7, #19
 800382e:	4619      	mov	r1, r3
 8003830:	2000      	movs	r0, #0
 8003832:	f7ff ffab 	bl	800378c <maxim_max30102_read_reg>
  maxim_max30102_read_reg(REG_INTR_STATUS_2, &uch_temp);
 8003836:	f107 0313 	add.w	r3, r7, #19
 800383a:	4619      	mov	r1, r3
 800383c:	2001      	movs	r0, #1
 800383e:	f7ff ffa5 	bl	800378c <maxim_max30102_read_reg>

  HAL_I2C_Mem_Read(&hi2c1, I2C_READ_ADDR, REG_FIFO_DATA, 1U, uch_i2c_data, 6U, 250U);
 8003842:	23fa      	movs	r3, #250	; 0xfa
 8003844:	9302      	str	r3, [sp, #8]
 8003846:	2306      	movs	r3, #6
 8003848:	9301      	str	r3, [sp, #4]
 800384a:	f107 030c 	add.w	r3, r7, #12
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	2301      	movs	r3, #1
 8003852:	2207      	movs	r2, #7
 8003854:	21af      	movs	r1, #175	; 0xaf
 8003856:	482a      	ldr	r0, [pc, #168]	; (8003900 <maxim_max30102_read_fifo+0xe0>)
 8003858:	f001 ff88 	bl	800576c <HAL_I2C_Mem_Read>

  *pun_ir_led = 0UL;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
  *pun_red_led = 0UL;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]

  un_temp = (uint32_t)uch_i2c_data[0];
 8003868:	7b3b      	ldrb	r3, [r7, #12]
 800386a:	617b      	str	r3, [r7, #20]
  un_temp <<= 16;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	041b      	lsls	r3, r3, #16
 8003870:	617b      	str	r3, [r7, #20]
  *pun_red_led += un_temp;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	441a      	add	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[1];
 800387e:	7b7b      	ldrb	r3, [r7, #13]
 8003880:	617b      	str	r3, [r7, #20]
  un_temp <<= 8;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	021b      	lsls	r3, r3, #8
 8003886:	617b      	str	r3, [r7, #20]
  *pun_red_led += un_temp;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	441a      	add	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[2];
 8003894:	7bbb      	ldrb	r3, [r7, #14]
 8003896:	617b      	str	r3, [r7, #20]
  *pun_red_led += un_temp;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	441a      	add	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[3];
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	617b      	str	r3, [r7, #20]
  un_temp <<= 16;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	041b      	lsls	r3, r3, #16
 80038ac:	617b      	str	r3, [r7, #20]
  *pun_ir_led += un_temp;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	441a      	add	r2, r3
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[4];
 80038ba:	7c3b      	ldrb	r3, [r7, #16]
 80038bc:	617b      	str	r3, [r7, #20]
  un_temp <<= 8;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	021b      	lsls	r3, r3, #8
 80038c2:	617b      	str	r3, [r7, #20]
  *pun_ir_led += un_temp;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	441a      	add	r2, r3
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[5];
 80038d0:	7c7b      	ldrb	r3, [r7, #17]
 80038d2:	617b      	str	r3, [r7, #20]
  *pun_ir_led += un_temp;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	441a      	add	r2, r3
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	601a      	str	r2, [r3, #0]
  *pun_red_led &= 0x03FFFF;  	// Mask MSB [23:18]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f3c3 0211 	ubfx	r2, r3, #0, #18
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	601a      	str	r2, [r3, #0]
  *pun_ir_led &= 0x03FFFF;  	// Mask MSB [23:18]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f3c3 0211 	ubfx	r2, r3, #0, #18
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	601a      	str	r2, [r3, #0]

}
 80038f8:	bf00      	nop
 80038fa:	3718      	adds	r7, #24
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	20000668 	.word	0x20000668

08003904 <maxim_max30102_reset>:
*               This function resets the MAX30102
*
* \param        None
*/
void maxim_max30102_reset()
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
	maxim_max30102_write_reg(REG_MODE_CONFIG, 0x40U);
 8003908:	2140      	movs	r1, #64	; 0x40
 800390a:	2009      	movs	r0, #9
 800390c:	f7ff ff22 	bl	8003754 <maxim_max30102_write_reg>
}
 8003910:	bf00      	nop
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800391a:	4b0e      	ldr	r3, [pc, #56]	; (8003954 <HAL_MspInit+0x40>)
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	4a0d      	ldr	r2, [pc, #52]	; (8003954 <HAL_MspInit+0x40>)
 8003920:	f043 0301 	orr.w	r3, r3, #1
 8003924:	6193      	str	r3, [r2, #24]
 8003926:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <HAL_MspInit+0x40>)
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	607b      	str	r3, [r7, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003932:	4b08      	ldr	r3, [pc, #32]	; (8003954 <HAL_MspInit+0x40>)
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	4a07      	ldr	r2, [pc, #28]	; (8003954 <HAL_MspInit+0x40>)
 8003938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800393c:	61d3      	str	r3, [r2, #28]
 800393e:	4b05      	ldr	r3, [pc, #20]	; (8003954 <HAL_MspInit+0x40>)
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr
 8003954:	40021000 	.word	0x40021000

08003958 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08a      	sub	sp, #40	; 0x28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003960:	f107 0318 	add.w	r3, r7, #24
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	605a      	str	r2, [r3, #4]
 800396a:	609a      	str	r2, [r3, #8]
 800396c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a2b      	ldr	r2, [pc, #172]	; (8003a20 <HAL_I2C_MspInit+0xc8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d124      	bne.n	80039c2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003978:	4b2a      	ldr	r3, [pc, #168]	; (8003a24 <HAL_I2C_MspInit+0xcc>)
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	4a29      	ldr	r2, [pc, #164]	; (8003a24 <HAL_I2C_MspInit+0xcc>)
 800397e:	f043 0308 	orr.w	r3, r3, #8
 8003982:	6193      	str	r3, [r2, #24]
 8003984:	4b27      	ldr	r3, [pc, #156]	; (8003a24 <HAL_I2C_MspInit+0xcc>)
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003990:	23c0      	movs	r3, #192	; 0xc0
 8003992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003994:	2312      	movs	r3, #18
 8003996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003998:	2303      	movs	r3, #3
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800399c:	f107 0318 	add.w	r3, r7, #24
 80039a0:	4619      	mov	r1, r3
 80039a2:	4821      	ldr	r0, [pc, #132]	; (8003a28 <HAL_I2C_MspInit+0xd0>)
 80039a4:	f000 fe82 	bl	80046ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80039a8:	4b1e      	ldr	r3, [pc, #120]	; (8003a24 <HAL_I2C_MspInit+0xcc>)
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	4a1d      	ldr	r2, [pc, #116]	; (8003a24 <HAL_I2C_MspInit+0xcc>)
 80039ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039b2:	61d3      	str	r3, [r2, #28]
 80039b4:	4b1b      	ldr	r3, [pc, #108]	; (8003a24 <HAL_I2C_MspInit+0xcc>)
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80039c0:	e029      	b.n	8003a16 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a19      	ldr	r2, [pc, #100]	; (8003a2c <HAL_I2C_MspInit+0xd4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d124      	bne.n	8003a16 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039cc:	4b15      	ldr	r3, [pc, #84]	; (8003a24 <HAL_I2C_MspInit+0xcc>)
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	4a14      	ldr	r2, [pc, #80]	; (8003a24 <HAL_I2C_MspInit+0xcc>)
 80039d2:	f043 0308 	orr.w	r3, r3, #8
 80039d6:	6193      	str	r3, [r2, #24]
 80039d8:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <HAL_I2C_MspInit+0xcc>)
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80039e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80039e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039ea:	2312      	movs	r3, #18
 80039ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039ee:	2303      	movs	r3, #3
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039f2:	f107 0318 	add.w	r3, r7, #24
 80039f6:	4619      	mov	r1, r3
 80039f8:	480b      	ldr	r0, [pc, #44]	; (8003a28 <HAL_I2C_MspInit+0xd0>)
 80039fa:	f000 fe57 	bl	80046ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80039fe:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <HAL_I2C_MspInit+0xcc>)
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	4a08      	ldr	r2, [pc, #32]	; (8003a24 <HAL_I2C_MspInit+0xcc>)
 8003a04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a08:	61d3      	str	r3, [r2, #28]
 8003a0a:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <HAL_I2C_MspInit+0xcc>)
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a12:	60bb      	str	r3, [r7, #8]
 8003a14:	68bb      	ldr	r3, [r7, #8]
}
 8003a16:	bf00      	nop
 8003a18:	3728      	adds	r7, #40	; 0x28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40005400 	.word	0x40005400
 8003a24:	40021000 	.word	0x40021000
 8003a28:	40010c00 	.word	0x40010c00
 8003a2c:	40005800 	.word	0x40005800

08003a30 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a15      	ldr	r2, [pc, #84]	; (8003a94 <HAL_I2C_MspDeInit+0x64>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d10e      	bne.n	8003a60 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003a42:	4b15      	ldr	r3, [pc, #84]	; (8003a98 <HAL_I2C_MspDeInit+0x68>)
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	4a14      	ldr	r2, [pc, #80]	; (8003a98 <HAL_I2C_MspDeInit+0x68>)
 8003a48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a4c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8003a4e:	2140      	movs	r1, #64	; 0x40
 8003a50:	4812      	ldr	r0, [pc, #72]	; (8003a9c <HAL_I2C_MspDeInit+0x6c>)
 8003a52:	f000 ffaf 	bl	80049b4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8003a56:	2180      	movs	r1, #128	; 0x80
 8003a58:	4810      	ldr	r0, [pc, #64]	; (8003a9c <HAL_I2C_MspDeInit+0x6c>)
 8003a5a:	f000 ffab 	bl	80049b4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8003a5e:	e014      	b.n	8003a8a <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C2)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a0e      	ldr	r2, [pc, #56]	; (8003aa0 <HAL_I2C_MspDeInit+0x70>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d10f      	bne.n	8003a8a <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8003a6a:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <HAL_I2C_MspDeInit+0x68>)
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	4a0a      	ldr	r2, [pc, #40]	; (8003a98 <HAL_I2C_MspDeInit+0x68>)
 8003a70:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003a74:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8003a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a7a:	4808      	ldr	r0, [pc, #32]	; (8003a9c <HAL_I2C_MspDeInit+0x6c>)
 8003a7c:	f000 ff9a 	bl	80049b4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8003a80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a84:	4805      	ldr	r0, [pc, #20]	; (8003a9c <HAL_I2C_MspDeInit+0x6c>)
 8003a86:	f000 ff95 	bl	80049b4 <HAL_GPIO_DeInit>
}
 8003a8a:	bf00      	nop
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40005400 	.word	0x40005400
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	40010c00 	.word	0x40010c00
 8003aa0:	40005800 	.word	0x40005800

08003aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08a      	sub	sp, #40	; 0x28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aac:	f107 0318 	add.w	r3, r7, #24
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	605a      	str	r2, [r3, #4]
 8003ab6:	609a      	str	r2, [r3, #8]
 8003ab8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a8c      	ldr	r2, [pc, #560]	; (8003cf0 <HAL_UART_MspInit+0x24c>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	f040 8087 	bne.w	8003bd4 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ac6:	4b8b      	ldr	r3, [pc, #556]	; (8003cf4 <HAL_UART_MspInit+0x250>)
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	4a8a      	ldr	r2, [pc, #552]	; (8003cf4 <HAL_UART_MspInit+0x250>)
 8003acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ad0:	6193      	str	r3, [r2, #24]
 8003ad2:	4b88      	ldr	r3, [pc, #544]	; (8003cf4 <HAL_UART_MspInit+0x250>)
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ade:	4b85      	ldr	r3, [pc, #532]	; (8003cf4 <HAL_UART_MspInit+0x250>)
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	4a84      	ldr	r2, [pc, #528]	; (8003cf4 <HAL_UART_MspInit+0x250>)
 8003ae4:	f043 0304 	orr.w	r3, r3, #4
 8003ae8:	6193      	str	r3, [r2, #24]
 8003aea:	4b82      	ldr	r3, [pc, #520]	; (8003cf4 <HAL_UART_MspInit+0x250>)
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003af6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afc:	2302      	movs	r3, #2
 8003afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b00:	2303      	movs	r3, #3
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b04:	f107 0318 	add.w	r3, r7, #24
 8003b08:	4619      	mov	r1, r3
 8003b0a:	487b      	ldr	r0, [pc, #492]	; (8003cf8 <HAL_UART_MspInit+0x254>)
 8003b0c:	f000 fdce 	bl	80046ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b16:	2300      	movs	r3, #0
 8003b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b1e:	f107 0318 	add.w	r3, r7, #24
 8003b22:	4619      	mov	r1, r3
 8003b24:	4874      	ldr	r0, [pc, #464]	; (8003cf8 <HAL_UART_MspInit+0x254>)
 8003b26:	f000 fdc1 	bl	80046ac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003b2a:	4b74      	ldr	r3, [pc, #464]	; (8003cfc <HAL_UART_MspInit+0x258>)
 8003b2c:	4a74      	ldr	r2, [pc, #464]	; (8003d00 <HAL_UART_MspInit+0x25c>)
 8003b2e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b30:	4b72      	ldr	r3, [pc, #456]	; (8003cfc <HAL_UART_MspInit+0x258>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b36:	4b71      	ldr	r3, [pc, #452]	; (8003cfc <HAL_UART_MspInit+0x258>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b3c:	4b6f      	ldr	r3, [pc, #444]	; (8003cfc <HAL_UART_MspInit+0x258>)
 8003b3e:	2280      	movs	r2, #128	; 0x80
 8003b40:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b42:	4b6e      	ldr	r3, [pc, #440]	; (8003cfc <HAL_UART_MspInit+0x258>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b48:	4b6c      	ldr	r3, [pc, #432]	; (8003cfc <HAL_UART_MspInit+0x258>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003b4e:	4b6b      	ldr	r3, [pc, #428]	; (8003cfc <HAL_UART_MspInit+0x258>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b54:	4b69      	ldr	r3, [pc, #420]	; (8003cfc <HAL_UART_MspInit+0x258>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003b5a:	4868      	ldr	r0, [pc, #416]	; (8003cfc <HAL_UART_MspInit+0x258>)
 8003b5c:	f000 fb04 	bl	8004168 <HAL_DMA_Init>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8003b66:	f7ff fdef 	bl	8003748 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a63      	ldr	r2, [pc, #396]	; (8003cfc <HAL_UART_MspInit+0x258>)
 8003b6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b70:	4a62      	ldr	r2, [pc, #392]	; (8003cfc <HAL_UART_MspInit+0x258>)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003b76:	4b63      	ldr	r3, [pc, #396]	; (8003d04 <HAL_UART_MspInit+0x260>)
 8003b78:	4a63      	ldr	r2, [pc, #396]	; (8003d08 <HAL_UART_MspInit+0x264>)
 8003b7a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b7c:	4b61      	ldr	r3, [pc, #388]	; (8003d04 <HAL_UART_MspInit+0x260>)
 8003b7e:	2210      	movs	r2, #16
 8003b80:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b82:	4b60      	ldr	r3, [pc, #384]	; (8003d04 <HAL_UART_MspInit+0x260>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b88:	4b5e      	ldr	r3, [pc, #376]	; (8003d04 <HAL_UART_MspInit+0x260>)
 8003b8a:	2280      	movs	r2, #128	; 0x80
 8003b8c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b8e:	4b5d      	ldr	r3, [pc, #372]	; (8003d04 <HAL_UART_MspInit+0x260>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b94:	4b5b      	ldr	r3, [pc, #364]	; (8003d04 <HAL_UART_MspInit+0x260>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003b9a:	4b5a      	ldr	r3, [pc, #360]	; (8003d04 <HAL_UART_MspInit+0x260>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ba0:	4b58      	ldr	r3, [pc, #352]	; (8003d04 <HAL_UART_MspInit+0x260>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003ba6:	4857      	ldr	r0, [pc, #348]	; (8003d04 <HAL_UART_MspInit+0x260>)
 8003ba8:	f000 fade 	bl	8004168 <HAL_DMA_Init>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8003bb2:	f7ff fdc9 	bl	8003748 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a52      	ldr	r2, [pc, #328]	; (8003d04 <HAL_UART_MspInit+0x260>)
 8003bba:	639a      	str	r2, [r3, #56]	; 0x38
 8003bbc:	4a51      	ldr	r2, [pc, #324]	; (8003d04 <HAL_UART_MspInit+0x260>)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	2025      	movs	r0, #37	; 0x25
 8003bc8:	f000 fa97 	bl	80040fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003bcc:	2025      	movs	r0, #37	; 0x25
 8003bce:	f000 fab0 	bl	8004132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003bd2:	e089      	b.n	8003ce8 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART2)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a4c      	ldr	r2, [pc, #304]	; (8003d0c <HAL_UART_MspInit+0x268>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	f040 8084 	bne.w	8003ce8 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003be0:	4b44      	ldr	r3, [pc, #272]	; (8003cf4 <HAL_UART_MspInit+0x250>)
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	4a43      	ldr	r2, [pc, #268]	; (8003cf4 <HAL_UART_MspInit+0x250>)
 8003be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bea:	61d3      	str	r3, [r2, #28]
 8003bec:	4b41      	ldr	r3, [pc, #260]	; (8003cf4 <HAL_UART_MspInit+0x250>)
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf4:	60fb      	str	r3, [r7, #12]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf8:	4b3e      	ldr	r3, [pc, #248]	; (8003cf4 <HAL_UART_MspInit+0x250>)
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	4a3d      	ldr	r2, [pc, #244]	; (8003cf4 <HAL_UART_MspInit+0x250>)
 8003bfe:	f043 0304 	orr.w	r3, r3, #4
 8003c02:	6193      	str	r3, [r2, #24]
 8003c04:	4b3b      	ldr	r3, [pc, #236]	; (8003cf4 <HAL_UART_MspInit+0x250>)
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	60bb      	str	r3, [r7, #8]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c10:	2304      	movs	r3, #4
 8003c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c14:	2302      	movs	r3, #2
 8003c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c1c:	f107 0318 	add.w	r3, r7, #24
 8003c20:	4619      	mov	r1, r3
 8003c22:	4835      	ldr	r0, [pc, #212]	; (8003cf8 <HAL_UART_MspInit+0x254>)
 8003c24:	f000 fd42 	bl	80046ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003c28:	2308      	movs	r3, #8
 8003c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c30:	2300      	movs	r3, #0
 8003c32:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c34:	f107 0318 	add.w	r3, r7, #24
 8003c38:	4619      	mov	r1, r3
 8003c3a:	482f      	ldr	r0, [pc, #188]	; (8003cf8 <HAL_UART_MspInit+0x254>)
 8003c3c:	f000 fd36 	bl	80046ac <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003c40:	4b33      	ldr	r3, [pc, #204]	; (8003d10 <HAL_UART_MspInit+0x26c>)
 8003c42:	4a34      	ldr	r2, [pc, #208]	; (8003d14 <HAL_UART_MspInit+0x270>)
 8003c44:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c46:	4b32      	ldr	r3, [pc, #200]	; (8003d10 <HAL_UART_MspInit+0x26c>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c4c:	4b30      	ldr	r3, [pc, #192]	; (8003d10 <HAL_UART_MspInit+0x26c>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c52:	4b2f      	ldr	r3, [pc, #188]	; (8003d10 <HAL_UART_MspInit+0x26c>)
 8003c54:	2280      	movs	r2, #128	; 0x80
 8003c56:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c58:	4b2d      	ldr	r3, [pc, #180]	; (8003d10 <HAL_UART_MspInit+0x26c>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c5e:	4b2c      	ldr	r3, [pc, #176]	; (8003d10 <HAL_UART_MspInit+0x26c>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003c64:	4b2a      	ldr	r3, [pc, #168]	; (8003d10 <HAL_UART_MspInit+0x26c>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c6a:	4b29      	ldr	r3, [pc, #164]	; (8003d10 <HAL_UART_MspInit+0x26c>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003c70:	4827      	ldr	r0, [pc, #156]	; (8003d10 <HAL_UART_MspInit+0x26c>)
 8003c72:	f000 fa79 	bl	8004168 <HAL_DMA_Init>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8003c7c:	f7ff fd64 	bl	8003748 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a23      	ldr	r2, [pc, #140]	; (8003d10 <HAL_UART_MspInit+0x26c>)
 8003c84:	63da      	str	r2, [r3, #60]	; 0x3c
 8003c86:	4a22      	ldr	r2, [pc, #136]	; (8003d10 <HAL_UART_MspInit+0x26c>)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8003c8c:	4b22      	ldr	r3, [pc, #136]	; (8003d18 <HAL_UART_MspInit+0x274>)
 8003c8e:	4a23      	ldr	r2, [pc, #140]	; (8003d1c <HAL_UART_MspInit+0x278>)
 8003c90:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c92:	4b21      	ldr	r3, [pc, #132]	; (8003d18 <HAL_UART_MspInit+0x274>)
 8003c94:	2210      	movs	r2, #16
 8003c96:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c98:	4b1f      	ldr	r3, [pc, #124]	; (8003d18 <HAL_UART_MspInit+0x274>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c9e:	4b1e      	ldr	r3, [pc, #120]	; (8003d18 <HAL_UART_MspInit+0x274>)
 8003ca0:	2280      	movs	r2, #128	; 0x80
 8003ca2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ca4:	4b1c      	ldr	r3, [pc, #112]	; (8003d18 <HAL_UART_MspInit+0x274>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003caa:	4b1b      	ldr	r3, [pc, #108]	; (8003d18 <HAL_UART_MspInit+0x274>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003cb0:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <HAL_UART_MspInit+0x274>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003cb6:	4b18      	ldr	r3, [pc, #96]	; (8003d18 <HAL_UART_MspInit+0x274>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003cbc:	4816      	ldr	r0, [pc, #88]	; (8003d18 <HAL_UART_MspInit+0x274>)
 8003cbe:	f000 fa53 	bl	8004168 <HAL_DMA_Init>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <HAL_UART_MspInit+0x228>
      Error_Handler();
 8003cc8:	f7ff fd3e 	bl	8003748 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a12      	ldr	r2, [pc, #72]	; (8003d18 <HAL_UART_MspInit+0x274>)
 8003cd0:	639a      	str	r2, [r3, #56]	; 0x38
 8003cd2:	4a11      	ldr	r2, [pc, #68]	; (8003d18 <HAL_UART_MspInit+0x274>)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003cd8:	2200      	movs	r2, #0
 8003cda:	2100      	movs	r1, #0
 8003cdc:	2026      	movs	r0, #38	; 0x26
 8003cde:	f000 fa0c 	bl	80040fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ce2:	2026      	movs	r0, #38	; 0x26
 8003ce4:	f000 fa25 	bl	8004132 <HAL_NVIC_EnableIRQ>
}
 8003ce8:	bf00      	nop
 8003cea:	3728      	adds	r7, #40	; 0x28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40013800 	.word	0x40013800
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	40010800 	.word	0x40010800
 8003cfc:	200007a0 	.word	0x200007a0
 8003d00:	40020058 	.word	0x40020058
 8003d04:	200007e4 	.word	0x200007e4
 8003d08:	40020044 	.word	0x40020044
 8003d0c:	40004400 	.word	0x40004400
 8003d10:	20000828 	.word	0x20000828
 8003d14:	4002006c 	.word	0x4002006c
 8003d18:	2000086c 	.word	0x2000086c
 8003d1c:	40020080 	.word	0x40020080

08003d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d24:	e7fe      	b.n	8003d24 <NMI_Handler+0x4>

08003d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d26:	b480      	push	{r7}
 8003d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d2a:	e7fe      	b.n	8003d2a <HardFault_Handler+0x4>

08003d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d30:	e7fe      	b.n	8003d30 <MemManage_Handler+0x4>

08003d32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d32:	b480      	push	{r7}
 8003d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d36:	e7fe      	b.n	8003d36 <BusFault_Handler+0x4>

08003d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d3c:	e7fe      	b.n	8003d3c <UsageFault_Handler+0x4>

08003d3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d42:	bf00      	nop
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc80      	pop	{r7}
 8003d48:	4770      	bx	lr

08003d4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d4e:	bf00      	nop
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc80      	pop	{r7}
 8003d54:	4770      	bx	lr

08003d56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d56:	b480      	push	{r7}
 8003d58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d5a:	bf00      	nop
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr

08003d62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d66:	f000 f8b1 	bl	8003ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d6a:	bf00      	nop
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003d74:	4802      	ldr	r0, [pc, #8]	; (8003d80 <DMA1_Channel4_IRQHandler+0x10>)
 8003d76:	f000 fb65 	bl	8004444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003d7a:	bf00      	nop
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	200007e4 	.word	0x200007e4

08003d84 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003d88:	4802      	ldr	r0, [pc, #8]	; (8003d94 <DMA1_Channel5_IRQHandler+0x10>)
 8003d8a:	f000 fb5b 	bl	8004444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003d8e:	bf00      	nop
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	200007a0 	.word	0x200007a0

08003d98 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003d9c:	4802      	ldr	r0, [pc, #8]	; (8003da8 <DMA1_Channel6_IRQHandler+0x10>)
 8003d9e:	f000 fb51 	bl	8004444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003da2:	bf00      	nop
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20000828 	.word	0x20000828

08003dac <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003db0:	4802      	ldr	r0, [pc, #8]	; (8003dbc <DMA1_Channel7_IRQHandler+0x10>)
 8003db2:	f000 fb47 	bl	8004444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8003db6:	bf00      	nop
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	2000086c 	.word	0x2000086c

08003dc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003dc4:	4802      	ldr	r0, [pc, #8]	; (8003dd0 <USART1_IRQHandler+0x10>)
 8003dc6:	f003 f933 	bl	8007030 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003dca:	bf00      	nop
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000710 	.word	0x20000710

08003dd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003dd8:	4802      	ldr	r0, [pc, #8]	; (8003de4 <USART2_IRQHandler+0x10>)
 8003dda:	f003 f929 	bl	8007030 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003dde:	bf00      	nop
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000758 	.word	0x20000758

08003de8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003dec:	bf00      	nop
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr

08003df4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003df4:	f7ff fff8 	bl	8003de8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003df8:	480b      	ldr	r0, [pc, #44]	; (8003e28 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003dfa:	490c      	ldr	r1, [pc, #48]	; (8003e2c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003dfc:	4a0c      	ldr	r2, [pc, #48]	; (8003e30 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e00:	e002      	b.n	8003e08 <LoopCopyDataInit>

08003e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e06:	3304      	adds	r3, #4

08003e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e0c:	d3f9      	bcc.n	8003e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e0e:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003e10:	4c09      	ldr	r4, [pc, #36]	; (8003e38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e14:	e001      	b.n	8003e1a <LoopFillZerobss>

08003e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e18:	3204      	adds	r2, #4

08003e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e1c:	d3fb      	bcc.n	8003e16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e1e:	f003 fef3 	bl	8007c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e22:	f7ff f997 	bl	8003154 <main>
  bx lr
 8003e26:	4770      	bx	lr
  ldr r0, =_sdata
 8003e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e2c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8003e30:	08008da0 	.word	0x08008da0
  ldr r2, =_sbss
 8003e34:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8003e38:	20000938 	.word	0x20000938

08003e3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e3c:	e7fe      	b.n	8003e3c <ADC1_2_IRQHandler>
	...

08003e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e44:	4b08      	ldr	r3, [pc, #32]	; (8003e68 <HAL_Init+0x28>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a07      	ldr	r2, [pc, #28]	; (8003e68 <HAL_Init+0x28>)
 8003e4a:	f043 0310 	orr.w	r3, r3, #16
 8003e4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e50:	2003      	movs	r0, #3
 8003e52:	f000 f947 	bl	80040e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e56:	200f      	movs	r0, #15
 8003e58:	f000 f808 	bl	8003e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e5c:	f7ff fd5a 	bl	8003914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40022000 	.word	0x40022000

08003e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e74:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <HAL_InitTick+0x54>)
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	4b12      	ldr	r3, [pc, #72]	; (8003ec4 <HAL_InitTick+0x58>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 f95f 	bl	800414e <HAL_SYSTICK_Config>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e00e      	b.n	8003eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b0f      	cmp	r3, #15
 8003e9e:	d80a      	bhi.n	8003eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea8:	f000 f927 	bl	80040fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003eac:	4a06      	ldr	r2, [pc, #24]	; (8003ec8 <HAL_InitTick+0x5c>)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	e000      	b.n	8003eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	2000000c 	.word	0x2000000c
 8003ec4:	20000014 	.word	0x20000014
 8003ec8:	20000010 	.word	0x20000010

08003ecc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ed0:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <HAL_IncTick+0x1c>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	4b05      	ldr	r3, [pc, #20]	; (8003eec <HAL_IncTick+0x20>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4413      	add	r3, r2
 8003edc:	4a03      	ldr	r2, [pc, #12]	; (8003eec <HAL_IncTick+0x20>)
 8003ede:	6013      	str	r3, [r2, #0]
}
 8003ee0:	bf00      	nop
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr
 8003ee8:	20000014 	.word	0x20000014
 8003eec:	20000934 	.word	0x20000934

08003ef0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ef4:	4b02      	ldr	r3, [pc, #8]	; (8003f00 <HAL_GetTick+0x10>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr
 8003f00:	20000934 	.word	0x20000934

08003f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f0c:	f7ff fff0 	bl	8003ef0 <HAL_GetTick>
 8003f10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1c:	d005      	beq.n	8003f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <HAL_Delay+0x44>)
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4413      	add	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f2a:	bf00      	nop
 8003f2c:	f7ff ffe0 	bl	8003ef0 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d8f7      	bhi.n	8003f2c <HAL_Delay+0x28>
  {
  }
}
 8003f3c:	bf00      	nop
 8003f3e:	bf00      	nop
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20000014 	.word	0x20000014

08003f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <__NVIC_SetPriorityGrouping+0x44>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f68:	4013      	ands	r3, r2
 8003f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f7e:	4a04      	ldr	r2, [pc, #16]	; (8003f90 <__NVIC_SetPriorityGrouping+0x44>)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	60d3      	str	r3, [r2, #12]
}
 8003f84:	bf00      	nop
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bc80      	pop	{r7}
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	e000ed00 	.word	0xe000ed00

08003f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f98:	4b04      	ldr	r3, [pc, #16]	; (8003fac <__NVIC_GetPriorityGrouping+0x18>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	0a1b      	lsrs	r3, r3, #8
 8003f9e:	f003 0307 	and.w	r3, r3, #7
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	e000ed00 	.word	0xe000ed00

08003fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	db0b      	blt.n	8003fda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fc2:	79fb      	ldrb	r3, [r7, #7]
 8003fc4:	f003 021f 	and.w	r2, r3, #31
 8003fc8:	4906      	ldr	r1, [pc, #24]	; (8003fe4 <__NVIC_EnableIRQ+0x34>)
 8003fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	2001      	movs	r0, #1
 8003fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8003fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bc80      	pop	{r7}
 8003fe2:	4770      	bx	lr
 8003fe4:	e000e100 	.word	0xe000e100

08003fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	6039      	str	r1, [r7, #0]
 8003ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	db0a      	blt.n	8004012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	490c      	ldr	r1, [pc, #48]	; (8004034 <__NVIC_SetPriority+0x4c>)
 8004002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004006:	0112      	lsls	r2, r2, #4
 8004008:	b2d2      	uxtb	r2, r2
 800400a:	440b      	add	r3, r1
 800400c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004010:	e00a      	b.n	8004028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	b2da      	uxtb	r2, r3
 8004016:	4908      	ldr	r1, [pc, #32]	; (8004038 <__NVIC_SetPriority+0x50>)
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	3b04      	subs	r3, #4
 8004020:	0112      	lsls	r2, r2, #4
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	440b      	add	r3, r1
 8004026:	761a      	strb	r2, [r3, #24]
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	bc80      	pop	{r7}
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	e000e100 	.word	0xe000e100
 8004038:	e000ed00 	.word	0xe000ed00

0800403c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800403c:	b480      	push	{r7}
 800403e:	b089      	sub	sp, #36	; 0x24
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f1c3 0307 	rsb	r3, r3, #7
 8004056:	2b04      	cmp	r3, #4
 8004058:	bf28      	it	cs
 800405a:	2304      	movcs	r3, #4
 800405c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	3304      	adds	r3, #4
 8004062:	2b06      	cmp	r3, #6
 8004064:	d902      	bls.n	800406c <NVIC_EncodePriority+0x30>
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	3b03      	subs	r3, #3
 800406a:	e000      	b.n	800406e <NVIC_EncodePriority+0x32>
 800406c:	2300      	movs	r3, #0
 800406e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004070:	f04f 32ff 	mov.w	r2, #4294967295
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	43da      	mvns	r2, r3
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	401a      	ands	r2, r3
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004084:	f04f 31ff 	mov.w	r1, #4294967295
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	fa01 f303 	lsl.w	r3, r1, r3
 800408e:	43d9      	mvns	r1, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004094:	4313      	orrs	r3, r2
         );
}
 8004096:	4618      	mov	r0, r3
 8004098:	3724      	adds	r7, #36	; 0x24
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr

080040a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040b0:	d301      	bcc.n	80040b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040b2:	2301      	movs	r3, #1
 80040b4:	e00f      	b.n	80040d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040b6:	4a0a      	ldr	r2, [pc, #40]	; (80040e0 <SysTick_Config+0x40>)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040be:	210f      	movs	r1, #15
 80040c0:	f04f 30ff 	mov.w	r0, #4294967295
 80040c4:	f7ff ff90 	bl	8003fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040c8:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <SysTick_Config+0x40>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040ce:	4b04      	ldr	r3, [pc, #16]	; (80040e0 <SysTick_Config+0x40>)
 80040d0:	2207      	movs	r2, #7
 80040d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	e000e010 	.word	0xe000e010

080040e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7ff ff2d 	bl	8003f4c <__NVIC_SetPriorityGrouping>
}
 80040f2:	bf00      	nop
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b086      	sub	sp, #24
 80040fe:	af00      	add	r7, sp, #0
 8004100:	4603      	mov	r3, r0
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004108:	2300      	movs	r3, #0
 800410a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800410c:	f7ff ff42 	bl	8003f94 <__NVIC_GetPriorityGrouping>
 8004110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	68b9      	ldr	r1, [r7, #8]
 8004116:	6978      	ldr	r0, [r7, #20]
 8004118:	f7ff ff90 	bl	800403c <NVIC_EncodePriority>
 800411c:	4602      	mov	r2, r0
 800411e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004122:	4611      	mov	r1, r2
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff ff5f 	bl	8003fe8 <__NVIC_SetPriority>
}
 800412a:	bf00      	nop
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b082      	sub	sp, #8
 8004136:	af00      	add	r7, sp, #0
 8004138:	4603      	mov	r3, r0
 800413a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800413c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff ff35 	bl	8003fb0 <__NVIC_EnableIRQ>
}
 8004146:	bf00      	nop
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b082      	sub	sp, #8
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7ff ffa2 	bl	80040a0 <SysTick_Config>
 800415c:	4603      	mov	r3, r0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
	...

08004168 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e043      	b.n	8004206 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	4b22      	ldr	r3, [pc, #136]	; (8004210 <HAL_DMA_Init+0xa8>)
 8004186:	4413      	add	r3, r2
 8004188:	4a22      	ldr	r2, [pc, #136]	; (8004214 <HAL_DMA_Init+0xac>)
 800418a:	fba2 2303 	umull	r2, r3, r2, r3
 800418e:	091b      	lsrs	r3, r3, #4
 8004190:	009a      	lsls	r2, r3, #2
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a1f      	ldr	r2, [pc, #124]	; (8004218 <HAL_DMA_Init+0xb0>)
 800419a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80041b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80041b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80041c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr
 8004210:	bffdfff8 	.word	0xbffdfff8
 8004214:	cccccccd 	.word	0xcccccccd
 8004218:	40020000 	.word	0x40020000

0800421c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
 8004228:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_DMA_Start_IT+0x20>
 8004238:	2302      	movs	r3, #2
 800423a:	e04b      	b.n	80042d4 <HAL_DMA_Start_IT+0xb8>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b01      	cmp	r3, #1
 800424e:	d13a      	bne.n	80042c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0201 	bic.w	r2, r2, #1
 800426c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	68b9      	ldr	r1, [r7, #8]
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 f9eb 	bl	8004650 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427e:	2b00      	cmp	r3, #0
 8004280:	d008      	beq.n	8004294 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 020e 	orr.w	r2, r2, #14
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	e00f      	b.n	80042b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0204 	bic.w	r2, r2, #4
 80042a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 020a 	orr.w	r2, r2, #10
 80042b2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0201 	orr.w	r2, r2, #1
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	e005      	b.n	80042d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80042ce:	2302      	movs	r3, #2
 80042d0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80042d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d008      	beq.n	8004306 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2204      	movs	r2, #4
 80042f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e020      	b.n	8004348 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 020e 	bic.w	r2, r2, #14
 8004314:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0201 	bic.w	r2, r2, #1
 8004324:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432e:	2101      	movs	r1, #1
 8004330:	fa01 f202 	lsl.w	r2, r1, r2
 8004334:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004346:	7bfb      	ldrb	r3, [r7, #15]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	bc80      	pop	{r7}
 8004350:	4770      	bx	lr
	...

08004354 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800435c:	2300      	movs	r3, #0
 800435e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d005      	beq.n	8004378 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2204      	movs	r2, #4
 8004370:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	73fb      	strb	r3, [r7, #15]
 8004376:	e051      	b.n	800441c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 020e 	bic.w	r2, r2, #14
 8004386:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0201 	bic.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a22      	ldr	r2, [pc, #136]	; (8004428 <HAL_DMA_Abort_IT+0xd4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d029      	beq.n	80043f6 <HAL_DMA_Abort_IT+0xa2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a21      	ldr	r2, [pc, #132]	; (800442c <HAL_DMA_Abort_IT+0xd8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d022      	beq.n	80043f2 <HAL_DMA_Abort_IT+0x9e>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1f      	ldr	r2, [pc, #124]	; (8004430 <HAL_DMA_Abort_IT+0xdc>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d01a      	beq.n	80043ec <HAL_DMA_Abort_IT+0x98>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a1e      	ldr	r2, [pc, #120]	; (8004434 <HAL_DMA_Abort_IT+0xe0>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d012      	beq.n	80043e6 <HAL_DMA_Abort_IT+0x92>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a1c      	ldr	r2, [pc, #112]	; (8004438 <HAL_DMA_Abort_IT+0xe4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d00a      	beq.n	80043e0 <HAL_DMA_Abort_IT+0x8c>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a1b      	ldr	r2, [pc, #108]	; (800443c <HAL_DMA_Abort_IT+0xe8>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d102      	bne.n	80043da <HAL_DMA_Abort_IT+0x86>
 80043d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80043d8:	e00e      	b.n	80043f8 <HAL_DMA_Abort_IT+0xa4>
 80043da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043de:	e00b      	b.n	80043f8 <HAL_DMA_Abort_IT+0xa4>
 80043e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043e4:	e008      	b.n	80043f8 <HAL_DMA_Abort_IT+0xa4>
 80043e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043ea:	e005      	b.n	80043f8 <HAL_DMA_Abort_IT+0xa4>
 80043ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043f0:	e002      	b.n	80043f8 <HAL_DMA_Abort_IT+0xa4>
 80043f2:	2310      	movs	r3, #16
 80043f4:	e000      	b.n	80043f8 <HAL_DMA_Abort_IT+0xa4>
 80043f6:	2301      	movs	r3, #1
 80043f8:	4a11      	ldr	r2, [pc, #68]	; (8004440 <HAL_DMA_Abort_IT+0xec>)
 80043fa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	4798      	blx	r3
    } 
  }
  return status;
 800441c:	7bfb      	ldrb	r3, [r7, #15]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40020008 	.word	0x40020008
 800442c:	4002001c 	.word	0x4002001c
 8004430:	40020030 	.word	0x40020030
 8004434:	40020044 	.word	0x40020044
 8004438:	40020058 	.word	0x40020058
 800443c:	4002006c 	.word	0x4002006c
 8004440:	40020000 	.word	0x40020000

08004444 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	2204      	movs	r2, #4
 8004462:	409a      	lsls	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4013      	ands	r3, r2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d04f      	beq.n	800450c <HAL_DMA_IRQHandler+0xc8>
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f003 0304 	and.w	r3, r3, #4
 8004472:	2b00      	cmp	r3, #0
 8004474:	d04a      	beq.n	800450c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0320 	and.w	r3, r3, #32
 8004480:	2b00      	cmp	r3, #0
 8004482:	d107      	bne.n	8004494 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0204 	bic.w	r2, r2, #4
 8004492:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a66      	ldr	r2, [pc, #408]	; (8004634 <HAL_DMA_IRQHandler+0x1f0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d029      	beq.n	80044f2 <HAL_DMA_IRQHandler+0xae>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a65      	ldr	r2, [pc, #404]	; (8004638 <HAL_DMA_IRQHandler+0x1f4>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d022      	beq.n	80044ee <HAL_DMA_IRQHandler+0xaa>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a63      	ldr	r2, [pc, #396]	; (800463c <HAL_DMA_IRQHandler+0x1f8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d01a      	beq.n	80044e8 <HAL_DMA_IRQHandler+0xa4>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a62      	ldr	r2, [pc, #392]	; (8004640 <HAL_DMA_IRQHandler+0x1fc>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d012      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x9e>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a60      	ldr	r2, [pc, #384]	; (8004644 <HAL_DMA_IRQHandler+0x200>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00a      	beq.n	80044dc <HAL_DMA_IRQHandler+0x98>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a5f      	ldr	r2, [pc, #380]	; (8004648 <HAL_DMA_IRQHandler+0x204>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d102      	bne.n	80044d6 <HAL_DMA_IRQHandler+0x92>
 80044d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80044d4:	e00e      	b.n	80044f4 <HAL_DMA_IRQHandler+0xb0>
 80044d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80044da:	e00b      	b.n	80044f4 <HAL_DMA_IRQHandler+0xb0>
 80044dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80044e0:	e008      	b.n	80044f4 <HAL_DMA_IRQHandler+0xb0>
 80044e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044e6:	e005      	b.n	80044f4 <HAL_DMA_IRQHandler+0xb0>
 80044e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044ec:	e002      	b.n	80044f4 <HAL_DMA_IRQHandler+0xb0>
 80044ee:	2340      	movs	r3, #64	; 0x40
 80044f0:	e000      	b.n	80044f4 <HAL_DMA_IRQHandler+0xb0>
 80044f2:	2304      	movs	r3, #4
 80044f4:	4a55      	ldr	r2, [pc, #340]	; (800464c <HAL_DMA_IRQHandler+0x208>)
 80044f6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 8094 	beq.w	800462a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800450a:	e08e      	b.n	800462a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	2202      	movs	r2, #2
 8004512:	409a      	lsls	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4013      	ands	r3, r2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d056      	beq.n	80045ca <HAL_DMA_IRQHandler+0x186>
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d051      	beq.n	80045ca <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0320 	and.w	r3, r3, #32
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10b      	bne.n	800454c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 020a 	bic.w	r2, r2, #10
 8004542:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a38      	ldr	r2, [pc, #224]	; (8004634 <HAL_DMA_IRQHandler+0x1f0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d029      	beq.n	80045aa <HAL_DMA_IRQHandler+0x166>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a37      	ldr	r2, [pc, #220]	; (8004638 <HAL_DMA_IRQHandler+0x1f4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d022      	beq.n	80045a6 <HAL_DMA_IRQHandler+0x162>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a35      	ldr	r2, [pc, #212]	; (800463c <HAL_DMA_IRQHandler+0x1f8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d01a      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x15c>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a34      	ldr	r2, [pc, #208]	; (8004640 <HAL_DMA_IRQHandler+0x1fc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d012      	beq.n	800459a <HAL_DMA_IRQHandler+0x156>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a32      	ldr	r2, [pc, #200]	; (8004644 <HAL_DMA_IRQHandler+0x200>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d00a      	beq.n	8004594 <HAL_DMA_IRQHandler+0x150>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a31      	ldr	r2, [pc, #196]	; (8004648 <HAL_DMA_IRQHandler+0x204>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d102      	bne.n	800458e <HAL_DMA_IRQHandler+0x14a>
 8004588:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800458c:	e00e      	b.n	80045ac <HAL_DMA_IRQHandler+0x168>
 800458e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004592:	e00b      	b.n	80045ac <HAL_DMA_IRQHandler+0x168>
 8004594:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004598:	e008      	b.n	80045ac <HAL_DMA_IRQHandler+0x168>
 800459a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800459e:	e005      	b.n	80045ac <HAL_DMA_IRQHandler+0x168>
 80045a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045a4:	e002      	b.n	80045ac <HAL_DMA_IRQHandler+0x168>
 80045a6:	2320      	movs	r3, #32
 80045a8:	e000      	b.n	80045ac <HAL_DMA_IRQHandler+0x168>
 80045aa:	2302      	movs	r3, #2
 80045ac:	4a27      	ldr	r2, [pc, #156]	; (800464c <HAL_DMA_IRQHandler+0x208>)
 80045ae:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d034      	beq.n	800462a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80045c8:	e02f      	b.n	800462a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	2208      	movs	r2, #8
 80045d0:	409a      	lsls	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4013      	ands	r3, r2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d028      	beq.n	800462c <HAL_DMA_IRQHandler+0x1e8>
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d023      	beq.n	800462c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 020e 	bic.w	r2, r2, #14
 80045f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fc:	2101      	movs	r1, #1
 80045fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004602:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	2b00      	cmp	r3, #0
 8004620:	d004      	beq.n	800462c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	4798      	blx	r3
    }
  }
  return;
 800462a:	bf00      	nop
 800462c:	bf00      	nop
}
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40020008 	.word	0x40020008
 8004638:	4002001c 	.word	0x4002001c
 800463c:	40020030 	.word	0x40020030
 8004640:	40020044 	.word	0x40020044
 8004644:	40020058 	.word	0x40020058
 8004648:	4002006c 	.word	0x4002006c
 800464c:	40020000 	.word	0x40020000

08004650 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004666:	2101      	movs	r1, #1
 8004668:	fa01 f202 	lsl.w	r2, r1, r2
 800466c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b10      	cmp	r3, #16
 800467c:	d108      	bne.n	8004690 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800468e:	e007      	b.n	80046a0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	60da      	str	r2, [r3, #12]
}
 80046a0:	bf00      	nop
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr
	...

080046ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b08b      	sub	sp, #44	; 0x2c
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046b6:	2300      	movs	r3, #0
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80046ba:	2300      	movs	r3, #0
 80046bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046be:	e169      	b.n	8004994 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80046c0:	2201      	movs	r2, #1
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69fa      	ldr	r2, [r7, #28]
 80046d0:	4013      	ands	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	429a      	cmp	r2, r3
 80046da:	f040 8158 	bne.w	800498e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	4a9a      	ldr	r2, [pc, #616]	; (800494c <HAL_GPIO_Init+0x2a0>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d05e      	beq.n	80047a6 <HAL_GPIO_Init+0xfa>
 80046e8:	4a98      	ldr	r2, [pc, #608]	; (800494c <HAL_GPIO_Init+0x2a0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d875      	bhi.n	80047da <HAL_GPIO_Init+0x12e>
 80046ee:	4a98      	ldr	r2, [pc, #608]	; (8004950 <HAL_GPIO_Init+0x2a4>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d058      	beq.n	80047a6 <HAL_GPIO_Init+0xfa>
 80046f4:	4a96      	ldr	r2, [pc, #600]	; (8004950 <HAL_GPIO_Init+0x2a4>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d86f      	bhi.n	80047da <HAL_GPIO_Init+0x12e>
 80046fa:	4a96      	ldr	r2, [pc, #600]	; (8004954 <HAL_GPIO_Init+0x2a8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d052      	beq.n	80047a6 <HAL_GPIO_Init+0xfa>
 8004700:	4a94      	ldr	r2, [pc, #592]	; (8004954 <HAL_GPIO_Init+0x2a8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d869      	bhi.n	80047da <HAL_GPIO_Init+0x12e>
 8004706:	4a94      	ldr	r2, [pc, #592]	; (8004958 <HAL_GPIO_Init+0x2ac>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d04c      	beq.n	80047a6 <HAL_GPIO_Init+0xfa>
 800470c:	4a92      	ldr	r2, [pc, #584]	; (8004958 <HAL_GPIO_Init+0x2ac>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d863      	bhi.n	80047da <HAL_GPIO_Init+0x12e>
 8004712:	4a92      	ldr	r2, [pc, #584]	; (800495c <HAL_GPIO_Init+0x2b0>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d046      	beq.n	80047a6 <HAL_GPIO_Init+0xfa>
 8004718:	4a90      	ldr	r2, [pc, #576]	; (800495c <HAL_GPIO_Init+0x2b0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d85d      	bhi.n	80047da <HAL_GPIO_Init+0x12e>
 800471e:	2b12      	cmp	r3, #18
 8004720:	d82a      	bhi.n	8004778 <HAL_GPIO_Init+0xcc>
 8004722:	2b12      	cmp	r3, #18
 8004724:	d859      	bhi.n	80047da <HAL_GPIO_Init+0x12e>
 8004726:	a201      	add	r2, pc, #4	; (adr r2, 800472c <HAL_GPIO_Init+0x80>)
 8004728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472c:	080047a7 	.word	0x080047a7
 8004730:	08004781 	.word	0x08004781
 8004734:	08004793 	.word	0x08004793
 8004738:	080047d5 	.word	0x080047d5
 800473c:	080047db 	.word	0x080047db
 8004740:	080047db 	.word	0x080047db
 8004744:	080047db 	.word	0x080047db
 8004748:	080047db 	.word	0x080047db
 800474c:	080047db 	.word	0x080047db
 8004750:	080047db 	.word	0x080047db
 8004754:	080047db 	.word	0x080047db
 8004758:	080047db 	.word	0x080047db
 800475c:	080047db 	.word	0x080047db
 8004760:	080047db 	.word	0x080047db
 8004764:	080047db 	.word	0x080047db
 8004768:	080047db 	.word	0x080047db
 800476c:	080047db 	.word	0x080047db
 8004770:	08004789 	.word	0x08004789
 8004774:	0800479d 	.word	0x0800479d
 8004778:	4a79      	ldr	r2, [pc, #484]	; (8004960 <HAL_GPIO_Init+0x2b4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d013      	beq.n	80047a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800477e:	e02c      	b.n	80047da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	623b      	str	r3, [r7, #32]
          break;
 8004786:	e029      	b.n	80047dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	3304      	adds	r3, #4
 800478e:	623b      	str	r3, [r7, #32]
          break;
 8004790:	e024      	b.n	80047dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	3308      	adds	r3, #8
 8004798:	623b      	str	r3, [r7, #32]
          break;
 800479a:	e01f      	b.n	80047dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	330c      	adds	r3, #12
 80047a2:	623b      	str	r3, [r7, #32]
          break;
 80047a4:	e01a      	b.n	80047dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d102      	bne.n	80047b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80047ae:	2304      	movs	r3, #4
 80047b0:	623b      	str	r3, [r7, #32]
          break;
 80047b2:	e013      	b.n	80047dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d105      	bne.n	80047c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047bc:	2308      	movs	r3, #8
 80047be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	69fa      	ldr	r2, [r7, #28]
 80047c4:	611a      	str	r2, [r3, #16]
          break;
 80047c6:	e009      	b.n	80047dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047c8:	2308      	movs	r3, #8
 80047ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	69fa      	ldr	r2, [r7, #28]
 80047d0:	615a      	str	r2, [r3, #20]
          break;
 80047d2:	e003      	b.n	80047dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80047d4:	2300      	movs	r3, #0
 80047d6:	623b      	str	r3, [r7, #32]
          break;
 80047d8:	e000      	b.n	80047dc <HAL_GPIO_Init+0x130>
          break;
 80047da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2bff      	cmp	r3, #255	; 0xff
 80047e0:	d801      	bhi.n	80047e6 <HAL_GPIO_Init+0x13a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	e001      	b.n	80047ea <HAL_GPIO_Init+0x13e>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3304      	adds	r3, #4
 80047ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	2bff      	cmp	r3, #255	; 0xff
 80047f0:	d802      	bhi.n	80047f8 <HAL_GPIO_Init+0x14c>
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	e002      	b.n	80047fe <HAL_GPIO_Init+0x152>
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	3b08      	subs	r3, #8
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	210f      	movs	r1, #15
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	fa01 f303 	lsl.w	r3, r1, r3
 800480c:	43db      	mvns	r3, r3
 800480e:	401a      	ands	r2, r3
 8004810:	6a39      	ldr	r1, [r7, #32]
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	fa01 f303 	lsl.w	r3, r1, r3
 8004818:	431a      	orrs	r2, r3
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 80b1 	beq.w	800498e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800482c:	4b4d      	ldr	r3, [pc, #308]	; (8004964 <HAL_GPIO_Init+0x2b8>)
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	4a4c      	ldr	r2, [pc, #304]	; (8004964 <HAL_GPIO_Init+0x2b8>)
 8004832:	f043 0301 	orr.w	r3, r3, #1
 8004836:	6193      	str	r3, [r2, #24]
 8004838:	4b4a      	ldr	r3, [pc, #296]	; (8004964 <HAL_GPIO_Init+0x2b8>)
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	60bb      	str	r3, [r7, #8]
 8004842:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004844:	4a48      	ldr	r2, [pc, #288]	; (8004968 <HAL_GPIO_Init+0x2bc>)
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	089b      	lsrs	r3, r3, #2
 800484a:	3302      	adds	r3, #2
 800484c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004850:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	f003 0303 	and.w	r3, r3, #3
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	220f      	movs	r2, #15
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	43db      	mvns	r3, r3
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	4013      	ands	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a40      	ldr	r2, [pc, #256]	; (800496c <HAL_GPIO_Init+0x2c0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d013      	beq.n	8004898 <HAL_GPIO_Init+0x1ec>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a3f      	ldr	r2, [pc, #252]	; (8004970 <HAL_GPIO_Init+0x2c4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d00d      	beq.n	8004894 <HAL_GPIO_Init+0x1e8>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a3e      	ldr	r2, [pc, #248]	; (8004974 <HAL_GPIO_Init+0x2c8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d007      	beq.n	8004890 <HAL_GPIO_Init+0x1e4>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a3d      	ldr	r2, [pc, #244]	; (8004978 <HAL_GPIO_Init+0x2cc>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d101      	bne.n	800488c <HAL_GPIO_Init+0x1e0>
 8004888:	2303      	movs	r3, #3
 800488a:	e006      	b.n	800489a <HAL_GPIO_Init+0x1ee>
 800488c:	2304      	movs	r3, #4
 800488e:	e004      	b.n	800489a <HAL_GPIO_Init+0x1ee>
 8004890:	2302      	movs	r3, #2
 8004892:	e002      	b.n	800489a <HAL_GPIO_Init+0x1ee>
 8004894:	2301      	movs	r3, #1
 8004896:	e000      	b.n	800489a <HAL_GPIO_Init+0x1ee>
 8004898:	2300      	movs	r3, #0
 800489a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489c:	f002 0203 	and.w	r2, r2, #3
 80048a0:	0092      	lsls	r2, r2, #2
 80048a2:	4093      	lsls	r3, r2
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80048aa:	492f      	ldr	r1, [pc, #188]	; (8004968 <HAL_GPIO_Init+0x2bc>)
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	089b      	lsrs	r3, r3, #2
 80048b0:	3302      	adds	r3, #2
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d006      	beq.n	80048d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80048c4:	4b2d      	ldr	r3, [pc, #180]	; (800497c <HAL_GPIO_Init+0x2d0>)
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	492c      	ldr	r1, [pc, #176]	; (800497c <HAL_GPIO_Init+0x2d0>)
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	608b      	str	r3, [r1, #8]
 80048d0:	e006      	b.n	80048e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80048d2:	4b2a      	ldr	r3, [pc, #168]	; (800497c <HAL_GPIO_Init+0x2d0>)
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	43db      	mvns	r3, r3
 80048da:	4928      	ldr	r1, [pc, #160]	; (800497c <HAL_GPIO_Init+0x2d0>)
 80048dc:	4013      	ands	r3, r2
 80048de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d006      	beq.n	80048fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80048ec:	4b23      	ldr	r3, [pc, #140]	; (800497c <HAL_GPIO_Init+0x2d0>)
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	4922      	ldr	r1, [pc, #136]	; (800497c <HAL_GPIO_Init+0x2d0>)
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60cb      	str	r3, [r1, #12]
 80048f8:	e006      	b.n	8004908 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80048fa:	4b20      	ldr	r3, [pc, #128]	; (800497c <HAL_GPIO_Init+0x2d0>)
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	43db      	mvns	r3, r3
 8004902:	491e      	ldr	r1, [pc, #120]	; (800497c <HAL_GPIO_Init+0x2d0>)
 8004904:	4013      	ands	r3, r2
 8004906:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d006      	beq.n	8004922 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004914:	4b19      	ldr	r3, [pc, #100]	; (800497c <HAL_GPIO_Init+0x2d0>)
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	4918      	ldr	r1, [pc, #96]	; (800497c <HAL_GPIO_Init+0x2d0>)
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	4313      	orrs	r3, r2
 800491e:	604b      	str	r3, [r1, #4]
 8004920:	e006      	b.n	8004930 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004922:	4b16      	ldr	r3, [pc, #88]	; (800497c <HAL_GPIO_Init+0x2d0>)
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	43db      	mvns	r3, r3
 800492a:	4914      	ldr	r1, [pc, #80]	; (800497c <HAL_GPIO_Init+0x2d0>)
 800492c:	4013      	ands	r3, r2
 800492e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d021      	beq.n	8004980 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800493c:	4b0f      	ldr	r3, [pc, #60]	; (800497c <HAL_GPIO_Init+0x2d0>)
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	490e      	ldr	r1, [pc, #56]	; (800497c <HAL_GPIO_Init+0x2d0>)
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	4313      	orrs	r3, r2
 8004946:	600b      	str	r3, [r1, #0]
 8004948:	e021      	b.n	800498e <HAL_GPIO_Init+0x2e2>
 800494a:	bf00      	nop
 800494c:	10320000 	.word	0x10320000
 8004950:	10310000 	.word	0x10310000
 8004954:	10220000 	.word	0x10220000
 8004958:	10210000 	.word	0x10210000
 800495c:	10120000 	.word	0x10120000
 8004960:	10110000 	.word	0x10110000
 8004964:	40021000 	.word	0x40021000
 8004968:	40010000 	.word	0x40010000
 800496c:	40010800 	.word	0x40010800
 8004970:	40010c00 	.word	0x40010c00
 8004974:	40011000 	.word	0x40011000
 8004978:	40011400 	.word	0x40011400
 800497c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004980:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <HAL_GPIO_Init+0x304>)
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	43db      	mvns	r3, r3
 8004988:	4909      	ldr	r1, [pc, #36]	; (80049b0 <HAL_GPIO_Init+0x304>)
 800498a:	4013      	ands	r3, r2
 800498c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	3301      	adds	r3, #1
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	fa22 f303 	lsr.w	r3, r2, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f47f ae8e 	bne.w	80046c0 <HAL_GPIO_Init+0x14>
  }
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop
 80049a8:	372c      	adds	r7, #44	; 0x2c
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bc80      	pop	{r7}
 80049ae:	4770      	bx	lr
 80049b0:	40010400 	.word	0x40010400

080049b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b089      	sub	sp, #36	; 0x24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049be:	2300      	movs	r3, #0
 80049c0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80049c2:	e09a      	b.n	8004afa <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80049c4:	2201      	movs	r2, #1
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	4013      	ands	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 808d 	beq.w	8004af4 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80049da:	4a4e      	ldr	r2, [pc, #312]	; (8004b14 <HAL_GPIO_DeInit+0x160>)
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	089b      	lsrs	r3, r3, #2
 80049e0:	3302      	adds	r3, #2
 80049e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049e6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	220f      	movs	r2, #15
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4013      	ands	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a46      	ldr	r2, [pc, #280]	; (8004b18 <HAL_GPIO_DeInit+0x164>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d013      	beq.n	8004a2c <HAL_GPIO_DeInit+0x78>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a45      	ldr	r2, [pc, #276]	; (8004b1c <HAL_GPIO_DeInit+0x168>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d00d      	beq.n	8004a28 <HAL_GPIO_DeInit+0x74>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a44      	ldr	r2, [pc, #272]	; (8004b20 <HAL_GPIO_DeInit+0x16c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d007      	beq.n	8004a24 <HAL_GPIO_DeInit+0x70>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a43      	ldr	r2, [pc, #268]	; (8004b24 <HAL_GPIO_DeInit+0x170>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d101      	bne.n	8004a20 <HAL_GPIO_DeInit+0x6c>
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e006      	b.n	8004a2e <HAL_GPIO_DeInit+0x7a>
 8004a20:	2304      	movs	r3, #4
 8004a22:	e004      	b.n	8004a2e <HAL_GPIO_DeInit+0x7a>
 8004a24:	2302      	movs	r3, #2
 8004a26:	e002      	b.n	8004a2e <HAL_GPIO_DeInit+0x7a>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e000      	b.n	8004a2e <HAL_GPIO_DeInit+0x7a>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	69fa      	ldr	r2, [r7, #28]
 8004a30:	f002 0203 	and.w	r2, r2, #3
 8004a34:	0092      	lsls	r2, r2, #2
 8004a36:	4093      	lsls	r3, r2
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d132      	bne.n	8004aa4 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8004a3e:	4b3a      	ldr	r3, [pc, #232]	; (8004b28 <HAL_GPIO_DeInit+0x174>)
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	43db      	mvns	r3, r3
 8004a46:	4938      	ldr	r1, [pc, #224]	; (8004b28 <HAL_GPIO_DeInit+0x174>)
 8004a48:	4013      	ands	r3, r2
 8004a4a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8004a4c:	4b36      	ldr	r3, [pc, #216]	; (8004b28 <HAL_GPIO_DeInit+0x174>)
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	43db      	mvns	r3, r3
 8004a54:	4934      	ldr	r1, [pc, #208]	; (8004b28 <HAL_GPIO_DeInit+0x174>)
 8004a56:	4013      	ands	r3, r2
 8004a58:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8004a5a:	4b33      	ldr	r3, [pc, #204]	; (8004b28 <HAL_GPIO_DeInit+0x174>)
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	43db      	mvns	r3, r3
 8004a62:	4931      	ldr	r1, [pc, #196]	; (8004b28 <HAL_GPIO_DeInit+0x174>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8004a68:	4b2f      	ldr	r3, [pc, #188]	; (8004b28 <HAL_GPIO_DeInit+0x174>)
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	43db      	mvns	r3, r3
 8004a70:	492d      	ldr	r1, [pc, #180]	; (8004b28 <HAL_GPIO_DeInit+0x174>)
 8004a72:	4013      	ands	r3, r2
 8004a74:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	f003 0303 	and.w	r3, r3, #3
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	220f      	movs	r2, #15
 8004a80:	fa02 f303 	lsl.w	r3, r2, r3
 8004a84:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8004a86:	4a23      	ldr	r2, [pc, #140]	; (8004b14 <HAL_GPIO_DeInit+0x160>)
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	089b      	lsrs	r3, r3, #2
 8004a8c:	3302      	adds	r3, #2
 8004a8e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	43da      	mvns	r2, r3
 8004a96:	481f      	ldr	r0, [pc, #124]	; (8004b14 <HAL_GPIO_DeInit+0x160>)
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	089b      	lsrs	r3, r3, #2
 8004a9c:	400a      	ands	r2, r1
 8004a9e:	3302      	adds	r3, #2
 8004aa0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	2bff      	cmp	r3, #255	; 0xff
 8004aa8:	d801      	bhi.n	8004aae <HAL_GPIO_DeInit+0xfa>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	e001      	b.n	8004ab2 <HAL_GPIO_DeInit+0xfe>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	2bff      	cmp	r3, #255	; 0xff
 8004ab8:	d802      	bhi.n	8004ac0 <HAL_GPIO_DeInit+0x10c>
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	e002      	b.n	8004ac6 <HAL_GPIO_DeInit+0x112>
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	3b08      	subs	r3, #8
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	210f      	movs	r1, #15
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	401a      	ands	r2, r3
 8004ad8:	2104      	movs	r1, #4
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68da      	ldr	r2, [r3, #12]
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	43db      	mvns	r3, r3
 8004aee:	401a      	ands	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	3301      	adds	r3, #1
 8004af8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	fa22 f303 	lsr.w	r3, r2, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f47f af5e 	bne.w	80049c4 <HAL_GPIO_DeInit+0x10>
  }
}
 8004b08:	bf00      	nop
 8004b0a:	bf00      	nop
 8004b0c:	3724      	adds	r7, #36	; 0x24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bc80      	pop	{r7}
 8004b12:	4770      	bx	lr
 8004b14:	40010000 	.word	0x40010000
 8004b18:	40010800 	.word	0x40010800
 8004b1c:	40010c00 	.word	0x40010c00
 8004b20:	40011000 	.word	0x40011000
 8004b24:	40011400 	.word	0x40011400
 8004b28:	40010400 	.word	0x40010400

08004b2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	887b      	ldrh	r3, [r7, #2]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b44:	2301      	movs	r3, #1
 8004b46:	73fb      	strb	r3, [r7, #15]
 8004b48:	e001      	b.n	8004b4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bc80      	pop	{r7}
 8004b58:	4770      	bx	lr

08004b5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	460b      	mov	r3, r1
 8004b64:	807b      	strh	r3, [r7, #2]
 8004b66:	4613      	mov	r3, r2
 8004b68:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b6a:	787b      	ldrb	r3, [r7, #1]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b70:	887a      	ldrh	r2, [r7, #2]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004b76:	e003      	b.n	8004b80 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b78:	887b      	ldrh	r3, [r7, #2]
 8004b7a:	041a      	lsls	r2, r3, #16
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	611a      	str	r2, [r3, #16]
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bc80      	pop	{r7}
 8004b88:	4770      	bx	lr

08004b8a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b085      	sub	sp, #20
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
 8004b92:	460b      	mov	r3, r1
 8004b94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b9c:	887a      	ldrh	r2, [r7, #2]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	041a      	lsls	r2, r3, #16
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	43d9      	mvns	r1, r3
 8004ba8:	887b      	ldrh	r3, [r7, #2]
 8004baa:	400b      	ands	r3, r1
 8004bac:	431a      	orrs	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	611a      	str	r2, [r3, #16]
}
 8004bb2:	bf00      	nop
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr

08004bbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e12b      	b.n	8004e26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d106      	bne.n	8004be8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7fe feb8 	bl	8003958 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2224      	movs	r2, #36	; 0x24
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0201 	bic.w	r2, r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c20:	f002 f8da 	bl	8006dd8 <HAL_RCC_GetPCLK1Freq>
 8004c24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	4a81      	ldr	r2, [pc, #516]	; (8004e30 <HAL_I2C_Init+0x274>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d807      	bhi.n	8004c40 <HAL_I2C_Init+0x84>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4a80      	ldr	r2, [pc, #512]	; (8004e34 <HAL_I2C_Init+0x278>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	bf94      	ite	ls
 8004c38:	2301      	movls	r3, #1
 8004c3a:	2300      	movhi	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	e006      	b.n	8004c4e <HAL_I2C_Init+0x92>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4a7d      	ldr	r2, [pc, #500]	; (8004e38 <HAL_I2C_Init+0x27c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	bf94      	ite	ls
 8004c48:	2301      	movls	r3, #1
 8004c4a:	2300      	movhi	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e0e7      	b.n	8004e26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4a78      	ldr	r2, [pc, #480]	; (8004e3c <HAL_I2C_Init+0x280>)
 8004c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5e:	0c9b      	lsrs	r3, r3, #18
 8004c60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	4a6a      	ldr	r2, [pc, #424]	; (8004e30 <HAL_I2C_Init+0x274>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d802      	bhi.n	8004c90 <HAL_I2C_Init+0xd4>
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	e009      	b.n	8004ca4 <HAL_I2C_Init+0xe8>
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c96:	fb02 f303 	mul.w	r3, r2, r3
 8004c9a:	4a69      	ldr	r2, [pc, #420]	; (8004e40 <HAL_I2C_Init+0x284>)
 8004c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca0:	099b      	lsrs	r3, r3, #6
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6812      	ldr	r2, [r2, #0]
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004cb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	495c      	ldr	r1, [pc, #368]	; (8004e30 <HAL_I2C_Init+0x274>)
 8004cc0:	428b      	cmp	r3, r1
 8004cc2:	d819      	bhi.n	8004cf8 <HAL_I2C_Init+0x13c>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	1e59      	subs	r1, r3, #1
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cd2:	1c59      	adds	r1, r3, #1
 8004cd4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004cd8:	400b      	ands	r3, r1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <HAL_I2C_Init+0x138>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	1e59      	subs	r1, r3, #1
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cec:	3301      	adds	r3, #1
 8004cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf2:	e051      	b.n	8004d98 <HAL_I2C_Init+0x1dc>
 8004cf4:	2304      	movs	r3, #4
 8004cf6:	e04f      	b.n	8004d98 <HAL_I2C_Init+0x1dc>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d111      	bne.n	8004d24 <HAL_I2C_Init+0x168>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	1e58      	subs	r0, r3, #1
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6859      	ldr	r1, [r3, #4]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	440b      	add	r3, r1
 8004d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d12:	3301      	adds	r3, #1
 8004d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	bf0c      	ite	eq
 8004d1c:	2301      	moveq	r3, #1
 8004d1e:	2300      	movne	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	e012      	b.n	8004d4a <HAL_I2C_Init+0x18e>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	1e58      	subs	r0, r3, #1
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6859      	ldr	r1, [r3, #4]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	440b      	add	r3, r1
 8004d32:	0099      	lsls	r1, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	bf0c      	ite	eq
 8004d44:	2301      	moveq	r3, #1
 8004d46:	2300      	movne	r3, #0
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <HAL_I2C_Init+0x196>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e022      	b.n	8004d98 <HAL_I2C_Init+0x1dc>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10e      	bne.n	8004d78 <HAL_I2C_Init+0x1bc>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	1e58      	subs	r0, r3, #1
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6859      	ldr	r1, [r3, #4]
 8004d62:	460b      	mov	r3, r1
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	440b      	add	r3, r1
 8004d68:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d76:	e00f      	b.n	8004d98 <HAL_I2C_Init+0x1dc>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	1e58      	subs	r0, r3, #1
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6859      	ldr	r1, [r3, #4]
 8004d80:	460b      	mov	r3, r1
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	440b      	add	r3, r1
 8004d86:	0099      	lsls	r1, r3, #2
 8004d88:	440b      	add	r3, r1
 8004d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d8e:	3301      	adds	r3, #1
 8004d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	6809      	ldr	r1, [r1, #0]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69da      	ldr	r2, [r3, #28]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004dc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6911      	ldr	r1, [r2, #16]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	68d2      	ldr	r2, [r2, #12]
 8004dd2:	4311      	orrs	r1, r2
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6812      	ldr	r2, [r2, #0]
 8004dd8:	430b      	orrs	r3, r1
 8004dda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	695a      	ldr	r2, [r3, #20]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0201 	orr.w	r2, r2, #1
 8004e06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	000186a0 	.word	0x000186a0
 8004e34:	001e847f 	.word	0x001e847f
 8004e38:	003d08ff 	.word	0x003d08ff
 8004e3c:	431bde83 	.word	0x431bde83
 8004e40:	10624dd3 	.word	0x10624dd3

08004e44 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e021      	b.n	8004e9a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2224      	movs	r2, #36	; 0x24
 8004e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 0201 	bic.w	r2, r2, #1
 8004e6c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fe fdde 	bl	8003a30 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b088      	sub	sp, #32
 8004ea8:	af02      	add	r7, sp, #8
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	607a      	str	r2, [r7, #4]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	817b      	strh	r3, [r7, #10]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004eb8:	f7ff f81a 	bl	8003ef0 <HAL_GetTick>
 8004ebc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	f040 80e0 	bne.w	800508c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	2319      	movs	r3, #25
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	4970      	ldr	r1, [pc, #448]	; (8005098 <HAL_I2C_Master_Transmit+0x1f4>)
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f001 f97e 	bl	80061d8 <I2C_WaitOnFlagUntilTimeout>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	e0d3      	b.n	800508e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_I2C_Master_Transmit+0x50>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e0cc      	b.n	800508e <HAL_I2C_Master_Transmit+0x1ea>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d007      	beq.n	8004f1a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f042 0201 	orr.w	r2, r2, #1
 8004f18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2221      	movs	r2, #33	; 0x21
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2210      	movs	r2, #16
 8004f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	893a      	ldrh	r2, [r7, #8]
 8004f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4a50      	ldr	r2, [pc, #320]	; (800509c <HAL_I2C_Master_Transmit+0x1f8>)
 8004f5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f5c:	8979      	ldrh	r1, [r7, #10]
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	6a3a      	ldr	r2, [r7, #32]
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 fe6a 	bl	8005c3c <I2C_MasterRequestWrite>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e08d      	b.n	800508e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f72:	2300      	movs	r3, #0
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	613b      	str	r3, [r7, #16]
 8004f86:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004f88:	e066      	b.n	8005058 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	6a39      	ldr	r1, [r7, #32]
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f001 fa3c 	bl	800640c <I2C_WaitOnTXEFlagUntilTimeout>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00d      	beq.n	8004fb6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d107      	bne.n	8004fb2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e06b      	b.n	800508e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	781a      	ldrb	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b04      	cmp	r3, #4
 8004ff2:	d11b      	bne.n	800502c <HAL_I2C_Master_Transmit+0x188>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d017      	beq.n	800502c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	781a      	ldrb	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	1c5a      	adds	r2, r3, #1
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005016:	b29b      	uxth	r3, r3
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005024:	3b01      	subs	r3, #1
 8005026:	b29a      	uxth	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	6a39      	ldr	r1, [r7, #32]
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f001 fa33 	bl	800649c <I2C_WaitOnBTFFlagUntilTimeout>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00d      	beq.n	8005058 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005040:	2b04      	cmp	r3, #4
 8005042:	d107      	bne.n	8005054 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005052:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e01a      	b.n	800508e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800505c:	2b00      	cmp	r3, #0
 800505e:	d194      	bne.n	8004f8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800506e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2220      	movs	r2, #32
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005088:	2300      	movs	r3, #0
 800508a:	e000      	b.n	800508e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800508c:	2302      	movs	r3, #2
  }
}
 800508e:	4618      	mov	r0, r3
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	00100002 	.word	0x00100002
 800509c:	ffff0000 	.word	0xffff0000

080050a0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b08c      	sub	sp, #48	; 0x30
 80050a4:	af02      	add	r7, sp, #8
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	607a      	str	r2, [r7, #4]
 80050aa:	461a      	mov	r2, r3
 80050ac:	460b      	mov	r3, r1
 80050ae:	817b      	strh	r3, [r7, #10]
 80050b0:	4613      	mov	r3, r2
 80050b2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050b8:	f7fe ff1a 	bl	8003ef0 <HAL_GetTick>
 80050bc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b20      	cmp	r3, #32
 80050c8:	f040 824b 	bne.w	8005562 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	2319      	movs	r3, #25
 80050d2:	2201      	movs	r2, #1
 80050d4:	497f      	ldr	r1, [pc, #508]	; (80052d4 <HAL_I2C_Master_Receive+0x234>)
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f001 f87e 	bl	80061d8 <I2C_WaitOnFlagUntilTimeout>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80050e2:	2302      	movs	r3, #2
 80050e4:	e23e      	b.n	8005564 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_I2C_Master_Receive+0x54>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e237      	b.n	8005564 <HAL_I2C_Master_Receive+0x4c4>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b01      	cmp	r3, #1
 8005108:	d007      	beq.n	800511a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f042 0201 	orr.w	r2, r2, #1
 8005118:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005128:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2222      	movs	r2, #34	; 0x22
 800512e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2210      	movs	r2, #16
 8005136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	893a      	ldrh	r2, [r7, #8]
 800514a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005150:	b29a      	uxth	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4a5f      	ldr	r2, [pc, #380]	; (80052d8 <HAL_I2C_Master_Receive+0x238>)
 800515a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800515c:	8979      	ldrh	r1, [r7, #10]
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 fdec 	bl	8005d40 <I2C_MasterRequestRead>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e1f8      	b.n	8005564 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005176:	2b00      	cmp	r3, #0
 8005178:	d113      	bne.n	80051a2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800517a:	2300      	movs	r3, #0
 800517c:	61fb      	str	r3, [r7, #28]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	61fb      	str	r3, [r7, #28]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	61fb      	str	r3, [r7, #28]
 800518e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	e1cc      	b.n	800553c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d11e      	bne.n	80051e8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80051ba:	b672      	cpsid	i
}
 80051bc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051be:	2300      	movs	r3, #0
 80051c0:	61bb      	str	r3, [r7, #24]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	61bb      	str	r3, [r7, #24]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	61bb      	str	r3, [r7, #24]
 80051d2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80051e4:	b662      	cpsie	i
}
 80051e6:	e035      	b.n	8005254 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d11e      	bne.n	800522e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005200:	b672      	cpsid	i
}
 8005202:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005204:	2300      	movs	r3, #0
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005228:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800522a:	b662      	cpsie	i
}
 800522c:	e012      	b.n	8005254 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800523c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800523e:	2300      	movs	r3, #0
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	613b      	str	r3, [r7, #16]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	613b      	str	r3, [r7, #16]
 8005252:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005254:	e172      	b.n	800553c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800525a:	2b03      	cmp	r3, #3
 800525c:	f200 811f 	bhi.w	800549e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005264:	2b01      	cmp	r3, #1
 8005266:	d123      	bne.n	80052b0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800526a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f001 f95d 	bl	800652c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e173      	b.n	8005564 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691a      	ldr	r2, [r3, #16]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	1c5a      	adds	r2, r3, #1
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005298:	3b01      	subs	r3, #1
 800529a:	b29a      	uxth	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052ae:	e145      	b.n	800553c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d152      	bne.n	800535e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052be:	2200      	movs	r2, #0
 80052c0:	4906      	ldr	r1, [pc, #24]	; (80052dc <HAL_I2C_Master_Receive+0x23c>)
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 ff88 	bl	80061d8 <I2C_WaitOnFlagUntilTimeout>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d008      	beq.n	80052e0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e148      	b.n	8005564 <HAL_I2C_Master_Receive+0x4c4>
 80052d2:	bf00      	nop
 80052d4:	00100002 	.word	0x00100002
 80052d8:	ffff0000 	.word	0xffff0000
 80052dc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80052e0:	b672      	cpsid	i
}
 80052e2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	691a      	ldr	r2, [r3, #16]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	1c5a      	adds	r2, r3, #1
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005310:	3b01      	subs	r3, #1
 8005312:	b29a      	uxth	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531c:	b29b      	uxth	r3, r3
 800531e:	3b01      	subs	r3, #1
 8005320:	b29a      	uxth	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005326:	b662      	cpsie	i
}
 8005328:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	691a      	ldr	r2, [r3, #16]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	b2d2      	uxtb	r2, r2
 8005336:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	1c5a      	adds	r2, r3, #1
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005346:	3b01      	subs	r3, #1
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005352:	b29b      	uxth	r3, r3
 8005354:	3b01      	subs	r3, #1
 8005356:	b29a      	uxth	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800535c:	e0ee      	b.n	800553c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005364:	2200      	movs	r2, #0
 8005366:	4981      	ldr	r1, [pc, #516]	; (800556c <HAL_I2C_Master_Receive+0x4cc>)
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 ff35 	bl	80061d8 <I2C_WaitOnFlagUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e0f5      	b.n	8005564 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005386:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005388:	b672      	cpsid	i
}
 800538a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	691a      	ldr	r2, [r3, #16]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	3b01      	subs	r3, #1
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80053be:	4b6c      	ldr	r3, [pc, #432]	; (8005570 <HAL_I2C_Master_Receive+0x4d0>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	08db      	lsrs	r3, r3, #3
 80053c4:	4a6b      	ldr	r2, [pc, #428]	; (8005574 <HAL_I2C_Master_Receive+0x4d4>)
 80053c6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ca:	0a1a      	lsrs	r2, r3, #8
 80053cc:	4613      	mov	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	00da      	lsls	r2, r3, #3
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	3b01      	subs	r3, #1
 80053dc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d118      	bne.n	8005416 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2220      	movs	r2, #32
 80053ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fe:	f043 0220 	orr.w	r2, r3, #32
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005406:	b662      	cpsie	i
}
 8005408:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e0a6      	b.n	8005564 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b04      	cmp	r3, #4
 8005422:	d1d9      	bne.n	80053d8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005432:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	691a      	ldr	r2, [r3, #16]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	b2d2      	uxtb	r2, r2
 8005440:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	1c5a      	adds	r2, r3, #1
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545c:	b29b      	uxth	r3, r3
 800545e:	3b01      	subs	r3, #1
 8005460:	b29a      	uxth	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005466:	b662      	cpsie	i
}
 8005468:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	691a      	ldr	r2, [r3, #16]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	b2d2      	uxtb	r2, r2
 8005476:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005486:	3b01      	subs	r3, #1
 8005488:	b29a      	uxth	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005492:	b29b      	uxth	r3, r3
 8005494:	3b01      	subs	r3, #1
 8005496:	b29a      	uxth	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800549c:	e04e      	b.n	800553c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800549e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f001 f842 	bl	800652c <I2C_WaitOnRXNEFlagUntilTimeout>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e058      	b.n	8005564 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	f003 0304 	and.w	r3, r3, #4
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d124      	bne.n	800553c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054f6:	2b03      	cmp	r3, #3
 80054f8:	d107      	bne.n	800550a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005508:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	691a      	ldr	r2, [r3, #16]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	b2d2      	uxtb	r2, r2
 8005516:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005526:	3b01      	subs	r3, #1
 8005528:	b29a      	uxth	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005532:	b29b      	uxth	r3, r3
 8005534:	3b01      	subs	r3, #1
 8005536:	b29a      	uxth	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005540:	2b00      	cmp	r3, #0
 8005542:	f47f ae88 	bne.w	8005256 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2220      	movs	r2, #32
 800554a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	e000      	b.n	8005564 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8005562:	2302      	movs	r3, #2
  }
}
 8005564:	4618      	mov	r0, r3
 8005566:	3728      	adds	r7, #40	; 0x28
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	00010004 	.word	0x00010004
 8005570:	2000000c 	.word	0x2000000c
 8005574:	14f8b589 	.word	0x14f8b589

08005578 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b088      	sub	sp, #32
 800557c:	af02      	add	r7, sp, #8
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	4608      	mov	r0, r1
 8005582:	4611      	mov	r1, r2
 8005584:	461a      	mov	r2, r3
 8005586:	4603      	mov	r3, r0
 8005588:	817b      	strh	r3, [r7, #10]
 800558a:	460b      	mov	r3, r1
 800558c:	813b      	strh	r3, [r7, #8]
 800558e:	4613      	mov	r3, r2
 8005590:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005592:	f7fe fcad 	bl	8003ef0 <HAL_GetTick>
 8005596:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	f040 80d9 	bne.w	8005758 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	2319      	movs	r3, #25
 80055ac:	2201      	movs	r2, #1
 80055ae:	496d      	ldr	r1, [pc, #436]	; (8005764 <HAL_I2C_Mem_Write+0x1ec>)
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 fe11 	bl	80061d8 <I2C_WaitOnFlagUntilTimeout>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80055bc:	2302      	movs	r3, #2
 80055be:	e0cc      	b.n	800575a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d101      	bne.n	80055ce <HAL_I2C_Mem_Write+0x56>
 80055ca:	2302      	movs	r3, #2
 80055cc:	e0c5      	b.n	800575a <HAL_I2C_Mem_Write+0x1e2>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d007      	beq.n	80055f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0201 	orr.w	r2, r2, #1
 80055f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005602:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2221      	movs	r2, #33	; 0x21
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2240      	movs	r2, #64	; 0x40
 8005610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6a3a      	ldr	r2, [r7, #32]
 800561e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005624:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800562a:	b29a      	uxth	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4a4d      	ldr	r2, [pc, #308]	; (8005768 <HAL_I2C_Mem_Write+0x1f0>)
 8005634:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005636:	88f8      	ldrh	r0, [r7, #6]
 8005638:	893a      	ldrh	r2, [r7, #8]
 800563a:	8979      	ldrh	r1, [r7, #10]
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	9301      	str	r3, [sp, #4]
 8005640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	4603      	mov	r3, r0
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 fc48 	bl	8005edc <I2C_RequestMemoryWrite>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d052      	beq.n	80056f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e081      	b.n	800575a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 fed6 	bl	800640c <I2C_WaitOnTXEFlagUntilTimeout>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00d      	beq.n	8005682 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566a:	2b04      	cmp	r3, #4
 800566c:	d107      	bne.n	800567e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800567c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e06b      	b.n	800575a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	781a      	ldrb	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800569c:	3b01      	subs	r3, #1
 800569e:	b29a      	uxth	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	3b01      	subs	r3, #1
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	f003 0304 	and.w	r3, r3, #4
 80056bc:	2b04      	cmp	r3, #4
 80056be:	d11b      	bne.n	80056f8 <HAL_I2C_Mem_Write+0x180>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d017      	beq.n	80056f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056cc:	781a      	ldrb	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1aa      	bne.n	8005656 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 fec9 	bl	800649c <I2C_WaitOnBTFFlagUntilTimeout>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00d      	beq.n	800572c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005714:	2b04      	cmp	r3, #4
 8005716:	d107      	bne.n	8005728 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005726:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e016      	b.n	800575a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800573a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2220      	movs	r2, #32
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005754:	2300      	movs	r3, #0
 8005756:	e000      	b.n	800575a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005758:	2302      	movs	r3, #2
  }
}
 800575a:	4618      	mov	r0, r3
 800575c:	3718      	adds	r7, #24
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	00100002 	.word	0x00100002
 8005768:	ffff0000 	.word	0xffff0000

0800576c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b08c      	sub	sp, #48	; 0x30
 8005770:	af02      	add	r7, sp, #8
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	4608      	mov	r0, r1
 8005776:	4611      	mov	r1, r2
 8005778:	461a      	mov	r2, r3
 800577a:	4603      	mov	r3, r0
 800577c:	817b      	strh	r3, [r7, #10]
 800577e:	460b      	mov	r3, r1
 8005780:	813b      	strh	r3, [r7, #8]
 8005782:	4613      	mov	r3, r2
 8005784:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800578a:	f7fe fbb1 	bl	8003ef0 <HAL_GetTick>
 800578e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b20      	cmp	r3, #32
 800579a:	f040 8244 	bne.w	8005c26 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	2319      	movs	r3, #25
 80057a4:	2201      	movs	r2, #1
 80057a6:	4982      	ldr	r1, [pc, #520]	; (80059b0 <HAL_I2C_Mem_Read+0x244>)
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 fd15 	bl	80061d8 <I2C_WaitOnFlagUntilTimeout>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80057b4:	2302      	movs	r3, #2
 80057b6:	e237      	b.n	8005c28 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d101      	bne.n	80057c6 <HAL_I2C_Mem_Read+0x5a>
 80057c2:	2302      	movs	r3, #2
 80057c4:	e230      	b.n	8005c28 <HAL_I2C_Mem_Read+0x4bc>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d007      	beq.n	80057ec <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0201 	orr.w	r2, r2, #1
 80057ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2222      	movs	r2, #34	; 0x22
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2240      	movs	r2, #64	; 0x40
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005816:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800581c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005822:	b29a      	uxth	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4a62      	ldr	r2, [pc, #392]	; (80059b4 <HAL_I2C_Mem_Read+0x248>)
 800582c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800582e:	88f8      	ldrh	r0, [r7, #6]
 8005830:	893a      	ldrh	r2, [r7, #8]
 8005832:	8979      	ldrh	r1, [r7, #10]
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	9301      	str	r3, [sp, #4]
 8005838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	4603      	mov	r3, r0
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 fbe2 	bl	8006008 <I2C_RequestMemoryRead>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e1ec      	b.n	8005c28 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005852:	2b00      	cmp	r3, #0
 8005854:	d113      	bne.n	800587e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005856:	2300      	movs	r3, #0
 8005858:	61fb      	str	r3, [r7, #28]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	61fb      	str	r3, [r7, #28]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	61fb      	str	r3, [r7, #28]
 800586a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	e1c0      	b.n	8005c00 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005882:	2b01      	cmp	r3, #1
 8005884:	d11e      	bne.n	80058c4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005894:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005896:	b672      	cpsid	i
}
 8005898:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800589a:	2300      	movs	r3, #0
 800589c:	61bb      	str	r3, [r7, #24]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	61bb      	str	r3, [r7, #24]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	61bb      	str	r3, [r7, #24]
 80058ae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80058c0:	b662      	cpsie	i
}
 80058c2:	e035      	b.n	8005930 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d11e      	bne.n	800590a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80058dc:	b672      	cpsid	i
}
 80058de:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058e0:	2300      	movs	r3, #0
 80058e2:	617b      	str	r3, [r7, #20]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	617b      	str	r3, [r7, #20]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	617b      	str	r3, [r7, #20]
 80058f4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005904:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005906:	b662      	cpsie	i
}
 8005908:	e012      	b.n	8005930 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005918:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800591a:	2300      	movs	r3, #0
 800591c:	613b      	str	r3, [r7, #16]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	613b      	str	r3, [r7, #16]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005930:	e166      	b.n	8005c00 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005936:	2b03      	cmp	r3, #3
 8005938:	f200 811f 	bhi.w	8005b7a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005940:	2b01      	cmp	r3, #1
 8005942:	d123      	bne.n	800598c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005946:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 fdef 	bl	800652c <I2C_WaitOnRXNEFlagUntilTimeout>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e167      	b.n	8005c28 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	691a      	ldr	r2, [r3, #16]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005980:	b29b      	uxth	r3, r3
 8005982:	3b01      	subs	r3, #1
 8005984:	b29a      	uxth	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	855a      	strh	r2, [r3, #42]	; 0x2a
 800598a:	e139      	b.n	8005c00 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005990:	2b02      	cmp	r3, #2
 8005992:	d152      	bne.n	8005a3a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599a:	2200      	movs	r2, #0
 800599c:	4906      	ldr	r1, [pc, #24]	; (80059b8 <HAL_I2C_Mem_Read+0x24c>)
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 fc1a 	bl	80061d8 <I2C_WaitOnFlagUntilTimeout>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d008      	beq.n	80059bc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e13c      	b.n	8005c28 <HAL_I2C_Mem_Read+0x4bc>
 80059ae:	bf00      	nop
 80059b0:	00100002 	.word	0x00100002
 80059b4:	ffff0000 	.word	0xffff0000
 80059b8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80059bc:	b672      	cpsid	i
}
 80059be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691a      	ldr	r2, [r3, #16]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ec:	3b01      	subs	r3, #1
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005a02:	b662      	cpsie	i
}
 8005a04:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	691a      	ldr	r2, [r3, #16]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	b2d2      	uxtb	r2, r2
 8005a12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a18:	1c5a      	adds	r2, r3, #1
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a22:	3b01      	subs	r3, #1
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	3b01      	subs	r3, #1
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a38:	e0e2      	b.n	8005c00 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a40:	2200      	movs	r2, #0
 8005a42:	497b      	ldr	r1, [pc, #492]	; (8005c30 <HAL_I2C_Mem_Read+0x4c4>)
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f000 fbc7 	bl	80061d8 <I2C_WaitOnFlagUntilTimeout>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e0e9      	b.n	8005c28 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a64:	b672      	cpsid	i
}
 8005a66:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691a      	ldr	r2, [r3, #16]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7a:	1c5a      	adds	r2, r3, #1
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a84:	3b01      	subs	r3, #1
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	3b01      	subs	r3, #1
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005a9a:	4b66      	ldr	r3, [pc, #408]	; (8005c34 <HAL_I2C_Mem_Read+0x4c8>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	08db      	lsrs	r3, r3, #3
 8005aa0:	4a65      	ldr	r2, [pc, #404]	; (8005c38 <HAL_I2C_Mem_Read+0x4cc>)
 8005aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa6:	0a1a      	lsrs	r2, r3, #8
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4413      	add	r3, r2
 8005aae:	00da      	lsls	r2, r3, #3
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d118      	bne.n	8005af2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	f043 0220 	orr.w	r2, r3, #32
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005ae2:	b662      	cpsie	i
}
 8005ae4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e09a      	b.n	8005c28 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	d1d9      	bne.n	8005ab4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691a      	ldr	r2, [r3, #16]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	b2d2      	uxtb	r2, r2
 8005b1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005b42:	b662      	cpsie	i
}
 8005b44:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	691a      	ldr	r2, [r3, #16]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	b2d2      	uxtb	r2, r2
 8005b52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b62:	3b01      	subs	r3, #1
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	3b01      	subs	r3, #1
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b78:	e042      	b.n	8005c00 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f000 fcd4 	bl	800652c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e04c      	b.n	8005c28 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	691a      	ldr	r2, [r3, #16]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	b2d2      	uxtb	r2, r2
 8005b9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	1c5a      	adds	r2, r3, #1
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005baa:	3b01      	subs	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	f003 0304 	and.w	r3, r3, #4
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	d118      	bne.n	8005c00 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	691a      	ldr	r2, [r3, #16]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bea:	3b01      	subs	r3, #1
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f47f ae94 	bne.w	8005932 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	e000      	b.n	8005c28 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8005c26:	2302      	movs	r3, #2
  }
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3728      	adds	r7, #40	; 0x28
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	00010004 	.word	0x00010004
 8005c34:	2000000c 	.word	0x2000000c
 8005c38:	14f8b589 	.word	0x14f8b589

08005c3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af02      	add	r7, sp, #8
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	607a      	str	r2, [r7, #4]
 8005c46:	603b      	str	r3, [r7, #0]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2b08      	cmp	r3, #8
 8005c56:	d006      	beq.n	8005c66 <I2C_MasterRequestWrite+0x2a>
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d003      	beq.n	8005c66 <I2C_MasterRequestWrite+0x2a>
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c64:	d108      	bne.n	8005c78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	e00b      	b.n	8005c90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7c:	2b12      	cmp	r3, #18
 8005c7e:	d107      	bne.n	8005c90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 fa9b 	bl	80061d8 <I2C_WaitOnFlagUntilTimeout>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00d      	beq.n	8005cc4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cb6:	d103      	bne.n	8005cc0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e035      	b.n	8005d30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ccc:	d108      	bne.n	8005ce0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cce:	897b      	ldrh	r3, [r7, #10]
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005cdc:	611a      	str	r2, [r3, #16]
 8005cde:	e01b      	b.n	8005d18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ce0:	897b      	ldrh	r3, [r7, #10]
 8005ce2:	11db      	asrs	r3, r3, #7
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	f003 0306 	and.w	r3, r3, #6
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	f063 030f 	orn	r3, r3, #15
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	490e      	ldr	r1, [pc, #56]	; (8005d38 <I2C_MasterRequestWrite+0xfc>)
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f000 fae4 	bl	80062cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e010      	b.n	8005d30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d0e:	897b      	ldrh	r3, [r7, #10]
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	4907      	ldr	r1, [pc, #28]	; (8005d3c <I2C_MasterRequestWrite+0x100>)
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f000 fad4 	bl	80062cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e000      	b.n	8005d30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	00010008 	.word	0x00010008
 8005d3c:	00010002 	.word	0x00010002

08005d40 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b088      	sub	sp, #32
 8005d44:	af02      	add	r7, sp, #8
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	607a      	str	r2, [r7, #4]
 8005d4a:	603b      	str	r3, [r7, #0]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d54:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d64:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d006      	beq.n	8005d7a <I2C_MasterRequestRead+0x3a>
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d003      	beq.n	8005d7a <I2C_MasterRequestRead+0x3a>
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d78:	d108      	bne.n	8005d8c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	e00b      	b.n	8005da4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d90:	2b11      	cmp	r3, #17
 8005d92:	d107      	bne.n	8005da4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005da2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 fa11 	bl	80061d8 <I2C_WaitOnFlagUntilTimeout>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00d      	beq.n	8005dd8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dca:	d103      	bne.n	8005dd4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e079      	b.n	8005ecc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005de0:	d108      	bne.n	8005df4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005de2:	897b      	ldrh	r3, [r7, #10]
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	f043 0301 	orr.w	r3, r3, #1
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	611a      	str	r2, [r3, #16]
 8005df2:	e05f      	b.n	8005eb4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005df4:	897b      	ldrh	r3, [r7, #10]
 8005df6:	11db      	asrs	r3, r3, #7
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	f003 0306 	and.w	r3, r3, #6
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	f063 030f 	orn	r3, r3, #15
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	4930      	ldr	r1, [pc, #192]	; (8005ed4 <I2C_MasterRequestRead+0x194>)
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 fa5a 	bl	80062cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e054      	b.n	8005ecc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005e22:	897b      	ldrh	r3, [r7, #10]
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	4929      	ldr	r1, [pc, #164]	; (8005ed8 <I2C_MasterRequestRead+0x198>)
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 fa4a 	bl	80062cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e044      	b.n	8005ecc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e42:	2300      	movs	r3, #0
 8005e44:	613b      	str	r3, [r7, #16]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	613b      	str	r3, [r7, #16]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	613b      	str	r3, [r7, #16]
 8005e56:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e66:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 f9af 	bl	80061d8 <I2C_WaitOnFlagUntilTimeout>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00d      	beq.n	8005e9c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e8e:	d103      	bne.n	8005e98 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e96:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e017      	b.n	8005ecc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005e9c:	897b      	ldrh	r3, [r7, #10]
 8005e9e:	11db      	asrs	r3, r3, #7
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	f003 0306 	and.w	r3, r3, #6
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	f063 030e 	orn	r3, r3, #14
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	4907      	ldr	r1, [pc, #28]	; (8005ed8 <I2C_MasterRequestRead+0x198>)
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 fa06 	bl	80062cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e000      	b.n	8005ecc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3718      	adds	r7, #24
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	00010008 	.word	0x00010008
 8005ed8:	00010002 	.word	0x00010002

08005edc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af02      	add	r7, sp, #8
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	4608      	mov	r0, r1
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	461a      	mov	r2, r3
 8005eea:	4603      	mov	r3, r0
 8005eec:	817b      	strh	r3, [r7, #10]
 8005eee:	460b      	mov	r3, r1
 8005ef0:	813b      	strh	r3, [r7, #8]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 f960 	bl	80061d8 <I2C_WaitOnFlagUntilTimeout>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00d      	beq.n	8005f3a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f2c:	d103      	bne.n	8005f36 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e05f      	b.n	8005ffa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f3a:	897b      	ldrh	r3, [r7, #10]
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	461a      	mov	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	6a3a      	ldr	r2, [r7, #32]
 8005f4e:	492d      	ldr	r1, [pc, #180]	; (8006004 <I2C_RequestMemoryWrite+0x128>)
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 f9bb 	bl	80062cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e04c      	b.n	8005ffa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f60:	2300      	movs	r3, #0
 8005f62:	617b      	str	r3, [r7, #20]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	617b      	str	r3, [r7, #20]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f78:	6a39      	ldr	r1, [r7, #32]
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 fa46 	bl	800640c <I2C_WaitOnTXEFlagUntilTimeout>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00d      	beq.n	8005fa2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8a:	2b04      	cmp	r3, #4
 8005f8c:	d107      	bne.n	8005f9e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e02b      	b.n	8005ffa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005fa2:	88fb      	ldrh	r3, [r7, #6]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d105      	bne.n	8005fb4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fa8:	893b      	ldrh	r3, [r7, #8]
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	611a      	str	r2, [r3, #16]
 8005fb2:	e021      	b.n	8005ff8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005fb4:	893b      	ldrh	r3, [r7, #8]
 8005fb6:	0a1b      	lsrs	r3, r3, #8
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fc4:	6a39      	ldr	r1, [r7, #32]
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 fa20 	bl	800640c <I2C_WaitOnTXEFlagUntilTimeout>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00d      	beq.n	8005fee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	2b04      	cmp	r3, #4
 8005fd8:	d107      	bne.n	8005fea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fe8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e005      	b.n	8005ffa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fee:	893b      	ldrh	r3, [r7, #8]
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3718      	adds	r7, #24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	00010002 	.word	0x00010002

08006008 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b088      	sub	sp, #32
 800600c:	af02      	add	r7, sp, #8
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	4608      	mov	r0, r1
 8006012:	4611      	mov	r1, r2
 8006014:	461a      	mov	r2, r3
 8006016:	4603      	mov	r3, r0
 8006018:	817b      	strh	r3, [r7, #10]
 800601a:	460b      	mov	r3, r1
 800601c:	813b      	strh	r3, [r7, #8]
 800601e:	4613      	mov	r3, r2
 8006020:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006030:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006040:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	2200      	movs	r2, #0
 800604a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 f8c2 	bl	80061d8 <I2C_WaitOnFlagUntilTimeout>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00d      	beq.n	8006076 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006068:	d103      	bne.n	8006072 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006070:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e0aa      	b.n	80061cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006076:	897b      	ldrh	r3, [r7, #10]
 8006078:	b2db      	uxtb	r3, r3
 800607a:	461a      	mov	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006084:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	6a3a      	ldr	r2, [r7, #32]
 800608a:	4952      	ldr	r1, [pc, #328]	; (80061d4 <I2C_RequestMemoryRead+0x1cc>)
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f000 f91d 	bl	80062cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d001      	beq.n	800609c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e097      	b.n	80061cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800609c:	2300      	movs	r3, #0
 800609e:	617b      	str	r3, [r7, #20]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	617b      	str	r3, [r7, #20]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	617b      	str	r3, [r7, #20]
 80060b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b4:	6a39      	ldr	r1, [r7, #32]
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 f9a8 	bl	800640c <I2C_WaitOnTXEFlagUntilTimeout>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00d      	beq.n	80060de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	d107      	bne.n	80060da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e076      	b.n	80061cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060de:	88fb      	ldrh	r3, [r7, #6]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d105      	bne.n	80060f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060e4:	893b      	ldrh	r3, [r7, #8]
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	611a      	str	r2, [r3, #16]
 80060ee:	e021      	b.n	8006134 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80060f0:	893b      	ldrh	r3, [r7, #8]
 80060f2:	0a1b      	lsrs	r3, r3, #8
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006100:	6a39      	ldr	r1, [r7, #32]
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 f982 	bl	800640c <I2C_WaitOnTXEFlagUntilTimeout>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00d      	beq.n	800612a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	2b04      	cmp	r3, #4
 8006114:	d107      	bne.n	8006126 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006124:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e050      	b.n	80061cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800612a:	893b      	ldrh	r3, [r7, #8]
 800612c:	b2da      	uxtb	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006136:	6a39      	ldr	r1, [r7, #32]
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 f967 	bl	800640c <I2C_WaitOnTXEFlagUntilTimeout>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00d      	beq.n	8006160 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006148:	2b04      	cmp	r3, #4
 800614a:	d107      	bne.n	800615c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800615a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e035      	b.n	80061cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800616e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	9300      	str	r3, [sp, #0]
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	2200      	movs	r2, #0
 8006178:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 f82b 	bl	80061d8 <I2C_WaitOnFlagUntilTimeout>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00d      	beq.n	80061a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006196:	d103      	bne.n	80061a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800619e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e013      	b.n	80061cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80061a4:	897b      	ldrh	r3, [r7, #10]
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	f043 0301 	orr.w	r3, r3, #1
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	6a3a      	ldr	r2, [r7, #32]
 80061b8:	4906      	ldr	r1, [pc, #24]	; (80061d4 <I2C_RequestMemoryRead+0x1cc>)
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 f886 	bl	80062cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e000      	b.n	80061cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3718      	adds	r7, #24
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	00010002 	.word	0x00010002

080061d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	603b      	str	r3, [r7, #0]
 80061e4:	4613      	mov	r3, r2
 80061e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061e8:	e048      	b.n	800627c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f0:	d044      	beq.n	800627c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061f2:	f7fd fe7d 	bl	8003ef0 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d302      	bcc.n	8006208 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d139      	bne.n	800627c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	0c1b      	lsrs	r3, r3, #16
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b01      	cmp	r3, #1
 8006210:	d10d      	bne.n	800622e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	43da      	mvns	r2, r3
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	4013      	ands	r3, r2
 800621e:	b29b      	uxth	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	bf0c      	ite	eq
 8006224:	2301      	moveq	r3, #1
 8006226:	2300      	movne	r3, #0
 8006228:	b2db      	uxtb	r3, r3
 800622a:	461a      	mov	r2, r3
 800622c:	e00c      	b.n	8006248 <I2C_WaitOnFlagUntilTimeout+0x70>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	43da      	mvns	r2, r3
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	4013      	ands	r3, r2
 800623a:	b29b      	uxth	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	bf0c      	ite	eq
 8006240:	2301      	moveq	r3, #1
 8006242:	2300      	movne	r3, #0
 8006244:	b2db      	uxtb	r3, r3
 8006246:	461a      	mov	r2, r3
 8006248:	79fb      	ldrb	r3, [r7, #7]
 800624a:	429a      	cmp	r2, r3
 800624c:	d116      	bne.n	800627c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2220      	movs	r2, #32
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006268:	f043 0220 	orr.w	r2, r3, #32
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e023      	b.n	80062c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	0c1b      	lsrs	r3, r3, #16
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b01      	cmp	r3, #1
 8006284:	d10d      	bne.n	80062a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	43da      	mvns	r2, r3
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	4013      	ands	r3, r2
 8006292:	b29b      	uxth	r3, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	bf0c      	ite	eq
 8006298:	2301      	moveq	r3, #1
 800629a:	2300      	movne	r3, #0
 800629c:	b2db      	uxtb	r3, r3
 800629e:	461a      	mov	r2, r3
 80062a0:	e00c      	b.n	80062bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	43da      	mvns	r2, r3
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	4013      	ands	r3, r2
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	bf0c      	ite	eq
 80062b4:	2301      	moveq	r3, #1
 80062b6:	2300      	movne	r3, #0
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	461a      	mov	r2, r3
 80062bc:	79fb      	ldrb	r3, [r7, #7]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d093      	beq.n	80061ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
 80062d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062da:	e071      	b.n	80063c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062ea:	d123      	bne.n	8006334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006304:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2220      	movs	r2, #32
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006320:	f043 0204 	orr.w	r2, r3, #4
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e067      	b.n	8006404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633a:	d041      	beq.n	80063c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800633c:	f7fd fdd8 	bl	8003ef0 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	429a      	cmp	r2, r3
 800634a:	d302      	bcc.n	8006352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d136      	bne.n	80063c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	0c1b      	lsrs	r3, r3, #16
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b01      	cmp	r3, #1
 800635a:	d10c      	bne.n	8006376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	43da      	mvns	r2, r3
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	4013      	ands	r3, r2
 8006368:	b29b      	uxth	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	bf14      	ite	ne
 800636e:	2301      	movne	r3, #1
 8006370:	2300      	moveq	r3, #0
 8006372:	b2db      	uxtb	r3, r3
 8006374:	e00b      	b.n	800638e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	43da      	mvns	r2, r3
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	4013      	ands	r3, r2
 8006382:	b29b      	uxth	r3, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	bf14      	ite	ne
 8006388:	2301      	movne	r3, #1
 800638a:	2300      	moveq	r3, #0
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d016      	beq.n	80063c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2220      	movs	r2, #32
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ac:	f043 0220 	orr.w	r2, r3, #32
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e021      	b.n	8006404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	0c1b      	lsrs	r3, r3, #16
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d10c      	bne.n	80063e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	43da      	mvns	r2, r3
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	4013      	ands	r3, r2
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	bf14      	ite	ne
 80063dc:	2301      	movne	r3, #1
 80063de:	2300      	moveq	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	e00b      	b.n	80063fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	43da      	mvns	r2, r3
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	4013      	ands	r3, r2
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	bf14      	ite	ne
 80063f6:	2301      	movne	r3, #1
 80063f8:	2300      	moveq	r3, #0
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f47f af6d 	bne.w	80062dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006418:	e034      	b.n	8006484 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f000 f8e3 	bl	80065e6 <I2C_IsAcknowledgeFailed>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e034      	b.n	8006494 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006430:	d028      	beq.n	8006484 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006432:	f7fd fd5d 	bl	8003ef0 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	429a      	cmp	r2, r3
 8006440:	d302      	bcc.n	8006448 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d11d      	bne.n	8006484 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006452:	2b80      	cmp	r3, #128	; 0x80
 8006454:	d016      	beq.n	8006484 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2220      	movs	r2, #32
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006470:	f043 0220 	orr.w	r2, r3, #32
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e007      	b.n	8006494 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800648e:	2b80      	cmp	r3, #128	; 0x80
 8006490:	d1c3      	bne.n	800641a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064a8:	e034      	b.n	8006514 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f000 f89b 	bl	80065e6 <I2C_IsAcknowledgeFailed>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e034      	b.n	8006524 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c0:	d028      	beq.n	8006514 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064c2:	f7fd fd15 	bl	8003ef0 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d302      	bcc.n	80064d8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d11d      	bne.n	8006514 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	f003 0304 	and.w	r3, r3, #4
 80064e2:	2b04      	cmp	r3, #4
 80064e4:	d016      	beq.n	8006514 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2220      	movs	r2, #32
 80064f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006500:	f043 0220 	orr.w	r2, r3, #32
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e007      	b.n	8006524 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	f003 0304 	and.w	r3, r3, #4
 800651e:	2b04      	cmp	r3, #4
 8006520:	d1c3      	bne.n	80064aa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006538:	e049      	b.n	80065ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	f003 0310 	and.w	r3, r3, #16
 8006544:	2b10      	cmp	r3, #16
 8006546:	d119      	bne.n	800657c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f06f 0210 	mvn.w	r2, #16
 8006550:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2220      	movs	r2, #32
 800655c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e030      	b.n	80065de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800657c:	f7fd fcb8 	bl	8003ef0 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	429a      	cmp	r2, r3
 800658a:	d302      	bcc.n	8006592 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d11d      	bne.n	80065ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659c:	2b40      	cmp	r3, #64	; 0x40
 800659e:	d016      	beq.n	80065ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	f043 0220 	orr.w	r2, r3, #32
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e007      	b.n	80065de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d8:	2b40      	cmp	r3, #64	; 0x40
 80065da:	d1ae      	bne.n	800653a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b083      	sub	sp, #12
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065fc:	d11b      	bne.n	8006636 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006606:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2220      	movs	r2, #32
 8006612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006622:	f043 0204 	orr.w	r2, r3, #4
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e000      	b.n	8006638 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	bc80      	pop	{r7}
 8006640:	4770      	bx	lr
	...

08006644 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e272      	b.n	8006b3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 8087 	beq.w	8006772 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006664:	4b92      	ldr	r3, [pc, #584]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f003 030c 	and.w	r3, r3, #12
 800666c:	2b04      	cmp	r3, #4
 800666e:	d00c      	beq.n	800668a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006670:	4b8f      	ldr	r3, [pc, #572]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f003 030c 	and.w	r3, r3, #12
 8006678:	2b08      	cmp	r3, #8
 800667a:	d112      	bne.n	80066a2 <HAL_RCC_OscConfig+0x5e>
 800667c:	4b8c      	ldr	r3, [pc, #560]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006688:	d10b      	bne.n	80066a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800668a:	4b89      	ldr	r3, [pc, #548]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d06c      	beq.n	8006770 <HAL_RCC_OscConfig+0x12c>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d168      	bne.n	8006770 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e24c      	b.n	8006b3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066aa:	d106      	bne.n	80066ba <HAL_RCC_OscConfig+0x76>
 80066ac:	4b80      	ldr	r3, [pc, #512]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a7f      	ldr	r2, [pc, #508]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 80066b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	e02e      	b.n	8006718 <HAL_RCC_OscConfig+0xd4>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10c      	bne.n	80066dc <HAL_RCC_OscConfig+0x98>
 80066c2:	4b7b      	ldr	r3, [pc, #492]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a7a      	ldr	r2, [pc, #488]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 80066c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066cc:	6013      	str	r3, [r2, #0]
 80066ce:	4b78      	ldr	r3, [pc, #480]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a77      	ldr	r2, [pc, #476]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 80066d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066d8:	6013      	str	r3, [r2, #0]
 80066da:	e01d      	b.n	8006718 <HAL_RCC_OscConfig+0xd4>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066e4:	d10c      	bne.n	8006700 <HAL_RCC_OscConfig+0xbc>
 80066e6:	4b72      	ldr	r3, [pc, #456]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a71      	ldr	r2, [pc, #452]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 80066ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066f0:	6013      	str	r3, [r2, #0]
 80066f2:	4b6f      	ldr	r3, [pc, #444]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a6e      	ldr	r2, [pc, #440]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 80066f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	e00b      	b.n	8006718 <HAL_RCC_OscConfig+0xd4>
 8006700:	4b6b      	ldr	r3, [pc, #428]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a6a      	ldr	r2, [pc, #424]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 8006706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800670a:	6013      	str	r3, [r2, #0]
 800670c:	4b68      	ldr	r3, [pc, #416]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a67      	ldr	r2, [pc, #412]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 8006712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006716:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d013      	beq.n	8006748 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006720:	f7fd fbe6 	bl	8003ef0 <HAL_GetTick>
 8006724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006726:	e008      	b.n	800673a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006728:	f7fd fbe2 	bl	8003ef0 <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b64      	cmp	r3, #100	; 0x64
 8006734:	d901      	bls.n	800673a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e200      	b.n	8006b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800673a:	4b5d      	ldr	r3, [pc, #372]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d0f0      	beq.n	8006728 <HAL_RCC_OscConfig+0xe4>
 8006746:	e014      	b.n	8006772 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006748:	f7fd fbd2 	bl	8003ef0 <HAL_GetTick>
 800674c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800674e:	e008      	b.n	8006762 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006750:	f7fd fbce 	bl	8003ef0 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	2b64      	cmp	r3, #100	; 0x64
 800675c:	d901      	bls.n	8006762 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e1ec      	b.n	8006b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006762:	4b53      	ldr	r3, [pc, #332]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1f0      	bne.n	8006750 <HAL_RCC_OscConfig+0x10c>
 800676e:	e000      	b.n	8006772 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d063      	beq.n	8006846 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800677e:	4b4c      	ldr	r3, [pc, #304]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f003 030c 	and.w	r3, r3, #12
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00b      	beq.n	80067a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800678a:	4b49      	ldr	r3, [pc, #292]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f003 030c 	and.w	r3, r3, #12
 8006792:	2b08      	cmp	r3, #8
 8006794:	d11c      	bne.n	80067d0 <HAL_RCC_OscConfig+0x18c>
 8006796:	4b46      	ldr	r3, [pc, #280]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d116      	bne.n	80067d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067a2:	4b43      	ldr	r3, [pc, #268]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d005      	beq.n	80067ba <HAL_RCC_OscConfig+0x176>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d001      	beq.n	80067ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e1c0      	b.n	8006b3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067ba:	4b3d      	ldr	r3, [pc, #244]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	00db      	lsls	r3, r3, #3
 80067c8:	4939      	ldr	r1, [pc, #228]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067ce:	e03a      	b.n	8006846 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d020      	beq.n	800681a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067d8:	4b36      	ldr	r3, [pc, #216]	; (80068b4 <HAL_RCC_OscConfig+0x270>)
 80067da:	2201      	movs	r2, #1
 80067dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067de:	f7fd fb87 	bl	8003ef0 <HAL_GetTick>
 80067e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067e4:	e008      	b.n	80067f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067e6:	f7fd fb83 	bl	8003ef0 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d901      	bls.n	80067f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e1a1      	b.n	8006b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067f8:	4b2d      	ldr	r3, [pc, #180]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d0f0      	beq.n	80067e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006804:	4b2a      	ldr	r3, [pc, #168]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	00db      	lsls	r3, r3, #3
 8006812:	4927      	ldr	r1, [pc, #156]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 8006814:	4313      	orrs	r3, r2
 8006816:	600b      	str	r3, [r1, #0]
 8006818:	e015      	b.n	8006846 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800681a:	4b26      	ldr	r3, [pc, #152]	; (80068b4 <HAL_RCC_OscConfig+0x270>)
 800681c:	2200      	movs	r2, #0
 800681e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006820:	f7fd fb66 	bl	8003ef0 <HAL_GetTick>
 8006824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006826:	e008      	b.n	800683a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006828:	f7fd fb62 	bl	8003ef0 <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	2b02      	cmp	r3, #2
 8006834:	d901      	bls.n	800683a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e180      	b.n	8006b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800683a:	4b1d      	ldr	r3, [pc, #116]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1f0      	bne.n	8006828 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0308 	and.w	r3, r3, #8
 800684e:	2b00      	cmp	r3, #0
 8006850:	d03a      	beq.n	80068c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d019      	beq.n	800688e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800685a:	4b17      	ldr	r3, [pc, #92]	; (80068b8 <HAL_RCC_OscConfig+0x274>)
 800685c:	2201      	movs	r2, #1
 800685e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006860:	f7fd fb46 	bl	8003ef0 <HAL_GetTick>
 8006864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006866:	e008      	b.n	800687a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006868:	f7fd fb42 	bl	8003ef0 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	2b02      	cmp	r3, #2
 8006874:	d901      	bls.n	800687a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e160      	b.n	8006b3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800687a:	4b0d      	ldr	r3, [pc, #52]	; (80068b0 <HAL_RCC_OscConfig+0x26c>)
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687e:	f003 0302 	and.w	r3, r3, #2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d0f0      	beq.n	8006868 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006886:	2001      	movs	r0, #1
 8006888:	f000 face 	bl	8006e28 <RCC_Delay>
 800688c:	e01c      	b.n	80068c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800688e:	4b0a      	ldr	r3, [pc, #40]	; (80068b8 <HAL_RCC_OscConfig+0x274>)
 8006890:	2200      	movs	r2, #0
 8006892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006894:	f7fd fb2c 	bl	8003ef0 <HAL_GetTick>
 8006898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800689a:	e00f      	b.n	80068bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800689c:	f7fd fb28 	bl	8003ef0 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d908      	bls.n	80068bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e146      	b.n	8006b3c <HAL_RCC_OscConfig+0x4f8>
 80068ae:	bf00      	nop
 80068b0:	40021000 	.word	0x40021000
 80068b4:	42420000 	.word	0x42420000
 80068b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068bc:	4b92      	ldr	r3, [pc, #584]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e9      	bne.n	800689c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0304 	and.w	r3, r3, #4
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f000 80a6 	beq.w	8006a22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068d6:	2300      	movs	r3, #0
 80068d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068da:	4b8b      	ldr	r3, [pc, #556]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10d      	bne.n	8006902 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068e6:	4b88      	ldr	r3, [pc, #544]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	4a87      	ldr	r2, [pc, #540]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 80068ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068f0:	61d3      	str	r3, [r2, #28]
 80068f2:	4b85      	ldr	r3, [pc, #532]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068fa:	60bb      	str	r3, [r7, #8]
 80068fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068fe:	2301      	movs	r3, #1
 8006900:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006902:	4b82      	ldr	r3, [pc, #520]	; (8006b0c <HAL_RCC_OscConfig+0x4c8>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800690a:	2b00      	cmp	r3, #0
 800690c:	d118      	bne.n	8006940 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800690e:	4b7f      	ldr	r3, [pc, #508]	; (8006b0c <HAL_RCC_OscConfig+0x4c8>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a7e      	ldr	r2, [pc, #504]	; (8006b0c <HAL_RCC_OscConfig+0x4c8>)
 8006914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800691a:	f7fd fae9 	bl	8003ef0 <HAL_GetTick>
 800691e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006920:	e008      	b.n	8006934 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006922:	f7fd fae5 	bl	8003ef0 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b64      	cmp	r3, #100	; 0x64
 800692e:	d901      	bls.n	8006934 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e103      	b.n	8006b3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006934:	4b75      	ldr	r3, [pc, #468]	; (8006b0c <HAL_RCC_OscConfig+0x4c8>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0f0      	beq.n	8006922 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d106      	bne.n	8006956 <HAL_RCC_OscConfig+0x312>
 8006948:	4b6f      	ldr	r3, [pc, #444]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 800694a:	6a1b      	ldr	r3, [r3, #32]
 800694c:	4a6e      	ldr	r2, [pc, #440]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 800694e:	f043 0301 	orr.w	r3, r3, #1
 8006952:	6213      	str	r3, [r2, #32]
 8006954:	e02d      	b.n	80069b2 <HAL_RCC_OscConfig+0x36e>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10c      	bne.n	8006978 <HAL_RCC_OscConfig+0x334>
 800695e:	4b6a      	ldr	r3, [pc, #424]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	4a69      	ldr	r2, [pc, #420]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 8006964:	f023 0301 	bic.w	r3, r3, #1
 8006968:	6213      	str	r3, [r2, #32]
 800696a:	4b67      	ldr	r3, [pc, #412]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	4a66      	ldr	r2, [pc, #408]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 8006970:	f023 0304 	bic.w	r3, r3, #4
 8006974:	6213      	str	r3, [r2, #32]
 8006976:	e01c      	b.n	80069b2 <HAL_RCC_OscConfig+0x36e>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	2b05      	cmp	r3, #5
 800697e:	d10c      	bne.n	800699a <HAL_RCC_OscConfig+0x356>
 8006980:	4b61      	ldr	r3, [pc, #388]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	4a60      	ldr	r2, [pc, #384]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 8006986:	f043 0304 	orr.w	r3, r3, #4
 800698a:	6213      	str	r3, [r2, #32]
 800698c:	4b5e      	ldr	r3, [pc, #376]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 800698e:	6a1b      	ldr	r3, [r3, #32]
 8006990:	4a5d      	ldr	r2, [pc, #372]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 8006992:	f043 0301 	orr.w	r3, r3, #1
 8006996:	6213      	str	r3, [r2, #32]
 8006998:	e00b      	b.n	80069b2 <HAL_RCC_OscConfig+0x36e>
 800699a:	4b5b      	ldr	r3, [pc, #364]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	4a5a      	ldr	r2, [pc, #360]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 80069a0:	f023 0301 	bic.w	r3, r3, #1
 80069a4:	6213      	str	r3, [r2, #32]
 80069a6:	4b58      	ldr	r3, [pc, #352]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	4a57      	ldr	r2, [pc, #348]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 80069ac:	f023 0304 	bic.w	r3, r3, #4
 80069b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d015      	beq.n	80069e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069ba:	f7fd fa99 	bl	8003ef0 <HAL_GetTick>
 80069be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069c0:	e00a      	b.n	80069d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069c2:	f7fd fa95 	bl	8003ef0 <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d901      	bls.n	80069d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e0b1      	b.n	8006b3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069d8:	4b4b      	ldr	r3, [pc, #300]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 80069da:	6a1b      	ldr	r3, [r3, #32]
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0ee      	beq.n	80069c2 <HAL_RCC_OscConfig+0x37e>
 80069e4:	e014      	b.n	8006a10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069e6:	f7fd fa83 	bl	8003ef0 <HAL_GetTick>
 80069ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069ec:	e00a      	b.n	8006a04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ee:	f7fd fa7f 	bl	8003ef0 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d901      	bls.n	8006a04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e09b      	b.n	8006b3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a04:	4b40      	ldr	r3, [pc, #256]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	f003 0302 	and.w	r3, r3, #2
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1ee      	bne.n	80069ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006a10:	7dfb      	ldrb	r3, [r7, #23]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d105      	bne.n	8006a22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a16:	4b3c      	ldr	r3, [pc, #240]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	4a3b      	ldr	r2, [pc, #236]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 8006a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 8087 	beq.w	8006b3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a2c:	4b36      	ldr	r3, [pc, #216]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f003 030c 	and.w	r3, r3, #12
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	d061      	beq.n	8006afc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	69db      	ldr	r3, [r3, #28]
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d146      	bne.n	8006ace <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a40:	4b33      	ldr	r3, [pc, #204]	; (8006b10 <HAL_RCC_OscConfig+0x4cc>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a46:	f7fd fa53 	bl	8003ef0 <HAL_GetTick>
 8006a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a4c:	e008      	b.n	8006a60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a4e:	f7fd fa4f 	bl	8003ef0 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d901      	bls.n	8006a60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e06d      	b.n	8006b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a60:	4b29      	ldr	r3, [pc, #164]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1f0      	bne.n	8006a4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a1b      	ldr	r3, [r3, #32]
 8006a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a74:	d108      	bne.n	8006a88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006a76:	4b24      	ldr	r3, [pc, #144]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	4921      	ldr	r1, [pc, #132]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 8006a84:	4313      	orrs	r3, r2
 8006a86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a88:	4b1f      	ldr	r3, [pc, #124]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a19      	ldr	r1, [r3, #32]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a98:	430b      	orrs	r3, r1
 8006a9a:	491b      	ldr	r1, [pc, #108]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006aa0:	4b1b      	ldr	r3, [pc, #108]	; (8006b10 <HAL_RCC_OscConfig+0x4cc>)
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aa6:	f7fd fa23 	bl	8003ef0 <HAL_GetTick>
 8006aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006aac:	e008      	b.n	8006ac0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aae:	f7fd fa1f 	bl	8003ef0 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d901      	bls.n	8006ac0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e03d      	b.n	8006b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ac0:	4b11      	ldr	r3, [pc, #68]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d0f0      	beq.n	8006aae <HAL_RCC_OscConfig+0x46a>
 8006acc:	e035      	b.n	8006b3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ace:	4b10      	ldr	r3, [pc, #64]	; (8006b10 <HAL_RCC_OscConfig+0x4cc>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ad4:	f7fd fa0c 	bl	8003ef0 <HAL_GetTick>
 8006ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ada:	e008      	b.n	8006aee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006adc:	f7fd fa08 	bl	8003ef0 <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d901      	bls.n	8006aee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e026      	b.n	8006b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006aee:	4b06      	ldr	r3, [pc, #24]	; (8006b08 <HAL_RCC_OscConfig+0x4c4>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1f0      	bne.n	8006adc <HAL_RCC_OscConfig+0x498>
 8006afa:	e01e      	b.n	8006b3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d107      	bne.n	8006b14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e019      	b.n	8006b3c <HAL_RCC_OscConfig+0x4f8>
 8006b08:	40021000 	.word	0x40021000
 8006b0c:	40007000 	.word	0x40007000
 8006b10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006b14:	4b0b      	ldr	r3, [pc, #44]	; (8006b44 <HAL_RCC_OscConfig+0x500>)
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a1b      	ldr	r3, [r3, #32]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d106      	bne.n	8006b36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d001      	beq.n	8006b3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e000      	b.n	8006b3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3718      	adds	r7, #24
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	40021000 	.word	0x40021000

08006b48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e0d0      	b.n	8006cfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b5c:	4b6a      	ldr	r3, [pc, #424]	; (8006d08 <HAL_RCC_ClockConfig+0x1c0>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0307 	and.w	r3, r3, #7
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d910      	bls.n	8006b8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b6a:	4b67      	ldr	r3, [pc, #412]	; (8006d08 <HAL_RCC_ClockConfig+0x1c0>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f023 0207 	bic.w	r2, r3, #7
 8006b72:	4965      	ldr	r1, [pc, #404]	; (8006d08 <HAL_RCC_ClockConfig+0x1c0>)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b7a:	4b63      	ldr	r3, [pc, #396]	; (8006d08 <HAL_RCC_ClockConfig+0x1c0>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0307 	and.w	r3, r3, #7
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d001      	beq.n	8006b8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e0b8      	b.n	8006cfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0302 	and.w	r3, r3, #2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d020      	beq.n	8006bda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0304 	and.w	r3, r3, #4
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d005      	beq.n	8006bb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ba4:	4b59      	ldr	r3, [pc, #356]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	4a58      	ldr	r2, [pc, #352]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006baa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006bae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0308 	and.w	r3, r3, #8
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d005      	beq.n	8006bc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bbc:	4b53      	ldr	r3, [pc, #332]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	4a52      	ldr	r2, [pc, #328]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006bc2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006bc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bc8:	4b50      	ldr	r3, [pc, #320]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	494d      	ldr	r1, [pc, #308]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d040      	beq.n	8006c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d107      	bne.n	8006bfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bee:	4b47      	ldr	r3, [pc, #284]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d115      	bne.n	8006c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e07f      	b.n	8006cfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d107      	bne.n	8006c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c06:	4b41      	ldr	r3, [pc, #260]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d109      	bne.n	8006c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e073      	b.n	8006cfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c16:	4b3d      	ldr	r3, [pc, #244]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0302 	and.w	r3, r3, #2
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e06b      	b.n	8006cfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c26:	4b39      	ldr	r3, [pc, #228]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f023 0203 	bic.w	r2, r3, #3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	4936      	ldr	r1, [pc, #216]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006c34:	4313      	orrs	r3, r2
 8006c36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c38:	f7fd f95a 	bl	8003ef0 <HAL_GetTick>
 8006c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c3e:	e00a      	b.n	8006c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c40:	f7fd f956 	bl	8003ef0 <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e053      	b.n	8006cfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c56:	4b2d      	ldr	r3, [pc, #180]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f003 020c 	and.w	r2, r3, #12
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d1eb      	bne.n	8006c40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c68:	4b27      	ldr	r3, [pc, #156]	; (8006d08 <HAL_RCC_ClockConfig+0x1c0>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0307 	and.w	r3, r3, #7
 8006c70:	683a      	ldr	r2, [r7, #0]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d210      	bcs.n	8006c98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c76:	4b24      	ldr	r3, [pc, #144]	; (8006d08 <HAL_RCC_ClockConfig+0x1c0>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f023 0207 	bic.w	r2, r3, #7
 8006c7e:	4922      	ldr	r1, [pc, #136]	; (8006d08 <HAL_RCC_ClockConfig+0x1c0>)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c86:	4b20      	ldr	r3, [pc, #128]	; (8006d08 <HAL_RCC_ClockConfig+0x1c0>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0307 	and.w	r3, r3, #7
 8006c8e:	683a      	ldr	r2, [r7, #0]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d001      	beq.n	8006c98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e032      	b.n	8006cfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0304 	and.w	r3, r3, #4
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d008      	beq.n	8006cb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ca4:	4b19      	ldr	r3, [pc, #100]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	4916      	ldr	r1, [pc, #88]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0308 	and.w	r3, r3, #8
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d009      	beq.n	8006cd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006cc2:	4b12      	ldr	r3, [pc, #72]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	00db      	lsls	r3, r3, #3
 8006cd0:	490e      	ldr	r1, [pc, #56]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006cd6:	f000 f821 	bl	8006d1c <HAL_RCC_GetSysClockFreq>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	4b0b      	ldr	r3, [pc, #44]	; (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	091b      	lsrs	r3, r3, #4
 8006ce2:	f003 030f 	and.w	r3, r3, #15
 8006ce6:	490a      	ldr	r1, [pc, #40]	; (8006d10 <HAL_RCC_ClockConfig+0x1c8>)
 8006ce8:	5ccb      	ldrb	r3, [r1, r3]
 8006cea:	fa22 f303 	lsr.w	r3, r2, r3
 8006cee:	4a09      	ldr	r2, [pc, #36]	; (8006d14 <HAL_RCC_ClockConfig+0x1cc>)
 8006cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006cf2:	4b09      	ldr	r3, [pc, #36]	; (8006d18 <HAL_RCC_ClockConfig+0x1d0>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fd f8b8 	bl	8003e6c <HAL_InitTick>

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	40022000 	.word	0x40022000
 8006d0c:	40021000 	.word	0x40021000
 8006d10:	08008d3c 	.word	0x08008d3c
 8006d14:	2000000c 	.word	0x2000000c
 8006d18:	20000010 	.word	0x20000010

08006d1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006d22:	2300      	movs	r3, #0
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	2300      	movs	r3, #0
 8006d28:	60bb      	str	r3, [r7, #8]
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	617b      	str	r3, [r7, #20]
 8006d2e:	2300      	movs	r3, #0
 8006d30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006d36:	4b1e      	ldr	r3, [pc, #120]	; (8006db0 <HAL_RCC_GetSysClockFreq+0x94>)
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f003 030c 	and.w	r3, r3, #12
 8006d42:	2b04      	cmp	r3, #4
 8006d44:	d002      	beq.n	8006d4c <HAL_RCC_GetSysClockFreq+0x30>
 8006d46:	2b08      	cmp	r3, #8
 8006d48:	d003      	beq.n	8006d52 <HAL_RCC_GetSysClockFreq+0x36>
 8006d4a:	e027      	b.n	8006d9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006d4c:	4b19      	ldr	r3, [pc, #100]	; (8006db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8006d4e:	613b      	str	r3, [r7, #16]
      break;
 8006d50:	e027      	b.n	8006da2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	0c9b      	lsrs	r3, r3, #18
 8006d56:	f003 030f 	and.w	r3, r3, #15
 8006d5a:	4a17      	ldr	r2, [pc, #92]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006d5c:	5cd3      	ldrb	r3, [r2, r3]
 8006d5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d010      	beq.n	8006d8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006d6a:	4b11      	ldr	r3, [pc, #68]	; (8006db0 <HAL_RCC_GetSysClockFreq+0x94>)
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	0c5b      	lsrs	r3, r3, #17
 8006d70:	f003 0301 	and.w	r3, r3, #1
 8006d74:	4a11      	ldr	r2, [pc, #68]	; (8006dbc <HAL_RCC_GetSysClockFreq+0xa0>)
 8006d76:	5cd3      	ldrb	r3, [r2, r3]
 8006d78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a0d      	ldr	r2, [pc, #52]	; (8006db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8006d7e:	fb03 f202 	mul.w	r2, r3, r2
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	e004      	b.n	8006d96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a0c      	ldr	r2, [pc, #48]	; (8006dc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006d90:	fb02 f303 	mul.w	r3, r2, r3
 8006d94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	613b      	str	r3, [r7, #16]
      break;
 8006d9a:	e002      	b.n	8006da2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006d9c:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8006d9e:	613b      	str	r3, [r7, #16]
      break;
 8006da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006da2:	693b      	ldr	r3, [r7, #16]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	371c      	adds	r7, #28
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bc80      	pop	{r7}
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	40021000 	.word	0x40021000
 8006db4:	007a1200 	.word	0x007a1200
 8006db8:	08008d54 	.word	0x08008d54
 8006dbc:	08008d64 	.word	0x08008d64
 8006dc0:	003d0900 	.word	0x003d0900

08006dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006dc8:	4b02      	ldr	r3, [pc, #8]	; (8006dd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8006dca:	681b      	ldr	r3, [r3, #0]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bc80      	pop	{r7}
 8006dd2:	4770      	bx	lr
 8006dd4:	2000000c 	.word	0x2000000c

08006dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ddc:	f7ff fff2 	bl	8006dc4 <HAL_RCC_GetHCLKFreq>
 8006de0:	4602      	mov	r2, r0
 8006de2:	4b05      	ldr	r3, [pc, #20]	; (8006df8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	0a1b      	lsrs	r3, r3, #8
 8006de8:	f003 0307 	and.w	r3, r3, #7
 8006dec:	4903      	ldr	r1, [pc, #12]	; (8006dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dee:	5ccb      	ldrb	r3, [r1, r3]
 8006df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	40021000 	.word	0x40021000
 8006dfc:	08008d4c 	.word	0x08008d4c

08006e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e04:	f7ff ffde 	bl	8006dc4 <HAL_RCC_GetHCLKFreq>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	4b05      	ldr	r3, [pc, #20]	; (8006e20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	0adb      	lsrs	r3, r3, #11
 8006e10:	f003 0307 	and.w	r3, r3, #7
 8006e14:	4903      	ldr	r1, [pc, #12]	; (8006e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e16:	5ccb      	ldrb	r3, [r1, r3]
 8006e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	40021000 	.word	0x40021000
 8006e24:	08008d4c 	.word	0x08008d4c

08006e28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006e30:	4b0a      	ldr	r3, [pc, #40]	; (8006e5c <RCC_Delay+0x34>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a0a      	ldr	r2, [pc, #40]	; (8006e60 <RCC_Delay+0x38>)
 8006e36:	fba2 2303 	umull	r2, r3, r2, r3
 8006e3a:	0a5b      	lsrs	r3, r3, #9
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	fb02 f303 	mul.w	r3, r2, r3
 8006e42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006e44:	bf00      	nop
  }
  while (Delay --);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	1e5a      	subs	r2, r3, #1
 8006e4a:	60fa      	str	r2, [r7, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1f9      	bne.n	8006e44 <RCC_Delay+0x1c>
}
 8006e50:	bf00      	nop
 8006e52:	bf00      	nop
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bc80      	pop	{r7}
 8006e5a:	4770      	bx	lr
 8006e5c:	2000000c 	.word	0x2000000c
 8006e60:	10624dd3 	.word	0x10624dd3

08006e64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e042      	b.n	8006efc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d106      	bne.n	8006e90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7fc fe0a 	bl	8003aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2224      	movs	r2, #36	; 0x24
 8006e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68da      	ldr	r2, [r3, #12]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ea6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fe19 	bl	8007ae0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	691a      	ldr	r2, [r3, #16]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ebc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	695a      	ldr	r2, [r3, #20]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ecc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68da      	ldr	r2, [r3, #12]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006edc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b20      	cmp	r3, #32
 8006f1c:	d112      	bne.n	8006f44 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d002      	beq.n	8006f2a <HAL_UART_Receive_IT+0x26>
 8006f24:	88fb      	ldrh	r3, [r7, #6]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e00b      	b.n	8006f46 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f34:	88fb      	ldrh	r3, [r7, #6]
 8006f36:	461a      	mov	r2, r3
 8006f38:	68b9      	ldr	r1, [r7, #8]
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f000 fbd5 	bl	80076ea <UART_Start_Receive_IT>
 8006f40:	4603      	mov	r3, r0
 8006f42:	e000      	b.n	8006f46 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006f44:	2302      	movs	r3, #2
  }
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
	...

08006f50 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b08c      	sub	sp, #48	; 0x30
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b20      	cmp	r3, #32
 8006f68:	d156      	bne.n	8007018 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <HAL_UART_Transmit_DMA+0x26>
 8006f70:	88fb      	ldrh	r3, [r7, #6]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e04f      	b.n	800701a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	88fa      	ldrh	r2, [r7, #6]
 8006f84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	88fa      	ldrh	r2, [r7, #6]
 8006f8a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2221      	movs	r2, #33	; 0x21
 8006f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9e:	4a21      	ldr	r2, [pc, #132]	; (8007024 <HAL_UART_Transmit_DMA+0xd4>)
 8006fa0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa6:	4a20      	ldr	r2, [pc, #128]	; (8007028 <HAL_UART_Transmit_DMA+0xd8>)
 8006fa8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fae:	4a1f      	ldr	r2, [pc, #124]	; (800702c <HAL_UART_Transmit_DMA+0xdc>)
 8006fb0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8006fba:	f107 0308 	add.w	r3, r7, #8
 8006fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc6:	6819      	ldr	r1, [r3, #0]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	3304      	adds	r3, #4
 8006fce:	461a      	mov	r2, r3
 8006fd0:	88fb      	ldrh	r3, [r7, #6]
 8006fd2:	f7fd f923 	bl	800421c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006fde:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3314      	adds	r3, #20
 8006fe6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	e853 3f00 	ldrex	r3, [r3]
 8006fee:	617b      	str	r3, [r7, #20]
   return(result);
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ff6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	3314      	adds	r3, #20
 8006ffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007000:	627a      	str	r2, [r7, #36]	; 0x24
 8007002:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007004:	6a39      	ldr	r1, [r7, #32]
 8007006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007008:	e841 2300 	strex	r3, r2, [r1]
 800700c:	61fb      	str	r3, [r7, #28]
   return(result);
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1e5      	bne.n	8006fe0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8007014:	2300      	movs	r3, #0
 8007016:	e000      	b.n	800701a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007018:	2302      	movs	r3, #2
  }
}
 800701a:	4618      	mov	r0, r3
 800701c:	3730      	adds	r7, #48	; 0x30
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	080075a1 	.word	0x080075a1
 8007028:	0800763b 	.word	0x0800763b
 800702c:	08007657 	.word	0x08007657

08007030 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b0ba      	sub	sp, #232	; 0xe8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007056:	2300      	movs	r3, #0
 8007058:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800705c:	2300      	movs	r3, #0
 800705e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007066:	f003 030f 	and.w	r3, r3, #15
 800706a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800706e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10f      	bne.n	8007096 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800707a:	f003 0320 	and.w	r3, r3, #32
 800707e:	2b00      	cmp	r3, #0
 8007080:	d009      	beq.n	8007096 <HAL_UART_IRQHandler+0x66>
 8007082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	2b00      	cmp	r3, #0
 800708c:	d003      	beq.n	8007096 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fc68 	bl	8007964 <UART_Receive_IT>
      return;
 8007094:	e25b      	b.n	800754e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007096:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800709a:	2b00      	cmp	r3, #0
 800709c:	f000 80de 	beq.w	800725c <HAL_UART_IRQHandler+0x22c>
 80070a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d106      	bne.n	80070ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80070ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 80d1 	beq.w	800725c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00b      	beq.n	80070de <HAL_UART_IRQHandler+0xae>
 80070c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d005      	beq.n	80070de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d6:	f043 0201 	orr.w	r2, r3, #1
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070e2:	f003 0304 	and.w	r3, r3, #4
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00b      	beq.n	8007102 <HAL_UART_IRQHandler+0xd2>
 80070ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d005      	beq.n	8007102 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070fa:	f043 0202 	orr.w	r2, r3, #2
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00b      	beq.n	8007126 <HAL_UART_IRQHandler+0xf6>
 800710e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b00      	cmp	r3, #0
 8007118:	d005      	beq.n	8007126 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800711e:	f043 0204 	orr.w	r2, r3, #4
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800712a:	f003 0308 	and.w	r3, r3, #8
 800712e:	2b00      	cmp	r3, #0
 8007130:	d011      	beq.n	8007156 <HAL_UART_IRQHandler+0x126>
 8007132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007136:	f003 0320 	and.w	r3, r3, #32
 800713a:	2b00      	cmp	r3, #0
 800713c:	d105      	bne.n	800714a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800713e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	2b00      	cmp	r3, #0
 8007148:	d005      	beq.n	8007156 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800714e:	f043 0208 	orr.w	r2, r3, #8
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715a:	2b00      	cmp	r3, #0
 800715c:	f000 81f2 	beq.w	8007544 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007164:	f003 0320 	and.w	r3, r3, #32
 8007168:	2b00      	cmp	r3, #0
 800716a:	d008      	beq.n	800717e <HAL_UART_IRQHandler+0x14e>
 800716c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007170:	f003 0320 	and.w	r3, r3, #32
 8007174:	2b00      	cmp	r3, #0
 8007176:	d002      	beq.n	800717e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fbf3 	bl	8007964 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007188:	2b00      	cmp	r3, #0
 800718a:	bf14      	ite	ne
 800718c:	2301      	movne	r3, #1
 800718e:	2300      	moveq	r3, #0
 8007190:	b2db      	uxtb	r3, r3
 8007192:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719a:	f003 0308 	and.w	r3, r3, #8
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d103      	bne.n	80071aa <HAL_UART_IRQHandler+0x17a>
 80071a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d04f      	beq.n	800724a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fafd 	bl	80077aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d041      	beq.n	8007242 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	3314      	adds	r3, #20
 80071c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071cc:	e853 3f00 	ldrex	r3, [r3]
 80071d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80071d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	3314      	adds	r3, #20
 80071e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80071ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80071ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80071f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80071fa:	e841 2300 	strex	r3, r2, [r1]
 80071fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007202:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1d9      	bne.n	80071be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800720e:	2b00      	cmp	r3, #0
 8007210:	d013      	beq.n	800723a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007216:	4a7e      	ldr	r2, [pc, #504]	; (8007410 <HAL_UART_IRQHandler+0x3e0>)
 8007218:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800721e:	4618      	mov	r0, r3
 8007220:	f7fd f898 	bl	8004354 <HAL_DMA_Abort_IT>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d016      	beq.n	8007258 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007234:	4610      	mov	r0, r2
 8007236:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007238:	e00e      	b.n	8007258 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f99c 	bl	8007578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007240:	e00a      	b.n	8007258 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f998 	bl	8007578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007248:	e006      	b.n	8007258 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f994 	bl	8007578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007256:	e175      	b.n	8007544 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007258:	bf00      	nop
    return;
 800725a:	e173      	b.n	8007544 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007260:	2b01      	cmp	r3, #1
 8007262:	f040 814f 	bne.w	8007504 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800726a:	f003 0310 	and.w	r3, r3, #16
 800726e:	2b00      	cmp	r3, #0
 8007270:	f000 8148 	beq.w	8007504 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007278:	f003 0310 	and.w	r3, r3, #16
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 8141 	beq.w	8007504 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007282:	2300      	movs	r3, #0
 8007284:	60bb      	str	r3, [r7, #8]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	60bb      	str	r3, [r7, #8]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	60bb      	str	r3, [r7, #8]
 8007296:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 80b6 	beq.w	8007414 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f000 8145 	beq.w	8007548 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072c6:	429a      	cmp	r2, r3
 80072c8:	f080 813e 	bcs.w	8007548 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	2b20      	cmp	r3, #32
 80072dc:	f000 8088 	beq.w	80073f0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	330c      	adds	r3, #12
 80072e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80072ee:	e853 3f00 	ldrex	r3, [r3]
 80072f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80072f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	330c      	adds	r3, #12
 8007308:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800730c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007310:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007314:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007318:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800731c:	e841 2300 	strex	r3, r2, [r1]
 8007320:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007324:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1d9      	bne.n	80072e0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	3314      	adds	r3, #20
 8007332:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007334:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007336:	e853 3f00 	ldrex	r3, [r3]
 800733a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800733c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800733e:	f023 0301 	bic.w	r3, r3, #1
 8007342:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3314      	adds	r3, #20
 800734c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007350:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007354:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007356:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007358:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800735c:	e841 2300 	strex	r3, r2, [r1]
 8007360:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007362:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1e1      	bne.n	800732c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3314      	adds	r3, #20
 800736e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007370:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007372:	e853 3f00 	ldrex	r3, [r3]
 8007376:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800737a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800737e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3314      	adds	r3, #20
 8007388:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800738c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800738e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007390:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007392:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007394:	e841 2300 	strex	r3, r2, [r1]
 8007398:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800739a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1e3      	bne.n	8007368 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2220      	movs	r2, #32
 80073a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	330c      	adds	r3, #12
 80073b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073b8:	e853 3f00 	ldrex	r3, [r3]
 80073bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80073be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073c0:	f023 0310 	bic.w	r3, r3, #16
 80073c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	330c      	adds	r3, #12
 80073ce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80073d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80073d4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073da:	e841 2300 	strex	r3, r2, [r1]
 80073de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80073e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1e3      	bne.n	80073ae <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fc ff76 	bl	80042dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2202      	movs	r2, #2
 80073f4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073fe:	b29b      	uxth	r3, r3
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	b29b      	uxth	r3, r3
 8007404:	4619      	mov	r1, r3
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f8bf 	bl	800758a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800740c:	e09c      	b.n	8007548 <HAL_UART_IRQHandler+0x518>
 800740e:	bf00      	nop
 8007410:	0800786f 	.word	0x0800786f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800741c:	b29b      	uxth	r3, r3
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007428:	b29b      	uxth	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 808e 	beq.w	800754c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007430:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 8089 	beq.w	800754c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	330c      	adds	r3, #12
 8007440:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007444:	e853 3f00 	ldrex	r3, [r3]
 8007448:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800744a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800744c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007450:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	330c      	adds	r3, #12
 800745a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800745e:	647a      	str	r2, [r7, #68]	; 0x44
 8007460:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007462:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007464:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007466:	e841 2300 	strex	r3, r2, [r1]
 800746a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800746c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1e3      	bne.n	800743a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3314      	adds	r3, #20
 8007478:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747c:	e853 3f00 	ldrex	r3, [r3]
 8007480:	623b      	str	r3, [r7, #32]
   return(result);
 8007482:	6a3b      	ldr	r3, [r7, #32]
 8007484:	f023 0301 	bic.w	r3, r3, #1
 8007488:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3314      	adds	r3, #20
 8007492:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007496:	633a      	str	r2, [r7, #48]	; 0x30
 8007498:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800749c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800749e:	e841 2300 	strex	r3, r2, [r1]
 80074a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1e3      	bne.n	8007472 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2220      	movs	r2, #32
 80074ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	330c      	adds	r3, #12
 80074be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	e853 3f00 	ldrex	r3, [r3]
 80074c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f023 0310 	bic.w	r3, r3, #16
 80074ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	330c      	adds	r3, #12
 80074d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80074dc:	61fa      	str	r2, [r7, #28]
 80074de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e0:	69b9      	ldr	r1, [r7, #24]
 80074e2:	69fa      	ldr	r2, [r7, #28]
 80074e4:	e841 2300 	strex	r3, r2, [r1]
 80074e8:	617b      	str	r3, [r7, #20]
   return(result);
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1e3      	bne.n	80074b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2202      	movs	r2, #2
 80074f4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074fa:	4619      	mov	r1, r3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f844 	bl	800758a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007502:	e023      	b.n	800754c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800750c:	2b00      	cmp	r3, #0
 800750e:	d009      	beq.n	8007524 <HAL_UART_IRQHandler+0x4f4>
 8007510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007518:	2b00      	cmp	r3, #0
 800751a:	d003      	beq.n	8007524 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f9ba 	bl	8007896 <UART_Transmit_IT>
    return;
 8007522:	e014      	b.n	800754e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00e      	beq.n	800754e <HAL_UART_IRQHandler+0x51e>
 8007530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007538:	2b00      	cmp	r3, #0
 800753a:	d008      	beq.n	800754e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f9f9 	bl	8007934 <UART_EndTransmit_IT>
    return;
 8007542:	e004      	b.n	800754e <HAL_UART_IRQHandler+0x51e>
    return;
 8007544:	bf00      	nop
 8007546:	e002      	b.n	800754e <HAL_UART_IRQHandler+0x51e>
      return;
 8007548:	bf00      	nop
 800754a:	e000      	b.n	800754e <HAL_UART_IRQHandler+0x51e>
      return;
 800754c:	bf00      	nop
  }
}
 800754e:	37e8      	adds	r7, #232	; 0xe8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	bc80      	pop	{r7}
 8007564:	4770      	bx	lr

08007566 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007566:	b480      	push	{r7}
 8007568:	b083      	sub	sp, #12
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800756e:	bf00      	nop
 8007570:	370c      	adds	r7, #12
 8007572:	46bd      	mov	sp, r7
 8007574:	bc80      	pop	{r7}
 8007576:	4770      	bx	lr

08007578 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	bc80      	pop	{r7}
 8007588:	4770      	bx	lr

0800758a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800758a:	b480      	push	{r7}
 800758c:	b083      	sub	sp, #12
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	460b      	mov	r3, r1
 8007594:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007596:	bf00      	nop
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	bc80      	pop	{r7}
 800759e:	4770      	bx	lr

080075a0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b090      	sub	sp, #64	; 0x40
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0320 	and.w	r3, r3, #32
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d137      	bne.n	800762c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80075bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075be:	2200      	movs	r2, #0
 80075c0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80075c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	3314      	adds	r3, #20
 80075c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	e853 3f00 	ldrex	r3, [r3]
 80075d0:	623b      	str	r3, [r7, #32]
   return(result);
 80075d2:	6a3b      	ldr	r3, [r7, #32]
 80075d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80075da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	3314      	adds	r3, #20
 80075e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075e2:	633a      	str	r2, [r7, #48]	; 0x30
 80075e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ea:	e841 2300 	strex	r3, r2, [r1]
 80075ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1e5      	bne.n	80075c2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	330c      	adds	r3, #12
 80075fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	e853 3f00 	ldrex	r3, [r3]
 8007604:	60fb      	str	r3, [r7, #12]
   return(result);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800760c:	637b      	str	r3, [r7, #52]	; 0x34
 800760e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	330c      	adds	r3, #12
 8007614:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007616:	61fa      	str	r2, [r7, #28]
 8007618:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761a:	69b9      	ldr	r1, [r7, #24]
 800761c:	69fa      	ldr	r2, [r7, #28]
 800761e:	e841 2300 	strex	r3, r2, [r1]
 8007622:	617b      	str	r3, [r7, #20]
   return(result);
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1e5      	bne.n	80075f6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800762a:	e002      	b.n	8007632 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800762c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800762e:	f7ff ff91 	bl	8007554 <HAL_UART_TxCpltCallback>
}
 8007632:	bf00      	nop
 8007634:	3740      	adds	r7, #64	; 0x40
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b084      	sub	sp, #16
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007646:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f7ff ff8c 	bl	8007566 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800764e:	bf00      	nop
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b084      	sub	sp, #16
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800765e:	2300      	movs	r3, #0
 8007660:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007666:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007672:	2b00      	cmp	r3, #0
 8007674:	bf14      	ite	ne
 8007676:	2301      	movne	r3, #1
 8007678:	2300      	moveq	r3, #0
 800767a:	b2db      	uxtb	r3, r3
 800767c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007684:	b2db      	uxtb	r3, r3
 8007686:	2b21      	cmp	r3, #33	; 0x21
 8007688:	d108      	bne.n	800769c <UART_DMAError+0x46>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d005      	beq.n	800769c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2200      	movs	r2, #0
 8007694:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007696:	68b8      	ldr	r0, [r7, #8]
 8007698:	f000 f860 	bl	800775c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	695b      	ldr	r3, [r3, #20]
 80076a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	bf14      	ite	ne
 80076aa:	2301      	movne	r3, #1
 80076ac:	2300      	moveq	r3, #0
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b22      	cmp	r3, #34	; 0x22
 80076bc:	d108      	bne.n	80076d0 <UART_DMAError+0x7a>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d005      	beq.n	80076d0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	2200      	movs	r2, #0
 80076c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80076ca:	68b8      	ldr	r0, [r7, #8]
 80076cc:	f000 f86d 	bl	80077aa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d4:	f043 0210 	orr.w	r2, r3, #16
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076dc:	68b8      	ldr	r0, [r7, #8]
 80076de:	f7ff ff4b 	bl	8007578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076e2:	bf00      	nop
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b085      	sub	sp, #20
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	60f8      	str	r0, [r7, #12]
 80076f2:	60b9      	str	r1, [r7, #8]
 80076f4:	4613      	mov	r3, r2
 80076f6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	88fa      	ldrh	r2, [r7, #6]
 8007702:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	88fa      	ldrh	r2, [r7, #6]
 8007708:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2222      	movs	r2, #34	; 0x22
 8007714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d007      	beq.n	8007730 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68da      	ldr	r2, [r3, #12]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800772e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	695a      	ldr	r2, [r3, #20]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f042 0201 	orr.w	r2, r2, #1
 800773e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68da      	ldr	r2, [r3, #12]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f042 0220 	orr.w	r2, r2, #32
 800774e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	bc80      	pop	{r7}
 800775a:	4770      	bx	lr

0800775c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800775c:	b480      	push	{r7}
 800775e:	b089      	sub	sp, #36	; 0x24
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	330c      	adds	r3, #12
 800776a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	e853 3f00 	ldrex	r3, [r3]
 8007772:	60bb      	str	r3, [r7, #8]
   return(result);
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800777a:	61fb      	str	r3, [r7, #28]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	330c      	adds	r3, #12
 8007782:	69fa      	ldr	r2, [r7, #28]
 8007784:	61ba      	str	r2, [r7, #24]
 8007786:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007788:	6979      	ldr	r1, [r7, #20]
 800778a:	69ba      	ldr	r2, [r7, #24]
 800778c:	e841 2300 	strex	r3, r2, [r1]
 8007790:	613b      	str	r3, [r7, #16]
   return(result);
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1e5      	bne.n	8007764 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2220      	movs	r2, #32
 800779c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80077a0:	bf00      	nop
 80077a2:	3724      	adds	r7, #36	; 0x24
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bc80      	pop	{r7}
 80077a8:	4770      	bx	lr

080077aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b095      	sub	sp, #84	; 0x54
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	330c      	adds	r3, #12
 80077b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077bc:	e853 3f00 	ldrex	r3, [r3]
 80077c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	330c      	adds	r3, #12
 80077d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077d2:	643a      	str	r2, [r7, #64]	; 0x40
 80077d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077da:	e841 2300 	strex	r3, r2, [r1]
 80077de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1e5      	bne.n	80077b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3314      	adds	r3, #20
 80077ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ee:	6a3b      	ldr	r3, [r7, #32]
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	f023 0301 	bic.w	r3, r3, #1
 80077fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3314      	adds	r3, #20
 8007804:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007806:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007808:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800780c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800780e:	e841 2300 	strex	r3, r2, [r1]
 8007812:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1e5      	bne.n	80077e6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781e:	2b01      	cmp	r3, #1
 8007820:	d119      	bne.n	8007856 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	330c      	adds	r3, #12
 8007828:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	e853 3f00 	ldrex	r3, [r3]
 8007830:	60bb      	str	r3, [r7, #8]
   return(result);
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	f023 0310 	bic.w	r3, r3, #16
 8007838:	647b      	str	r3, [r7, #68]	; 0x44
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	330c      	adds	r3, #12
 8007840:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007842:	61ba      	str	r2, [r7, #24]
 8007844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007846:	6979      	ldr	r1, [r7, #20]
 8007848:	69ba      	ldr	r2, [r7, #24]
 800784a:	e841 2300 	strex	r3, r2, [r1]
 800784e:	613b      	str	r3, [r7, #16]
   return(result);
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1e5      	bne.n	8007822 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2220      	movs	r2, #32
 800785a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007864:	bf00      	nop
 8007866:	3754      	adds	r7, #84	; 0x54
 8007868:	46bd      	mov	sp, r7
 800786a:	bc80      	pop	{r7}
 800786c:	4770      	bx	lr

0800786e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b084      	sub	sp, #16
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f7ff fe75 	bl	8007578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800788e:	bf00      	nop
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007896:	b480      	push	{r7}
 8007898:	b085      	sub	sp, #20
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b21      	cmp	r3, #33	; 0x21
 80078a8:	d13e      	bne.n	8007928 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078b2:	d114      	bne.n	80078de <UART_Transmit_IT+0x48>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d110      	bne.n	80078de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a1b      	ldr	r3, [r3, #32]
 80078c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	881b      	ldrh	r3, [r3, #0]
 80078c6:	461a      	mov	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a1b      	ldr	r3, [r3, #32]
 80078d6:	1c9a      	adds	r2, r3, #2
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	621a      	str	r2, [r3, #32]
 80078dc:	e008      	b.n	80078f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	1c59      	adds	r1, r3, #1
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	6211      	str	r1, [r2, #32]
 80078e8:	781a      	ldrb	r2, [r3, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	3b01      	subs	r3, #1
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	4619      	mov	r1, r3
 80078fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007900:	2b00      	cmp	r3, #0
 8007902:	d10f      	bne.n	8007924 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68da      	ldr	r2, [r3, #12]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007912:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68da      	ldr	r2, [r3, #12]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007922:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	e000      	b.n	800792a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007928:	2302      	movs	r3, #2
  }
}
 800792a:	4618      	mov	r0, r3
 800792c:	3714      	adds	r7, #20
 800792e:	46bd      	mov	sp, r7
 8007930:	bc80      	pop	{r7}
 8007932:	4770      	bx	lr

08007934 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68da      	ldr	r2, [r3, #12]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800794a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2220      	movs	r2, #32
 8007950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7ff fdfd 	bl	8007554 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b08c      	sub	sp, #48	; 0x30
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b22      	cmp	r3, #34	; 0x22
 8007976:	f040 80ae 	bne.w	8007ad6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007982:	d117      	bne.n	80079b4 <UART_Receive_IT+0x50>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d113      	bne.n	80079b4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800798c:	2300      	movs	r3, #0
 800798e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007994:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	b29b      	uxth	r3, r3
 800799e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ac:	1c9a      	adds	r2, r3, #2
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	629a      	str	r2, [r3, #40]	; 0x28
 80079b2:	e026      	b.n	8007a02 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80079ba:	2300      	movs	r3, #0
 80079bc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079c6:	d007      	beq.n	80079d8 <UART_Receive_IT+0x74>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10a      	bne.n	80079e6 <UART_Receive_IT+0x82>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d106      	bne.n	80079e6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	b2da      	uxtb	r2, r3
 80079e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e2:	701a      	strb	r2, [r3, #0]
 80079e4:	e008      	b.n	80079f8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079f2:	b2da      	uxtb	r2, r3
 80079f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fc:	1c5a      	adds	r2, r3, #1
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d15d      	bne.n	8007ad2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68da      	ldr	r2, [r3, #12]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f022 0220 	bic.w	r2, r2, #32
 8007a24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68da      	ldr	r2, [r3, #12]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	695a      	ldr	r2, [r3, #20]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f022 0201 	bic.w	r2, r2, #1
 8007a44:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2220      	movs	r2, #32
 8007a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d135      	bne.n	8007ac8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	330c      	adds	r3, #12
 8007a68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	e853 3f00 	ldrex	r3, [r3]
 8007a70:	613b      	str	r3, [r7, #16]
   return(result);
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	f023 0310 	bic.w	r3, r3, #16
 8007a78:	627b      	str	r3, [r7, #36]	; 0x24
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	330c      	adds	r3, #12
 8007a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a82:	623a      	str	r2, [r7, #32]
 8007a84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a86:	69f9      	ldr	r1, [r7, #28]
 8007a88:	6a3a      	ldr	r2, [r7, #32]
 8007a8a:	e841 2300 	strex	r3, r2, [r1]
 8007a8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1e5      	bne.n	8007a62 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0310 	and.w	r3, r3, #16
 8007aa0:	2b10      	cmp	r3, #16
 8007aa2:	d10a      	bne.n	8007aba <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	60fb      	str	r3, [r7, #12]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	60fb      	str	r3, [r7, #12]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	60fb      	str	r3, [r7, #12]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007abe:	4619      	mov	r1, r3
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f7ff fd62 	bl	800758a <HAL_UARTEx_RxEventCallback>
 8007ac6:	e002      	b.n	8007ace <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f7f9 fc33 	bl	8001334 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	e002      	b.n	8007ad8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	e000      	b.n	8007ad8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007ad6:	2302      	movs	r3, #2
  }
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3730      	adds	r7, #48	; 0x30
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	68da      	ldr	r2, [r3, #12]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	430a      	orrs	r2, r1
 8007afc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689a      	ldr	r2, [r3, #8]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	431a      	orrs	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007b1a:	f023 030c 	bic.w	r3, r3, #12
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	6812      	ldr	r2, [r2, #0]
 8007b22:	68b9      	ldr	r1, [r7, #8]
 8007b24:	430b      	orrs	r3, r1
 8007b26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	699a      	ldr	r2, [r3, #24]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a2c      	ldr	r2, [pc, #176]	; (8007bf4 <UART_SetConfig+0x114>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d103      	bne.n	8007b50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007b48:	f7ff f95a 	bl	8006e00 <HAL_RCC_GetPCLK2Freq>
 8007b4c:	60f8      	str	r0, [r7, #12]
 8007b4e:	e002      	b.n	8007b56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007b50:	f7ff f942 	bl	8006dd8 <HAL_RCC_GetPCLK1Freq>
 8007b54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	4413      	add	r3, r2
 8007b5e:	009a      	lsls	r2, r3, #2
 8007b60:	441a      	add	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b6c:	4a22      	ldr	r2, [pc, #136]	; (8007bf8 <UART_SetConfig+0x118>)
 8007b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b72:	095b      	lsrs	r3, r3, #5
 8007b74:	0119      	lsls	r1, r3, #4
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	009a      	lsls	r2, r3, #2
 8007b80:	441a      	add	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b8c:	4b1a      	ldr	r3, [pc, #104]	; (8007bf8 <UART_SetConfig+0x118>)
 8007b8e:	fba3 0302 	umull	r0, r3, r3, r2
 8007b92:	095b      	lsrs	r3, r3, #5
 8007b94:	2064      	movs	r0, #100	; 0x64
 8007b96:	fb00 f303 	mul.w	r3, r0, r3
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	011b      	lsls	r3, r3, #4
 8007b9e:	3332      	adds	r3, #50	; 0x32
 8007ba0:	4a15      	ldr	r2, [pc, #84]	; (8007bf8 <UART_SetConfig+0x118>)
 8007ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba6:	095b      	lsrs	r3, r3, #5
 8007ba8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bac:	4419      	add	r1, r3
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	009a      	lsls	r2, r3, #2
 8007bb8:	441a      	add	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8007bc4:	4b0c      	ldr	r3, [pc, #48]	; (8007bf8 <UART_SetConfig+0x118>)
 8007bc6:	fba3 0302 	umull	r0, r3, r3, r2
 8007bca:	095b      	lsrs	r3, r3, #5
 8007bcc:	2064      	movs	r0, #100	; 0x64
 8007bce:	fb00 f303 	mul.w	r3, r0, r3
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	011b      	lsls	r3, r3, #4
 8007bd6:	3332      	adds	r3, #50	; 0x32
 8007bd8:	4a07      	ldr	r2, [pc, #28]	; (8007bf8 <UART_SetConfig+0x118>)
 8007bda:	fba2 2303 	umull	r2, r3, r2, r3
 8007bde:	095b      	lsrs	r3, r3, #5
 8007be0:	f003 020f 	and.w	r2, r3, #15
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	440a      	add	r2, r1
 8007bea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007bec:	bf00      	nop
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	40013800 	.word	0x40013800
 8007bf8:	51eb851f 	.word	0x51eb851f

08007bfc <__errno>:
 8007bfc:	4b01      	ldr	r3, [pc, #4]	; (8007c04 <__errno+0x8>)
 8007bfe:	6818      	ldr	r0, [r3, #0]
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	20000018 	.word	0x20000018

08007c08 <__libc_init_array>:
 8007c08:	b570      	push	{r4, r5, r6, lr}
 8007c0a:	2600      	movs	r6, #0
 8007c0c:	4d0c      	ldr	r5, [pc, #48]	; (8007c40 <__libc_init_array+0x38>)
 8007c0e:	4c0d      	ldr	r4, [pc, #52]	; (8007c44 <__libc_init_array+0x3c>)
 8007c10:	1b64      	subs	r4, r4, r5
 8007c12:	10a4      	asrs	r4, r4, #2
 8007c14:	42a6      	cmp	r6, r4
 8007c16:	d109      	bne.n	8007c2c <__libc_init_array+0x24>
 8007c18:	f000 ff38 	bl	8008a8c <_init>
 8007c1c:	2600      	movs	r6, #0
 8007c1e:	4d0a      	ldr	r5, [pc, #40]	; (8007c48 <__libc_init_array+0x40>)
 8007c20:	4c0a      	ldr	r4, [pc, #40]	; (8007c4c <__libc_init_array+0x44>)
 8007c22:	1b64      	subs	r4, r4, r5
 8007c24:	10a4      	asrs	r4, r4, #2
 8007c26:	42a6      	cmp	r6, r4
 8007c28:	d105      	bne.n	8007c36 <__libc_init_array+0x2e>
 8007c2a:	bd70      	pop	{r4, r5, r6, pc}
 8007c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c30:	4798      	blx	r3
 8007c32:	3601      	adds	r6, #1
 8007c34:	e7ee      	b.n	8007c14 <__libc_init_array+0xc>
 8007c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c3a:	4798      	blx	r3
 8007c3c:	3601      	adds	r6, #1
 8007c3e:	e7f2      	b.n	8007c26 <__libc_init_array+0x1e>
 8007c40:	08008d98 	.word	0x08008d98
 8007c44:	08008d98 	.word	0x08008d98
 8007c48:	08008d98 	.word	0x08008d98
 8007c4c:	08008d9c 	.word	0x08008d9c

08007c50 <memcmp>:
 8007c50:	b510      	push	{r4, lr}
 8007c52:	3901      	subs	r1, #1
 8007c54:	4402      	add	r2, r0
 8007c56:	4290      	cmp	r0, r2
 8007c58:	d101      	bne.n	8007c5e <memcmp+0xe>
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	e005      	b.n	8007c6a <memcmp+0x1a>
 8007c5e:	7803      	ldrb	r3, [r0, #0]
 8007c60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007c64:	42a3      	cmp	r3, r4
 8007c66:	d001      	beq.n	8007c6c <memcmp+0x1c>
 8007c68:	1b18      	subs	r0, r3, r4
 8007c6a:	bd10      	pop	{r4, pc}
 8007c6c:	3001      	adds	r0, #1
 8007c6e:	e7f2      	b.n	8007c56 <memcmp+0x6>

08007c70 <memset>:
 8007c70:	4603      	mov	r3, r0
 8007c72:	4402      	add	r2, r0
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d100      	bne.n	8007c7a <memset+0xa>
 8007c78:	4770      	bx	lr
 8007c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c7e:	e7f9      	b.n	8007c74 <memset+0x4>

08007c80 <pow>:
 8007c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c84:	4614      	mov	r4, r2
 8007c86:	461d      	mov	r5, r3
 8007c88:	4680      	mov	r8, r0
 8007c8a:	4689      	mov	r9, r1
 8007c8c:	f000 f884 	bl	8007d98 <__ieee754_pow>
 8007c90:	4622      	mov	r2, r4
 8007c92:	4606      	mov	r6, r0
 8007c94:	460f      	mov	r7, r1
 8007c96:	462b      	mov	r3, r5
 8007c98:	4620      	mov	r0, r4
 8007c9a:	4629      	mov	r1, r5
 8007c9c:	f7f8 feae 	bl	80009fc <__aeabi_dcmpun>
 8007ca0:	bbc8      	cbnz	r0, 8007d16 <pow+0x96>
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	4640      	mov	r0, r8
 8007ca8:	4649      	mov	r1, r9
 8007caa:	f7f8 fe75 	bl	8000998 <__aeabi_dcmpeq>
 8007cae:	b1b8      	cbz	r0, 8007ce0 <pow+0x60>
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	4629      	mov	r1, r5
 8007cb8:	f7f8 fe6e 	bl	8000998 <__aeabi_dcmpeq>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	d141      	bne.n	8007d44 <pow+0xc4>
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	4629      	mov	r1, r5
 8007cc4:	f000 fe5d 	bl	8008982 <finite>
 8007cc8:	b328      	cbz	r0, 8007d16 <pow+0x96>
 8007cca:	2200      	movs	r2, #0
 8007ccc:	2300      	movs	r3, #0
 8007cce:	4620      	mov	r0, r4
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	f7f8 fe6b 	bl	80009ac <__aeabi_dcmplt>
 8007cd6:	b1f0      	cbz	r0, 8007d16 <pow+0x96>
 8007cd8:	f7ff ff90 	bl	8007bfc <__errno>
 8007cdc:	2322      	movs	r3, #34	; 0x22
 8007cde:	e019      	b.n	8007d14 <pow+0x94>
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	4639      	mov	r1, r7
 8007ce4:	f000 fe4d 	bl	8008982 <finite>
 8007ce8:	b9c8      	cbnz	r0, 8007d1e <pow+0x9e>
 8007cea:	4640      	mov	r0, r8
 8007cec:	4649      	mov	r1, r9
 8007cee:	f000 fe48 	bl	8008982 <finite>
 8007cf2:	b1a0      	cbz	r0, 8007d1e <pow+0x9e>
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	4629      	mov	r1, r5
 8007cf8:	f000 fe43 	bl	8008982 <finite>
 8007cfc:	b178      	cbz	r0, 8007d1e <pow+0x9e>
 8007cfe:	4632      	mov	r2, r6
 8007d00:	463b      	mov	r3, r7
 8007d02:	4630      	mov	r0, r6
 8007d04:	4639      	mov	r1, r7
 8007d06:	f7f8 fe79 	bl	80009fc <__aeabi_dcmpun>
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	d0e4      	beq.n	8007cd8 <pow+0x58>
 8007d0e:	f7ff ff75 	bl	8007bfc <__errno>
 8007d12:	2321      	movs	r3, #33	; 0x21
 8007d14:	6003      	str	r3, [r0, #0]
 8007d16:	4630      	mov	r0, r6
 8007d18:	4639      	mov	r1, r7
 8007d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d1e:	2200      	movs	r2, #0
 8007d20:	2300      	movs	r3, #0
 8007d22:	4630      	mov	r0, r6
 8007d24:	4639      	mov	r1, r7
 8007d26:	f7f8 fe37 	bl	8000998 <__aeabi_dcmpeq>
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	d0f3      	beq.n	8007d16 <pow+0x96>
 8007d2e:	4640      	mov	r0, r8
 8007d30:	4649      	mov	r1, r9
 8007d32:	f000 fe26 	bl	8008982 <finite>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	d0ed      	beq.n	8007d16 <pow+0x96>
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	4629      	mov	r1, r5
 8007d3e:	f000 fe20 	bl	8008982 <finite>
 8007d42:	e7c8      	b.n	8007cd6 <pow+0x56>
 8007d44:	2600      	movs	r6, #0
 8007d46:	4f01      	ldr	r7, [pc, #4]	; (8007d4c <pow+0xcc>)
 8007d48:	e7e5      	b.n	8007d16 <pow+0x96>
 8007d4a:	bf00      	nop
 8007d4c:	3ff00000 	.word	0x3ff00000

08007d50 <sqrt>:
 8007d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d52:	4606      	mov	r6, r0
 8007d54:	460f      	mov	r7, r1
 8007d56:	f000 fd35 	bl	80087c4 <__ieee754_sqrt>
 8007d5a:	4632      	mov	r2, r6
 8007d5c:	4604      	mov	r4, r0
 8007d5e:	460d      	mov	r5, r1
 8007d60:	463b      	mov	r3, r7
 8007d62:	4630      	mov	r0, r6
 8007d64:	4639      	mov	r1, r7
 8007d66:	f7f8 fe49 	bl	80009fc <__aeabi_dcmpun>
 8007d6a:	b990      	cbnz	r0, 8007d92 <sqrt+0x42>
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	2300      	movs	r3, #0
 8007d70:	4630      	mov	r0, r6
 8007d72:	4639      	mov	r1, r7
 8007d74:	f7f8 fe1a 	bl	80009ac <__aeabi_dcmplt>
 8007d78:	b158      	cbz	r0, 8007d92 <sqrt+0x42>
 8007d7a:	f7ff ff3f 	bl	8007bfc <__errno>
 8007d7e:	2321      	movs	r3, #33	; 0x21
 8007d80:	2200      	movs	r2, #0
 8007d82:	6003      	str	r3, [r0, #0]
 8007d84:	2300      	movs	r3, #0
 8007d86:	4610      	mov	r0, r2
 8007d88:	4619      	mov	r1, r3
 8007d8a:	f7f8 fcc7 	bl	800071c <__aeabi_ddiv>
 8007d8e:	4604      	mov	r4, r0
 8007d90:	460d      	mov	r5, r1
 8007d92:	4620      	mov	r0, r4
 8007d94:	4629      	mov	r1, r5
 8007d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007d98 <__ieee754_pow>:
 8007d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d9c:	b093      	sub	sp, #76	; 0x4c
 8007d9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007da2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8007da6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8007daa:	4689      	mov	r9, r1
 8007dac:	ea56 0102 	orrs.w	r1, r6, r2
 8007db0:	4680      	mov	r8, r0
 8007db2:	d111      	bne.n	8007dd8 <__ieee754_pow+0x40>
 8007db4:	1803      	adds	r3, r0, r0
 8007db6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8007dba:	4152      	adcs	r2, r2
 8007dbc:	4299      	cmp	r1, r3
 8007dbe:	4b82      	ldr	r3, [pc, #520]	; (8007fc8 <__ieee754_pow+0x230>)
 8007dc0:	4193      	sbcs	r3, r2
 8007dc2:	f080 84b9 	bcs.w	8008738 <__ieee754_pow+0x9a0>
 8007dc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dca:	4640      	mov	r0, r8
 8007dcc:	4649      	mov	r1, r9
 8007dce:	f7f8 f9c5 	bl	800015c <__adddf3>
 8007dd2:	4683      	mov	fp, r0
 8007dd4:	468c      	mov	ip, r1
 8007dd6:	e06f      	b.n	8007eb8 <__ieee754_pow+0x120>
 8007dd8:	4b7c      	ldr	r3, [pc, #496]	; (8007fcc <__ieee754_pow+0x234>)
 8007dda:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8007dde:	429c      	cmp	r4, r3
 8007de0:	464d      	mov	r5, r9
 8007de2:	4682      	mov	sl, r0
 8007de4:	dc06      	bgt.n	8007df4 <__ieee754_pow+0x5c>
 8007de6:	d101      	bne.n	8007dec <__ieee754_pow+0x54>
 8007de8:	2800      	cmp	r0, #0
 8007dea:	d1ec      	bne.n	8007dc6 <__ieee754_pow+0x2e>
 8007dec:	429e      	cmp	r6, r3
 8007dee:	dc01      	bgt.n	8007df4 <__ieee754_pow+0x5c>
 8007df0:	d10f      	bne.n	8007e12 <__ieee754_pow+0x7a>
 8007df2:	b172      	cbz	r2, 8007e12 <__ieee754_pow+0x7a>
 8007df4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007df8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007dfc:	ea55 050a 	orrs.w	r5, r5, sl
 8007e00:	d1e1      	bne.n	8007dc6 <__ieee754_pow+0x2e>
 8007e02:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007e06:	18db      	adds	r3, r3, r3
 8007e08:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007e0c:	4152      	adcs	r2, r2
 8007e0e:	429d      	cmp	r5, r3
 8007e10:	e7d5      	b.n	8007dbe <__ieee754_pow+0x26>
 8007e12:	2d00      	cmp	r5, #0
 8007e14:	da39      	bge.n	8007e8a <__ieee754_pow+0xf2>
 8007e16:	4b6e      	ldr	r3, [pc, #440]	; (8007fd0 <__ieee754_pow+0x238>)
 8007e18:	429e      	cmp	r6, r3
 8007e1a:	dc52      	bgt.n	8007ec2 <__ieee754_pow+0x12a>
 8007e1c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007e20:	429e      	cmp	r6, r3
 8007e22:	f340 849c 	ble.w	800875e <__ieee754_pow+0x9c6>
 8007e26:	1533      	asrs	r3, r6, #20
 8007e28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007e2c:	2b14      	cmp	r3, #20
 8007e2e:	dd0f      	ble.n	8007e50 <__ieee754_pow+0xb8>
 8007e30:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007e34:	fa22 f103 	lsr.w	r1, r2, r3
 8007e38:	fa01 f303 	lsl.w	r3, r1, r3
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	f040 848e 	bne.w	800875e <__ieee754_pow+0x9c6>
 8007e42:	f001 0101 	and.w	r1, r1, #1
 8007e46:	f1c1 0302 	rsb	r3, r1, #2
 8007e4a:	9300      	str	r3, [sp, #0]
 8007e4c:	b182      	cbz	r2, 8007e70 <__ieee754_pow+0xd8>
 8007e4e:	e05d      	b.n	8007f0c <__ieee754_pow+0x174>
 8007e50:	2a00      	cmp	r2, #0
 8007e52:	d159      	bne.n	8007f08 <__ieee754_pow+0x170>
 8007e54:	f1c3 0314 	rsb	r3, r3, #20
 8007e58:	fa46 f103 	asr.w	r1, r6, r3
 8007e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e60:	42b3      	cmp	r3, r6
 8007e62:	f040 8479 	bne.w	8008758 <__ieee754_pow+0x9c0>
 8007e66:	f001 0101 	and.w	r1, r1, #1
 8007e6a:	f1c1 0302 	rsb	r3, r1, #2
 8007e6e:	9300      	str	r3, [sp, #0]
 8007e70:	4b58      	ldr	r3, [pc, #352]	; (8007fd4 <__ieee754_pow+0x23c>)
 8007e72:	429e      	cmp	r6, r3
 8007e74:	d132      	bne.n	8007edc <__ieee754_pow+0x144>
 8007e76:	2f00      	cmp	r7, #0
 8007e78:	f280 846a 	bge.w	8008750 <__ieee754_pow+0x9b8>
 8007e7c:	4642      	mov	r2, r8
 8007e7e:	464b      	mov	r3, r9
 8007e80:	2000      	movs	r0, #0
 8007e82:	4954      	ldr	r1, [pc, #336]	; (8007fd4 <__ieee754_pow+0x23c>)
 8007e84:	f7f8 fc4a 	bl	800071c <__aeabi_ddiv>
 8007e88:	e7a3      	b.n	8007dd2 <__ieee754_pow+0x3a>
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	2a00      	cmp	r2, #0
 8007e90:	d13c      	bne.n	8007f0c <__ieee754_pow+0x174>
 8007e92:	4b4e      	ldr	r3, [pc, #312]	; (8007fcc <__ieee754_pow+0x234>)
 8007e94:	429e      	cmp	r6, r3
 8007e96:	d1eb      	bne.n	8007e70 <__ieee754_pow+0xd8>
 8007e98:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007e9c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007ea0:	ea53 030a 	orrs.w	r3, r3, sl
 8007ea4:	f000 8448 	beq.w	8008738 <__ieee754_pow+0x9a0>
 8007ea8:	4b4b      	ldr	r3, [pc, #300]	; (8007fd8 <__ieee754_pow+0x240>)
 8007eaa:	429c      	cmp	r4, r3
 8007eac:	dd0b      	ble.n	8007ec6 <__ieee754_pow+0x12e>
 8007eae:	2f00      	cmp	r7, #0
 8007eb0:	f2c0 8448 	blt.w	8008744 <__ieee754_pow+0x9ac>
 8007eb4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8007eb8:	4658      	mov	r0, fp
 8007eba:	4661      	mov	r1, ip
 8007ebc:	b013      	add	sp, #76	; 0x4c
 8007ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	e7e2      	b.n	8007e8c <__ieee754_pow+0xf4>
 8007ec6:	2f00      	cmp	r7, #0
 8007ec8:	f04f 0b00 	mov.w	fp, #0
 8007ecc:	f04f 0c00 	mov.w	ip, #0
 8007ed0:	daf2      	bge.n	8007eb8 <__ieee754_pow+0x120>
 8007ed2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8007ed6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8007eda:	e7ed      	b.n	8007eb8 <__ieee754_pow+0x120>
 8007edc:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8007ee0:	d106      	bne.n	8007ef0 <__ieee754_pow+0x158>
 8007ee2:	4642      	mov	r2, r8
 8007ee4:	464b      	mov	r3, r9
 8007ee6:	4640      	mov	r0, r8
 8007ee8:	4649      	mov	r1, r9
 8007eea:	f7f8 faed 	bl	80004c8 <__aeabi_dmul>
 8007eee:	e770      	b.n	8007dd2 <__ieee754_pow+0x3a>
 8007ef0:	4b3a      	ldr	r3, [pc, #232]	; (8007fdc <__ieee754_pow+0x244>)
 8007ef2:	429f      	cmp	r7, r3
 8007ef4:	d10a      	bne.n	8007f0c <__ieee754_pow+0x174>
 8007ef6:	2d00      	cmp	r5, #0
 8007ef8:	db08      	blt.n	8007f0c <__ieee754_pow+0x174>
 8007efa:	4640      	mov	r0, r8
 8007efc:	4649      	mov	r1, r9
 8007efe:	b013      	add	sp, #76	; 0x4c
 8007f00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f04:	f000 bc5e 	b.w	80087c4 <__ieee754_sqrt>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	9300      	str	r3, [sp, #0]
 8007f0c:	4640      	mov	r0, r8
 8007f0e:	4649      	mov	r1, r9
 8007f10:	f000 fd34 	bl	800897c <fabs>
 8007f14:	4683      	mov	fp, r0
 8007f16:	468c      	mov	ip, r1
 8007f18:	f1ba 0f00 	cmp.w	sl, #0
 8007f1c:	d128      	bne.n	8007f70 <__ieee754_pow+0x1d8>
 8007f1e:	b124      	cbz	r4, 8007f2a <__ieee754_pow+0x192>
 8007f20:	4b2c      	ldr	r3, [pc, #176]	; (8007fd4 <__ieee754_pow+0x23c>)
 8007f22:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d122      	bne.n	8007f70 <__ieee754_pow+0x1d8>
 8007f2a:	2f00      	cmp	r7, #0
 8007f2c:	da07      	bge.n	8007f3e <__ieee754_pow+0x1a6>
 8007f2e:	465a      	mov	r2, fp
 8007f30:	4663      	mov	r3, ip
 8007f32:	2000      	movs	r0, #0
 8007f34:	4927      	ldr	r1, [pc, #156]	; (8007fd4 <__ieee754_pow+0x23c>)
 8007f36:	f7f8 fbf1 	bl	800071c <__aeabi_ddiv>
 8007f3a:	4683      	mov	fp, r0
 8007f3c:	468c      	mov	ip, r1
 8007f3e:	2d00      	cmp	r5, #0
 8007f40:	daba      	bge.n	8007eb8 <__ieee754_pow+0x120>
 8007f42:	9b00      	ldr	r3, [sp, #0]
 8007f44:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007f48:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007f4c:	4323      	orrs	r3, r4
 8007f4e:	d108      	bne.n	8007f62 <__ieee754_pow+0x1ca>
 8007f50:	465a      	mov	r2, fp
 8007f52:	4663      	mov	r3, ip
 8007f54:	4658      	mov	r0, fp
 8007f56:	4661      	mov	r1, ip
 8007f58:	f7f8 f8fe 	bl	8000158 <__aeabi_dsub>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	e790      	b.n	8007e84 <__ieee754_pow+0xec>
 8007f62:	9b00      	ldr	r3, [sp, #0]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d1a7      	bne.n	8007eb8 <__ieee754_pow+0x120>
 8007f68:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8007f6c:	469c      	mov	ip, r3
 8007f6e:	e7a3      	b.n	8007eb8 <__ieee754_pow+0x120>
 8007f70:	0feb      	lsrs	r3, r5, #31
 8007f72:	3b01      	subs	r3, #1
 8007f74:	930c      	str	r3, [sp, #48]	; 0x30
 8007f76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f78:	9b00      	ldr	r3, [sp, #0]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	d104      	bne.n	8007f88 <__ieee754_pow+0x1f0>
 8007f7e:	4642      	mov	r2, r8
 8007f80:	464b      	mov	r3, r9
 8007f82:	4640      	mov	r0, r8
 8007f84:	4649      	mov	r1, r9
 8007f86:	e7e7      	b.n	8007f58 <__ieee754_pow+0x1c0>
 8007f88:	4b15      	ldr	r3, [pc, #84]	; (8007fe0 <__ieee754_pow+0x248>)
 8007f8a:	429e      	cmp	r6, r3
 8007f8c:	f340 80f6 	ble.w	800817c <__ieee754_pow+0x3e4>
 8007f90:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007f94:	429e      	cmp	r6, r3
 8007f96:	4b10      	ldr	r3, [pc, #64]	; (8007fd8 <__ieee754_pow+0x240>)
 8007f98:	dd09      	ble.n	8007fae <__ieee754_pow+0x216>
 8007f9a:	429c      	cmp	r4, r3
 8007f9c:	dc0c      	bgt.n	8007fb8 <__ieee754_pow+0x220>
 8007f9e:	2f00      	cmp	r7, #0
 8007fa0:	da0c      	bge.n	8007fbc <__ieee754_pow+0x224>
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	b013      	add	sp, #76	; 0x4c
 8007fa6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007faa:	f000 bce2 	b.w	8008972 <__math_oflow>
 8007fae:	429c      	cmp	r4, r3
 8007fb0:	dbf5      	blt.n	8007f9e <__ieee754_pow+0x206>
 8007fb2:	4b08      	ldr	r3, [pc, #32]	; (8007fd4 <__ieee754_pow+0x23c>)
 8007fb4:	429c      	cmp	r4, r3
 8007fb6:	dd15      	ble.n	8007fe4 <__ieee754_pow+0x24c>
 8007fb8:	2f00      	cmp	r7, #0
 8007fba:	dcf2      	bgt.n	8007fa2 <__ieee754_pow+0x20a>
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	b013      	add	sp, #76	; 0x4c
 8007fc0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc4:	f000 bcd0 	b.w	8008968 <__math_uflow>
 8007fc8:	fff00000 	.word	0xfff00000
 8007fcc:	7ff00000 	.word	0x7ff00000
 8007fd0:	433fffff 	.word	0x433fffff
 8007fd4:	3ff00000 	.word	0x3ff00000
 8007fd8:	3fefffff 	.word	0x3fefffff
 8007fdc:	3fe00000 	.word	0x3fe00000
 8007fe0:	41e00000 	.word	0x41e00000
 8007fe4:	4661      	mov	r1, ip
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	4658      	mov	r0, fp
 8007fea:	4b5f      	ldr	r3, [pc, #380]	; (8008168 <__ieee754_pow+0x3d0>)
 8007fec:	f7f8 f8b4 	bl	8000158 <__aeabi_dsub>
 8007ff0:	a355      	add	r3, pc, #340	; (adr r3, 8008148 <__ieee754_pow+0x3b0>)
 8007ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff6:	4604      	mov	r4, r0
 8007ff8:	460d      	mov	r5, r1
 8007ffa:	f7f8 fa65 	bl	80004c8 <__aeabi_dmul>
 8007ffe:	a354      	add	r3, pc, #336	; (adr r3, 8008150 <__ieee754_pow+0x3b8>)
 8008000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008004:	4606      	mov	r6, r0
 8008006:	460f      	mov	r7, r1
 8008008:	4620      	mov	r0, r4
 800800a:	4629      	mov	r1, r5
 800800c:	f7f8 fa5c 	bl	80004c8 <__aeabi_dmul>
 8008010:	2200      	movs	r2, #0
 8008012:	4682      	mov	sl, r0
 8008014:	468b      	mov	fp, r1
 8008016:	4620      	mov	r0, r4
 8008018:	4629      	mov	r1, r5
 800801a:	4b54      	ldr	r3, [pc, #336]	; (800816c <__ieee754_pow+0x3d4>)
 800801c:	f7f8 fa54 	bl	80004c8 <__aeabi_dmul>
 8008020:	4602      	mov	r2, r0
 8008022:	460b      	mov	r3, r1
 8008024:	a14c      	add	r1, pc, #304	; (adr r1, 8008158 <__ieee754_pow+0x3c0>)
 8008026:	e9d1 0100 	ldrd	r0, r1, [r1]
 800802a:	f7f8 f895 	bl	8000158 <__aeabi_dsub>
 800802e:	4622      	mov	r2, r4
 8008030:	462b      	mov	r3, r5
 8008032:	f7f8 fa49 	bl	80004c8 <__aeabi_dmul>
 8008036:	4602      	mov	r2, r0
 8008038:	460b      	mov	r3, r1
 800803a:	2000      	movs	r0, #0
 800803c:	494c      	ldr	r1, [pc, #304]	; (8008170 <__ieee754_pow+0x3d8>)
 800803e:	f7f8 f88b 	bl	8000158 <__aeabi_dsub>
 8008042:	4622      	mov	r2, r4
 8008044:	462b      	mov	r3, r5
 8008046:	4680      	mov	r8, r0
 8008048:	4689      	mov	r9, r1
 800804a:	4620      	mov	r0, r4
 800804c:	4629      	mov	r1, r5
 800804e:	f7f8 fa3b 	bl	80004c8 <__aeabi_dmul>
 8008052:	4602      	mov	r2, r0
 8008054:	460b      	mov	r3, r1
 8008056:	4640      	mov	r0, r8
 8008058:	4649      	mov	r1, r9
 800805a:	f7f8 fa35 	bl	80004c8 <__aeabi_dmul>
 800805e:	a340      	add	r3, pc, #256	; (adr r3, 8008160 <__ieee754_pow+0x3c8>)
 8008060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008064:	f7f8 fa30 	bl	80004c8 <__aeabi_dmul>
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	4650      	mov	r0, sl
 800806e:	4659      	mov	r1, fp
 8008070:	f7f8 f872 	bl	8000158 <__aeabi_dsub>
 8008074:	f04f 0a00 	mov.w	sl, #0
 8008078:	4602      	mov	r2, r0
 800807a:	460b      	mov	r3, r1
 800807c:	4604      	mov	r4, r0
 800807e:	460d      	mov	r5, r1
 8008080:	4630      	mov	r0, r6
 8008082:	4639      	mov	r1, r7
 8008084:	f7f8 f86a 	bl	800015c <__adddf3>
 8008088:	4632      	mov	r2, r6
 800808a:	463b      	mov	r3, r7
 800808c:	4650      	mov	r0, sl
 800808e:	468b      	mov	fp, r1
 8008090:	f7f8 f862 	bl	8000158 <__aeabi_dsub>
 8008094:	4602      	mov	r2, r0
 8008096:	460b      	mov	r3, r1
 8008098:	4620      	mov	r0, r4
 800809a:	4629      	mov	r1, r5
 800809c:	f7f8 f85c 	bl	8000158 <__aeabi_dsub>
 80080a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80080a4:	9b00      	ldr	r3, [sp, #0]
 80080a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080a8:	3b01      	subs	r3, #1
 80080aa:	4313      	orrs	r3, r2
 80080ac:	f04f 0600 	mov.w	r6, #0
 80080b0:	f04f 0200 	mov.w	r2, #0
 80080b4:	bf0c      	ite	eq
 80080b6:	4b2f      	ldreq	r3, [pc, #188]	; (8008174 <__ieee754_pow+0x3dc>)
 80080b8:	4b2b      	ldrne	r3, [pc, #172]	; (8008168 <__ieee754_pow+0x3d0>)
 80080ba:	4604      	mov	r4, r0
 80080bc:	460d      	mov	r5, r1
 80080be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080c2:	e9cd 2300 	strd	r2, r3, [sp]
 80080c6:	4632      	mov	r2, r6
 80080c8:	463b      	mov	r3, r7
 80080ca:	f7f8 f845 	bl	8000158 <__aeabi_dsub>
 80080ce:	4652      	mov	r2, sl
 80080d0:	465b      	mov	r3, fp
 80080d2:	f7f8 f9f9 	bl	80004c8 <__aeabi_dmul>
 80080d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080da:	4680      	mov	r8, r0
 80080dc:	4689      	mov	r9, r1
 80080de:	4620      	mov	r0, r4
 80080e0:	4629      	mov	r1, r5
 80080e2:	f7f8 f9f1 	bl	80004c8 <__aeabi_dmul>
 80080e6:	4602      	mov	r2, r0
 80080e8:	460b      	mov	r3, r1
 80080ea:	4640      	mov	r0, r8
 80080ec:	4649      	mov	r1, r9
 80080ee:	f7f8 f835 	bl	800015c <__adddf3>
 80080f2:	4632      	mov	r2, r6
 80080f4:	463b      	mov	r3, r7
 80080f6:	4680      	mov	r8, r0
 80080f8:	4689      	mov	r9, r1
 80080fa:	4650      	mov	r0, sl
 80080fc:	4659      	mov	r1, fp
 80080fe:	f7f8 f9e3 	bl	80004c8 <__aeabi_dmul>
 8008102:	4604      	mov	r4, r0
 8008104:	460d      	mov	r5, r1
 8008106:	460b      	mov	r3, r1
 8008108:	4602      	mov	r2, r0
 800810a:	4649      	mov	r1, r9
 800810c:	4640      	mov	r0, r8
 800810e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008112:	f7f8 f823 	bl	800015c <__adddf3>
 8008116:	4b18      	ldr	r3, [pc, #96]	; (8008178 <__ieee754_pow+0x3e0>)
 8008118:	4682      	mov	sl, r0
 800811a:	4299      	cmp	r1, r3
 800811c:	460f      	mov	r7, r1
 800811e:	460e      	mov	r6, r1
 8008120:	f340 82e5 	ble.w	80086ee <__ieee754_pow+0x956>
 8008124:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008128:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800812c:	4303      	orrs	r3, r0
 800812e:	f000 81df 	beq.w	80084f0 <__ieee754_pow+0x758>
 8008132:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008136:	2200      	movs	r2, #0
 8008138:	2300      	movs	r3, #0
 800813a:	f7f8 fc37 	bl	80009ac <__aeabi_dcmplt>
 800813e:	3800      	subs	r0, #0
 8008140:	bf18      	it	ne
 8008142:	2001      	movne	r0, #1
 8008144:	e72e      	b.n	8007fa4 <__ieee754_pow+0x20c>
 8008146:	bf00      	nop
 8008148:	60000000 	.word	0x60000000
 800814c:	3ff71547 	.word	0x3ff71547
 8008150:	f85ddf44 	.word	0xf85ddf44
 8008154:	3e54ae0b 	.word	0x3e54ae0b
 8008158:	55555555 	.word	0x55555555
 800815c:	3fd55555 	.word	0x3fd55555
 8008160:	652b82fe 	.word	0x652b82fe
 8008164:	3ff71547 	.word	0x3ff71547
 8008168:	3ff00000 	.word	0x3ff00000
 800816c:	3fd00000 	.word	0x3fd00000
 8008170:	3fe00000 	.word	0x3fe00000
 8008174:	bff00000 	.word	0xbff00000
 8008178:	408fffff 	.word	0x408fffff
 800817c:	4bd2      	ldr	r3, [pc, #840]	; (80084c8 <__ieee754_pow+0x730>)
 800817e:	2200      	movs	r2, #0
 8008180:	402b      	ands	r3, r5
 8008182:	b943      	cbnz	r3, 8008196 <__ieee754_pow+0x3fe>
 8008184:	4658      	mov	r0, fp
 8008186:	4661      	mov	r1, ip
 8008188:	4bd0      	ldr	r3, [pc, #832]	; (80084cc <__ieee754_pow+0x734>)
 800818a:	f7f8 f99d 	bl	80004c8 <__aeabi_dmul>
 800818e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008192:	4683      	mov	fp, r0
 8008194:	460c      	mov	r4, r1
 8008196:	1523      	asrs	r3, r4, #20
 8008198:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800819c:	4413      	add	r3, r2
 800819e:	930b      	str	r3, [sp, #44]	; 0x2c
 80081a0:	4bcb      	ldr	r3, [pc, #812]	; (80084d0 <__ieee754_pow+0x738>)
 80081a2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80081a6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80081aa:	429c      	cmp	r4, r3
 80081ac:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80081b0:	dd08      	ble.n	80081c4 <__ieee754_pow+0x42c>
 80081b2:	4bc8      	ldr	r3, [pc, #800]	; (80084d4 <__ieee754_pow+0x73c>)
 80081b4:	429c      	cmp	r4, r3
 80081b6:	f340 8199 	ble.w	80084ec <__ieee754_pow+0x754>
 80081ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081bc:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80081c0:	3301      	adds	r3, #1
 80081c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80081c4:	2600      	movs	r6, #0
 80081c6:	00f3      	lsls	r3, r6, #3
 80081c8:	930d      	str	r3, [sp, #52]	; 0x34
 80081ca:	4bc3      	ldr	r3, [pc, #780]	; (80084d8 <__ieee754_pow+0x740>)
 80081cc:	4658      	mov	r0, fp
 80081ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80081d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80081d6:	4629      	mov	r1, r5
 80081d8:	461a      	mov	r2, r3
 80081da:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80081de:	4623      	mov	r3, r4
 80081e0:	f7f7 ffba 	bl	8000158 <__aeabi_dsub>
 80081e4:	46da      	mov	sl, fp
 80081e6:	462b      	mov	r3, r5
 80081e8:	4652      	mov	r2, sl
 80081ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80081ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80081f2:	f7f7 ffb3 	bl	800015c <__adddf3>
 80081f6:	4602      	mov	r2, r0
 80081f8:	460b      	mov	r3, r1
 80081fa:	2000      	movs	r0, #0
 80081fc:	49b7      	ldr	r1, [pc, #732]	; (80084dc <__ieee754_pow+0x744>)
 80081fe:	f7f8 fa8d 	bl	800071c <__aeabi_ddiv>
 8008202:	4602      	mov	r2, r0
 8008204:	460b      	mov	r3, r1
 8008206:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800820a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800820e:	f7f8 f95b 	bl	80004c8 <__aeabi_dmul>
 8008212:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008216:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800821a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800821e:	2300      	movs	r3, #0
 8008220:	2200      	movs	r2, #0
 8008222:	46ab      	mov	fp, r5
 8008224:	106d      	asrs	r5, r5, #1
 8008226:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800822a:	9304      	str	r3, [sp, #16]
 800822c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008230:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008234:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008238:	4640      	mov	r0, r8
 800823a:	4649      	mov	r1, r9
 800823c:	4614      	mov	r4, r2
 800823e:	461d      	mov	r5, r3
 8008240:	f7f8 f942 	bl	80004c8 <__aeabi_dmul>
 8008244:	4602      	mov	r2, r0
 8008246:	460b      	mov	r3, r1
 8008248:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800824c:	f7f7 ff84 	bl	8000158 <__aeabi_dsub>
 8008250:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008254:	4606      	mov	r6, r0
 8008256:	460f      	mov	r7, r1
 8008258:	4620      	mov	r0, r4
 800825a:	4629      	mov	r1, r5
 800825c:	f7f7 ff7c 	bl	8000158 <__aeabi_dsub>
 8008260:	4602      	mov	r2, r0
 8008262:	460b      	mov	r3, r1
 8008264:	4650      	mov	r0, sl
 8008266:	4659      	mov	r1, fp
 8008268:	f7f7 ff76 	bl	8000158 <__aeabi_dsub>
 800826c:	4642      	mov	r2, r8
 800826e:	464b      	mov	r3, r9
 8008270:	f7f8 f92a 	bl	80004c8 <__aeabi_dmul>
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	4630      	mov	r0, r6
 800827a:	4639      	mov	r1, r7
 800827c:	f7f7 ff6c 	bl	8000158 <__aeabi_dsub>
 8008280:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008284:	f7f8 f920 	bl	80004c8 <__aeabi_dmul>
 8008288:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800828c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008290:	4610      	mov	r0, r2
 8008292:	4619      	mov	r1, r3
 8008294:	f7f8 f918 	bl	80004c8 <__aeabi_dmul>
 8008298:	a379      	add	r3, pc, #484	; (adr r3, 8008480 <__ieee754_pow+0x6e8>)
 800829a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829e:	4604      	mov	r4, r0
 80082a0:	460d      	mov	r5, r1
 80082a2:	f7f8 f911 	bl	80004c8 <__aeabi_dmul>
 80082a6:	a378      	add	r3, pc, #480	; (adr r3, 8008488 <__ieee754_pow+0x6f0>)
 80082a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ac:	f7f7 ff56 	bl	800015c <__adddf3>
 80082b0:	4622      	mov	r2, r4
 80082b2:	462b      	mov	r3, r5
 80082b4:	f7f8 f908 	bl	80004c8 <__aeabi_dmul>
 80082b8:	a375      	add	r3, pc, #468	; (adr r3, 8008490 <__ieee754_pow+0x6f8>)
 80082ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082be:	f7f7 ff4d 	bl	800015c <__adddf3>
 80082c2:	4622      	mov	r2, r4
 80082c4:	462b      	mov	r3, r5
 80082c6:	f7f8 f8ff 	bl	80004c8 <__aeabi_dmul>
 80082ca:	a373      	add	r3, pc, #460	; (adr r3, 8008498 <__ieee754_pow+0x700>)
 80082cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d0:	f7f7 ff44 	bl	800015c <__adddf3>
 80082d4:	4622      	mov	r2, r4
 80082d6:	462b      	mov	r3, r5
 80082d8:	f7f8 f8f6 	bl	80004c8 <__aeabi_dmul>
 80082dc:	a370      	add	r3, pc, #448	; (adr r3, 80084a0 <__ieee754_pow+0x708>)
 80082de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e2:	f7f7 ff3b 	bl	800015c <__adddf3>
 80082e6:	4622      	mov	r2, r4
 80082e8:	462b      	mov	r3, r5
 80082ea:	f7f8 f8ed 	bl	80004c8 <__aeabi_dmul>
 80082ee:	a36e      	add	r3, pc, #440	; (adr r3, 80084a8 <__ieee754_pow+0x710>)
 80082f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f4:	f7f7 ff32 	bl	800015c <__adddf3>
 80082f8:	4622      	mov	r2, r4
 80082fa:	4606      	mov	r6, r0
 80082fc:	460f      	mov	r7, r1
 80082fe:	462b      	mov	r3, r5
 8008300:	4620      	mov	r0, r4
 8008302:	4629      	mov	r1, r5
 8008304:	f7f8 f8e0 	bl	80004c8 <__aeabi_dmul>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	4630      	mov	r0, r6
 800830e:	4639      	mov	r1, r7
 8008310:	f7f8 f8da 	bl	80004c8 <__aeabi_dmul>
 8008314:	4604      	mov	r4, r0
 8008316:	460d      	mov	r5, r1
 8008318:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800831c:	4642      	mov	r2, r8
 800831e:	464b      	mov	r3, r9
 8008320:	f7f7 ff1c 	bl	800015c <__adddf3>
 8008324:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008328:	f7f8 f8ce 	bl	80004c8 <__aeabi_dmul>
 800832c:	4622      	mov	r2, r4
 800832e:	462b      	mov	r3, r5
 8008330:	f7f7 ff14 	bl	800015c <__adddf3>
 8008334:	4642      	mov	r2, r8
 8008336:	4606      	mov	r6, r0
 8008338:	460f      	mov	r7, r1
 800833a:	464b      	mov	r3, r9
 800833c:	4640      	mov	r0, r8
 800833e:	4649      	mov	r1, r9
 8008340:	f7f8 f8c2 	bl	80004c8 <__aeabi_dmul>
 8008344:	2200      	movs	r2, #0
 8008346:	4b66      	ldr	r3, [pc, #408]	; (80084e0 <__ieee754_pow+0x748>)
 8008348:	4682      	mov	sl, r0
 800834a:	468b      	mov	fp, r1
 800834c:	f7f7 ff06 	bl	800015c <__adddf3>
 8008350:	4632      	mov	r2, r6
 8008352:	463b      	mov	r3, r7
 8008354:	f7f7 ff02 	bl	800015c <__adddf3>
 8008358:	2400      	movs	r4, #0
 800835a:	460d      	mov	r5, r1
 800835c:	4622      	mov	r2, r4
 800835e:	460b      	mov	r3, r1
 8008360:	4640      	mov	r0, r8
 8008362:	4649      	mov	r1, r9
 8008364:	f7f8 f8b0 	bl	80004c8 <__aeabi_dmul>
 8008368:	2200      	movs	r2, #0
 800836a:	4680      	mov	r8, r0
 800836c:	4689      	mov	r9, r1
 800836e:	4620      	mov	r0, r4
 8008370:	4629      	mov	r1, r5
 8008372:	4b5b      	ldr	r3, [pc, #364]	; (80084e0 <__ieee754_pow+0x748>)
 8008374:	f7f7 fef0 	bl	8000158 <__aeabi_dsub>
 8008378:	4652      	mov	r2, sl
 800837a:	465b      	mov	r3, fp
 800837c:	f7f7 feec 	bl	8000158 <__aeabi_dsub>
 8008380:	4602      	mov	r2, r0
 8008382:	460b      	mov	r3, r1
 8008384:	4630      	mov	r0, r6
 8008386:	4639      	mov	r1, r7
 8008388:	f7f7 fee6 	bl	8000158 <__aeabi_dsub>
 800838c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008390:	f7f8 f89a 	bl	80004c8 <__aeabi_dmul>
 8008394:	4622      	mov	r2, r4
 8008396:	4606      	mov	r6, r0
 8008398:	460f      	mov	r7, r1
 800839a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800839e:	462b      	mov	r3, r5
 80083a0:	f7f8 f892 	bl	80004c8 <__aeabi_dmul>
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	4630      	mov	r0, r6
 80083aa:	4639      	mov	r1, r7
 80083ac:	f7f7 fed6 	bl	800015c <__adddf3>
 80083b0:	2400      	movs	r4, #0
 80083b2:	4606      	mov	r6, r0
 80083b4:	460f      	mov	r7, r1
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	4640      	mov	r0, r8
 80083bc:	4649      	mov	r1, r9
 80083be:	f7f7 fecd 	bl	800015c <__adddf3>
 80083c2:	a33b      	add	r3, pc, #236	; (adr r3, 80084b0 <__ieee754_pow+0x718>)
 80083c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c8:	4620      	mov	r0, r4
 80083ca:	460d      	mov	r5, r1
 80083cc:	f7f8 f87c 	bl	80004c8 <__aeabi_dmul>
 80083d0:	4642      	mov	r2, r8
 80083d2:	464b      	mov	r3, r9
 80083d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80083d8:	4620      	mov	r0, r4
 80083da:	4629      	mov	r1, r5
 80083dc:	f7f7 febc 	bl	8000158 <__aeabi_dsub>
 80083e0:	4602      	mov	r2, r0
 80083e2:	460b      	mov	r3, r1
 80083e4:	4630      	mov	r0, r6
 80083e6:	4639      	mov	r1, r7
 80083e8:	f7f7 feb6 	bl	8000158 <__aeabi_dsub>
 80083ec:	a332      	add	r3, pc, #200	; (adr r3, 80084b8 <__ieee754_pow+0x720>)
 80083ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f2:	f7f8 f869 	bl	80004c8 <__aeabi_dmul>
 80083f6:	a332      	add	r3, pc, #200	; (adr r3, 80084c0 <__ieee754_pow+0x728>)
 80083f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fc:	4606      	mov	r6, r0
 80083fe:	460f      	mov	r7, r1
 8008400:	4620      	mov	r0, r4
 8008402:	4629      	mov	r1, r5
 8008404:	f7f8 f860 	bl	80004c8 <__aeabi_dmul>
 8008408:	4602      	mov	r2, r0
 800840a:	460b      	mov	r3, r1
 800840c:	4630      	mov	r0, r6
 800840e:	4639      	mov	r1, r7
 8008410:	f7f7 fea4 	bl	800015c <__adddf3>
 8008414:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008416:	4b33      	ldr	r3, [pc, #204]	; (80084e4 <__ieee754_pow+0x74c>)
 8008418:	f04f 0a00 	mov.w	sl, #0
 800841c:	4413      	add	r3, r2
 800841e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008422:	f7f7 fe9b 	bl	800015c <__adddf3>
 8008426:	4680      	mov	r8, r0
 8008428:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800842a:	4689      	mov	r9, r1
 800842c:	f7f7 ffe2 	bl	80003f4 <__aeabi_i2d>
 8008430:	4604      	mov	r4, r0
 8008432:	460d      	mov	r5, r1
 8008434:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008436:	4b2c      	ldr	r3, [pc, #176]	; (80084e8 <__ieee754_pow+0x750>)
 8008438:	4413      	add	r3, r2
 800843a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800843e:	4642      	mov	r2, r8
 8008440:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008444:	464b      	mov	r3, r9
 8008446:	f7f7 fe89 	bl	800015c <__adddf3>
 800844a:	4632      	mov	r2, r6
 800844c:	463b      	mov	r3, r7
 800844e:	f7f7 fe85 	bl	800015c <__adddf3>
 8008452:	4622      	mov	r2, r4
 8008454:	462b      	mov	r3, r5
 8008456:	f7f7 fe81 	bl	800015c <__adddf3>
 800845a:	4622      	mov	r2, r4
 800845c:	462b      	mov	r3, r5
 800845e:	4650      	mov	r0, sl
 8008460:	468b      	mov	fp, r1
 8008462:	f7f7 fe79 	bl	8000158 <__aeabi_dsub>
 8008466:	4632      	mov	r2, r6
 8008468:	463b      	mov	r3, r7
 800846a:	f7f7 fe75 	bl	8000158 <__aeabi_dsub>
 800846e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008472:	f7f7 fe71 	bl	8000158 <__aeabi_dsub>
 8008476:	4602      	mov	r2, r0
 8008478:	460b      	mov	r3, r1
 800847a:	4640      	mov	r0, r8
 800847c:	4649      	mov	r1, r9
 800847e:	e60d      	b.n	800809c <__ieee754_pow+0x304>
 8008480:	4a454eef 	.word	0x4a454eef
 8008484:	3fca7e28 	.word	0x3fca7e28
 8008488:	93c9db65 	.word	0x93c9db65
 800848c:	3fcd864a 	.word	0x3fcd864a
 8008490:	a91d4101 	.word	0xa91d4101
 8008494:	3fd17460 	.word	0x3fd17460
 8008498:	518f264d 	.word	0x518f264d
 800849c:	3fd55555 	.word	0x3fd55555
 80084a0:	db6fabff 	.word	0xdb6fabff
 80084a4:	3fdb6db6 	.word	0x3fdb6db6
 80084a8:	33333303 	.word	0x33333303
 80084ac:	3fe33333 	.word	0x3fe33333
 80084b0:	e0000000 	.word	0xe0000000
 80084b4:	3feec709 	.word	0x3feec709
 80084b8:	dc3a03fd 	.word	0xdc3a03fd
 80084bc:	3feec709 	.word	0x3feec709
 80084c0:	145b01f5 	.word	0x145b01f5
 80084c4:	be3e2fe0 	.word	0xbe3e2fe0
 80084c8:	7ff00000 	.word	0x7ff00000
 80084cc:	43400000 	.word	0x43400000
 80084d0:	0003988e 	.word	0x0003988e
 80084d4:	000bb679 	.word	0x000bb679
 80084d8:	08008d68 	.word	0x08008d68
 80084dc:	3ff00000 	.word	0x3ff00000
 80084e0:	40080000 	.word	0x40080000
 80084e4:	08008d88 	.word	0x08008d88
 80084e8:	08008d78 	.word	0x08008d78
 80084ec:	2601      	movs	r6, #1
 80084ee:	e66a      	b.n	80081c6 <__ieee754_pow+0x42e>
 80084f0:	a39d      	add	r3, pc, #628	; (adr r3, 8008768 <__ieee754_pow+0x9d0>)
 80084f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f6:	4640      	mov	r0, r8
 80084f8:	4649      	mov	r1, r9
 80084fa:	f7f7 fe2f 	bl	800015c <__adddf3>
 80084fe:	4622      	mov	r2, r4
 8008500:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008504:	462b      	mov	r3, r5
 8008506:	4650      	mov	r0, sl
 8008508:	4639      	mov	r1, r7
 800850a:	f7f7 fe25 	bl	8000158 <__aeabi_dsub>
 800850e:	4602      	mov	r2, r0
 8008510:	460b      	mov	r3, r1
 8008512:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008516:	f7f8 fa67 	bl	80009e8 <__aeabi_dcmpgt>
 800851a:	2800      	cmp	r0, #0
 800851c:	f47f ae09 	bne.w	8008132 <__ieee754_pow+0x39a>
 8008520:	4aa3      	ldr	r2, [pc, #652]	; (80087b0 <__ieee754_pow+0xa18>)
 8008522:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8008526:	4293      	cmp	r3, r2
 8008528:	f340 8101 	ble.w	800872e <__ieee754_pow+0x996>
 800852c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008530:	2000      	movs	r0, #0
 8008532:	151b      	asrs	r3, r3, #20
 8008534:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008538:	fa4a f303 	asr.w	r3, sl, r3
 800853c:	4433      	add	r3, r6
 800853e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008542:	4f9c      	ldr	r7, [pc, #624]	; (80087b4 <__ieee754_pow+0xa1c>)
 8008544:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008548:	4117      	asrs	r7, r2
 800854a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800854e:	ea23 0107 	bic.w	r1, r3, r7
 8008552:	f1c2 0214 	rsb	r2, r2, #20
 8008556:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800855a:	460b      	mov	r3, r1
 800855c:	fa4a fa02 	asr.w	sl, sl, r2
 8008560:	2e00      	cmp	r6, #0
 8008562:	4602      	mov	r2, r0
 8008564:	4629      	mov	r1, r5
 8008566:	4620      	mov	r0, r4
 8008568:	bfb8      	it	lt
 800856a:	f1ca 0a00 	rsblt	sl, sl, #0
 800856e:	f7f7 fdf3 	bl	8000158 <__aeabi_dsub>
 8008572:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800857a:	2400      	movs	r4, #0
 800857c:	4642      	mov	r2, r8
 800857e:	464b      	mov	r3, r9
 8008580:	f7f7 fdec 	bl	800015c <__adddf3>
 8008584:	a37a      	add	r3, pc, #488	; (adr r3, 8008770 <__ieee754_pow+0x9d8>)
 8008586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858a:	4620      	mov	r0, r4
 800858c:	460d      	mov	r5, r1
 800858e:	f7f7 ff9b 	bl	80004c8 <__aeabi_dmul>
 8008592:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008596:	4606      	mov	r6, r0
 8008598:	460f      	mov	r7, r1
 800859a:	4620      	mov	r0, r4
 800859c:	4629      	mov	r1, r5
 800859e:	f7f7 fddb 	bl	8000158 <__aeabi_dsub>
 80085a2:	4602      	mov	r2, r0
 80085a4:	460b      	mov	r3, r1
 80085a6:	4640      	mov	r0, r8
 80085a8:	4649      	mov	r1, r9
 80085aa:	f7f7 fdd5 	bl	8000158 <__aeabi_dsub>
 80085ae:	a372      	add	r3, pc, #456	; (adr r3, 8008778 <__ieee754_pow+0x9e0>)
 80085b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b4:	f7f7 ff88 	bl	80004c8 <__aeabi_dmul>
 80085b8:	a371      	add	r3, pc, #452	; (adr r3, 8008780 <__ieee754_pow+0x9e8>)
 80085ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085be:	4680      	mov	r8, r0
 80085c0:	4689      	mov	r9, r1
 80085c2:	4620      	mov	r0, r4
 80085c4:	4629      	mov	r1, r5
 80085c6:	f7f7 ff7f 	bl	80004c8 <__aeabi_dmul>
 80085ca:	4602      	mov	r2, r0
 80085cc:	460b      	mov	r3, r1
 80085ce:	4640      	mov	r0, r8
 80085d0:	4649      	mov	r1, r9
 80085d2:	f7f7 fdc3 	bl	800015c <__adddf3>
 80085d6:	4604      	mov	r4, r0
 80085d8:	460d      	mov	r5, r1
 80085da:	4602      	mov	r2, r0
 80085dc:	460b      	mov	r3, r1
 80085de:	4630      	mov	r0, r6
 80085e0:	4639      	mov	r1, r7
 80085e2:	f7f7 fdbb 	bl	800015c <__adddf3>
 80085e6:	4632      	mov	r2, r6
 80085e8:	463b      	mov	r3, r7
 80085ea:	4680      	mov	r8, r0
 80085ec:	4689      	mov	r9, r1
 80085ee:	f7f7 fdb3 	bl	8000158 <__aeabi_dsub>
 80085f2:	4602      	mov	r2, r0
 80085f4:	460b      	mov	r3, r1
 80085f6:	4620      	mov	r0, r4
 80085f8:	4629      	mov	r1, r5
 80085fa:	f7f7 fdad 	bl	8000158 <__aeabi_dsub>
 80085fe:	4642      	mov	r2, r8
 8008600:	4606      	mov	r6, r0
 8008602:	460f      	mov	r7, r1
 8008604:	464b      	mov	r3, r9
 8008606:	4640      	mov	r0, r8
 8008608:	4649      	mov	r1, r9
 800860a:	f7f7 ff5d 	bl	80004c8 <__aeabi_dmul>
 800860e:	a35e      	add	r3, pc, #376	; (adr r3, 8008788 <__ieee754_pow+0x9f0>)
 8008610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008614:	4604      	mov	r4, r0
 8008616:	460d      	mov	r5, r1
 8008618:	f7f7 ff56 	bl	80004c8 <__aeabi_dmul>
 800861c:	a35c      	add	r3, pc, #368	; (adr r3, 8008790 <__ieee754_pow+0x9f8>)
 800861e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008622:	f7f7 fd99 	bl	8000158 <__aeabi_dsub>
 8008626:	4622      	mov	r2, r4
 8008628:	462b      	mov	r3, r5
 800862a:	f7f7 ff4d 	bl	80004c8 <__aeabi_dmul>
 800862e:	a35a      	add	r3, pc, #360	; (adr r3, 8008798 <__ieee754_pow+0xa00>)
 8008630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008634:	f7f7 fd92 	bl	800015c <__adddf3>
 8008638:	4622      	mov	r2, r4
 800863a:	462b      	mov	r3, r5
 800863c:	f7f7 ff44 	bl	80004c8 <__aeabi_dmul>
 8008640:	a357      	add	r3, pc, #348	; (adr r3, 80087a0 <__ieee754_pow+0xa08>)
 8008642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008646:	f7f7 fd87 	bl	8000158 <__aeabi_dsub>
 800864a:	4622      	mov	r2, r4
 800864c:	462b      	mov	r3, r5
 800864e:	f7f7 ff3b 	bl	80004c8 <__aeabi_dmul>
 8008652:	a355      	add	r3, pc, #340	; (adr r3, 80087a8 <__ieee754_pow+0xa10>)
 8008654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008658:	f7f7 fd80 	bl	800015c <__adddf3>
 800865c:	4622      	mov	r2, r4
 800865e:	462b      	mov	r3, r5
 8008660:	f7f7 ff32 	bl	80004c8 <__aeabi_dmul>
 8008664:	4602      	mov	r2, r0
 8008666:	460b      	mov	r3, r1
 8008668:	4640      	mov	r0, r8
 800866a:	4649      	mov	r1, r9
 800866c:	f7f7 fd74 	bl	8000158 <__aeabi_dsub>
 8008670:	4604      	mov	r4, r0
 8008672:	460d      	mov	r5, r1
 8008674:	4602      	mov	r2, r0
 8008676:	460b      	mov	r3, r1
 8008678:	4640      	mov	r0, r8
 800867a:	4649      	mov	r1, r9
 800867c:	f7f7 ff24 	bl	80004c8 <__aeabi_dmul>
 8008680:	2200      	movs	r2, #0
 8008682:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008686:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800868a:	4620      	mov	r0, r4
 800868c:	4629      	mov	r1, r5
 800868e:	f7f7 fd63 	bl	8000158 <__aeabi_dsub>
 8008692:	4602      	mov	r2, r0
 8008694:	460b      	mov	r3, r1
 8008696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800869a:	f7f8 f83f 	bl	800071c <__aeabi_ddiv>
 800869e:	4632      	mov	r2, r6
 80086a0:	4604      	mov	r4, r0
 80086a2:	460d      	mov	r5, r1
 80086a4:	463b      	mov	r3, r7
 80086a6:	4640      	mov	r0, r8
 80086a8:	4649      	mov	r1, r9
 80086aa:	f7f7 ff0d 	bl	80004c8 <__aeabi_dmul>
 80086ae:	4632      	mov	r2, r6
 80086b0:	463b      	mov	r3, r7
 80086b2:	f7f7 fd53 	bl	800015c <__adddf3>
 80086b6:	4602      	mov	r2, r0
 80086b8:	460b      	mov	r3, r1
 80086ba:	4620      	mov	r0, r4
 80086bc:	4629      	mov	r1, r5
 80086be:	f7f7 fd4b 	bl	8000158 <__aeabi_dsub>
 80086c2:	4642      	mov	r2, r8
 80086c4:	464b      	mov	r3, r9
 80086c6:	f7f7 fd47 	bl	8000158 <__aeabi_dsub>
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	2000      	movs	r0, #0
 80086d0:	4939      	ldr	r1, [pc, #228]	; (80087b8 <__ieee754_pow+0xa20>)
 80086d2:	f7f7 fd41 	bl	8000158 <__aeabi_dsub>
 80086d6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80086da:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80086de:	da29      	bge.n	8008734 <__ieee754_pow+0x99c>
 80086e0:	4652      	mov	r2, sl
 80086e2:	f000 f955 	bl	8008990 <scalbn>
 80086e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086ea:	f7ff bbfe 	b.w	8007eea <__ieee754_pow+0x152>
 80086ee:	4b33      	ldr	r3, [pc, #204]	; (80087bc <__ieee754_pow+0xa24>)
 80086f0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80086f4:	429f      	cmp	r7, r3
 80086f6:	f77f af13 	ble.w	8008520 <__ieee754_pow+0x788>
 80086fa:	4b31      	ldr	r3, [pc, #196]	; (80087c0 <__ieee754_pow+0xa28>)
 80086fc:	440b      	add	r3, r1
 80086fe:	4303      	orrs	r3, r0
 8008700:	d009      	beq.n	8008716 <__ieee754_pow+0x97e>
 8008702:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008706:	2200      	movs	r2, #0
 8008708:	2300      	movs	r3, #0
 800870a:	f7f8 f94f 	bl	80009ac <__aeabi_dcmplt>
 800870e:	3800      	subs	r0, #0
 8008710:	bf18      	it	ne
 8008712:	2001      	movne	r0, #1
 8008714:	e453      	b.n	8007fbe <__ieee754_pow+0x226>
 8008716:	4622      	mov	r2, r4
 8008718:	462b      	mov	r3, r5
 800871a:	f7f7 fd1d 	bl	8000158 <__aeabi_dsub>
 800871e:	4642      	mov	r2, r8
 8008720:	464b      	mov	r3, r9
 8008722:	f7f8 f957 	bl	80009d4 <__aeabi_dcmpge>
 8008726:	2800      	cmp	r0, #0
 8008728:	f43f aefa 	beq.w	8008520 <__ieee754_pow+0x788>
 800872c:	e7e9      	b.n	8008702 <__ieee754_pow+0x96a>
 800872e:	f04f 0a00 	mov.w	sl, #0
 8008732:	e720      	b.n	8008576 <__ieee754_pow+0x7de>
 8008734:	4621      	mov	r1, r4
 8008736:	e7d6      	b.n	80086e6 <__ieee754_pow+0x94e>
 8008738:	f04f 0b00 	mov.w	fp, #0
 800873c:	f8df c078 	ldr.w	ip, [pc, #120]	; 80087b8 <__ieee754_pow+0xa20>
 8008740:	f7ff bbba 	b.w	8007eb8 <__ieee754_pow+0x120>
 8008744:	f04f 0b00 	mov.w	fp, #0
 8008748:	f04f 0c00 	mov.w	ip, #0
 800874c:	f7ff bbb4 	b.w	8007eb8 <__ieee754_pow+0x120>
 8008750:	4640      	mov	r0, r8
 8008752:	4649      	mov	r1, r9
 8008754:	f7ff bb3d 	b.w	8007dd2 <__ieee754_pow+0x3a>
 8008758:	9200      	str	r2, [sp, #0]
 800875a:	f7ff bb89 	b.w	8007e70 <__ieee754_pow+0xd8>
 800875e:	2300      	movs	r3, #0
 8008760:	f7ff bb73 	b.w	8007e4a <__ieee754_pow+0xb2>
 8008764:	f3af 8000 	nop.w
 8008768:	652b82fe 	.word	0x652b82fe
 800876c:	3c971547 	.word	0x3c971547
 8008770:	00000000 	.word	0x00000000
 8008774:	3fe62e43 	.word	0x3fe62e43
 8008778:	fefa39ef 	.word	0xfefa39ef
 800877c:	3fe62e42 	.word	0x3fe62e42
 8008780:	0ca86c39 	.word	0x0ca86c39
 8008784:	be205c61 	.word	0xbe205c61
 8008788:	72bea4d0 	.word	0x72bea4d0
 800878c:	3e663769 	.word	0x3e663769
 8008790:	c5d26bf1 	.word	0xc5d26bf1
 8008794:	3ebbbd41 	.word	0x3ebbbd41
 8008798:	af25de2c 	.word	0xaf25de2c
 800879c:	3f11566a 	.word	0x3f11566a
 80087a0:	16bebd93 	.word	0x16bebd93
 80087a4:	3f66c16c 	.word	0x3f66c16c
 80087a8:	5555553e 	.word	0x5555553e
 80087ac:	3fc55555 	.word	0x3fc55555
 80087b0:	3fe00000 	.word	0x3fe00000
 80087b4:	000fffff 	.word	0x000fffff
 80087b8:	3ff00000 	.word	0x3ff00000
 80087bc:	4090cbff 	.word	0x4090cbff
 80087c0:	3f6f3400 	.word	0x3f6f3400

080087c4 <__ieee754_sqrt>:
 80087c4:	f8df c158 	ldr.w	ip, [pc, #344]	; 8008920 <__ieee754_sqrt+0x15c>
 80087c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087cc:	ea3c 0c01 	bics.w	ip, ip, r1
 80087d0:	4606      	mov	r6, r0
 80087d2:	460d      	mov	r5, r1
 80087d4:	460c      	mov	r4, r1
 80087d6:	460a      	mov	r2, r1
 80087d8:	4607      	mov	r7, r0
 80087da:	4603      	mov	r3, r0
 80087dc:	d10f      	bne.n	80087fe <__ieee754_sqrt+0x3a>
 80087de:	4602      	mov	r2, r0
 80087e0:	460b      	mov	r3, r1
 80087e2:	f7f7 fe71 	bl	80004c8 <__aeabi_dmul>
 80087e6:	4602      	mov	r2, r0
 80087e8:	460b      	mov	r3, r1
 80087ea:	4630      	mov	r0, r6
 80087ec:	4629      	mov	r1, r5
 80087ee:	f7f7 fcb5 	bl	800015c <__adddf3>
 80087f2:	4606      	mov	r6, r0
 80087f4:	460d      	mov	r5, r1
 80087f6:	4630      	mov	r0, r6
 80087f8:	4629      	mov	r1, r5
 80087fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087fe:	2900      	cmp	r1, #0
 8008800:	dc0e      	bgt.n	8008820 <__ieee754_sqrt+0x5c>
 8008802:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008806:	ea5c 0707 	orrs.w	r7, ip, r7
 800880a:	d0f4      	beq.n	80087f6 <__ieee754_sqrt+0x32>
 800880c:	b141      	cbz	r1, 8008820 <__ieee754_sqrt+0x5c>
 800880e:	4602      	mov	r2, r0
 8008810:	460b      	mov	r3, r1
 8008812:	f7f7 fca1 	bl	8000158 <__aeabi_dsub>
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	f7f7 ff7f 	bl	800071c <__aeabi_ddiv>
 800881e:	e7e8      	b.n	80087f2 <__ieee754_sqrt+0x2e>
 8008820:	1521      	asrs	r1, r4, #20
 8008822:	d075      	beq.n	8008910 <__ieee754_sqrt+0x14c>
 8008824:	07cc      	lsls	r4, r1, #31
 8008826:	f04f 0400 	mov.w	r4, #0
 800882a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800882e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8008832:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008836:	bf5e      	ittt	pl
 8008838:	0fd9      	lsrpl	r1, r3, #31
 800883a:	005b      	lslpl	r3, r3, #1
 800883c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8008840:	0fd9      	lsrs	r1, r3, #31
 8008842:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8008846:	2516      	movs	r5, #22
 8008848:	4620      	mov	r0, r4
 800884a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800884e:	107f      	asrs	r7, r7, #1
 8008850:	005b      	lsls	r3, r3, #1
 8008852:	1846      	adds	r6, r0, r1
 8008854:	4296      	cmp	r6, r2
 8008856:	bfde      	ittt	le
 8008858:	1b92      	suble	r2, r2, r6
 800885a:	1870      	addle	r0, r6, r1
 800885c:	1864      	addle	r4, r4, r1
 800885e:	0052      	lsls	r2, r2, #1
 8008860:	3d01      	subs	r5, #1
 8008862:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008866:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800886a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800886e:	d1f0      	bne.n	8008852 <__ieee754_sqrt+0x8e>
 8008870:	4629      	mov	r1, r5
 8008872:	f04f 0e20 	mov.w	lr, #32
 8008876:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800887a:	4282      	cmp	r2, r0
 800887c:	eb06 0c05 	add.w	ip, r6, r5
 8008880:	dc02      	bgt.n	8008888 <__ieee754_sqrt+0xc4>
 8008882:	d113      	bne.n	80088ac <__ieee754_sqrt+0xe8>
 8008884:	459c      	cmp	ip, r3
 8008886:	d811      	bhi.n	80088ac <__ieee754_sqrt+0xe8>
 8008888:	f1bc 0f00 	cmp.w	ip, #0
 800888c:	eb0c 0506 	add.w	r5, ip, r6
 8008890:	da43      	bge.n	800891a <__ieee754_sqrt+0x156>
 8008892:	2d00      	cmp	r5, #0
 8008894:	db41      	blt.n	800891a <__ieee754_sqrt+0x156>
 8008896:	f100 0801 	add.w	r8, r0, #1
 800889a:	1a12      	subs	r2, r2, r0
 800889c:	4640      	mov	r0, r8
 800889e:	459c      	cmp	ip, r3
 80088a0:	bf88      	it	hi
 80088a2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80088a6:	eba3 030c 	sub.w	r3, r3, ip
 80088aa:	4431      	add	r1, r6
 80088ac:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80088b0:	f1be 0e01 	subs.w	lr, lr, #1
 80088b4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80088b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80088bc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80088c0:	d1db      	bne.n	800887a <__ieee754_sqrt+0xb6>
 80088c2:	4313      	orrs	r3, r2
 80088c4:	d006      	beq.n	80088d4 <__ieee754_sqrt+0x110>
 80088c6:	1c48      	adds	r0, r1, #1
 80088c8:	bf0b      	itete	eq
 80088ca:	4671      	moveq	r1, lr
 80088cc:	3101      	addne	r1, #1
 80088ce:	3401      	addeq	r4, #1
 80088d0:	f021 0101 	bicne.w	r1, r1, #1
 80088d4:	1063      	asrs	r3, r4, #1
 80088d6:	0849      	lsrs	r1, r1, #1
 80088d8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80088dc:	07e2      	lsls	r2, r4, #31
 80088de:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80088e2:	bf48      	it	mi
 80088e4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80088e8:	460e      	mov	r6, r1
 80088ea:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80088ee:	e782      	b.n	80087f6 <__ieee754_sqrt+0x32>
 80088f0:	0ada      	lsrs	r2, r3, #11
 80088f2:	3815      	subs	r0, #21
 80088f4:	055b      	lsls	r3, r3, #21
 80088f6:	2a00      	cmp	r2, #0
 80088f8:	d0fa      	beq.n	80088f0 <__ieee754_sqrt+0x12c>
 80088fa:	02d5      	lsls	r5, r2, #11
 80088fc:	d50a      	bpl.n	8008914 <__ieee754_sqrt+0x150>
 80088fe:	f1c1 0420 	rsb	r4, r1, #32
 8008902:	fa23 f404 	lsr.w	r4, r3, r4
 8008906:	1e4d      	subs	r5, r1, #1
 8008908:	408b      	lsls	r3, r1
 800890a:	4322      	orrs	r2, r4
 800890c:	1b41      	subs	r1, r0, r5
 800890e:	e789      	b.n	8008824 <__ieee754_sqrt+0x60>
 8008910:	4608      	mov	r0, r1
 8008912:	e7f0      	b.n	80088f6 <__ieee754_sqrt+0x132>
 8008914:	0052      	lsls	r2, r2, #1
 8008916:	3101      	adds	r1, #1
 8008918:	e7ef      	b.n	80088fa <__ieee754_sqrt+0x136>
 800891a:	4680      	mov	r8, r0
 800891c:	e7bd      	b.n	800889a <__ieee754_sqrt+0xd6>
 800891e:	bf00      	nop
 8008920:	7ff00000 	.word	0x7ff00000

08008924 <with_errno>:
 8008924:	b570      	push	{r4, r5, r6, lr}
 8008926:	4604      	mov	r4, r0
 8008928:	460d      	mov	r5, r1
 800892a:	4616      	mov	r6, r2
 800892c:	f7ff f966 	bl	8007bfc <__errno>
 8008930:	4629      	mov	r1, r5
 8008932:	6006      	str	r6, [r0, #0]
 8008934:	4620      	mov	r0, r4
 8008936:	bd70      	pop	{r4, r5, r6, pc}

08008938 <xflow>:
 8008938:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800893a:	4615      	mov	r5, r2
 800893c:	461c      	mov	r4, r3
 800893e:	b180      	cbz	r0, 8008962 <xflow+0x2a>
 8008940:	4610      	mov	r0, r2
 8008942:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008946:	e9cd 0100 	strd	r0, r1, [sp]
 800894a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800894e:	4628      	mov	r0, r5
 8008950:	4621      	mov	r1, r4
 8008952:	f7f7 fdb9 	bl	80004c8 <__aeabi_dmul>
 8008956:	2222      	movs	r2, #34	; 0x22
 8008958:	b003      	add	sp, #12
 800895a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800895e:	f7ff bfe1 	b.w	8008924 <with_errno>
 8008962:	4610      	mov	r0, r2
 8008964:	4619      	mov	r1, r3
 8008966:	e7ee      	b.n	8008946 <xflow+0xe>

08008968 <__math_uflow>:
 8008968:	2200      	movs	r2, #0
 800896a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800896e:	f7ff bfe3 	b.w	8008938 <xflow>

08008972 <__math_oflow>:
 8008972:	2200      	movs	r2, #0
 8008974:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008978:	f7ff bfde 	b.w	8008938 <xflow>

0800897c <fabs>:
 800897c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008980:	4770      	bx	lr

08008982 <finite>:
 8008982:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8008986:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800898a:	0fc0      	lsrs	r0, r0, #31
 800898c:	4770      	bx	lr
	...

08008990 <scalbn>:
 8008990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008992:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8008996:	4604      	mov	r4, r0
 8008998:	460d      	mov	r5, r1
 800899a:	4617      	mov	r7, r2
 800899c:	460b      	mov	r3, r1
 800899e:	b996      	cbnz	r6, 80089c6 <scalbn+0x36>
 80089a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80089a4:	4303      	orrs	r3, r0
 80089a6:	d039      	beq.n	8008a1c <scalbn+0x8c>
 80089a8:	4b33      	ldr	r3, [pc, #204]	; (8008a78 <scalbn+0xe8>)
 80089aa:	2200      	movs	r2, #0
 80089ac:	f7f7 fd8c 	bl	80004c8 <__aeabi_dmul>
 80089b0:	4b32      	ldr	r3, [pc, #200]	; (8008a7c <scalbn+0xec>)
 80089b2:	4604      	mov	r4, r0
 80089b4:	429f      	cmp	r7, r3
 80089b6:	460d      	mov	r5, r1
 80089b8:	da0f      	bge.n	80089da <scalbn+0x4a>
 80089ba:	a32b      	add	r3, pc, #172	; (adr r3, 8008a68 <scalbn+0xd8>)
 80089bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c0:	f7f7 fd82 	bl	80004c8 <__aeabi_dmul>
 80089c4:	e006      	b.n	80089d4 <scalbn+0x44>
 80089c6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80089ca:	4296      	cmp	r6, r2
 80089cc:	d10a      	bne.n	80089e4 <scalbn+0x54>
 80089ce:	4602      	mov	r2, r0
 80089d0:	f7f7 fbc4 	bl	800015c <__adddf3>
 80089d4:	4604      	mov	r4, r0
 80089d6:	460d      	mov	r5, r1
 80089d8:	e020      	b.n	8008a1c <scalbn+0x8c>
 80089da:	460b      	mov	r3, r1
 80089dc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80089e0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80089e4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80089e8:	19b9      	adds	r1, r7, r6
 80089ea:	4291      	cmp	r1, r2
 80089ec:	dd0e      	ble.n	8008a0c <scalbn+0x7c>
 80089ee:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80089f2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80089f6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80089fa:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80089fe:	4820      	ldr	r0, [pc, #128]	; (8008a80 <scalbn+0xf0>)
 8008a00:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8008a04:	a31a      	add	r3, pc, #104	; (adr r3, 8008a70 <scalbn+0xe0>)
 8008a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0a:	e7d9      	b.n	80089c0 <scalbn+0x30>
 8008a0c:	2900      	cmp	r1, #0
 8008a0e:	dd08      	ble.n	8008a22 <scalbn+0x92>
 8008a10:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008a14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008a18:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	4629      	mov	r1, r5
 8008a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a22:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8008a26:	da12      	bge.n	8008a4e <scalbn+0xbe>
 8008a28:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008a2c:	429f      	cmp	r7, r3
 8008a2e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8008a32:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8008a36:	dcdc      	bgt.n	80089f2 <scalbn+0x62>
 8008a38:	a30b      	add	r3, pc, #44	; (adr r3, 8008a68 <scalbn+0xd8>)
 8008a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8008a42:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8008a46:	480f      	ldr	r0, [pc, #60]	; (8008a84 <scalbn+0xf4>)
 8008a48:	f041 011f 	orr.w	r1, r1, #31
 8008a4c:	e7b8      	b.n	80089c0 <scalbn+0x30>
 8008a4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008a52:	3136      	adds	r1, #54	; 0x36
 8008a54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008a58:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	4629      	mov	r1, r5
 8008a60:	2200      	movs	r2, #0
 8008a62:	4b09      	ldr	r3, [pc, #36]	; (8008a88 <scalbn+0xf8>)
 8008a64:	e7ac      	b.n	80089c0 <scalbn+0x30>
 8008a66:	bf00      	nop
 8008a68:	c2f8f359 	.word	0xc2f8f359
 8008a6c:	01a56e1f 	.word	0x01a56e1f
 8008a70:	8800759c 	.word	0x8800759c
 8008a74:	7e37e43c 	.word	0x7e37e43c
 8008a78:	43500000 	.word	0x43500000
 8008a7c:	ffff3cb0 	.word	0xffff3cb0
 8008a80:	8800759c 	.word	0x8800759c
 8008a84:	c2f8f359 	.word	0xc2f8f359
 8008a88:	3c900000 	.word	0x3c900000

08008a8c <_init>:
 8008a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8e:	bf00      	nop
 8008a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a92:	bc08      	pop	{r3}
 8008a94:	469e      	mov	lr, r3
 8008a96:	4770      	bx	lr

08008a98 <_fini>:
 8008a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a9a:	bf00      	nop
 8008a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a9e:	bc08      	pop	{r3}
 8008aa0:	469e      	mov	lr, r3
 8008aa2:	4770      	bx	lr
