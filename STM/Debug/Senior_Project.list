
Senior_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  080037f0  080037f0  000137f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003980  08003980  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003980  08003980  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003980  08003980  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003980  08003980  00013980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003984  08003984  00013984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  2000000c  08003994  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08003994  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000951a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b9e  00000000  00000000  0002954f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0002b0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000798  00000000  00000000  0002b930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018382  00000000  00000000  0002c0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a1b9  00000000  00000000  0004444a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000841bc  00000000  00000000  0004e603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d27bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fd8  00000000  00000000  000d2810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080037d8 	.word	0x080037d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080037d8 	.word	0x080037d8

0800014c <dev_trace_send_byte_int>:

//------------------------------------------------------------------------------
//         Local functions
//------------------------------------------------------------------------------
void dev_trace_send_byte_int(UINT8 b)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
		UINT8 i; 

		for (i=0; i<8; i++)
 8000156:	2300      	movs	r3, #0
 8000158:	73fb      	strb	r3, [r7, #15]
 800015a:	e015      	b.n	8000188 <dev_trace_send_byte_int+0x3c>
		{
				dev_gpio_set(&trace_spi[TRACE_SPI_MOSI], b & 0x80); 
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000162:	b2db      	uxtb	r3, r3
 8000164:	4619      	mov	r1, r3
 8000166:	480c      	ldr	r0, [pc, #48]	; (8000198 <dev_trace_send_byte_int+0x4c>)
 8000168:	f000 ffdc 	bl	8001124 <dev_gpio_set>
//				dev_gpio_set(&trace_spi[TRACE_SPI_MOSI], b & 0x80); 
				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 1); 
 800016c:	2101      	movs	r1, #1
 800016e:	480b      	ldr	r0, [pc, #44]	; (800019c <dev_trace_send_byte_int+0x50>)
 8000170:	f000 ffd8 	bl	8001124 <dev_gpio_set>
//				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 1); 
				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 0); 
 8000174:	2100      	movs	r1, #0
 8000176:	4809      	ldr	r0, [pc, #36]	; (800019c <dev_trace_send_byte_int+0x50>)
 8000178:	f000 ffd4 	bl	8001124 <dev_gpio_set>
//				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 0); 
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_SCK].port, trace_spi[TRACE_SPI_SCK].pin, b & 0x80);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 1);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
			
				b = b << 1;
 800017c:	79fb      	ldrb	r3, [r7, #7]
 800017e:	005b      	lsls	r3, r3, #1
 8000180:	71fb      	strb	r3, [r7, #7]
		for (i=0; i<8; i++)
 8000182:	7bfb      	ldrb	r3, [r7, #15]
 8000184:	3301      	adds	r3, #1
 8000186:	73fb      	strb	r3, [r7, #15]
 8000188:	7bfb      	ldrb	r3, [r7, #15]
 800018a:	2b07      	cmp	r3, #7
 800018c:	d9e6      	bls.n	800015c <dev_trace_send_byte_int+0x10>
		}
}
 800018e:	bf00      	nop
 8000190:	bf00      	nop
 8000192:	3710      	adds	r7, #16
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}
 8000198:	2000002c 	.word	0x2000002c
 800019c:	2000004c 	.word	0x2000004c

080001a0 <dev_trace_init>:

//------------------------------------------------------------------------------
//         Global functions
//------------------------------------------------------------------------------
UINT8 dev_trace_init(dev_trace_init_t* init)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b084      	sub	sp, #16
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
		UINT8 ret;


		ret = dev_gpio_init_simp(&trace_spi[TRACE_SPI_MOSI], init->mosi.port, init->mosi.pin, GPIO_MODE_OUTPUT_PP);
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	7899      	ldrb	r1, [r3, #2]
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	881a      	ldrh	r2, [r3, #0]
 80001b0:	2301      	movs	r3, #1
 80001b2:	4827      	ldr	r0, [pc, #156]	; (8000250 <dev_trace_init+0xb0>)
 80001b4:	f000 ff86 	bl	80010c4 <dev_gpio_init_simp>
 80001b8:	4603      	mov	r3, r0
 80001ba:	73fb      	strb	r3, [r7, #15]
		if (ret) return TRACE_EERROR(ret);
 80001bc:	7bfb      	ldrb	r3, [r7, #15]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d007      	beq.n	80001d2 <dev_trace_init+0x32>
 80001c2:	7bfb      	ldrb	r3, [r7, #15]
 80001c4:	224e      	movs	r2, #78	; 0x4e
 80001c6:	4923      	ldr	r1, [pc, #140]	; (8000254 <dev_trace_init+0xb4>)
 80001c8:	4618      	mov	r0, r3
 80001ca:	f000 f873 	bl	80002b4 <dev_trace_get_error>
 80001ce:	4603      	mov	r3, r0
 80001d0:	e039      	b.n	8000246 <dev_trace_init+0xa6>
		ret = dev_gpio_init_simp(&trace_spi[TRACE_SPI_SCK], init->sck.port, init->sck.pin, GPIO_MODE_OUTPUT_PP);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	7999      	ldrb	r1, [r3, #6]
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	889a      	ldrh	r2, [r3, #4]
 80001da:	2301      	movs	r3, #1
 80001dc:	481e      	ldr	r0, [pc, #120]	; (8000258 <dev_trace_init+0xb8>)
 80001de:	f000 ff71 	bl	80010c4 <dev_gpio_init_simp>
 80001e2:	4603      	mov	r3, r0
 80001e4:	73fb      	strb	r3, [r7, #15]
		if (ret) return TRACE_EERROR(ret);
 80001e6:	7bfb      	ldrb	r3, [r7, #15]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d007      	beq.n	80001fc <dev_trace_init+0x5c>
 80001ec:	7bfb      	ldrb	r3, [r7, #15]
 80001ee:	2250      	movs	r2, #80	; 0x50
 80001f0:	4918      	ldr	r1, [pc, #96]	; (8000254 <dev_trace_init+0xb4>)
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 f85e 	bl	80002b4 <dev_trace_get_error>
 80001f8:	4603      	mov	r3, r0
 80001fa:	e024      	b.n	8000246 <dev_trace_init+0xa6>
		ret = dev_gpio_init_simp(&trace_spi[TRACE_SPI_NSS], init->nss.port, init->nss.pin, GPIO_MODE_OUTPUT_PP);
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	7a99      	ldrb	r1, [r3, #10]
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	891a      	ldrh	r2, [r3, #8]
 8000204:	2301      	movs	r3, #1
 8000206:	4815      	ldr	r0, [pc, #84]	; (800025c <dev_trace_init+0xbc>)
 8000208:	f000 ff5c 	bl	80010c4 <dev_gpio_init_simp>
 800020c:	4603      	mov	r3, r0
 800020e:	73fb      	strb	r3, [r7, #15]
		if (ret) return TRACE_EERROR(ret);
 8000210:	7bfb      	ldrb	r3, [r7, #15]
 8000212:	2b00      	cmp	r3, #0
 8000214:	d007      	beq.n	8000226 <dev_trace_init+0x86>
 8000216:	7bfb      	ldrb	r3, [r7, #15]
 8000218:	2252      	movs	r2, #82	; 0x52
 800021a:	490e      	ldr	r1, [pc, #56]	; (8000254 <dev_trace_init+0xb4>)
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f849 	bl	80002b4 <dev_trace_get_error>
 8000222:	4603      	mov	r3, r0
 8000224:	e00f      	b.n	8000246 <dev_trace_init+0xa6>
//  HAL_GPIO_Init(trace_spi[TRACE_SPI_NSS].port, &GPIO_InitStruct);	
	
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_NSS].port, trace_spi[TRACE_SPI_NSS].pin, 1);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_SCK].port, trace_spi[TRACE_SPI_SCK].pin, 0);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
		dev_gpio_set(&trace_spi[TRACE_SPI_NSS], 1);
 8000226:	2101      	movs	r1, #1
 8000228:	480c      	ldr	r0, [pc, #48]	; (800025c <dev_trace_init+0xbc>)
 800022a:	f000 ff7b 	bl	8001124 <dev_gpio_set>
		dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 0);
 800022e:	2100      	movs	r1, #0
 8000230:	4809      	ldr	r0, [pc, #36]	; (8000258 <dev_trace_init+0xb8>)
 8000232:	f000 ff77 	bl	8001124 <dev_gpio_set>
		dev_gpio_set(&trace_spi[TRACE_SPI_MOSI], 0);
 8000236:	2100      	movs	r1, #0
 8000238:	4805      	ldr	r0, [pc, #20]	; (8000250 <dev_trace_init+0xb0>)
 800023a:	f000 ff73 	bl	8001124 <dev_gpio_set>

		trace_ready = 1;	
 800023e:	4b08      	ldr	r3, [pc, #32]	; (8000260 <dev_trace_init+0xc0>)
 8000240:	2201      	movs	r2, #1
 8000242:	701a      	strb	r2, [r3, #0]

		return RET_OK;
 8000244:	2300      	movs	r3, #0
}
 8000246:	4618      	mov	r0, r3
 8000248:	3710      	adds	r7, #16
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	2000002c 	.word	0x2000002c
 8000254:	080037f0 	.word	0x080037f0
 8000258:	2000004c 	.word	0x2000004c
 800025c:	2000006c 	.word	0x2000006c
 8000260:	20000028 	.word	0x20000028

08000264 <dev_trace_send_byte>:

// Send one Byte 
void dev_trace_send_byte(UINT8 b)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	71fb      	strb	r3, [r7, #7]
	if (trace_ready == 0) return;
 800026e:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <dev_trace_send_byte+0x48>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d016      	beq.n	80002a4 <dev_trace_send_byte+0x40>

//		dev_gpio_set(&trace_spi[TRACE_SPI_NSS], 0);
		HAL_GPIO_WritePin(trace_spi[TRACE_SPI_NSS].port, trace_spi[TRACE_SPI_NSS].pin, 0);
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <dev_trace_send_byte+0x4c>)
 8000278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800027a:	4a0d      	ldr	r2, [pc, #52]	; (80002b0 <dev_trace_send_byte+0x4c>)
 800027c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 8000280:	2200      	movs	r2, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f001 ffc4 	bl	8002210 <HAL_GPIO_WritePin>
		dev_trace_send_byte_int(b);
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	4618      	mov	r0, r3
 800028c:	f7ff ff5e 	bl	800014c <dev_trace_send_byte_int>
//		dev_gpio_set(&trace_spi[TRACE_SPI_NSS], 1);
	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_NSS].port, trace_spi[TRACE_SPI_NSS].pin, 1);
 8000290:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <dev_trace_send_byte+0x4c>)
 8000292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000294:	4a06      	ldr	r2, [pc, #24]	; (80002b0 <dev_trace_send_byte+0x4c>)
 8000296:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 800029a:	2201      	movs	r2, #1
 800029c:	4618      	mov	r0, r3
 800029e:	f001 ffb7 	bl	8002210 <HAL_GPIO_WritePin>
 80002a2:	e000      	b.n	80002a6 <dev_trace_send_byte+0x42>
	if (trace_ready == 0) return;
 80002a4:	bf00      	nop
//		HAL_GPIO_WritePin(trace_spi[TRACE_SPI_SCK].port, trace_spi[TRACE_SPI_SCK].pin, 0);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
}
 80002a6:	3708      	adds	r7, #8
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000028 	.word	0x20000028
 80002b0:	2000002c 	.word	0x2000002c

080002b4 <dev_trace_get_error>:
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
}

// Get Trace error
uint8_t dev_trace_get_error(uint8_t error_value, char* file_name, uint32_t file_line)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	60b9      	str	r1, [r7, #8]
 80002be:	607a      	str	r2, [r7, #4]
 80002c0:	73fb      	strb	r3, [r7, #15]
		if (error_value == RET_OK) return RET_OK;
 80002c2:	7bfb      	ldrb	r3, [r7, #15]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d101      	bne.n	80002cc <dev_trace_get_error+0x18>
 80002c8:	2300      	movs	r3, #0
 80002ca:	e006      	b.n	80002da <dev_trace_get_error+0x26>
	
		debug_printf("EE> %d at %s:%d\n\r", error_value, file_name, file_line); 
 80002cc:	7bf9      	ldrb	r1, [r7, #15]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	68ba      	ldr	r2, [r7, #8]
 80002d2:	4804      	ldr	r0, [pc, #16]	; (80002e4 <dev_trace_get_error+0x30>)
 80002d4:	f000 f976 	bl	80005c4 <debug_printf>

		return error_value;
 80002d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80002da:	4618      	mov	r0, r3
 80002dc:	3710      	adds	r7, #16
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	08003808 	.word	0x08003808

080002e8 <dev_trace_generate_error>:

// Generate Trace error
uint8_t dev_trace_generate_error(char* error_name, char* file_name, uint32_t file_line)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b086      	sub	sp, #24
 80002ec:	af02      	add	r7, sp, #8
 80002ee:	60f8      	str	r0, [r7, #12]
 80002f0:	60b9      	str	r1, [r7, #8]
 80002f2:	607a      	str	r2, [r7, #4]
		trace_error_id++;
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <dev_trace_generate_error+0x54>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	3301      	adds	r3, #1
 80002fa:	b2da      	uxtb	r2, r3
 80002fc:	4b0f      	ldr	r3, [pc, #60]	; (800033c <dev_trace_generate_error+0x54>)
 80002fe:	701a      	strb	r2, [r3, #0]
		if (trace_error_id < 100) trace_error_id = 100;
 8000300:	4b0e      	ldr	r3, [pc, #56]	; (800033c <dev_trace_generate_error+0x54>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b63      	cmp	r3, #99	; 0x63
 8000306:	d802      	bhi.n	800030e <dev_trace_generate_error+0x26>
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <dev_trace_generate_error+0x54>)
 800030a:	2264      	movs	r2, #100	; 0x64
 800030c:	701a      	strb	r2, [r3, #0]
		if (trace_error_id >= 200) trace_error_id = 100;
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <dev_trace_generate_error+0x54>)
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	2bc7      	cmp	r3, #199	; 0xc7
 8000314:	d902      	bls.n	800031c <dev_trace_generate_error+0x34>
 8000316:	4b09      	ldr	r3, [pc, #36]	; (800033c <dev_trace_generate_error+0x54>)
 8000318:	2264      	movs	r2, #100	; 0x64
 800031a:	701a      	strb	r2, [r3, #0]

		debug_printf("GE> %d %s at %s:%d\n\r", trace_error_id, error_name, file_name, file_line);
 800031c:	4b07      	ldr	r3, [pc, #28]	; (800033c <dev_trace_generate_error+0x54>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	4619      	mov	r1, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	68bb      	ldr	r3, [r7, #8]
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	4805      	ldr	r0, [pc, #20]	; (8000340 <dev_trace_generate_error+0x58>)
 800032c:	f000 f94a 	bl	80005c4 <debug_printf>

		return trace_error_id;
 8000330:	4b02      	ldr	r3, [pc, #8]	; (800033c <dev_trace_generate_error+0x54>)
 8000332:	781b      	ldrb	r3, [r3, #0]
}
 8000334:	4618      	mov	r0, r3
 8000336:	3710      	adds	r7, #16
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	20000029 	.word	0x20000029
 8000340:	0800381c 	.word	0x0800381c

08000344 <debug_printf_char>:
}

// Custom Printf function
//////////////////////////////////////////////////////////////////////////
void debug_printf_char(UINT8 c)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	71fb      	strb	r3, [r7, #7]
    if (c < ' ') 
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	2b1f      	cmp	r3, #31
 8000352:	d82a      	bhi.n	80003aa <debug_printf_char+0x66>
    {    
        dev_trace_send_byte('~');
 8000354:	207e      	movs	r0, #126	; 0x7e
 8000356:	f7ff ff85 	bl	8000264 <dev_trace_send_byte>
        dev_trace_send_byte(HB2HEX(c / 0x10));
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	2b9f      	cmp	r3, #159	; 0x9f
 800035e:	d905      	bls.n	800036c <debug_printf_char+0x28>
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	091b      	lsrs	r3, r3, #4
 8000364:	b2db      	uxtb	r3, r3
 8000366:	3337      	adds	r3, #55	; 0x37
 8000368:	b2db      	uxtb	r3, r3
 800036a:	e004      	b.n	8000376 <debug_printf_char+0x32>
 800036c:	79fb      	ldrb	r3, [r7, #7]
 800036e:	091b      	lsrs	r3, r3, #4
 8000370:	b2db      	uxtb	r3, r3
 8000372:	3330      	adds	r3, #48	; 0x30
 8000374:	b2db      	uxtb	r3, r3
 8000376:	4618      	mov	r0, r3
 8000378:	f7ff ff74 	bl	8000264 <dev_trace_send_byte>
        dev_trace_send_byte(HB2HEX(c % 0x10));
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	f003 030f 	and.w	r3, r3, #15
 8000382:	b2db      	uxtb	r3, r3
 8000384:	2b09      	cmp	r3, #9
 8000386:	d906      	bls.n	8000396 <debug_printf_char+0x52>
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	f003 030f 	and.w	r3, r3, #15
 800038e:	b2db      	uxtb	r3, r3
 8000390:	3337      	adds	r3, #55	; 0x37
 8000392:	b2db      	uxtb	r3, r3
 8000394:	e005      	b.n	80003a2 <debug_printf_char+0x5e>
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	f003 030f 	and.w	r3, r3, #15
 800039c:	b2db      	uxtb	r3, r3
 800039e:	3330      	adds	r3, #48	; 0x30
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	4618      	mov	r0, r3
 80003a4:	f7ff ff5e 	bl	8000264 <dev_trace_send_byte>
    }
    else dev_trace_send_byte(c);
}
 80003a8:	e003      	b.n	80003b2 <debug_printf_char+0x6e>
    else dev_trace_send_byte(c);
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	4618      	mov	r0, r3
 80003ae:	f7ff ff59 	bl	8000264 <dev_trace_send_byte>
}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}

080003ba <debug_printf_text>:

void debug_printf_text(char* text)
{
 80003ba:	b580      	push	{r7, lr}
 80003bc:	b084      	sub	sp, #16
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
   int i = 0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	60fb      	str	r3, [r7, #12]

   while(text[i] != 0)
 80003c6:	e009      	b.n	80003dc <debug_printf_text+0x22>
   {   
      dev_trace_send_byte(text[i]);
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	4413      	add	r3, r2
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	4618      	mov	r0, r3
 80003d2:	f7ff ff47 	bl	8000264 <dev_trace_send_byte>
      i++;
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	3301      	adds	r3, #1
 80003da:	60fb      	str	r3, [r7, #12]
   while(text[i] != 0)
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	687a      	ldr	r2, [r7, #4]
 80003e0:	4413      	add	r3, r2
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d1ef      	bne.n	80003c8 <debug_printf_text+0xe>
   }   
}
 80003e8:	bf00      	nop
 80003ea:	bf00      	nop
 80003ec:	3710      	adds	r7, #16
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <debug_printf_long>:

   debug_printf_ulong(d);
}

void debug_printf_long(unsigned long d, UINT8 mode)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b086      	sub	sp, #24
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	460b      	mov	r3, r1
 80003fe:	70fb      	strb	r3, [r7, #3]
   UINT8 buf[10], len = 0;
 8000400:	2300      	movs	r3, #0
 8000402:	75fb      	strb	r3, [r7, #23]

   if (d == 0) 
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d103      	bne.n	8000412 <debug_printf_long+0x1e>
   {
      dev_trace_send_byte('0');
 800040a:	2030      	movs	r0, #48	; 0x30
 800040c:	f7ff ff2a 	bl	8000264 <dev_trace_send_byte>
 8000410:	e03a      	b.n	8000488 <debug_printf_long+0x94>
      return;
   }   
   
   if (mode == 'd') 
 8000412:	78fb      	ldrb	r3, [r7, #3]
 8000414:	2b64      	cmp	r3, #100	; 0x64
 8000416:	d122      	bne.n	800045e <debug_printf_long+0x6a>
   if ((signed long)d < 0) 
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	2b00      	cmp	r3, #0
 800041c:	da1f      	bge.n	800045e <debug_printf_long+0x6a>
   {
      dev_trace_send_byte('-');
 800041e:	202d      	movs	r0, #45	; 0x2d
 8000420:	f7ff ff20 	bl	8000264 <dev_trace_send_byte>
      d = -((signed long)d);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	425b      	negs	r3, r3
 8000428:	607b      	str	r3, [r7, #4]
   }   

   while (d > 0)
 800042a:	e018      	b.n	800045e <debug_printf_long+0x6a>
   {   
      buf[len] = d % 10;
 800042c:	6879      	ldr	r1, [r7, #4]
 800042e:	4b18      	ldr	r3, [pc, #96]	; (8000490 <debug_printf_long+0x9c>)
 8000430:	fba3 2301 	umull	r2, r3, r3, r1
 8000434:	08da      	lsrs	r2, r3, #3
 8000436:	4613      	mov	r3, r2
 8000438:	009b      	lsls	r3, r3, #2
 800043a:	4413      	add	r3, r2
 800043c:	005b      	lsls	r3, r3, #1
 800043e:	1aca      	subs	r2, r1, r3
 8000440:	7dfb      	ldrb	r3, [r7, #23]
 8000442:	b2d2      	uxtb	r2, r2
 8000444:	3318      	adds	r3, #24
 8000446:	443b      	add	r3, r7
 8000448:	f803 2c0c 	strb.w	r2, [r3, #-12]
      d = d / 10;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4a10      	ldr	r2, [pc, #64]	; (8000490 <debug_printf_long+0x9c>)
 8000450:	fba2 2303 	umull	r2, r3, r2, r3
 8000454:	08db      	lsrs	r3, r3, #3
 8000456:	607b      	str	r3, [r7, #4]
      len++;
 8000458:	7dfb      	ldrb	r3, [r7, #23]
 800045a:	3301      	adds	r3, #1
 800045c:	75fb      	strb	r3, [r7, #23]
   while (d > 0)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d1e3      	bne.n	800042c <debug_printf_long+0x38>
   }   

   while (len > 0)
 8000464:	e00d      	b.n	8000482 <debug_printf_long+0x8e>
   {   
      dev_trace_send_byte(buf[len - 1] + 0x30);
 8000466:	7dfb      	ldrb	r3, [r7, #23]
 8000468:	3b01      	subs	r3, #1
 800046a:	3318      	adds	r3, #24
 800046c:	443b      	add	r3, r7
 800046e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000472:	3330      	adds	r3, #48	; 0x30
 8000474:	b2db      	uxtb	r3, r3
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff fef4 	bl	8000264 <dev_trace_send_byte>
      len--;
 800047c:	7dfb      	ldrb	r3, [r7, #23]
 800047e:	3b01      	subs	r3, #1
 8000480:	75fb      	strb	r3, [r7, #23]
   while (len > 0)
 8000482:	7dfb      	ldrb	r3, [r7, #23]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d1ee      	bne.n	8000466 <debug_printf_long+0x72>
   }   
}
 8000488:	3718      	adds	r7, #24
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	cccccccd 	.word	0xcccccccd

08000494 <debug_printf_hex>:

void debug_printf_hex(UINT32 d, UINT8 mode)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	460b      	mov	r3, r1
 800049e:	70fb      	strb	r3, [r7, #3]
   UINT32 buf = 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	60fb      	str	r3, [r7, #12]
   UINT8 b, len = 0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	72fb      	strb	r3, [r7, #11]

   if (d == 0) 
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d112      	bne.n	80004d4 <debug_printf_hex+0x40>
   {
      dev_trace_send_byte('0');
 80004ae:	2030      	movs	r0, #48	; 0x30
 80004b0:	f7ff fed8 	bl	8000264 <dev_trace_send_byte>
      return;
 80004b4:	e03a      	b.n	800052c <debug_printf_hex+0x98>
   }   

   while (d > 0)
   {  
      buf = buf << 4;
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	011b      	lsls	r3, r3, #4
 80004ba:	60fb      	str	r3, [r7, #12]
      buf = buf + d % 0x10;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	f003 030f 	and.w	r3, r3, #15
 80004c2:	68fa      	ldr	r2, [r7, #12]
 80004c4:	4413      	add	r3, r2
 80004c6:	60fb      	str	r3, [r7, #12]
      d = d >> 4;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	091b      	lsrs	r3, r3, #4
 80004cc:	607b      	str	r3, [r7, #4]
      len++;
 80004ce:	7afb      	ldrb	r3, [r7, #11]
 80004d0:	3301      	adds	r3, #1
 80004d2:	72fb      	strb	r3, [r7, #11]
   while (d > 0)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d1ed      	bne.n	80004b6 <debug_printf_hex+0x22>
   }   

   while (len > 0)
 80004da:	e024      	b.n	8000526 <debug_printf_hex+0x92>
   {   
      b = buf % 0x10;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	f003 030f 	and.w	r3, r3, #15
 80004e4:	72bb      	strb	r3, [r7, #10]
   
      if (b < 0xA) dev_trace_send_byte(b + 0x30);
 80004e6:	7abb      	ldrb	r3, [r7, #10]
 80004e8:	2b09      	cmp	r3, #9
 80004ea:	d806      	bhi.n	80004fa <debug_printf_hex+0x66>
 80004ec:	7abb      	ldrb	r3, [r7, #10]
 80004ee:	3330      	adds	r3, #48	; 0x30
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff feb6 	bl	8000264 <dev_trace_send_byte>
 80004f8:	e00f      	b.n	800051a <debug_printf_hex+0x86>
      else  
      {      
         if (mode == 'X') dev_trace_send_byte(b + 0x41 - 0xA);
 80004fa:	78fb      	ldrb	r3, [r7, #3]
 80004fc:	2b58      	cmp	r3, #88	; 0x58
 80004fe:	d106      	bne.n	800050e <debug_printf_hex+0x7a>
 8000500:	7abb      	ldrb	r3, [r7, #10]
 8000502:	3337      	adds	r3, #55	; 0x37
 8000504:	b2db      	uxtb	r3, r3
 8000506:	4618      	mov	r0, r3
 8000508:	f7ff feac 	bl	8000264 <dev_trace_send_byte>
 800050c:	e005      	b.n	800051a <debug_printf_hex+0x86>
                  else  dev_trace_send_byte(b + 0x61 - 0xA);
 800050e:	7abb      	ldrb	r3, [r7, #10]
 8000510:	3357      	adds	r3, #87	; 0x57
 8000512:	b2db      	uxtb	r3, r3
 8000514:	4618      	mov	r0, r3
 8000516:	f7ff fea5 	bl	8000264 <dev_trace_send_byte>
      }

      buf = buf >> 4;
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	091b      	lsrs	r3, r3, #4
 800051e:	60fb      	str	r3, [r7, #12]
      len--;
 8000520:	7afb      	ldrb	r3, [r7, #11]
 8000522:	3b01      	subs	r3, #1
 8000524:	72fb      	strb	r3, [r7, #11]
   while (len > 0)
 8000526:	7afb      	ldrb	r3, [r7, #11]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d1d7      	bne.n	80004dc <debug_printf_hex+0x48>
   }   
}
 800052c:	3710      	adds	r7, #16
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <debug_printf_bin>:

void debug_printf_bin(UINT32 d, UINT8 mode)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	b084      	sub	sp, #16
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
 800053a:	460b      	mov	r3, r1
 800053c:	70fb      	strb	r3, [r7, #3]
   UINT32 buf = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
   UINT8 i, len = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	72bb      	strb	r3, [r7, #10]

   if (mode == 'B') len = 32;
 8000546:	78fb      	ldrb	r3, [r7, #3]
 8000548:	2b42      	cmp	r3, #66	; 0x42
 800054a:	d102      	bne.n	8000552 <debug_printf_bin+0x20>
 800054c:	2320      	movs	r3, #32
 800054e:	72bb      	strb	r3, [r7, #10]
 8000550:	e001      	b.n	8000556 <debug_printf_bin+0x24>
                else len = 8;
 8000552:	2308      	movs	r3, #8
 8000554:	72bb      	strb	r3, [r7, #10]

   for(i=0; i<len; i++)
 8000556:	2300      	movs	r3, #0
 8000558:	72fb      	strb	r3, [r7, #11]
 800055a:	e010      	b.n	800057e <debug_printf_bin+0x4c>
   {
      buf = buf << 1;
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	60fb      	str	r3, [r7, #12]
      if (d % 2) buf++;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	f003 0301 	and.w	r3, r3, #1
 8000568:	2b00      	cmp	r3, #0
 800056a:	d002      	beq.n	8000572 <debug_printf_bin+0x40>
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	3301      	adds	r3, #1
 8000570:	60fb      	str	r3, [r7, #12]
      d = d >> 1;      
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	085b      	lsrs	r3, r3, #1
 8000576:	607b      	str	r3, [r7, #4]
   for(i=0; i<len; i++)
 8000578:	7afb      	ldrb	r3, [r7, #11]
 800057a:	3301      	adds	r3, #1
 800057c:	72fb      	strb	r3, [r7, #11]
 800057e:	7afa      	ldrb	r2, [r7, #11]
 8000580:	7abb      	ldrb	r3, [r7, #10]
 8000582:	429a      	cmp	r2, r3
 8000584:	d3ea      	bcc.n	800055c <debug_printf_bin+0x2a>
   }   
                
   for(i=0; i<len; i++)
 8000586:	2300      	movs	r3, #0
 8000588:	72fb      	strb	r3, [r7, #11]
 800058a:	e011      	b.n	80005b0 <debug_printf_bin+0x7e>
   {
      if (buf % 2) dev_trace_send_byte('1');
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	2b00      	cmp	r3, #0
 8000594:	d003      	beq.n	800059e <debug_printf_bin+0x6c>
 8000596:	2031      	movs	r0, #49	; 0x31
 8000598:	f7ff fe64 	bl	8000264 <dev_trace_send_byte>
 800059c:	e002      	b.n	80005a4 <debug_printf_bin+0x72>
            else dev_trace_send_byte('0');
 800059e:	2030      	movs	r0, #48	; 0x30
 80005a0:	f7ff fe60 	bl	8000264 <dev_trace_send_byte>
               
      buf = buf >> 1;      
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	085b      	lsrs	r3, r3, #1
 80005a8:	60fb      	str	r3, [r7, #12]
   for(i=0; i<len; i++)
 80005aa:	7afb      	ldrb	r3, [r7, #11]
 80005ac:	3301      	adds	r3, #1
 80005ae:	72fb      	strb	r3, [r7, #11]
 80005b0:	7afa      	ldrb	r2, [r7, #11]
 80005b2:	7abb      	ldrb	r3, [r7, #10]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d3e9      	bcc.n	800058c <debug_printf_bin+0x5a>
   }   
}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <debug_printf>:

void debug_printf(char* text, ...)
{
 80005c4:	b40f      	push	{r0, r1, r2, r3}
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b092      	sub	sp, #72	; 0x48
 80005ca:	af00      	add	r7, sp, #0
   va_list tag;
   int i = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	647b      	str	r3, [r7, #68]	; 0x44

   va_start(tag, text);
 80005d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005d4:	607b      	str	r3, [r7, #4]
   
   while(text[i] != 0)
 80005d6:	e181      	b.n	80008dc <debug_printf+0x318>
   {
      if (text[i] != '%') 
 80005d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80005dc:	4413      	add	r3, r2
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b25      	cmp	r3, #37	; 0x25
 80005e2:	d00a      	beq.n	80005fa <debug_printf+0x36>
      {
         dev_trace_send_byte(text[i]);
 80005e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80005e8:	4413      	add	r3, r2
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff fe39 	bl	8000264 <dev_trace_send_byte>
         i++;
 80005f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005f4:	3301      	adds	r3, #1
 80005f6:	647b      	str	r3, [r7, #68]	; 0x44
 80005f8:	e170      	b.n	80008dc <debug_printf+0x318>
//         continue;
      }   
      else if (text[i + 1] != 0)
 80005fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005fc:	3301      	adds	r3, #1
 80005fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000600:	4413      	add	r3, r2
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	f000 8169 	beq.w	80008dc <debug_printf+0x318>
      {   
         switch(text[i + 1])   
 800060a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800060c:	3301      	adds	r3, #1
 800060e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000610:	4413      	add	r3, r2
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	3b42      	subs	r3, #66	; 0x42
 8000616:	2b36      	cmp	r3, #54	; 0x36
 8000618:	f200 815d 	bhi.w	80008d6 <debug_printf+0x312>
 800061c:	a201      	add	r2, pc, #4	; (adr r2, 8000624 <debug_printf+0x60>)
 800061e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000622:	bf00      	nop
 8000624:	0800078d 	.word	0x0800078d
 8000628:	080008d7 	.word	0x080008d7
 800062c:	080008d7 	.word	0x080008d7
 8000630:	080008d7 	.word	0x080008d7
 8000634:	080008d7 	.word	0x080008d7
 8000638:	080008d7 	.word	0x080008d7
 800063c:	080008d7 	.word	0x080008d7
 8000640:	080008d7 	.word	0x080008d7
 8000644:	080008d7 	.word	0x080008d7
 8000648:	080008d7 	.word	0x080008d7
 800064c:	080008d7 	.word	0x080008d7
 8000650:	08000843 	.word	0x08000843
 8000654:	080008d7 	.word	0x080008d7
 8000658:	080008d7 	.word	0x080008d7
 800065c:	080008d7 	.word	0x080008d7
 8000660:	080008d7 	.word	0x080008d7
 8000664:	080008d7 	.word	0x080008d7
 8000668:	080008d7 	.word	0x080008d7
 800066c:	080008d7 	.word	0x080008d7
 8000670:	080008d7 	.word	0x080008d7
 8000674:	080008d7 	.word	0x080008d7
 8000678:	080008d7 	.word	0x080008d7
 800067c:	08000765 	.word	0x08000765
 8000680:	080008d7 	.word	0x080008d7
 8000684:	080008d7 	.word	0x080008d7
 8000688:	080008d7 	.word	0x080008d7
 800068c:	080008d7 	.word	0x080008d7
 8000690:	080008d7 	.word	0x080008d7
 8000694:	080008d7 	.word	0x080008d7
 8000698:	080008d7 	.word	0x080008d7
 800069c:	080008d7 	.word	0x080008d7
 80006a0:	080008d7 	.word	0x080008d7
 80006a4:	08000779 	.word	0x08000779
 80006a8:	0800073d 	.word	0x0800073d
 80006ac:	08000701 	.word	0x08000701
 80006b0:	080008d7 	.word	0x080008d7
 80006b4:	080008d7 	.word	0x080008d7
 80006b8:	080008d7 	.word	0x080008d7
 80006bc:	080008d7 	.word	0x080008d7
 80006c0:	080008d7 	.word	0x080008d7
 80006c4:	080008d7 	.word	0x080008d7
 80006c8:	080008d7 	.word	0x080008d7
 80006cc:	080008d7 	.word	0x080008d7
 80006d0:	080007a1 	.word	0x080007a1
 80006d4:	080008d7 	.word	0x080008d7
 80006d8:	080008d7 	.word	0x080008d7
 80006dc:	08000883 	.word	0x08000883
 80006e0:	080008d7 	.word	0x080008d7
 80006e4:	080008d7 	.word	0x080008d7
 80006e8:	0800072b 	.word	0x0800072b
 80006ec:	080008d7 	.word	0x080008d7
 80006f0:	08000717 	.word	0x08000717
 80006f4:	080008d7 	.word	0x080008d7
 80006f8:	080008d7 	.word	0x080008d7
 80006fc:	08000751 	.word	0x08000751
         {
            case 'd' : 
               {
                  signed long d = va_arg(tag, signed long);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	1d1a      	adds	r2, r3, #4
 8000704:	607a      	str	r2, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	623b      	str	r3, [r7, #32]
                  debug_printf_long(d, 'd');
 800070a:	6a3b      	ldr	r3, [r7, #32]
 800070c:	2164      	movs	r1, #100	; 0x64
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fe70 	bl	80003f4 <debug_printf_long>
               } break;
 8000714:	e0df      	b.n	80008d6 <debug_printf+0x312>

            case 'u' : 
               {
                  unsigned long d = va_arg(tag, unsigned long);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	1d1a      	adds	r2, r3, #4
 800071a:	607a      	str	r2, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	637b      	str	r3, [r7, #52]	; 0x34
                  debug_printf_long(d, 'u');
 8000720:	2175      	movs	r1, #117	; 0x75
 8000722:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000724:	f7ff fe66 	bl	80003f4 <debug_printf_long>
               } break;
 8000728:	e0d5      	b.n	80008d6 <debug_printf+0x312>
//               
//               } break;
           
            case 's' : 
               {
                  char* s = va_arg(tag, char*);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	1d1a      	adds	r2, r3, #4
 800072e:	607a      	str	r2, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	633b      	str	r3, [r7, #48]	; 0x30
                  debug_printf_text(s);
 8000734:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000736:	f7ff fe40 	bl	80003ba <debug_printf_text>
               } break;
 800073a:	e0cc      	b.n	80008d6 <debug_printf+0x312>

            case 'c' : 
               {
                  UINT8 b = va_arg(tag, unsigned long);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	1d1a      	adds	r2, r3, #4
 8000740:	607a      	str	r2, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	77fb      	strb	r3, [r7, #31]
                  debug_printf_char(b);
 8000746:	7ffb      	ldrb	r3, [r7, #31]
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff fdfb 	bl	8000344 <debug_printf_char>
               } break;
 800074e:	e0c2      	b.n	80008d6 <debug_printf+0x312>
           
            case 'x' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	1d1a      	adds	r2, r3, #4
 8000754:	607a      	str	r2, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	63bb      	str	r3, [r7, #56]	; 0x38
                  debug_printf_hex(d, 'x');
 800075a:	2178      	movs	r1, #120	; 0x78
 800075c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800075e:	f7ff fe99 	bl	8000494 <debug_printf_hex>
               } break;
 8000762:	e0b8      	b.n	80008d6 <debug_printf+0x312>
            
            case 'X' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	1d1a      	adds	r2, r3, #4
 8000768:	607a      	str	r2, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	617b      	str	r3, [r7, #20]
                  debug_printf_hex(d, 'X');
 800076e:	2158      	movs	r1, #88	; 0x58
 8000770:	6978      	ldr	r0, [r7, #20]
 8000772:	f7ff fe8f 	bl	8000494 <debug_printf_hex>
               } break;
 8000776:	e0ae      	b.n	80008d6 <debug_printf+0x312>
            
            case 'b' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	1d1a      	adds	r2, r3, #4
 800077c:	607a      	str	r2, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	61bb      	str	r3, [r7, #24]
                  debug_printf_bin(d, 'b');
 8000782:	2162      	movs	r1, #98	; 0x62
 8000784:	69b8      	ldr	r0, [r7, #24]
 8000786:	f7ff fed4 	bl	8000532 <debug_printf_bin>
               } break;
 800078a:	e0a4      	b.n	80008d6 <debug_printf+0x312>
            
            case 'B' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	1d1a      	adds	r2, r3, #4
 8000790:	607a      	str	r2, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	60bb      	str	r3, [r7, #8]
                  debug_printf_bin(d, 'B');
 8000796:	2142      	movs	r1, #66	; 0x42
 8000798:	68b8      	ldr	r0, [r7, #8]
 800079a:	f7ff feca 	bl	8000532 <debug_printf_bin>
               } break;
 800079e:	e09a      	b.n	80008d6 <debug_printf+0x312>
            
            case 'm' : 
               {
                  UINT8* mm = va_arg(tag, UINT8*);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	1d1a      	adds	r2, r3, #4
 80007a4:	607a      	str	r2, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	62bb      	str	r3, [r7, #40]	; 0x28
                  UINT16 size = va_arg(tag, int);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	1d1a      	adds	r2, r3, #4
 80007ae:	607a      	str	r2, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	84fb      	strh	r3, [r7, #38]	; 0x26
                  int ii;

                  for(ii=0; ii<size; ii++) 
 80007b4:	2300      	movs	r3, #0
 80007b6:	643b      	str	r3, [r7, #64]	; 0x40
 80007b8:	e03e      	b.n	8000838 <debug_printf+0x274>
                  {   
                     dev_trace_send_byte(HB2HEX(mm[ii] / 0x10));
 80007ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007be:	4413      	add	r3, r2
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b9f      	cmp	r3, #159	; 0x9f
 80007c4:	d908      	bls.n	80007d8 <debug_printf+0x214>
 80007c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007ca:	4413      	add	r3, r2
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	091b      	lsrs	r3, r3, #4
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	3337      	adds	r3, #55	; 0x37
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	e007      	b.n	80007e8 <debug_printf+0x224>
 80007d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007dc:	4413      	add	r3, r2
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	091b      	lsrs	r3, r3, #4
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	3330      	adds	r3, #48	; 0x30
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fd3b 	bl	8000264 <dev_trace_send_byte>
                     dev_trace_send_byte(HB2HEX(mm[ii] % 0x10));
 80007ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007f2:	4413      	add	r3, r2
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	f003 030f 	and.w	r3, r3, #15
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b09      	cmp	r3, #9
 80007fe:	d909      	bls.n	8000814 <debug_printf+0x250>
 8000800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000804:	4413      	add	r3, r2
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	f003 030f 	and.w	r3, r3, #15
 800080c:	b2db      	uxtb	r3, r3
 800080e:	3337      	adds	r3, #55	; 0x37
 8000810:	b2db      	uxtb	r3, r3
 8000812:	e008      	b.n	8000826 <debug_printf+0x262>
 8000814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000818:	4413      	add	r3, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	f003 030f 	and.w	r3, r3, #15
 8000820:	b2db      	uxtb	r3, r3
 8000822:	3330      	adds	r3, #48	; 0x30
 8000824:	b2db      	uxtb	r3, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fd1c 	bl	8000264 <dev_trace_send_byte>
                     dev_trace_send_byte(' ');
 800082c:	2020      	movs	r0, #32
 800082e:	f7ff fd19 	bl	8000264 <dev_trace_send_byte>
                  for(ii=0; ii<size; ii++) 
 8000832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000834:	3301      	adds	r3, #1
 8000836:	643b      	str	r3, [r7, #64]	; 0x40
 8000838:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800083a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800083c:	429a      	cmp	r2, r3
 800083e:	dbbc      	blt.n	80007ba <debug_printf+0x1f6>
                  }
               
               } break;
 8000840:	e049      	b.n	80008d6 <debug_printf+0x312>

            case 'M' : 
               {
                  UINT8* mm = va_arg(tag, UINT8*);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	1d1a      	adds	r2, r3, #4
 8000846:	607a      	str	r2, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	613b      	str	r3, [r7, #16]
                  UINT16 size = va_arg(tag, int);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	1d1a      	adds	r2, r3, #4
 8000850:	607a      	str	r2, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	81fb      	strh	r3, [r7, #14]
                  int ii;

                  for(ii=0; ii<size; ii++) 
 8000856:	2300      	movs	r3, #0
 8000858:	63fb      	str	r3, [r7, #60]	; 0x3c
 800085a:	e00d      	b.n	8000878 <debug_printf+0x2b4>
                  {   
                     debug_printf_long(mm[ii], 'u');
 800085c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	4413      	add	r3, r2
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2175      	movs	r1, #117	; 0x75
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fdc4 	bl	80003f4 <debug_printf_long>
                     dev_trace_send_byte(' ');
 800086c:	2020      	movs	r0, #32
 800086e:	f7ff fcf9 	bl	8000264 <dev_trace_send_byte>
                  for(ii=0; ii<size; ii++) 
 8000872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000874:	3301      	adds	r3, #1
 8000876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000878:	89fb      	ldrh	r3, [r7, #14]
 800087a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800087c:	429a      	cmp	r2, r3
 800087e:	dbed      	blt.n	800085c <debug_printf+0x298>
                  }
               
               } break;
 8000880:	e029      	b.n	80008d6 <debug_printf+0x312>

            case 'p' : 
               {
                  UINT8* mm = va_arg(tag, UINT8*);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	1d1a      	adds	r2, r3, #4
 8000886:	607a      	str	r2, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
               
                  debug_printf_long(mm[0], 'u');
 800088c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2175      	movs	r1, #117	; 0x75
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fdae 	bl	80003f4 <debug_printf_long>
                  dev_trace_send_byte('.');
 8000898:	202e      	movs	r0, #46	; 0x2e
 800089a:	f7ff fce3 	bl	8000264 <dev_trace_send_byte>
                  debug_printf_long(mm[1], 'u');
 800089e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a0:	3301      	adds	r3, #1
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2175      	movs	r1, #117	; 0x75
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fda4 	bl	80003f4 <debug_printf_long>
                  dev_trace_send_byte('.');
 80008ac:	202e      	movs	r0, #46	; 0x2e
 80008ae:	f7ff fcd9 	bl	8000264 <dev_trace_send_byte>
                  debug_printf_long(mm[2], 'u');
 80008b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b4:	3302      	adds	r3, #2
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2175      	movs	r1, #117	; 0x75
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fd9a 	bl	80003f4 <debug_printf_long>
                  dev_trace_send_byte('.');
 80008c0:	202e      	movs	r0, #46	; 0x2e
 80008c2:	f7ff fccf 	bl	8000264 <dev_trace_send_byte>
                  debug_printf_long(mm[3], 'u');
 80008c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c8:	3303      	adds	r3, #3
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2175      	movs	r1, #117	; 0x75
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fd90 	bl	80003f4 <debug_printf_long>
               
               } break;
 80008d4:	bf00      	nop
           
         }
      
         i += 2;
 80008d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008d8:	3302      	adds	r3, #2
 80008da:	647b      	str	r3, [r7, #68]	; 0x44
   while(text[i] != 0)
 80008dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80008e0:	4413      	add	r3, r2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	f47f ae77 	bne.w	80005d8 <debug_printf+0x14>
      }
   }   

}
 80008ea:	bf00      	nop
 80008ec:	bf00      	nop
 80008ee:	3748      	adds	r7, #72	; 0x48
 80008f0:	46bd      	mov	sp, r7
 80008f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008f6:	b004      	add	sp, #16
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <hal_driver_set_info>:
static void* dma_2_irq_data[16];



void hal_driver_set_info(dev_info_t* info_1, dev_info_t* info_2)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
		info_2->id = info_1->id;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	781a      	ldrb	r2, [r3, #0]
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	701a      	strb	r2, [r3, #0]
		info_2->status_in = info_1->status_in;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	685a      	ldr	r2, [r3, #4]
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	605a      	str	r2, [r3, #4]
		info_2->status_out = info_1->status_out;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	689a      	ldr	r2, [r3, #8]
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	609a      	str	r2, [r3, #8]
		info_2->name = info_1->name;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	691a      	ldr	r2, [r3, #16]
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	611a      	str	r2, [r3, #16]
	
		info_2->rx_mode = HAL_DEFAULT_MODE_SYNC;
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	2200      	movs	r2, #0
 800092a:	731a      	strb	r2, [r3, #12]
		info_2->tx_mode = HAL_DEFAULT_MODE_SYNC;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	2200      	movs	r2, #0
 8000930:	735a      	strb	r2, [r3, #13]
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr

0800093c <EXTI0_IRQHandler>:

//------------------------------------------------------------------------------
//         internal Functions
//------------------------------------------------------------------------------

void EXTI0_IRQHandler(void){ (*gpio_irq_cbf[0])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);}
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <EXTI0_IRQHandler+0x14>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4798      	blx	r3
 8000946:	4b03      	ldr	r3, [pc, #12]	; (8000954 <EXTI0_IRQHandler+0x18>)
 8000948:	2201      	movs	r2, #1
 800094a:	615a      	str	r2, [r3, #20]
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	2000008c 	.word	0x2000008c
 8000954:	40010400 	.word	0x40010400

08000958 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void){ (*gpio_irq_cbf[1])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);}
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <EXTI1_IRQHandler+0x14>)
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	4798      	blx	r3
 8000962:	4b03      	ldr	r3, [pc, #12]	; (8000970 <EXTI1_IRQHandler+0x18>)
 8000964:	2202      	movs	r2, #2
 8000966:	615a      	str	r2, [r3, #20]
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2000008c 	.word	0x2000008c
 8000970:	40010400 	.word	0x40010400

08000974 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){ (*gpio_irq_cbf[2])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2);}
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
 8000978:	4b03      	ldr	r3, [pc, #12]	; (8000988 <EXTI2_IRQHandler+0x14>)
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	4798      	blx	r3
 800097e:	4b03      	ldr	r3, [pc, #12]	; (800098c <EXTI2_IRQHandler+0x18>)
 8000980:	2204      	movs	r2, #4
 8000982:	615a      	str	r2, [r3, #20]
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	2000008c 	.word	0x2000008c
 800098c:	40010400 	.word	0x40010400

08000990 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){ (*gpio_irq_cbf[3])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);}
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <EXTI3_IRQHandler+0x14>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	4798      	blx	r3
 800099a:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <EXTI3_IRQHandler+0x18>)
 800099c:	2208      	movs	r2, #8
 800099e:	615a      	str	r2, [r3, #20]
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	2000008c 	.word	0x2000008c
 80009a8:	40010400 	.word	0x40010400

080009ac <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){ (*gpio_irq_cbf[4])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);}
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <EXTI4_IRQHandler+0x14>)
 80009b2:	691b      	ldr	r3, [r3, #16]
 80009b4:	4798      	blx	r3
 80009b6:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <EXTI4_IRQHandler+0x18>)
 80009b8:	2210      	movs	r2, #16
 80009ba:	615a      	str	r2, [r3, #20]
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	2000008c 	.word	0x2000008c
 80009c4:	40010400 	.word	0x40010400

080009c8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{ 
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_5) != RESET) { (*gpio_irq_cbf[5])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5); }
 80009cc:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <EXTI9_5_IRQHandler+0x84>)
 80009ce:	695b      	ldr	r3, [r3, #20]
 80009d0:	f003 0320 	and.w	r3, r3, #32
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d005      	beq.n	80009e4 <EXTI9_5_IRQHandler+0x1c>
 80009d8:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <EXTI9_5_IRQHandler+0x88>)
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	4798      	blx	r3
 80009de:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <EXTI9_5_IRQHandler+0x84>)
 80009e0:	2220      	movs	r2, #32
 80009e2:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET) { (*gpio_irq_cbf[6])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6); }
 80009e4:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <EXTI9_5_IRQHandler+0x84>)
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d005      	beq.n	80009fc <EXTI9_5_IRQHandler+0x34>
 80009f0:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <EXTI9_5_IRQHandler+0x88>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	4798      	blx	r3
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <EXTI9_5_IRQHandler+0x84>)
 80009f8:	2240      	movs	r2, #64	; 0x40
 80009fa:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET) { (*gpio_irq_cbf[7])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7); }
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <EXTI9_5_IRQHandler+0x84>)
 80009fe:	695b      	ldr	r3, [r3, #20]
 8000a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d005      	beq.n	8000a14 <EXTI9_5_IRQHandler+0x4c>
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <EXTI9_5_IRQHandler+0x88>)
 8000a0a:	69db      	ldr	r3, [r3, #28]
 8000a0c:	4798      	blx	r3
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <EXTI9_5_IRQHandler+0x84>)
 8000a10:	2280      	movs	r2, #128	; 0x80
 8000a12:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET) { (*gpio_irq_cbf[8])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8); }
 8000a14:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <EXTI9_5_IRQHandler+0x84>)
 8000a16:	695b      	ldr	r3, [r3, #20]
 8000a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d006      	beq.n	8000a2e <EXTI9_5_IRQHandler+0x66>
 8000a20:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <EXTI9_5_IRQHandler+0x88>)
 8000a22:	6a1b      	ldr	r3, [r3, #32]
 8000a24:	4798      	blx	r3
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <EXTI9_5_IRQHandler+0x84>)
 8000a28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a2c:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET) { (*gpio_irq_cbf[9])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9); }
 8000a2e:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <EXTI9_5_IRQHandler+0x84>)
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d006      	beq.n	8000a48 <EXTI9_5_IRQHandler+0x80>
 8000a3a:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <EXTI9_5_IRQHandler+0x88>)
 8000a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a3e:	4798      	blx	r3
 8000a40:	4b02      	ldr	r3, [pc, #8]	; (8000a4c <EXTI9_5_IRQHandler+0x84>)
 8000a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a46:	615a      	str	r2, [r3, #20]
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40010400 	.word	0x40010400
 8000a50:	2000008c 	.word	0x2000008c

08000a54 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{ 
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_10) != RESET) { (*gpio_irq_cbf[10])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10); }
 8000a58:	4b27      	ldr	r3, [pc, #156]	; (8000af8 <EXTI15_10_IRQHandler+0xa4>)
 8000a5a:	695b      	ldr	r3, [r3, #20]
 8000a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d006      	beq.n	8000a72 <EXTI15_10_IRQHandler+0x1e>
 8000a64:	4b25      	ldr	r3, [pc, #148]	; (8000afc <EXTI15_10_IRQHandler+0xa8>)
 8000a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a68:	4798      	blx	r3
 8000a6a:	4b23      	ldr	r3, [pc, #140]	; (8000af8 <EXTI15_10_IRQHandler+0xa4>)
 8000a6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a70:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_11) != RESET) { (*gpio_irq_cbf[11])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11); }
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <EXTI15_10_IRQHandler+0xa4>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d006      	beq.n	8000a8c <EXTI15_10_IRQHandler+0x38>
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <EXTI15_10_IRQHandler+0xa8>)
 8000a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a82:	4798      	blx	r3
 8000a84:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <EXTI15_10_IRQHandler+0xa4>)
 8000a86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a8a:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_12) != RESET) { (*gpio_irq_cbf[12])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12); }
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <EXTI15_10_IRQHandler+0xa4>)
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d006      	beq.n	8000aa6 <EXTI15_10_IRQHandler+0x52>
 8000a98:	4b18      	ldr	r3, [pc, #96]	; (8000afc <EXTI15_10_IRQHandler+0xa8>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9c:	4798      	blx	r3
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <EXTI15_10_IRQHandler+0xa4>)
 8000aa0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aa4:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET) { (*gpio_irq_cbf[13])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13); }
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <EXTI15_10_IRQHandler+0xa4>)
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d006      	beq.n	8000ac0 <EXTI15_10_IRQHandler+0x6c>
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <EXTI15_10_IRQHandler+0xa8>)
 8000ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ab6:	4798      	blx	r3
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <EXTI15_10_IRQHandler+0xa4>)
 8000aba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000abe:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_14) != RESET) { (*gpio_irq_cbf[14])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14); }
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <EXTI15_10_IRQHandler+0xa4>)
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d006      	beq.n	8000ada <EXTI15_10_IRQHandler+0x86>
 8000acc:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <EXTI15_10_IRQHandler+0xa8>)
 8000ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ad0:	4798      	blx	r3
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <EXTI15_10_IRQHandler+0xa4>)
 8000ad4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ad8:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_15) != RESET) { (*gpio_irq_cbf[15])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_15); }
 8000ada:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <EXTI15_10_IRQHandler+0xa4>)
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d006      	beq.n	8000af4 <EXTI15_10_IRQHandler+0xa0>
 8000ae6:	4b05      	ldr	r3, [pc, #20]	; (8000afc <EXTI15_10_IRQHandler+0xa8>)
 8000ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aea:	4798      	blx	r3
 8000aec:	4b02      	ldr	r3, [pc, #8]	; (8000af8 <EXTI15_10_IRQHandler+0xa4>)
 8000aee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000af2:	615a      	str	r2, [r3, #20]
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40010400 	.word	0x40010400
 8000afc:	2000008c 	.word	0x2000008c

08000b00 <dev_gpio_id_port>:

//------------------------------------------------------------------------------
//         GPIO Local Functions
//------------------------------------------------------------------------------
GPIO_TypeDef* dev_gpio_id_port(UINT8 gpio_id)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
		switch(gpio_id)
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	2b04      	cmp	r3, #4
 8000b0e:	d817      	bhi.n	8000b40 <dev_gpio_id_port+0x40>
 8000b10:	a201      	add	r2, pc, #4	; (adr r2, 8000b18 <dev_gpio_id_port+0x18>)
 8000b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b16:	bf00      	nop
 8000b18:	08000b2d 	.word	0x08000b2d
 8000b1c:	08000b31 	.word	0x08000b31
 8000b20:	08000b35 	.word	0x08000b35
 8000b24:	08000b39 	.word	0x08000b39
 8000b28:	08000b3d 	.word	0x08000b3d
		{
				case GPIO_PA : return GPIOA;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <dev_gpio_id_port+0x4c>)
 8000b2e:	e008      	b.n	8000b42 <dev_gpio_id_port+0x42>
				case GPIO_PB : return GPIOB;
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <dev_gpio_id_port+0x50>)
 8000b32:	e006      	b.n	8000b42 <dev_gpio_id_port+0x42>
				case GPIO_PC : return GPIOC;
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <dev_gpio_id_port+0x54>)
 8000b36:	e004      	b.n	8000b42 <dev_gpio_id_port+0x42>
				case GPIO_PD : return GPIOD;
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <dev_gpio_id_port+0x58>)
 8000b3a:	e002      	b.n	8000b42 <dev_gpio_id_port+0x42>
				case GPIO_PE : return GPIOE;
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <dev_gpio_id_port+0x5c>)
 8000b3e:	e000      	b.n	8000b42 <dev_gpio_id_port+0x42>
				case GPIO_PI : return GPIOI;
#endif

		}

		return (GPIO_TypeDef*)0;	
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	40010800 	.word	0x40010800
 8000b50:	40010c00 	.word	0x40010c00
 8000b54:	40011000 	.word	0x40011000
 8000b58:	40011400 	.word	0x40011400
 8000b5c:	40011800 	.word	0x40011800

08000b60 <dev_gpio_pin_id>:

		return 0;	
}

int dev_gpio_pin_id(UINT16 pin)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	80fb      	strh	r3, [r7, #6]
		if (pin & 0x0001) return 0;
 8000b6a:	88fb      	ldrh	r3, [r7, #6]
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <dev_gpio_pin_id+0x18>
 8000b74:	2300      	movs	r3, #0
 8000b76:	e069      	b.n	8000c4c <dev_gpio_pin_id+0xec>
		if (pin & 0x0002) return 1;
 8000b78:	88fb      	ldrh	r3, [r7, #6]
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <dev_gpio_pin_id+0x26>
 8000b82:	2301      	movs	r3, #1
 8000b84:	e062      	b.n	8000c4c <dev_gpio_pin_id+0xec>
		if (pin & 0x0004) return 2;
 8000b86:	88fb      	ldrh	r3, [r7, #6]
 8000b88:	f003 0304 	and.w	r3, r3, #4
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <dev_gpio_pin_id+0x34>
 8000b90:	2302      	movs	r3, #2
 8000b92:	e05b      	b.n	8000c4c <dev_gpio_pin_id+0xec>
		if (pin & 0x0008) return 3;
 8000b94:	88fb      	ldrh	r3, [r7, #6]
 8000b96:	f003 0308 	and.w	r3, r3, #8
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <dev_gpio_pin_id+0x42>
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	e054      	b.n	8000c4c <dev_gpio_pin_id+0xec>
		if (pin & 0x0010) return 4;
 8000ba2:	88fb      	ldrh	r3, [r7, #6]
 8000ba4:	f003 0310 	and.w	r3, r3, #16
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <dev_gpio_pin_id+0x50>
 8000bac:	2304      	movs	r3, #4
 8000bae:	e04d      	b.n	8000c4c <dev_gpio_pin_id+0xec>
		if (pin & 0x0020) return 5;
 8000bb0:	88fb      	ldrh	r3, [r7, #6]
 8000bb2:	f003 0320 	and.w	r3, r3, #32
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <dev_gpio_pin_id+0x5e>
 8000bba:	2305      	movs	r3, #5
 8000bbc:	e046      	b.n	8000c4c <dev_gpio_pin_id+0xec>
		if (pin & 0x0040) return 6;
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <dev_gpio_pin_id+0x6c>
 8000bc8:	2306      	movs	r3, #6
 8000bca:	e03f      	b.n	8000c4c <dev_gpio_pin_id+0xec>
		if (pin & 0x0080) return 7;
 8000bcc:	88fb      	ldrh	r3, [r7, #6]
 8000bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <dev_gpio_pin_id+0x7a>
 8000bd6:	2307      	movs	r3, #7
 8000bd8:	e038      	b.n	8000c4c <dev_gpio_pin_id+0xec>
	
		if (pin & 0x0100) return 8;
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <dev_gpio_pin_id+0x88>
 8000be4:	2308      	movs	r3, #8
 8000be6:	e031      	b.n	8000c4c <dev_gpio_pin_id+0xec>
		if (pin & 0x0200) return 9;
 8000be8:	88fb      	ldrh	r3, [r7, #6]
 8000bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <dev_gpio_pin_id+0x96>
 8000bf2:	2309      	movs	r3, #9
 8000bf4:	e02a      	b.n	8000c4c <dev_gpio_pin_id+0xec>
		if (pin & 0x0400) return 10;
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
 8000bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <dev_gpio_pin_id+0xa4>
 8000c00:	230a      	movs	r3, #10
 8000c02:	e023      	b.n	8000c4c <dev_gpio_pin_id+0xec>
		if (pin & 0x0800) return 11;
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <dev_gpio_pin_id+0xb2>
 8000c0e:	230b      	movs	r3, #11
 8000c10:	e01c      	b.n	8000c4c <dev_gpio_pin_id+0xec>
		if (pin & 0x1000) return 12;
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <dev_gpio_pin_id+0xc0>
 8000c1c:	230c      	movs	r3, #12
 8000c1e:	e015      	b.n	8000c4c <dev_gpio_pin_id+0xec>
		if (pin & 0x2000) return 13;
 8000c20:	88fb      	ldrh	r3, [r7, #6]
 8000c22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <dev_gpio_pin_id+0xce>
 8000c2a:	230d      	movs	r3, #13
 8000c2c:	e00e      	b.n	8000c4c <dev_gpio_pin_id+0xec>
		if (pin & 0x4000) return 14;
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <dev_gpio_pin_id+0xdc>
 8000c38:	230e      	movs	r3, #14
 8000c3a:	e007      	b.n	8000c4c <dev_gpio_pin_id+0xec>
		if (pin & 0x8000) return 15;
 8000c3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	da01      	bge.n	8000c48 <dev_gpio_pin_id+0xe8>
 8000c44:	230f      	movs	r3, #15
 8000c46:	e001      	b.n	8000c4c <dev_gpio_pin_id+0xec>

		return -1;	
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr
	...

08000c58 <dev_gpio_init_rcc>:

//------------------------------------------------------------------------------
//         GPIO Init Functions
//------------------------------------------------------------------------------
UINT8 dev_gpio_init_rcc(UINT8 gpio_id)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
		switch(gpio_id)
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	2b04      	cmp	r3, #4
 8000c66:	d84e      	bhi.n	8000d06 <dev_gpio_init_rcc+0xae>
 8000c68:	a201      	add	r2, pc, #4	; (adr r2, 8000c70 <dev_gpio_init_rcc+0x18>)
 8000c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c6e:	bf00      	nop
 8000c70:	08000c85 	.word	0x08000c85
 8000c74:	08000c9f 	.word	0x08000c9f
 8000c78:	08000cb9 	.word	0x08000cb9
 8000c7c:	08000cd3 	.word	0x08000cd3
 8000c80:	08000ced 	.word	0x08000ced
		{
				case GPIO_PA : __HAL_RCC_GPIOA_CLK_ENABLE(); break;
 8000c84:	4b25      	ldr	r3, [pc, #148]	; (8000d1c <dev_gpio_init_rcc+0xc4>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a24      	ldr	r2, [pc, #144]	; (8000d1c <dev_gpio_init_rcc+0xc4>)
 8000c8a:	f043 0304 	orr.w	r3, r3, #4
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <dev_gpio_init_rcc+0xc4>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	e038      	b.n	8000d10 <dev_gpio_init_rcc+0xb8>
				case GPIO_PB : __HAL_RCC_GPIOB_CLK_ENABLE(); break;
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <dev_gpio_init_rcc+0xc4>)
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	4a1e      	ldr	r2, [pc, #120]	; (8000d1c <dev_gpio_init_rcc+0xc4>)
 8000ca4:	f043 0308 	orr.w	r3, r3, #8
 8000ca8:	6193      	str	r3, [r2, #24]
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <dev_gpio_init_rcc+0xc4>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	f003 0308 	and.w	r3, r3, #8
 8000cb2:	61bb      	str	r3, [r7, #24]
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	e02b      	b.n	8000d10 <dev_gpio_init_rcc+0xb8>
				case GPIO_PC : __HAL_RCC_GPIOC_CLK_ENABLE(); break;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <dev_gpio_init_rcc+0xc4>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a17      	ldr	r2, [pc, #92]	; (8000d1c <dev_gpio_init_rcc+0xc4>)
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <dev_gpio_init_rcc+0xc4>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0310 	and.w	r3, r3, #16
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	e01e      	b.n	8000d10 <dev_gpio_init_rcc+0xb8>
				case GPIO_PD : __HAL_RCC_GPIOD_CLK_ENABLE(); break;
 8000cd2:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <dev_gpio_init_rcc+0xc4>)
 8000cd4:	699b      	ldr	r3, [r3, #24]
 8000cd6:	4a11      	ldr	r2, [pc, #68]	; (8000d1c <dev_gpio_init_rcc+0xc4>)
 8000cd8:	f043 0320 	orr.w	r3, r3, #32
 8000cdc:	6193      	str	r3, [r2, #24]
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <dev_gpio_init_rcc+0xc4>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	f003 0320 	and.w	r3, r3, #32
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	e011      	b.n	8000d10 <dev_gpio_init_rcc+0xb8>
				case GPIO_PE : __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <dev_gpio_init_rcc+0xc4>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <dev_gpio_init_rcc+0xc4>)
 8000cf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <dev_gpio_init_rcc+0xc4>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	e004      	b.n	8000d10 <dev_gpio_init_rcc+0xb8>
			
#ifdef	GPIOI			
				case GPIO_PI : __HAL_RCC_GPIOI_CLK_ENABLE(); break;
#endif
			
				default : TRACE_GERROR("Unknow GPIO !!!");
 8000d06:	22a4      	movs	r2, #164	; 0xa4
 8000d08:	4905      	ldr	r1, [pc, #20]	; (8000d20 <dev_gpio_init_rcc+0xc8>)
 8000d0a:	4806      	ldr	r0, [pc, #24]	; (8000d24 <dev_gpio_init_rcc+0xcc>)
 8000d0c:	f7ff faec 	bl	80002e8 <dev_trace_generate_error>
		}
		
		return RET_OK;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3720      	adds	r7, #32
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	08003860 	.word	0x08003860
 8000d24:	08003878 	.word	0x08003878

08000d28 <dev_gpio_init_mode>:
			
		return RET_OK;
}

UINT8 dev_gpio_init_mode(GPIO_InitTypeDef* init, UINT8 gpio_mode)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	70fb      	strb	r3, [r7, #3]
	
		switch(gpio_mode)
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	2b0b      	cmp	r3, #11
 8000d38:	d859      	bhi.n	8000dee <dev_gpio_init_mode+0xc6>
 8000d3a:	a201      	add	r2, pc, #4	; (adr r2, 8000d40 <dev_gpio_init_mode+0x18>)
 8000d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d40:	08000d71 	.word	0x08000d71
 8000d44:	08000d9b 	.word	0x08000d9b
 8000d48:	08000d71 	.word	0x08000d71
 8000d4c:	08000d8d 	.word	0x08000d8d
 8000d50:	08000d7f 	.word	0x08000d7f
 8000d54:	08000d9b 	.word	0x08000d9b
 8000d58:	08000da9 	.word	0x08000da9
 8000d5c:	08000db7 	.word	0x08000db7
 8000d60:	08000dc5 	.word	0x08000dc5
 8000d64:	08000dd3 	.word	0x08000dd3
 8000d68:	08000db7 	.word	0x08000db7
 8000d6c:	08000de1 	.word	0x08000de1
		{
				case GPIO_MODE_IN : 
				case GPIO_MODE_IN_FLOAT : 	init->Mode = GPIO_MODE_INPUT;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	605a      	str	r2, [r3, #4]
																		init->Pull = GPIO_NOPULL; break;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	e03e      	b.n	8000dfc <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_IN_UP : 			init->Mode = GPIO_MODE_INPUT;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	605a      	str	r2, [r3, #4]
																		init->Pull = GPIO_PULLUP; break;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2201      	movs	r2, #1
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	e037      	b.n	8000dfc <dev_gpio_init_mode+0xd4>
				
				case GPIO_MODE_IN_DOWN : 		init->Mode = GPIO_MODE_INPUT;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	605a      	str	r2, [r3, #4]
																		init->Pull = GPIO_PULLDOWN; break;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2202      	movs	r2, #2
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	e030      	b.n	8000dfc <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_OUT : 
				case GPIO_MODE_OUT_PP : 		init->Mode 	= GPIO_MODE_OUTPUT_PP;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	e029      	b.n	8000dfc <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_OUT_OD : 		init->Mode 	= GPIO_MODE_OUTPUT_OD;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2211      	movs	r2, #17
 8000dac:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	e022      	b.n	8000dfc <dev_gpio_init_mode+0xd4>
#ifdef GPIO_MODE_AF_INPUT				
				case GPIO_MODE_ALF : 
				case GPIO_MODE_ALF_IN : 		init->Mode 	= GPIO_MODE_AF_INPUT;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	e01b      	b.n	8000dfc <dev_gpio_init_mode+0xd4>
#endif				
				
				case GPIO_MODE_ALF_PP : 		init->Mode 	= GPIO_MODE_AF_PP;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	e014      	b.n	8000dfc <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_ALF_OD : 		init->Mode 	= GPIO_MODE_AF_OD;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2212      	movs	r2, #18
 8000dd6:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	e00d      	b.n	8000dfc <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_AN : 				init->Mode 	= GPIO_MODE_ANALOG;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2203      	movs	r2, #3
 8000de4:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	e006      	b.n	8000dfc <dev_gpio_init_mode+0xd4>

				default : 									return TRACE_GERROR("Unknow GPIO Mode !!!");
 8000dee:	22e9      	movs	r2, #233	; 0xe9
 8000df0:	4905      	ldr	r1, [pc, #20]	; (8000e08 <dev_gpio_init_mode+0xe0>)
 8000df2:	4806      	ldr	r0, [pc, #24]	; (8000e0c <dev_gpio_init_mode+0xe4>)
 8000df4:	f7ff fa78 	bl	80002e8 <dev_trace_generate_error>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	e000      	b.n	8000dfe <dev_gpio_init_mode+0xd6>
				
		};
		
		return RET_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	08003860 	.word	0x08003860
 8000e0c:	08003888 	.word	0x08003888

08000e10 <dev_gpio_init_speed>:

UINT8 dev_gpio_init_speed(GPIO_InitTypeDef* init, UINT8 gpio_speed)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	70fb      	strb	r3, [r7, #3]
		switch(gpio_speed)
 8000e1c:	78fb      	ldrb	r3, [r7, #3]
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d81a      	bhi.n	8000e58 <dev_gpio_init_speed+0x48>
 8000e22:	a201      	add	r2, pc, #4	; (adr r2, 8000e28 <dev_gpio_init_speed+0x18>)
 8000e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e28:	08000e39 	.word	0x08000e39
 8000e2c:	08000e41 	.word	0x08000e41
 8000e30:	08000e49 	.word	0x08000e49
 8000e34:	08000e51 	.word	0x08000e51
		{
				case GPIO_PIN_SPEED_VHIGH : 			init->Speed = GPIO_SPEED_FREQ_HIGH; break;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	e012      	b.n	8000e66 <dev_gpio_init_speed+0x56>
				case GPIO_PIN_SPEED_HIGH : 				init->Speed = GPIO_SPEED_FREQ_HIGH; break;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2203      	movs	r2, #3
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	e00e      	b.n	8000e66 <dev_gpio_init_speed+0x56>
				case GPIO_PIN_SPEED_MED : 				init->Speed = GPIO_SPEED_FREQ_MEDIUM; break;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	e00a      	b.n	8000e66 <dev_gpio_init_speed+0x56>
				case GPIO_PIN_SPEED_LOW : 				init->Speed = GPIO_SPEED_FREQ_LOW; break;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2202      	movs	r2, #2
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	e006      	b.n	8000e66 <dev_gpio_init_speed+0x56>
			
				default : 									return TRACE_GERROR("Unknow GPIO Speed !!!");
 8000e58:	22f9      	movs	r2, #249	; 0xf9
 8000e5a:	4905      	ldr	r1, [pc, #20]	; (8000e70 <dev_gpio_init_speed+0x60>)
 8000e5c:	4805      	ldr	r0, [pc, #20]	; (8000e74 <dev_gpio_init_speed+0x64>)
 8000e5e:	f7ff fa43 	bl	80002e8 <dev_trace_generate_error>
 8000e62:	4603      	mov	r3, r0
 8000e64:	e000      	b.n	8000e68 <dev_gpio_init_speed+0x58>
		};

		return RET_OK;
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	08003860 	.word	0x08003860
 8000e74:	080038a0 	.word	0x080038a0

08000e78 <dev_gpio_init>:
	
		return RET_OK;
}

UINT8 dev_gpio_init(dev_gpio_t* gpio, dev_gpio_init_t* init)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
		UINT8 ret;
		GPIO_InitTypeDef GPIO_InitStructure;

		hal_driver_set_info(&init->info, &gpio->info);
 8000e82:	683a      	ldr	r2, [r7, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3304      	adds	r3, #4
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4610      	mov	r0, r2
 8000e8c:	f7ff fd36 	bl	80008fc <hal_driver_set_info>
	
		gpio->port = dev_gpio_id_port(gpio->info.id);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	791b      	ldrb	r3, [r3, #4]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fe33 	bl	8000b00 <dev_gpio_id_port>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	601a      	str	r2, [r3, #0]
		gpio->pin = init->pin;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	8b1a      	ldrh	r2, [r3, #24]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	839a      	strh	r2, [r3, #28]
	
		GPIO_InitStructure.Pin = gpio->pin; 
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	8b9b      	ldrh	r3, [r3, #28]
 8000eac:	60bb      	str	r3, [r7, #8]
	
		ret = dev_gpio_init_rcc(gpio->info.id);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	791b      	ldrb	r3, [r3, #4]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fed0 	bl	8000c58 <dev_gpio_init_rcc>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	77fb      	strb	r3, [r7, #31]
		if (ret) return TRACE_EERROR(ret);
 8000ebc:	7ffb      	ldrb	r3, [r7, #31]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d008      	beq.n	8000ed4 <dev_gpio_init+0x5c>
 8000ec2:	7ffb      	ldrb	r3, [r7, #31]
 8000ec4:	f240 1213 	movw	r2, #275	; 0x113
 8000ec8:	4978      	ldr	r1, [pc, #480]	; (80010ac <dev_gpio_init+0x234>)
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff f9f2 	bl	80002b4 <dev_trace_get_error>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	e0e7      	b.n	80010a4 <dev_gpio_init+0x22c>
	
		ret = dev_gpio_init_mode(&GPIO_InitStructure, init->mode);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	7e9a      	ldrb	r2, [r3, #26]
 8000ed8:	f107 0308 	add.w	r3, r7, #8
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff22 	bl	8000d28 <dev_gpio_init_mode>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	77fb      	strb	r3, [r7, #31]
		if (ret) return TRACE_EERROR(ret);
 8000ee8:	7ffb      	ldrb	r3, [r7, #31]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d008      	beq.n	8000f00 <dev_gpio_init+0x88>
 8000eee:	7ffb      	ldrb	r3, [r7, #31]
 8000ef0:	f44f 728b 	mov.w	r2, #278	; 0x116
 8000ef4:	496d      	ldr	r1, [pc, #436]	; (80010ac <dev_gpio_init+0x234>)
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff f9dc 	bl	80002b4 <dev_trace_get_error>
 8000efc:	4603      	mov	r3, r0
 8000efe:	e0d1      	b.n	80010a4 <dev_gpio_init+0x22c>
	
		ret = dev_gpio_init_speed(&GPIO_InitStructure, init->speed);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	7eda      	ldrb	r2, [r3, #27]
 8000f04:	f107 0308 	add.w	r3, r7, #8
 8000f08:	4611      	mov	r1, r2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff80 	bl	8000e10 <dev_gpio_init_speed>
 8000f10:	4603      	mov	r3, r0
 8000f12:	77fb      	strb	r3, [r7, #31]
		if (ret) return TRACE_EERROR(ret);
 8000f14:	7ffb      	ldrb	r3, [r7, #31]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d008      	beq.n	8000f2c <dev_gpio_init+0xb4>
 8000f1a:	7ffb      	ldrb	r3, [r7, #31]
 8000f1c:	f240 1219 	movw	r2, #281	; 0x119
 8000f20:	4962      	ldr	r1, [pc, #392]	; (80010ac <dev_gpio_init+0x234>)
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff f9c6 	bl	80002b4 <dev_trace_get_error>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	e0bb      	b.n	80010a4 <dev_gpio_init+0x22c>
	
	  // EXTI interrupt init
		if (init->irq_cbf)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	6a1b      	ldr	r3, [r3, #32]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d013      	beq.n	8000f5c <dev_gpio_init+0xe4>
		{
				switch(init->irq_mode)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	7f1b      	ldrb	r3, [r3, #28]
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	d00c      	beq.n	8000f56 <dev_gpio_init+0xde>
 8000f3c:	2b03      	cmp	r3, #3
 8000f3e:	dc0e      	bgt.n	8000f5e <dev_gpio_init+0xe6>
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d002      	beq.n	8000f4a <dev_gpio_init+0xd2>
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d003      	beq.n	8000f50 <dev_gpio_init+0xd8>
 8000f48:	e009      	b.n	8000f5e <dev_gpio_init+0xe6>
				{
						case GPIO_IRQ_RISING : 		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING; break;
 8000f4a:	4b59      	ldr	r3, [pc, #356]	; (80010b0 <dev_gpio_init+0x238>)
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	e006      	b.n	8000f5e <dev_gpio_init+0xe6>
						case GPIO_IRQ_FALLING : 	GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING; break;
 8000f50:	4b57      	ldr	r3, [pc, #348]	; (80010b0 <dev_gpio_init+0x238>)
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	e003      	b.n	8000f5e <dev_gpio_init+0xe6>
						case GPIO_IRQ_CHANGE : 		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING; break;
 8000f56:	4b56      	ldr	r3, [pc, #344]	; (80010b0 <dev_gpio_init+0x238>)
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	e000      	b.n	8000f5e <dev_gpio_init+0xe6>
				}
		}	
 8000f5c:	bf00      	nop
	
		HAL_GPIO_Init(gpio->port, &GPIO_InitStructure);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f107 0208 	add.w	r2, r7, #8
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 ffcd 	bl	8001f08 <HAL_GPIO_Init>

		HAL_DRIVER_DEBUG(gpio->info.status_in, debug_printf("Init Gpio %s - %d, %X\n\r", gpio->info.name, gpio->info.id, gpio->pin));		
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00e      	beq.n	8000f94 <dev_gpio_init+0x11c>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d009      	beq.n	8000f94 <dev_gpio_init+0x11c>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6959      	ldr	r1, [r3, #20]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	791b      	ldrb	r3, [r3, #4]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	8b9b      	ldrh	r3, [r3, #28]
 8000f8e:	4849      	ldr	r0, [pc, #292]	; (80010b4 <dev_gpio_init+0x23c>)
 8000f90:	f7ff fb18 	bl	80005c4 <debug_printf>

	  // EXTI interrupt init
		if (init->irq_cbf)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	6a1b      	ldr	r3, [r3, #32]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f000 8082 	beq.w	80010a2 <dev_gpio_init+0x22a>
		{
				int pin_id = dev_gpio_pin_id(gpio->pin);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	8b9b      	ldrh	r3, [r3, #28]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fddc 	bl	8000b60 <dev_gpio_pin_id>
 8000fa8:	61b8      	str	r0, [r7, #24]
			
				if (pin_id < 0) return TRACE_GERROR("Irq Line!!!");
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	da07      	bge.n	8000fc0 <dev_gpio_init+0x148>
 8000fb0:	f240 122f 	movw	r2, #303	; 0x12f
 8000fb4:	493d      	ldr	r1, [pc, #244]	; (80010ac <dev_gpio_init+0x234>)
 8000fb6:	4840      	ldr	r0, [pc, #256]	; (80010b8 <dev_gpio_init+0x240>)
 8000fb8:	f7ff f996 	bl	80002e8 <dev_trace_generate_error>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	e071      	b.n	80010a4 <dev_gpio_init+0x22c>
			
				gpio_irq_cbf[pin_id] = init->irq_cbf;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	6a1a      	ldr	r2, [r3, #32]
 8000fc4:	493d      	ldr	r1, [pc, #244]	; (80010bc <dev_gpio_init+0x244>)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			
				switch(pin_id)
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	2b0f      	cmp	r3, #15
 8000fd0:	d83e      	bhi.n	8001050 <dev_gpio_init+0x1d8>
 8000fd2:	a201      	add	r2, pc, #4	; (adr r2, 8000fd8 <dev_gpio_init+0x160>)
 8000fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd8:	08001019 	.word	0x08001019
 8000fdc:	08001021 	.word	0x08001021
 8000fe0:	08001029 	.word	0x08001029
 8000fe4:	08001031 	.word	0x08001031
 8000fe8:	08001039 	.word	0x08001039
 8000fec:	08001041 	.word	0x08001041
 8000ff0:	08001041 	.word	0x08001041
 8000ff4:	08001041 	.word	0x08001041
 8000ff8:	08001041 	.word	0x08001041
 8000ffc:	08001041 	.word	0x08001041
 8001000:	08001049 	.word	0x08001049
 8001004:	08001049 	.word	0x08001049
 8001008:	08001049 	.word	0x08001049
 800100c:	08001049 	.word	0x08001049
 8001010:	08001049 	.word	0x08001049
 8001014:	08001049 	.word	0x08001049
				{
						case 0 : gpio->irq_line = EXTI0_IRQn; break;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2206      	movs	r2, #6
 800101c:	779a      	strb	r2, [r3, #30]
 800101e:	e017      	b.n	8001050 <dev_gpio_init+0x1d8>
						case 1 : gpio->irq_line = EXTI1_IRQn; break;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2207      	movs	r2, #7
 8001024:	779a      	strb	r2, [r3, #30]
 8001026:	e013      	b.n	8001050 <dev_gpio_init+0x1d8>
						case 2 : gpio->irq_line = EXTI2_IRQn; break;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2208      	movs	r2, #8
 800102c:	779a      	strb	r2, [r3, #30]
 800102e:	e00f      	b.n	8001050 <dev_gpio_init+0x1d8>
						case 3 : gpio->irq_line = EXTI3_IRQn; break;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2209      	movs	r2, #9
 8001034:	779a      	strb	r2, [r3, #30]
 8001036:	e00b      	b.n	8001050 <dev_gpio_init+0x1d8>
						case 4 : gpio->irq_line = EXTI4_IRQn; break;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	220a      	movs	r2, #10
 800103c:	779a      	strb	r2, [r3, #30]
 800103e:	e007      	b.n	8001050 <dev_gpio_init+0x1d8>

						case 5 : 
						case 6 : 
						case 7 : 
						case 8 : 
						case 9 : gpio->irq_line = EXTI9_5_IRQn; break;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2217      	movs	r2, #23
 8001044:	779a      	strb	r2, [r3, #30]
 8001046:	e003      	b.n	8001050 <dev_gpio_init+0x1d8>
						case 10 : 
						case 11 : 
						case 12 : 
						case 13 : 
						case 14 : 
						case 15 : gpio->irq_line = EXTI15_10_IRQn; break;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2228      	movs	r2, #40	; 0x28
 800104c:	779a      	strb	r2, [r3, #30]
 800104e:	bf00      	nop
				}
			
				HAL_NVIC_SetPriority((IRQn_Type)gpio->irq_line, (init->irq_prior >> 4) & 0x0F, init->irq_prior & 0x0F);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	7f9b      	ldrb	r3, [r3, #30]
 8001054:	b258      	sxtb	r0, r3
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	7f5b      	ldrb	r3, [r3, #29]
 800105a:	091b      	lsrs	r3, r3, #4
 800105c:	b2db      	uxtb	r3, r3
 800105e:	f003 010f 	and.w	r1, r3, #15
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	7f5b      	ldrb	r3, [r3, #29]
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	461a      	mov	r2, r3
 800106c:	f000 fc73 	bl	8001956 <HAL_NVIC_SetPriority>
				HAL_NVIC_EnableIRQ((IRQn_Type)gpio->irq_line);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	7f9b      	ldrb	r3, [r3, #30]
 8001074:	b25b      	sxtb	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f000 fc89 	bl	800198e <HAL_NVIC_EnableIRQ>

			
				HAL_DRIVER_DEBUG(gpio->info.status_in, debug_printf("Init Gpio IRQ %s -, %d, %X\n\r", gpio->info.name, gpio->info.id, gpio->irq_line));		
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d00e      	beq.n	80010a2 <dev_gpio_init+0x22a>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d009      	beq.n	80010a2 <dev_gpio_init+0x22a>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6959      	ldr	r1, [r3, #20]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	791b      	ldrb	r3, [r3, #4]
 8001096:	461a      	mov	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	7f9b      	ldrb	r3, [r3, #30]
 800109c:	4808      	ldr	r0, [pc, #32]	; (80010c0 <dev_gpio_init+0x248>)
 800109e:	f7ff fa91 	bl	80005c4 <debug_printf>
		}	

		return RET_OK;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3720      	adds	r7, #32
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	08003860 	.word	0x08003860
 80010b0:	10110000 	.word	0x10110000
 80010b4:	080038b8 	.word	0x080038b8
 80010b8:	080038d0 	.word	0x080038d0
 80010bc:	2000008c 	.word	0x2000008c
 80010c0:	080038dc 	.word	0x080038dc

080010c4 <dev_gpio_init_simp>:

UINT8 dev_gpio_init_simp(dev_gpio_t* gpio, UINT8 gpio_id, UINT16 gpio_pin, UINT8 gpio_mode)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08c      	sub	sp, #48	; 0x30
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	4608      	mov	r0, r1
 80010ce:	4611      	mov	r1, r2
 80010d0:	461a      	mov	r2, r3
 80010d2:	4603      	mov	r3, r0
 80010d4:	70fb      	strb	r3, [r7, #3]
 80010d6:	460b      	mov	r3, r1
 80010d8:	803b      	strh	r3, [r7, #0]
 80010da:	4613      	mov	r3, r2
 80010dc:	70bb      	strb	r3, [r7, #2]
		dev_gpio_init_t init;
	
		init.info.id = gpio_id;
 80010de:	78fb      	ldrb	r3, [r7, #3]
 80010e0:	733b      	strb	r3, [r7, #12]
		init.info.name = "";
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <dev_gpio_init_simp+0x5c>)
 80010e4:	61fb      	str	r3, [r7, #28]
		init.info.status_in = 0; 
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
		init.info.status_out = 0; 
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]

		init.pin = gpio_pin;
 80010ee:	883b      	ldrh	r3, [r7, #0]
 80010f0:	84bb      	strh	r3, [r7, #36]	; 0x24
		init.mode = gpio_mode;
 80010f2:	78bb      	ldrb	r3, [r7, #2]
 80010f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		init.speed = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		init.irq_cbf = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
		init.irq_mode = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	
		return dev_gpio_init(gpio, &init);
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	4619      	mov	r1, r3
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff feb2 	bl	8000e78 <dev_gpio_init>
 8001114:	4603      	mov	r3, r0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3730      	adds	r7, #48	; 0x30
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	080038fc 	.word	0x080038fc

08001124 <dev_gpio_set>:
{
		return 0; //HAL_GPIO_ReadPins(gpio->port, gpio->pin); 
}

void dev_gpio_set(dev_gpio_t* gpio, UINT8 val)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	70fb      	strb	r3, [r7, #3]
		if (val) HAL_GPIO_WritePin(gpio->port, gpio->pin, (GPIO_PinState)1); 
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d008      	beq.n	8001148 <dev_gpio_set+0x24>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6818      	ldr	r0, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	8b9b      	ldrh	r3, [r3, #28]
 800113e:	2201      	movs	r2, #1
 8001140:	4619      	mov	r1, r3
 8001142:	f001 f865 	bl	8002210 <HAL_GPIO_WritePin>
				else HAL_GPIO_WritePin(gpio->port, gpio->pin, (GPIO_PinState)0);
}
 8001146:	e007      	b.n	8001158 <dev_gpio_set+0x34>
				else HAL_GPIO_WritePin(gpio->port, gpio->pin, (GPIO_PinState)0);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6818      	ldr	r0, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	8b9b      	ldrh	r3, [r3, #28]
 8001150:	2200      	movs	r2, #0
 8001152:	4619      	mov	r1, r3
 8001154:	f001 f85c 	bl	8002210 <HAL_GPIO_WritePin>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b090      	sub	sp, #64	; 0x40
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001166:	f000 fa99 	bl	800169c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116a:	f000 f871 	bl	8001250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116e:	f000 f905 	bl	800137c <MX_GPIO_Init>
  MX_DMA_Init();
 8001172:	f000 f8dd 	bl	8001330 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001176:	f000 f8b1 	bl	80012dc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  dev_trace_init_t trace_init;
  trace_init.mosi.port = GPIO_PA;
 800117a:	2300      	movs	r3, #0
 800117c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  trace_init.sck.port = GPIO_PA;
 8001180:	2300      	movs	r3, #0
 8001182:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  trace_init.nss.port = GPIO_PA;
 8001186:	2300      	movs	r3, #0
 8001188:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  trace_init.mosi.pin =BB(0, b00000001);
 800118c:	2301      	movs	r3, #1
 800118e:	86bb      	strh	r3, [r7, #52]	; 0x34
  trace_init.sck.pin = BB(0, b00000010);
 8001190:	2302      	movs	r3, #2
 8001192:	873b      	strh	r3, [r7, #56]	; 0x38
  trace_init.nss.pin = BB(0, b00000100);
 8001194:	2304      	movs	r3, #4
 8001196:	87bb      	strh	r3, [r7, #60]	; 0x3c
  dev_trace_init(&trace_init);
 8001198:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800119c:	4618      	mov	r0, r3
 800119e:	f7fe ffff 	bl	80001a0 <dev_trace_init>

  debug_printf("\r\n\n\n\n******HUMAN HEALTH MONITORING SENSOR******\r\n");
 80011a2:	4826      	ldr	r0, [pc, #152]	; (800123c <main+0xdc>)
 80011a4:	f7ff fa0e 	bl	80005c4 <debug_printf>

  uint32_t serial_id = 1717;
 80011a8:	f240 63b5 	movw	r3, #1717	; 0x6b5
 80011ac:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t temperature = 3755;
 80011ae:	f640 63ab 	movw	r3, #3755	; 0xeab
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pressure = 140000;
 80011b4:	4b22      	ldr	r3, [pc, #136]	; (8001240 <main+0xe0>)
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t heart_rate = 55555;
 80011b8:	f64d 1303 	movw	r3, #55555	; 0xd903
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t saturation = 7777;
 80011be:	f641 6361 	movw	r3, #7777	; 0x1e61
 80011c2:	623b      	str	r3, [r7, #32]


  int data[] = {START_MESSAGE, serial_id, temperature, pressure, heart_rate, saturation, END_MESSAGE};
 80011c4:	23aa      	movs	r3, #170	; 0xaa
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	6a3b      	ldr	r3, [r7, #32]
 80011da:	61bb      	str	r3, [r7, #24]
 80011dc:	2355      	movs	r3, #85	; 0x55
 80011de:	61fb      	str	r3, [r7, #28]
  tx_buffer[0] = START_MESSAGE;
 80011e0:	4b18      	ldr	r3, [pc, #96]	; (8001244 <main+0xe4>)
 80011e2:	22aa      	movs	r2, #170	; 0xaa
 80011e4:	701a      	strb	r2, [r3, #0]
 80011e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  memcpy(&tx_buffer[1], &serial_id, 4);
 80011e8:	4a16      	ldr	r2, [pc, #88]	; (8001244 <main+0xe4>)
 80011ea:	f8c2 3001 	str.w	r3, [r2, #1]
 80011ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  memcpy(&tx_buffer[5], &temperature, 4);
 80011f0:	4a14      	ldr	r2, [pc, #80]	; (8001244 <main+0xe4>)
 80011f2:	f8c2 3005 	str.w	r3, [r2, #5]
 80011f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  memcpy(&tx_buffer[9], &pressure, 4);
 80011f8:	4a12      	ldr	r2, [pc, #72]	; (8001244 <main+0xe4>)
 80011fa:	f8c2 3009 	str.w	r3, [r2, #9]
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  memcpy(&tx_buffer[13], &heart_rate, 4);
 8001200:	4a10      	ldr	r2, [pc, #64]	; (8001244 <main+0xe4>)
 8001202:	f8c2 300d 	str.w	r3, [r2, #13]
 8001206:	6a3b      	ldr	r3, [r7, #32]
  memcpy(&tx_buffer[17], &saturation, 4);
 8001208:	4a0e      	ldr	r2, [pc, #56]	; (8001244 <main+0xe4>)
 800120a:	f8c2 3011 	str.w	r3, [r2, #17]
  tx_buffer[21] = END_MESSAGE;
 800120e:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <main+0xe4>)
 8001210:	2255      	movs	r2, #85	; 0x55
 8001212:	755a      	strb	r2, [r3, #21]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13);
 8001214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001218:	480b      	ldr	r0, [pc, #44]	; (8001248 <main+0xe8>)
 800121a:	f001 f811 	bl	8002240 <HAL_GPIO_TogglePin>
	  HAL_Delay (1000);   /* Insert delay 100 ms */
 800121e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001222:	f000 fa9d 	bl	8001760 <HAL_Delay>

//	  HAL_UART_Transmit_DMA(&huart1, tx_buffer, sizeof(tx_buffer));
//	  HAL_Delay(1000);


	  HAL_UART_Transmit_DMA(&huart1, tx_buffer, 22);
 8001226:	2216      	movs	r2, #22
 8001228:	4906      	ldr	r1, [pc, #24]	; (8001244 <main+0xe4>)
 800122a:	4808      	ldr	r0, [pc, #32]	; (800124c <main+0xec>)
 800122c:	f001 fc82 	bl	8002b34 <HAL_UART_Transmit_DMA>
	  HAL_Delay(1000);
 8001230:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001234:	f000 fa94 	bl	8001760 <HAL_Delay>
	  HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13);
 8001238:	e7ec      	b.n	8001214 <main+0xb4>
 800123a:	bf00      	nop
 800123c:	08003920 	.word	0x08003920
 8001240:	000222e0 	.word	0x000222e0
 8001244:	2000019c 	.word	0x2000019c
 8001248:	40011000 	.word	0x40011000
 800124c:	200000cc 	.word	0x200000cc

08001250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b090      	sub	sp, #64	; 0x40
 8001254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001256:	f107 0318 	add.w	r3, r7, #24
 800125a:	2228      	movs	r2, #40	; 0x28
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f002 fab2 	bl	80037c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001272:	2301      	movs	r3, #1
 8001274:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001276:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800127a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001280:	2301      	movs	r3, #1
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001284:	2302      	movs	r3, #2
 8001286:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800128c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800128e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001292:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001294:	f107 0318 	add.w	r3, r7, #24
 8001298:	4618      	mov	r0, r3
 800129a:	f000 ffeb 	bl	8002274 <HAL_RCC_OscConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012a4:	f000 f8b6 	bl	8001414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a8:	230f      	movs	r3, #15
 80012aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ac:	2302      	movs	r3, #2
 80012ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2102      	movs	r1, #2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f001 fa58 	bl	8002778 <HAL_RCC_ClockConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012ce:	f000 f8a1 	bl	8001414 <Error_Handler>
  }
}
 80012d2:	bf00      	nop
 80012d4:	3740      	adds	r7, #64	; 0x40
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <MX_USART1_UART_Init+0x4c>)
 80012e2:	4a12      	ldr	r2, [pc, #72]	; (800132c <MX_USART1_UART_Init+0x50>)
 80012e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012e6:	4b10      	ldr	r3, [pc, #64]	; (8001328 <MX_USART1_UART_Init+0x4c>)
 80012e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <MX_USART1_UART_Init+0x4c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <MX_USART1_UART_Init+0x4c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <MX_USART1_UART_Init+0x4c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <MX_USART1_UART_Init+0x4c>)
 8001302:	220c      	movs	r2, #12
 8001304:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <MX_USART1_UART_Init+0x4c>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <MX_USART1_UART_Init+0x4c>)
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_USART1_UART_Init+0x4c>)
 8001314:	f001 fbbe 	bl	8002a94 <HAL_UART_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800131e:	f000 f879 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200000cc 	.word	0x200000cc
 800132c:	40013800 	.word	0x40013800

08001330 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <MX_DMA_Init+0x48>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	4a0f      	ldr	r2, [pc, #60]	; (8001378 <MX_DMA_Init+0x48>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6153      	str	r3, [r2, #20]
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <MX_DMA_Init+0x48>)
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	200e      	movs	r0, #14
 8001354:	f000 faff 	bl	8001956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001358:	200e      	movs	r0, #14
 800135a:	f000 fb18 	bl	800198e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	200f      	movs	r0, #15
 8001364:	f000 faf7 	bl	8001956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001368:	200f      	movs	r0, #15
 800136a:	f000 fb10 	bl	800198e <HAL_NVIC_EnableIRQ>

}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40021000 	.word	0x40021000

0800137c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001390:	4b1e      	ldr	r3, [pc, #120]	; (800140c <MX_GPIO_Init+0x90>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a1d      	ldr	r2, [pc, #116]	; (800140c <MX_GPIO_Init+0x90>)
 8001396:	f043 0310 	orr.w	r3, r3, #16
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <MX_GPIO_Init+0x90>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0310 	and.w	r3, r3, #16
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a8:	4b18      	ldr	r3, [pc, #96]	; (800140c <MX_GPIO_Init+0x90>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a17      	ldr	r2, [pc, #92]	; (800140c <MX_GPIO_Init+0x90>)
 80013ae:	f043 0320 	orr.w	r3, r3, #32
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b15      	ldr	r3, [pc, #84]	; (800140c <MX_GPIO_Init+0x90>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0320 	and.w	r3, r3, #32
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <MX_GPIO_Init+0x90>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	4a11      	ldr	r2, [pc, #68]	; (800140c <MX_GPIO_Init+0x90>)
 80013c6:	f043 0304 	orr.w	r3, r3, #4
 80013ca:	6193      	str	r3, [r2, #24]
 80013cc:	4b0f      	ldr	r3, [pc, #60]	; (800140c <MX_GPIO_Init+0x90>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80013d8:	2200      	movs	r2, #0
 80013da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013de:	480c      	ldr	r0, [pc, #48]	; (8001410 <MX_GPIO_Init+0x94>)
 80013e0:	f000 ff16 	bl	8002210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2302      	movs	r3, #2
 80013f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f6:	f107 0310 	add.w	r3, r7, #16
 80013fa:	4619      	mov	r1, r3
 80013fc:	4804      	ldr	r0, [pc, #16]	; (8001410 <MX_GPIO_Init+0x94>)
 80013fe:	f000 fd83 	bl	8001f08 <HAL_GPIO_Init>

}
 8001402:	bf00      	nop
 8001404:	3720      	adds	r7, #32
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40021000 	.word	0x40021000
 8001410:	40011000 	.word	0x40011000

08001414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
}
 800141a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800141c:	e7fe      	b.n	800141c <Error_Handler+0x8>
	...

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <HAL_MspInit+0x40>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	4a0d      	ldr	r2, [pc, #52]	; (8001460 <HAL_MspInit+0x40>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6193      	str	r3, [r2, #24]
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <HAL_MspInit+0x40>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HAL_MspInit+0x40>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	4a07      	ldr	r2, [pc, #28]	; (8001460 <HAL_MspInit+0x40>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001448:	61d3      	str	r3, [r2, #28]
 800144a:	4b05      	ldr	r3, [pc, #20]	; (8001460 <HAL_MspInit+0x40>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	40021000 	.word	0x40021000

08001464 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0310 	add.w	r3, r7, #16
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a47      	ldr	r2, [pc, #284]	; (800159c <HAL_UART_MspInit+0x138>)
 8001480:	4293      	cmp	r3, r2
 8001482:	f040 8086 	bne.w	8001592 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001486:	4b46      	ldr	r3, [pc, #280]	; (80015a0 <HAL_UART_MspInit+0x13c>)
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	4a45      	ldr	r2, [pc, #276]	; (80015a0 <HAL_UART_MspInit+0x13c>)
 800148c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001490:	6193      	str	r3, [r2, #24]
 8001492:	4b43      	ldr	r3, [pc, #268]	; (80015a0 <HAL_UART_MspInit+0x13c>)
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	4b40      	ldr	r3, [pc, #256]	; (80015a0 <HAL_UART_MspInit+0x13c>)
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	4a3f      	ldr	r2, [pc, #252]	; (80015a0 <HAL_UART_MspInit+0x13c>)
 80014a4:	f043 0304 	orr.w	r3, r3, #4
 80014a8:	6193      	str	r3, [r2, #24]
 80014aa:	4b3d      	ldr	r3, [pc, #244]	; (80015a0 <HAL_UART_MspInit+0x13c>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 0310 	add.w	r3, r7, #16
 80014c8:	4619      	mov	r1, r3
 80014ca:	4836      	ldr	r0, [pc, #216]	; (80015a4 <HAL_UART_MspInit+0x140>)
 80014cc:	f000 fd1c 	bl	8001f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014de:	f107 0310 	add.w	r3, r7, #16
 80014e2:	4619      	mov	r1, r3
 80014e4:	482f      	ldr	r0, [pc, #188]	; (80015a4 <HAL_UART_MspInit+0x140>)
 80014e6:	f000 fd0f 	bl	8001f08 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80014ea:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <HAL_UART_MspInit+0x144>)
 80014ec:	4a2f      	ldr	r2, [pc, #188]	; (80015ac <HAL_UART_MspInit+0x148>)
 80014ee:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014f0:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <HAL_UART_MspInit+0x144>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f6:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <HAL_UART_MspInit+0x144>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014fc:	4b2a      	ldr	r3, [pc, #168]	; (80015a8 <HAL_UART_MspInit+0x144>)
 80014fe:	2280      	movs	r2, #128	; 0x80
 8001500:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001502:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <HAL_UART_MspInit+0x144>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001508:	4b27      	ldr	r3, [pc, #156]	; (80015a8 <HAL_UART_MspInit+0x144>)
 800150a:	2200      	movs	r2, #0
 800150c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800150e:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <HAL_UART_MspInit+0x144>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001514:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <HAL_UART_MspInit+0x144>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800151a:	4823      	ldr	r0, [pc, #140]	; (80015a8 <HAL_UART_MspInit+0x144>)
 800151c:	f000 fa52 	bl	80019c4 <HAL_DMA_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001526:	f7ff ff75 	bl	8001414 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a1e      	ldr	r2, [pc, #120]	; (80015a8 <HAL_UART_MspInit+0x144>)
 800152e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001530:	4a1d      	ldr	r2, [pc, #116]	; (80015a8 <HAL_UART_MspInit+0x144>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001536:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <HAL_UART_MspInit+0x14c>)
 8001538:	4a1e      	ldr	r2, [pc, #120]	; (80015b4 <HAL_UART_MspInit+0x150>)
 800153a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800153c:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <HAL_UART_MspInit+0x14c>)
 800153e:	2210      	movs	r2, #16
 8001540:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001542:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <HAL_UART_MspInit+0x14c>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001548:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <HAL_UART_MspInit+0x14c>)
 800154a:	2280      	movs	r2, #128	; 0x80
 800154c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800154e:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_UART_MspInit+0x14c>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001554:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <HAL_UART_MspInit+0x14c>)
 8001556:	2200      	movs	r2, #0
 8001558:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_UART_MspInit+0x14c>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <HAL_UART_MspInit+0x14c>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001566:	4812      	ldr	r0, [pc, #72]	; (80015b0 <HAL_UART_MspInit+0x14c>)
 8001568:	f000 fa2c 	bl	80019c4 <HAL_DMA_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001572:	f7ff ff4f 	bl	8001414 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <HAL_UART_MspInit+0x14c>)
 800157a:	639a      	str	r2, [r3, #56]	; 0x38
 800157c:	4a0c      	ldr	r2, [pc, #48]	; (80015b0 <HAL_UART_MspInit+0x14c>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	2025      	movs	r0, #37	; 0x25
 8001588:	f000 f9e5 	bl	8001956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800158c:	2025      	movs	r0, #37	; 0x25
 800158e:	f000 f9fe 	bl	800198e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001592:	bf00      	nop
 8001594:	3720      	adds	r7, #32
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40013800 	.word	0x40013800
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40010800 	.word	0x40010800
 80015a8:	20000114 	.word	0x20000114
 80015ac:	40020058 	.word	0x40020058
 80015b0:	20000158 	.word	0x20000158
 80015b4:	40020044 	.word	0x40020044

080015b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <NMI_Handler+0x4>

080015be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <HardFault_Handler+0x4>

080015c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <MemManage_Handler+0x4>

080015ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <BusFault_Handler+0x4>

080015d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <UsageFault_Handler+0x4>

080015d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr

080015e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr

080015ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fe:	f000 f893 	bl	8001728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <DMA1_Channel4_IRQHandler+0x10>)
 800160e:	f000 fb47 	bl	8001ca0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000158 	.word	0x20000158

0800161c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <DMA1_Channel5_IRQHandler+0x10>)
 8001622:	f000 fb3d 	bl	8001ca0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000114 	.word	0x20000114

08001630 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <USART1_IRQHandler+0x10>)
 8001636:	f001 faed 	bl	8002c14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200000cc 	.word	0x200000cc

08001644 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001650:	f7ff fff8 	bl	8001644 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001654:	480b      	ldr	r0, [pc, #44]	; (8001684 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001656:	490c      	ldr	r1, [pc, #48]	; (8001688 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001658:	4a0c      	ldr	r2, [pc, #48]	; (800168c <LoopFillZerobss+0x16>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800165c:	e002      	b.n	8001664 <LoopCopyDataInit>

0800165e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001662:	3304      	adds	r3, #4

08001664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001668:	d3f9      	bcc.n	800165e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166a:	4a09      	ldr	r2, [pc, #36]	; (8001690 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800166c:	4c09      	ldr	r4, [pc, #36]	; (8001694 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001670:	e001      	b.n	8001676 <LoopFillZerobss>

08001672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001674:	3204      	adds	r2, #4

08001676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001678:	d3fb      	bcc.n	8001672 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800167a:	f002 f881 	bl	8003780 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800167e:	f7ff fd6f 	bl	8001160 <main>
  bx lr
 8001682:	4770      	bx	lr
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800168c:	08003988 	.word	0x08003988
  ldr r2, =_sbss
 8001690:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001694:	20000220 	.word	0x20000220

08001698 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC1_2_IRQHandler>
	...

0800169c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <HAL_Init+0x28>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a07      	ldr	r2, [pc, #28]	; (80016c4 <HAL_Init+0x28>)
 80016a6:	f043 0310 	orr.w	r3, r3, #16
 80016aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ac:	2003      	movs	r0, #3
 80016ae:	f000 f947 	bl	8001940 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b2:	200f      	movs	r0, #15
 80016b4:	f000 f808 	bl	80016c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b8:	f7ff feb2 	bl	8001420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40022000 	.word	0x40022000

080016c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_InitTick+0x54>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_InitTick+0x58>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016de:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 f95f 	bl	80019aa <HAL_SYSTICK_Config>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00e      	b.n	8001714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b0f      	cmp	r3, #15
 80016fa:	d80a      	bhi.n	8001712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016fc:	2200      	movs	r2, #0
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f000 f927 	bl	8001956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001708:	4a06      	ldr	r2, [pc, #24]	; (8001724 <HAL_InitTick+0x5c>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e000      	b.n	8001714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000000 	.word	0x20000000
 8001720:	20000008 	.word	0x20000008
 8001724:	20000004 	.word	0x20000004

08001728 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_IncTick+0x1c>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_IncTick+0x20>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4413      	add	r3, r2
 8001738:	4a03      	ldr	r2, [pc, #12]	; (8001748 <HAL_IncTick+0x20>)
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	20000008 	.word	0x20000008
 8001748:	2000021c 	.word	0x2000021c

0800174c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return uwTick;
 8001750:	4b02      	ldr	r3, [pc, #8]	; (800175c <HAL_GetTick+0x10>)
 8001752:	681b      	ldr	r3, [r3, #0]
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	2000021c 	.word	0x2000021c

08001760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001768:	f7ff fff0 	bl	800174c <HAL_GetTick>
 800176c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001778:	d005      	beq.n	8001786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_Delay+0x44>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4413      	add	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001786:	bf00      	nop
 8001788:	f7ff ffe0 	bl	800174c <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	429a      	cmp	r2, r3
 8001796:	d8f7      	bhi.n	8001788 <HAL_Delay+0x28>
  {
  }
}
 8001798:	bf00      	nop
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000008 	.word	0x20000008

080017a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c4:	4013      	ands	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017da:	4a04      	ldr	r2, [pc, #16]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	60d3      	str	r3, [r2, #12]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <__NVIC_GetPriorityGrouping+0x18>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	f003 0307 	and.w	r3, r3, #7
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	2b00      	cmp	r3, #0
 800181c:	db0b      	blt.n	8001836 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	f003 021f 	and.w	r2, r3, #31
 8001824:	4906      	ldr	r1, [pc, #24]	; (8001840 <__NVIC_EnableIRQ+0x34>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	095b      	lsrs	r3, r3, #5
 800182c:	2001      	movs	r0, #1
 800182e:	fa00 f202 	lsl.w	r2, r0, r2
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	e000e100 	.word	0xe000e100

08001844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	2b00      	cmp	r3, #0
 8001856:	db0a      	blt.n	800186e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	490c      	ldr	r1, [pc, #48]	; (8001890 <__NVIC_SetPriority+0x4c>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	0112      	lsls	r2, r2, #4
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	440b      	add	r3, r1
 8001868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800186c:	e00a      	b.n	8001884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4908      	ldr	r1, [pc, #32]	; (8001894 <__NVIC_SetPriority+0x50>)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	3b04      	subs	r3, #4
 800187c:	0112      	lsls	r2, r2, #4
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	440b      	add	r3, r1
 8001882:	761a      	strb	r2, [r3, #24]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000e100 	.word	0xe000e100
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f1c3 0307 	rsb	r3, r3, #7
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	bf28      	it	cs
 80018b6:	2304      	movcs	r3, #4
 80018b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3304      	adds	r3, #4
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d902      	bls.n	80018c8 <NVIC_EncodePriority+0x30>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3b03      	subs	r3, #3
 80018c6:	e000      	b.n	80018ca <NVIC_EncodePriority+0x32>
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	401a      	ands	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	43d9      	mvns	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	4313      	orrs	r3, r2
         );
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	; 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800190c:	d301      	bcc.n	8001912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190e:	2301      	movs	r3, #1
 8001910:	e00f      	b.n	8001932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <SysTick_Config+0x40>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191a:	210f      	movs	r1, #15
 800191c:	f04f 30ff 	mov.w	r0, #4294967295
 8001920:	f7ff ff90 	bl	8001844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <SysTick_Config+0x40>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192a:	4b04      	ldr	r3, [pc, #16]	; (800193c <SysTick_Config+0x40>)
 800192c:	2207      	movs	r2, #7
 800192e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	e000e010 	.word	0xe000e010

08001940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ff2d 	bl	80017a8 <__NVIC_SetPriorityGrouping>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001968:	f7ff ff42 	bl	80017f0 <__NVIC_GetPriorityGrouping>
 800196c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	6978      	ldr	r0, [r7, #20]
 8001974:	f7ff ff90 	bl	8001898 <NVIC_EncodePriority>
 8001978:	4602      	mov	r2, r0
 800197a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff5f 	bl	8001844 <__NVIC_SetPriority>
}
 8001986:	bf00      	nop
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	4603      	mov	r3, r0
 8001996:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff35 	bl	800180c <__NVIC_EnableIRQ>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff ffa2 	bl	80018fc <SysTick_Config>
 80019b8:	4603      	mov	r3, r0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e043      	b.n	8001a62 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <HAL_DMA_Init+0xa8>)
 80019e2:	4413      	add	r3, r2
 80019e4:	4a22      	ldr	r2, [pc, #136]	; (8001a70 <HAL_DMA_Init+0xac>)
 80019e6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ea:	091b      	lsrs	r3, r3, #4
 80019ec:	009a      	lsls	r2, r3, #2
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a1f      	ldr	r2, [pc, #124]	; (8001a74 <HAL_DMA_Init+0xb0>)
 80019f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2202      	movs	r2, #2
 80019fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a0e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr
 8001a6c:	bffdfff8 	.word	0xbffdfff8
 8001a70:	cccccccd 	.word	0xcccccccd
 8001a74:	40020000 	.word	0x40020000

08001a78 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <HAL_DMA_Start_IT+0x20>
 8001a94:	2302      	movs	r3, #2
 8001a96:	e04b      	b.n	8001b30 <HAL_DMA_Start_IT+0xb8>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d13a      	bne.n	8001b22 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 0201 	bic.w	r2, r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	68b9      	ldr	r1, [r7, #8]
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f000 f9eb 	bl	8001eac <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d008      	beq.n	8001af0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f042 020e 	orr.w	r2, r2, #14
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	e00f      	b.n	8001b10 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0204 	bic.w	r2, r2, #4
 8001afe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 020a 	orr.w	r2, r2, #10
 8001b0e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0201 	orr.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	e005      	b.n	8001b2e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d008      	beq.n	8001b62 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2204      	movs	r2, #4
 8001b54:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e020      	b.n	8001ba4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 020e 	bic.w	r2, r2, #14
 8001b70:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0201 	bic.w	r2, r2, #1
 8001b80:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b90:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr
	...

08001bb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d005      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2204      	movs	r2, #4
 8001bcc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	73fb      	strb	r3, [r7, #15]
 8001bd2:	e051      	b.n	8001c78 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 020e 	bic.w	r2, r2, #14
 8001be2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0201 	bic.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a22      	ldr	r2, [pc, #136]	; (8001c84 <HAL_DMA_Abort_IT+0xd4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d029      	beq.n	8001c52 <HAL_DMA_Abort_IT+0xa2>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a21      	ldr	r2, [pc, #132]	; (8001c88 <HAL_DMA_Abort_IT+0xd8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d022      	beq.n	8001c4e <HAL_DMA_Abort_IT+0x9e>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1f      	ldr	r2, [pc, #124]	; (8001c8c <HAL_DMA_Abort_IT+0xdc>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d01a      	beq.n	8001c48 <HAL_DMA_Abort_IT+0x98>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a1e      	ldr	r2, [pc, #120]	; (8001c90 <HAL_DMA_Abort_IT+0xe0>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d012      	beq.n	8001c42 <HAL_DMA_Abort_IT+0x92>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a1c      	ldr	r2, [pc, #112]	; (8001c94 <HAL_DMA_Abort_IT+0xe4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d00a      	beq.n	8001c3c <HAL_DMA_Abort_IT+0x8c>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a1b      	ldr	r2, [pc, #108]	; (8001c98 <HAL_DMA_Abort_IT+0xe8>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d102      	bne.n	8001c36 <HAL_DMA_Abort_IT+0x86>
 8001c30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c34:	e00e      	b.n	8001c54 <HAL_DMA_Abort_IT+0xa4>
 8001c36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c3a:	e00b      	b.n	8001c54 <HAL_DMA_Abort_IT+0xa4>
 8001c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c40:	e008      	b.n	8001c54 <HAL_DMA_Abort_IT+0xa4>
 8001c42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c46:	e005      	b.n	8001c54 <HAL_DMA_Abort_IT+0xa4>
 8001c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c4c:	e002      	b.n	8001c54 <HAL_DMA_Abort_IT+0xa4>
 8001c4e:	2310      	movs	r3, #16
 8001c50:	e000      	b.n	8001c54 <HAL_DMA_Abort_IT+0xa4>
 8001c52:	2301      	movs	r3, #1
 8001c54:	4a11      	ldr	r2, [pc, #68]	; (8001c9c <HAL_DMA_Abort_IT+0xec>)
 8001c56:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	4798      	blx	r3
    } 
  }
  return status;
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40020008 	.word	0x40020008
 8001c88:	4002001c 	.word	0x4002001c
 8001c8c:	40020030 	.word	0x40020030
 8001c90:	40020044 	.word	0x40020044
 8001c94:	40020058 	.word	0x40020058
 8001c98:	4002006c 	.word	0x4002006c
 8001c9c:	40020000 	.word	0x40020000

08001ca0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d04f      	beq.n	8001d68 <HAL_DMA_IRQHandler+0xc8>
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d04a      	beq.n	8001d68 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0320 	and.w	r3, r3, #32
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d107      	bne.n	8001cf0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0204 	bic.w	r2, r2, #4
 8001cee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a66      	ldr	r2, [pc, #408]	; (8001e90 <HAL_DMA_IRQHandler+0x1f0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d029      	beq.n	8001d4e <HAL_DMA_IRQHandler+0xae>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a65      	ldr	r2, [pc, #404]	; (8001e94 <HAL_DMA_IRQHandler+0x1f4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d022      	beq.n	8001d4a <HAL_DMA_IRQHandler+0xaa>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a63      	ldr	r2, [pc, #396]	; (8001e98 <HAL_DMA_IRQHandler+0x1f8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d01a      	beq.n	8001d44 <HAL_DMA_IRQHandler+0xa4>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a62      	ldr	r2, [pc, #392]	; (8001e9c <HAL_DMA_IRQHandler+0x1fc>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d012      	beq.n	8001d3e <HAL_DMA_IRQHandler+0x9e>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a60      	ldr	r2, [pc, #384]	; (8001ea0 <HAL_DMA_IRQHandler+0x200>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00a      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x98>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a5f      	ldr	r2, [pc, #380]	; (8001ea4 <HAL_DMA_IRQHandler+0x204>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d102      	bne.n	8001d32 <HAL_DMA_IRQHandler+0x92>
 8001d2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d30:	e00e      	b.n	8001d50 <HAL_DMA_IRQHandler+0xb0>
 8001d32:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d36:	e00b      	b.n	8001d50 <HAL_DMA_IRQHandler+0xb0>
 8001d38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d3c:	e008      	b.n	8001d50 <HAL_DMA_IRQHandler+0xb0>
 8001d3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d42:	e005      	b.n	8001d50 <HAL_DMA_IRQHandler+0xb0>
 8001d44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d48:	e002      	b.n	8001d50 <HAL_DMA_IRQHandler+0xb0>
 8001d4a:	2340      	movs	r3, #64	; 0x40
 8001d4c:	e000      	b.n	8001d50 <HAL_DMA_IRQHandler+0xb0>
 8001d4e:	2304      	movs	r3, #4
 8001d50:	4a55      	ldr	r2, [pc, #340]	; (8001ea8 <HAL_DMA_IRQHandler+0x208>)
 8001d52:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 8094 	beq.w	8001e86 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001d66:	e08e      	b.n	8001e86 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d056      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x186>
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d051      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0320 	and.w	r3, r3, #32
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10b      	bne.n	8001da8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 020a 	bic.w	r2, r2, #10
 8001d9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a38      	ldr	r2, [pc, #224]	; (8001e90 <HAL_DMA_IRQHandler+0x1f0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d029      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x166>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a37      	ldr	r2, [pc, #220]	; (8001e94 <HAL_DMA_IRQHandler+0x1f4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d022      	beq.n	8001e02 <HAL_DMA_IRQHandler+0x162>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a35      	ldr	r2, [pc, #212]	; (8001e98 <HAL_DMA_IRQHandler+0x1f8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d01a      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x15c>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a34      	ldr	r2, [pc, #208]	; (8001e9c <HAL_DMA_IRQHandler+0x1fc>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d012      	beq.n	8001df6 <HAL_DMA_IRQHandler+0x156>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a32      	ldr	r2, [pc, #200]	; (8001ea0 <HAL_DMA_IRQHandler+0x200>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d00a      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x150>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a31      	ldr	r2, [pc, #196]	; (8001ea4 <HAL_DMA_IRQHandler+0x204>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d102      	bne.n	8001dea <HAL_DMA_IRQHandler+0x14a>
 8001de4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001de8:	e00e      	b.n	8001e08 <HAL_DMA_IRQHandler+0x168>
 8001dea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dee:	e00b      	b.n	8001e08 <HAL_DMA_IRQHandler+0x168>
 8001df0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001df4:	e008      	b.n	8001e08 <HAL_DMA_IRQHandler+0x168>
 8001df6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dfa:	e005      	b.n	8001e08 <HAL_DMA_IRQHandler+0x168>
 8001dfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e00:	e002      	b.n	8001e08 <HAL_DMA_IRQHandler+0x168>
 8001e02:	2320      	movs	r3, #32
 8001e04:	e000      	b.n	8001e08 <HAL_DMA_IRQHandler+0x168>
 8001e06:	2302      	movs	r3, #2
 8001e08:	4a27      	ldr	r2, [pc, #156]	; (8001ea8 <HAL_DMA_IRQHandler+0x208>)
 8001e0a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d034      	beq.n	8001e86 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e24:	e02f      	b.n	8001e86 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	2208      	movs	r2, #8
 8001e2c:	409a      	lsls	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d028      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x1e8>
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d023      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 020e 	bic.w	r2, r2, #14
 8001e4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e58:	2101      	movs	r1, #1
 8001e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d004      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	4798      	blx	r3
    }
  }
  return;
 8001e86:	bf00      	nop
 8001e88:	bf00      	nop
}
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40020008 	.word	0x40020008
 8001e94:	4002001c 	.word	0x4002001c
 8001e98:	40020030 	.word	0x40020030
 8001e9c:	40020044 	.word	0x40020044
 8001ea0:	40020058 	.word	0x40020058
 8001ea4:	4002006c 	.word	0x4002006c
 8001ea8:	40020000 	.word	0x40020000

08001eac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
 8001eb8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b10      	cmp	r3, #16
 8001ed8:	d108      	bne.n	8001eec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001eea:	e007      	b.n	8001efc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	60da      	str	r2, [r3, #12]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr
	...

08001f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b08b      	sub	sp, #44	; 0x2c
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f12:	2300      	movs	r3, #0
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f16:	2300      	movs	r3, #0
 8001f18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f1a:	e169      	b.n	80021f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	f040 8158 	bne.w	80021ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	4a9a      	ldr	r2, [pc, #616]	; (80021a8 <HAL_GPIO_Init+0x2a0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d05e      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f44:	4a98      	ldr	r2, [pc, #608]	; (80021a8 <HAL_GPIO_Init+0x2a0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d875      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f4a:	4a98      	ldr	r2, [pc, #608]	; (80021ac <HAL_GPIO_Init+0x2a4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d058      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f50:	4a96      	ldr	r2, [pc, #600]	; (80021ac <HAL_GPIO_Init+0x2a4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d86f      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f56:	4a96      	ldr	r2, [pc, #600]	; (80021b0 <HAL_GPIO_Init+0x2a8>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d052      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f5c:	4a94      	ldr	r2, [pc, #592]	; (80021b0 <HAL_GPIO_Init+0x2a8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d869      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f62:	4a94      	ldr	r2, [pc, #592]	; (80021b4 <HAL_GPIO_Init+0x2ac>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d04c      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f68:	4a92      	ldr	r2, [pc, #584]	; (80021b4 <HAL_GPIO_Init+0x2ac>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d863      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f6e:	4a92      	ldr	r2, [pc, #584]	; (80021b8 <HAL_GPIO_Init+0x2b0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d046      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f74:	4a90      	ldr	r2, [pc, #576]	; (80021b8 <HAL_GPIO_Init+0x2b0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d85d      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f7a:	2b12      	cmp	r3, #18
 8001f7c:	d82a      	bhi.n	8001fd4 <HAL_GPIO_Init+0xcc>
 8001f7e:	2b12      	cmp	r3, #18
 8001f80:	d859      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f82:	a201      	add	r2, pc, #4	; (adr r2, 8001f88 <HAL_GPIO_Init+0x80>)
 8001f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f88:	08002003 	.word	0x08002003
 8001f8c:	08001fdd 	.word	0x08001fdd
 8001f90:	08001fef 	.word	0x08001fef
 8001f94:	08002031 	.word	0x08002031
 8001f98:	08002037 	.word	0x08002037
 8001f9c:	08002037 	.word	0x08002037
 8001fa0:	08002037 	.word	0x08002037
 8001fa4:	08002037 	.word	0x08002037
 8001fa8:	08002037 	.word	0x08002037
 8001fac:	08002037 	.word	0x08002037
 8001fb0:	08002037 	.word	0x08002037
 8001fb4:	08002037 	.word	0x08002037
 8001fb8:	08002037 	.word	0x08002037
 8001fbc:	08002037 	.word	0x08002037
 8001fc0:	08002037 	.word	0x08002037
 8001fc4:	08002037 	.word	0x08002037
 8001fc8:	08002037 	.word	0x08002037
 8001fcc:	08001fe5 	.word	0x08001fe5
 8001fd0:	08001ff9 	.word	0x08001ff9
 8001fd4:	4a79      	ldr	r2, [pc, #484]	; (80021bc <HAL_GPIO_Init+0x2b4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d013      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fda:	e02c      	b.n	8002036 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	623b      	str	r3, [r7, #32]
          break;
 8001fe2:	e029      	b.n	8002038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	623b      	str	r3, [r7, #32]
          break;
 8001fec:	e024      	b.n	8002038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	3308      	adds	r3, #8
 8001ff4:	623b      	str	r3, [r7, #32]
          break;
 8001ff6:	e01f      	b.n	8002038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	330c      	adds	r3, #12
 8001ffe:	623b      	str	r3, [r7, #32]
          break;
 8002000:	e01a      	b.n	8002038 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d102      	bne.n	8002010 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800200a:	2304      	movs	r3, #4
 800200c:	623b      	str	r3, [r7, #32]
          break;
 800200e:	e013      	b.n	8002038 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d105      	bne.n	8002024 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002018:	2308      	movs	r3, #8
 800201a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	611a      	str	r2, [r3, #16]
          break;
 8002022:	e009      	b.n	8002038 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002024:	2308      	movs	r3, #8
 8002026:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	615a      	str	r2, [r3, #20]
          break;
 800202e:	e003      	b.n	8002038 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002030:	2300      	movs	r3, #0
 8002032:	623b      	str	r3, [r7, #32]
          break;
 8002034:	e000      	b.n	8002038 <HAL_GPIO_Init+0x130>
          break;
 8002036:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	2bff      	cmp	r3, #255	; 0xff
 800203c:	d801      	bhi.n	8002042 <HAL_GPIO_Init+0x13a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	e001      	b.n	8002046 <HAL_GPIO_Init+0x13e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3304      	adds	r3, #4
 8002046:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	2bff      	cmp	r3, #255	; 0xff
 800204c:	d802      	bhi.n	8002054 <HAL_GPIO_Init+0x14c>
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	e002      	b.n	800205a <HAL_GPIO_Init+0x152>
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	3b08      	subs	r3, #8
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	210f      	movs	r1, #15
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	fa01 f303 	lsl.w	r3, r1, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	401a      	ands	r2, r3
 800206c:	6a39      	ldr	r1, [r7, #32]
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	fa01 f303 	lsl.w	r3, r1, r3
 8002074:	431a      	orrs	r2, r3
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 80b1 	beq.w	80021ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002088:	4b4d      	ldr	r3, [pc, #308]	; (80021c0 <HAL_GPIO_Init+0x2b8>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	4a4c      	ldr	r2, [pc, #304]	; (80021c0 <HAL_GPIO_Init+0x2b8>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6193      	str	r3, [r2, #24]
 8002094:	4b4a      	ldr	r3, [pc, #296]	; (80021c0 <HAL_GPIO_Init+0x2b8>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020a0:	4a48      	ldr	r2, [pc, #288]	; (80021c4 <HAL_GPIO_Init+0x2bc>)
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	3302      	adds	r3, #2
 80020a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	220f      	movs	r2, #15
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4013      	ands	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a40      	ldr	r2, [pc, #256]	; (80021c8 <HAL_GPIO_Init+0x2c0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d013      	beq.n	80020f4 <HAL_GPIO_Init+0x1ec>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a3f      	ldr	r2, [pc, #252]	; (80021cc <HAL_GPIO_Init+0x2c4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d00d      	beq.n	80020f0 <HAL_GPIO_Init+0x1e8>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a3e      	ldr	r2, [pc, #248]	; (80021d0 <HAL_GPIO_Init+0x2c8>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d007      	beq.n	80020ec <HAL_GPIO_Init+0x1e4>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a3d      	ldr	r2, [pc, #244]	; (80021d4 <HAL_GPIO_Init+0x2cc>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d101      	bne.n	80020e8 <HAL_GPIO_Init+0x1e0>
 80020e4:	2303      	movs	r3, #3
 80020e6:	e006      	b.n	80020f6 <HAL_GPIO_Init+0x1ee>
 80020e8:	2304      	movs	r3, #4
 80020ea:	e004      	b.n	80020f6 <HAL_GPIO_Init+0x1ee>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e002      	b.n	80020f6 <HAL_GPIO_Init+0x1ee>
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <HAL_GPIO_Init+0x1ee>
 80020f4:	2300      	movs	r3, #0
 80020f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f8:	f002 0203 	and.w	r2, r2, #3
 80020fc:	0092      	lsls	r2, r2, #2
 80020fe:	4093      	lsls	r3, r2
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	4313      	orrs	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002106:	492f      	ldr	r1, [pc, #188]	; (80021c4 <HAL_GPIO_Init+0x2bc>)
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	089b      	lsrs	r3, r3, #2
 800210c:	3302      	adds	r3, #2
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d006      	beq.n	800212e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002120:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	492c      	ldr	r1, [pc, #176]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	608b      	str	r3, [r1, #8]
 800212c:	e006      	b.n	800213c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800212e:	4b2a      	ldr	r3, [pc, #168]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	43db      	mvns	r3, r3
 8002136:	4928      	ldr	r1, [pc, #160]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002138:	4013      	ands	r3, r2
 800213a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d006      	beq.n	8002156 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002148:	4b23      	ldr	r3, [pc, #140]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	4922      	ldr	r1, [pc, #136]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	4313      	orrs	r3, r2
 8002152:	60cb      	str	r3, [r1, #12]
 8002154:	e006      	b.n	8002164 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002156:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	43db      	mvns	r3, r3
 800215e:	491e      	ldr	r1, [pc, #120]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002160:	4013      	ands	r3, r2
 8002162:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002170:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	4918      	ldr	r1, [pc, #96]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	604b      	str	r3, [r1, #4]
 800217c:	e006      	b.n	800218c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800217e:	4b16      	ldr	r3, [pc, #88]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	43db      	mvns	r3, r3
 8002186:	4914      	ldr	r1, [pc, #80]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002188:	4013      	ands	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d021      	beq.n	80021dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002198:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	490e      	ldr	r1, [pc, #56]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	600b      	str	r3, [r1, #0]
 80021a4:	e021      	b.n	80021ea <HAL_GPIO_Init+0x2e2>
 80021a6:	bf00      	nop
 80021a8:	10320000 	.word	0x10320000
 80021ac:	10310000 	.word	0x10310000
 80021b0:	10220000 	.word	0x10220000
 80021b4:	10210000 	.word	0x10210000
 80021b8:	10120000 	.word	0x10120000
 80021bc:	10110000 	.word	0x10110000
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40010000 	.word	0x40010000
 80021c8:	40010800 	.word	0x40010800
 80021cc:	40010c00 	.word	0x40010c00
 80021d0:	40011000 	.word	0x40011000
 80021d4:	40011400 	.word	0x40011400
 80021d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <HAL_GPIO_Init+0x304>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	43db      	mvns	r3, r3
 80021e4:	4909      	ldr	r1, [pc, #36]	; (800220c <HAL_GPIO_Init+0x304>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	3301      	adds	r3, #1
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	fa22 f303 	lsr.w	r3, r2, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f47f ae8e 	bne.w	8001f1c <HAL_GPIO_Init+0x14>
  }
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	372c      	adds	r7, #44	; 0x2c
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	40010400 	.word	0x40010400

08002210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	807b      	strh	r3, [r7, #2]
 800221c:	4613      	mov	r3, r2
 800221e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002220:	787b      	ldrb	r3, [r7, #1]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002226:	887a      	ldrh	r2, [r7, #2]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800222c:	e003      	b.n	8002236 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800222e:	887b      	ldrh	r3, [r7, #2]
 8002230:	041a      	lsls	r2, r3, #16
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	611a      	str	r2, [r3, #16]
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002252:	887a      	ldrh	r2, [r7, #2]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4013      	ands	r3, r2
 8002258:	041a      	lsls	r2, r3, #16
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	43d9      	mvns	r1, r3
 800225e:	887b      	ldrh	r3, [r7, #2]
 8002260:	400b      	ands	r3, r1
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	611a      	str	r2, [r3, #16]
}
 8002268:	bf00      	nop
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr
	...

08002274 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e272      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 8087 	beq.w	80023a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002294:	4b92      	ldr	r3, [pc, #584]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 030c 	and.w	r3, r3, #12
 800229c:	2b04      	cmp	r3, #4
 800229e:	d00c      	beq.n	80022ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022a0:	4b8f      	ldr	r3, [pc, #572]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d112      	bne.n	80022d2 <HAL_RCC_OscConfig+0x5e>
 80022ac:	4b8c      	ldr	r3, [pc, #560]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b8:	d10b      	bne.n	80022d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ba:	4b89      	ldr	r3, [pc, #548]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d06c      	beq.n	80023a0 <HAL_RCC_OscConfig+0x12c>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d168      	bne.n	80023a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e24c      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022da:	d106      	bne.n	80022ea <HAL_RCC_OscConfig+0x76>
 80022dc:	4b80      	ldr	r3, [pc, #512]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a7f      	ldr	r2, [pc, #508]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	e02e      	b.n	8002348 <HAL_RCC_OscConfig+0xd4>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10c      	bne.n	800230c <HAL_RCC_OscConfig+0x98>
 80022f2:	4b7b      	ldr	r3, [pc, #492]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a7a      	ldr	r2, [pc, #488]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	4b78      	ldr	r3, [pc, #480]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a77      	ldr	r2, [pc, #476]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002304:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e01d      	b.n	8002348 <HAL_RCC_OscConfig+0xd4>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002314:	d10c      	bne.n	8002330 <HAL_RCC_OscConfig+0xbc>
 8002316:	4b72      	ldr	r3, [pc, #456]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a71      	ldr	r2, [pc, #452]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 800231c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	4b6f      	ldr	r3, [pc, #444]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a6e      	ldr	r2, [pc, #440]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e00b      	b.n	8002348 <HAL_RCC_OscConfig+0xd4>
 8002330:	4b6b      	ldr	r3, [pc, #428]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a6a      	ldr	r2, [pc, #424]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b68      	ldr	r3, [pc, #416]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a67      	ldr	r2, [pc, #412]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002346:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d013      	beq.n	8002378 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002350:	f7ff f9fc 	bl	800174c <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002358:	f7ff f9f8 	bl	800174c <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	; 0x64
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e200      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	4b5d      	ldr	r3, [pc, #372]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0xe4>
 8002376:	e014      	b.n	80023a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7ff f9e8 	bl	800174c <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002380:	f7ff f9e4 	bl	800174c <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	; 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e1ec      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002392:	4b53      	ldr	r3, [pc, #332]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x10c>
 800239e:	e000      	b.n	80023a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d063      	beq.n	8002476 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ae:	4b4c      	ldr	r3, [pc, #304]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00b      	beq.n	80023d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023ba:	4b49      	ldr	r3, [pc, #292]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d11c      	bne.n	8002400 <HAL_RCC_OscConfig+0x18c>
 80023c6:	4b46      	ldr	r3, [pc, #280]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d116      	bne.n	8002400 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d2:	4b43      	ldr	r3, [pc, #268]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_RCC_OscConfig+0x176>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d001      	beq.n	80023ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e1c0      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ea:	4b3d      	ldr	r3, [pc, #244]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	4939      	ldr	r1, [pc, #228]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fe:	e03a      	b.n	8002476 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d020      	beq.n	800244a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002408:	4b36      	ldr	r3, [pc, #216]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 800240a:	2201      	movs	r2, #1
 800240c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240e:	f7ff f99d 	bl	800174c <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002416:	f7ff f999 	bl	800174c <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e1a1      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002428:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002434:	4b2a      	ldr	r3, [pc, #168]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4927      	ldr	r1, [pc, #156]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 8002444:	4313      	orrs	r3, r2
 8002446:	600b      	str	r3, [r1, #0]
 8002448:	e015      	b.n	8002476 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800244a:	4b26      	ldr	r3, [pc, #152]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002450:	f7ff f97c 	bl	800174c <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002458:	f7ff f978 	bl	800174c <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e180      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246a:	4b1d      	ldr	r3, [pc, #116]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d03a      	beq.n	80024f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d019      	beq.n	80024be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800248a:	4b17      	ldr	r3, [pc, #92]	; (80024e8 <HAL_RCC_OscConfig+0x274>)
 800248c:	2201      	movs	r2, #1
 800248e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002490:	f7ff f95c 	bl	800174c <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002498:	f7ff f958 	bl	800174c <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e160      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024aa:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024b6:	2001      	movs	r0, #1
 80024b8:	f000 face 	bl	8002a58 <RCC_Delay>
 80024bc:	e01c      	b.n	80024f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024be:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <HAL_RCC_OscConfig+0x274>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c4:	f7ff f942 	bl	800174c <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ca:	e00f      	b.n	80024ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024cc:	f7ff f93e 	bl	800174c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d908      	bls.n	80024ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e146      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
 80024de:	bf00      	nop
 80024e0:	40021000 	.word	0x40021000
 80024e4:	42420000 	.word	0x42420000
 80024e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ec:	4b92      	ldr	r3, [pc, #584]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1e9      	bne.n	80024cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 80a6 	beq.w	8002652 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002506:	2300      	movs	r3, #0
 8002508:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800250a:	4b8b      	ldr	r3, [pc, #556]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10d      	bne.n	8002532 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002516:	4b88      	ldr	r3, [pc, #544]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	4a87      	ldr	r2, [pc, #540]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 800251c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002520:	61d3      	str	r3, [r2, #28]
 8002522:	4b85      	ldr	r3, [pc, #532]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800252e:	2301      	movs	r3, #1
 8002530:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002532:	4b82      	ldr	r3, [pc, #520]	; (800273c <HAL_RCC_OscConfig+0x4c8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d118      	bne.n	8002570 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800253e:	4b7f      	ldr	r3, [pc, #508]	; (800273c <HAL_RCC_OscConfig+0x4c8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a7e      	ldr	r2, [pc, #504]	; (800273c <HAL_RCC_OscConfig+0x4c8>)
 8002544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800254a:	f7ff f8ff 	bl	800174c <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002552:	f7ff f8fb 	bl	800174c <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b64      	cmp	r3, #100	; 0x64
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e103      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002564:	4b75      	ldr	r3, [pc, #468]	; (800273c <HAL_RCC_OscConfig+0x4c8>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d106      	bne.n	8002586 <HAL_RCC_OscConfig+0x312>
 8002578:	4b6f      	ldr	r3, [pc, #444]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	4a6e      	ldr	r2, [pc, #440]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	6213      	str	r3, [r2, #32]
 8002584:	e02d      	b.n	80025e2 <HAL_RCC_OscConfig+0x36e>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x334>
 800258e:	4b6a      	ldr	r3, [pc, #424]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	4a69      	ldr	r2, [pc, #420]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	6213      	str	r3, [r2, #32]
 800259a:	4b67      	ldr	r3, [pc, #412]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	4a66      	ldr	r2, [pc, #408]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	f023 0304 	bic.w	r3, r3, #4
 80025a4:	6213      	str	r3, [r2, #32]
 80025a6:	e01c      	b.n	80025e2 <HAL_RCC_OscConfig+0x36e>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	2b05      	cmp	r3, #5
 80025ae:	d10c      	bne.n	80025ca <HAL_RCC_OscConfig+0x356>
 80025b0:	4b61      	ldr	r3, [pc, #388]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	4a60      	ldr	r2, [pc, #384]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80025b6:	f043 0304 	orr.w	r3, r3, #4
 80025ba:	6213      	str	r3, [r2, #32]
 80025bc:	4b5e      	ldr	r3, [pc, #376]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	4a5d      	ldr	r2, [pc, #372]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	6213      	str	r3, [r2, #32]
 80025c8:	e00b      	b.n	80025e2 <HAL_RCC_OscConfig+0x36e>
 80025ca:	4b5b      	ldr	r3, [pc, #364]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	4a5a      	ldr	r2, [pc, #360]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	f023 0301 	bic.w	r3, r3, #1
 80025d4:	6213      	str	r3, [r2, #32]
 80025d6:	4b58      	ldr	r3, [pc, #352]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	4a57      	ldr	r2, [pc, #348]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	f023 0304 	bic.w	r3, r3, #4
 80025e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d015      	beq.n	8002616 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ea:	f7ff f8af 	bl	800174c <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f0:	e00a      	b.n	8002608 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f2:	f7ff f8ab 	bl	800174c <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002600:	4293      	cmp	r3, r2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e0b1      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002608:	4b4b      	ldr	r3, [pc, #300]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0ee      	beq.n	80025f2 <HAL_RCC_OscConfig+0x37e>
 8002614:	e014      	b.n	8002640 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002616:	f7ff f899 	bl	800174c <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800261c:	e00a      	b.n	8002634 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261e:	f7ff f895 	bl	800174c <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	f241 3288 	movw	r2, #5000	; 0x1388
 800262c:	4293      	cmp	r3, r2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e09b      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002634:	4b40      	ldr	r3, [pc, #256]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1ee      	bne.n	800261e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002640:	7dfb      	ldrb	r3, [r7, #23]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d105      	bne.n	8002652 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002646:	4b3c      	ldr	r3, [pc, #240]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	4a3b      	ldr	r2, [pc, #236]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 800264c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002650:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 8087 	beq.w	800276a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800265c:	4b36      	ldr	r3, [pc, #216]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 030c 	and.w	r3, r3, #12
 8002664:	2b08      	cmp	r3, #8
 8002666:	d061      	beq.n	800272c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	2b02      	cmp	r3, #2
 800266e:	d146      	bne.n	80026fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002670:	4b33      	ldr	r3, [pc, #204]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002676:	f7ff f869 	bl	800174c <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267e:	f7ff f865 	bl	800174c <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e06d      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002690:	4b29      	ldr	r3, [pc, #164]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f0      	bne.n	800267e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a4:	d108      	bne.n	80026b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026a6:	4b24      	ldr	r3, [pc, #144]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	4921      	ldr	r1, [pc, #132]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026b8:	4b1f      	ldr	r3, [pc, #124]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a19      	ldr	r1, [r3, #32]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	430b      	orrs	r3, r1
 80026ca:	491b      	ldr	r1, [pc, #108]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d0:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d6:	f7ff f839 	bl	800174c <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026de:	f7ff f835 	bl	800174c <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e03d      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026f0:	4b11      	ldr	r3, [pc, #68]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x46a>
 80026fc:	e035      	b.n	800276a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <HAL_RCC_OscConfig+0x4cc>)
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002704:	f7ff f822 	bl	800174c <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270c:	f7ff f81e 	bl	800174c <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e026      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_RCC_OscConfig+0x4c4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x498>
 800272a:	e01e      	b.n	800276a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d107      	bne.n	8002744 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e019      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
 8002738:	40021000 	.word	0x40021000
 800273c:	40007000 	.word	0x40007000
 8002740:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_RCC_OscConfig+0x500>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	429a      	cmp	r2, r3
 8002756:	d106      	bne.n	8002766 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002762:	429a      	cmp	r2, r3
 8002764:	d001      	beq.n	800276a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40021000 	.word	0x40021000

08002778 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0d0      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800278c:	4b6a      	ldr	r3, [pc, #424]	; (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d910      	bls.n	80027bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279a:	4b67      	ldr	r3, [pc, #412]	; (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 0207 	bic.w	r2, r3, #7
 80027a2:	4965      	ldr	r1, [pc, #404]	; (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027aa:	4b63      	ldr	r3, [pc, #396]	; (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0b8      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d020      	beq.n	800280a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027d4:	4b59      	ldr	r3, [pc, #356]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	4a58      	ldr	r2, [pc, #352]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027ec:	4b53      	ldr	r3, [pc, #332]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	4a52      	ldr	r2, [pc, #328]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f8:	4b50      	ldr	r3, [pc, #320]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	494d      	ldr	r1, [pc, #308]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	4313      	orrs	r3, r2
 8002808:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d040      	beq.n	8002898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d107      	bne.n	800282e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281e:	4b47      	ldr	r3, [pc, #284]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d115      	bne.n	8002856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e07f      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d107      	bne.n	8002846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002836:	4b41      	ldr	r3, [pc, #260]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d109      	bne.n	8002856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e073      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002846:	4b3d      	ldr	r3, [pc, #244]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e06b      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002856:	4b39      	ldr	r3, [pc, #228]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f023 0203 	bic.w	r2, r3, #3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4936      	ldr	r1, [pc, #216]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002868:	f7fe ff70 	bl	800174c <HAL_GetTick>
 800286c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286e:	e00a      	b.n	8002886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002870:	f7fe ff6c 	bl	800174c <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	f241 3288 	movw	r2, #5000	; 0x1388
 800287e:	4293      	cmp	r3, r2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e053      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002886:	4b2d      	ldr	r3, [pc, #180]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 020c 	and.w	r2, r3, #12
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	429a      	cmp	r2, r3
 8002896:	d1eb      	bne.n	8002870 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002898:	4b27      	ldr	r3, [pc, #156]	; (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d210      	bcs.n	80028c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a6:	4b24      	ldr	r3, [pc, #144]	; (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 0207 	bic.w	r2, r3, #7
 80028ae:	4922      	ldr	r1, [pc, #136]	; (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b20      	ldr	r3, [pc, #128]	; (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e032      	b.n	800292e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028d4:	4b19      	ldr	r3, [pc, #100]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4916      	ldr	r1, [pc, #88]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028f2:	4b12      	ldr	r3, [pc, #72]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	490e      	ldr	r1, [pc, #56]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002902:	4313      	orrs	r3, r2
 8002904:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002906:	f000 f821 	bl	800294c <HAL_RCC_GetSysClockFreq>
 800290a:	4602      	mov	r2, r0
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	490a      	ldr	r1, [pc, #40]	; (8002940 <HAL_RCC_ClockConfig+0x1c8>)
 8002918:	5ccb      	ldrb	r3, [r1, r3]
 800291a:	fa22 f303 	lsr.w	r3, r2, r3
 800291e:	4a09      	ldr	r2, [pc, #36]	; (8002944 <HAL_RCC_ClockConfig+0x1cc>)
 8002920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002922:	4b09      	ldr	r3, [pc, #36]	; (8002948 <HAL_RCC_ClockConfig+0x1d0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fece 	bl	80016c8 <HAL_InitTick>

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40022000 	.word	0x40022000
 800293c:	40021000 	.word	0x40021000
 8002940:	08003954 	.word	0x08003954
 8002944:	20000000 	.word	0x20000000
 8002948:	20000004 	.word	0x20000004

0800294c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	2300      	movs	r3, #0
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	2300      	movs	r3, #0
 8002960:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002966:	4b1e      	ldr	r3, [pc, #120]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b04      	cmp	r3, #4
 8002974:	d002      	beq.n	800297c <HAL_RCC_GetSysClockFreq+0x30>
 8002976:	2b08      	cmp	r3, #8
 8002978:	d003      	beq.n	8002982 <HAL_RCC_GetSysClockFreq+0x36>
 800297a:	e027      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800297c:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800297e:	613b      	str	r3, [r7, #16]
      break;
 8002980:	e027      	b.n	80029d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	0c9b      	lsrs	r3, r3, #18
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	4a17      	ldr	r2, [pc, #92]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800298c:	5cd3      	ldrb	r3, [r2, r3]
 800298e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d010      	beq.n	80029bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	0c5b      	lsrs	r3, r3, #17
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	4a11      	ldr	r2, [pc, #68]	; (80029ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80029a6:	5cd3      	ldrb	r3, [r2, r3]
 80029a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a0d      	ldr	r2, [pc, #52]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80029ae:	fb03 f202 	mul.w	r2, r3, r2
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	e004      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a0c      	ldr	r2, [pc, #48]	; (80029f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029c0:	fb02 f303 	mul.w	r3, r2, r3
 80029c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	613b      	str	r3, [r7, #16]
      break;
 80029ca:	e002      	b.n	80029d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029cc:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80029ce:	613b      	str	r3, [r7, #16]
      break;
 80029d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029d2:	693b      	ldr	r3, [r7, #16]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	371c      	adds	r7, #28
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000
 80029e4:	007a1200 	.word	0x007a1200
 80029e8:	0800396c 	.word	0x0800396c
 80029ec:	0800397c 	.word	0x0800397c
 80029f0:	003d0900 	.word	0x003d0900

080029f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f8:	4b02      	ldr	r3, [pc, #8]	; (8002a04 <HAL_RCC_GetHCLKFreq+0x10>)
 80029fa:	681b      	ldr	r3, [r3, #0]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr
 8002a04:	20000000 	.word	0x20000000

08002a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a0c:	f7ff fff2 	bl	80029f4 <HAL_RCC_GetHCLKFreq>
 8002a10:	4602      	mov	r2, r0
 8002a12:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	0a1b      	lsrs	r3, r3, #8
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	4903      	ldr	r1, [pc, #12]	; (8002a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a1e:	5ccb      	ldrb	r3, [r1, r3]
 8002a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	08003964 	.word	0x08003964

08002a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a34:	f7ff ffde 	bl	80029f4 <HAL_RCC_GetHCLKFreq>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	0adb      	lsrs	r3, r3, #11
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	4903      	ldr	r1, [pc, #12]	; (8002a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a46:	5ccb      	ldrb	r3, [r1, r3]
 8002a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40021000 	.word	0x40021000
 8002a54:	08003964 	.word	0x08003964

08002a58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a60:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <RCC_Delay+0x34>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0a      	ldr	r2, [pc, #40]	; (8002a90 <RCC_Delay+0x38>)
 8002a66:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6a:	0a5b      	lsrs	r3, r3, #9
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	fb02 f303 	mul.w	r3, r2, r3
 8002a72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a74:	bf00      	nop
  }
  while (Delay --);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1e5a      	subs	r2, r3, #1
 8002a7a:	60fa      	str	r2, [r7, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1f9      	bne.n	8002a74 <RCC_Delay+0x1c>
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	20000000 	.word	0x20000000
 8002a90:	10624dd3 	.word	0x10624dd3

08002a94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e042      	b.n	8002b2c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fe fcd2 	bl	8001464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2224      	movs	r2, #36	; 0x24
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ad6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fdc3 	bl	8003664 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002aec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695a      	ldr	r2, [r3, #20]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002afc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08c      	sub	sp, #48	; 0x30
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b20      	cmp	r3, #32
 8002b4c:	d156      	bne.n	8002bfc <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d002      	beq.n	8002b5a <HAL_UART_Transmit_DMA+0x26>
 8002b54:	88fb      	ldrh	r3, [r7, #6]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e04f      	b.n	8002bfe <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	88fa      	ldrh	r2, [r7, #6]
 8002b68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	88fa      	ldrh	r2, [r7, #6]
 8002b6e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2221      	movs	r2, #33	; 0x21
 8002b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b82:	4a21      	ldr	r2, [pc, #132]	; (8002c08 <HAL_UART_Transmit_DMA+0xd4>)
 8002b84:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8a:	4a20      	ldr	r2, [pc, #128]	; (8002c0c <HAL_UART_Transmit_DMA+0xd8>)
 8002b8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b92:	4a1f      	ldr	r2, [pc, #124]	; (8002c10 <HAL_UART_Transmit_DMA+0xdc>)
 8002b94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8002b9e:	f107 0308 	add.w	r3, r7, #8
 8002ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002baa:	6819      	ldr	r1, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	f7fe ff5f 	bl	8001a78 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bc2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3314      	adds	r3, #20
 8002bca:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	e853 3f00 	ldrex	r3, [r3]
 8002bd2:	617b      	str	r3, [r7, #20]
   return(result);
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bda:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	3314      	adds	r3, #20
 8002be2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002be4:	627a      	str	r2, [r7, #36]	; 0x24
 8002be6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be8:	6a39      	ldr	r1, [r7, #32]
 8002bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bec:	e841 2300 	strex	r3, r2, [r1]
 8002bf0:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1e5      	bne.n	8002bc4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	e000      	b.n	8002bfe <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002bfc:	2302      	movs	r3, #2
  }
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3730      	adds	r7, #48	; 0x30
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	08003197 	.word	0x08003197
 8002c0c:	08003231 	.word	0x08003231
 8002c10:	0800324d 	.word	0x0800324d

08002c14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b0ba      	sub	sp, #232	; 0xe8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002c52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10f      	bne.n	8002c7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c5e:	f003 0320 	and.w	r3, r3, #32
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d009      	beq.n	8002c7a <HAL_UART_IRQHandler+0x66>
 8002c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c6a:	f003 0320 	and.w	r3, r3, #32
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fc38 	bl	80034e8 <UART_Receive_IT>
      return;
 8002c78:	e25b      	b.n	8003132 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 80de 	beq.w	8002e40 <HAL_UART_IRQHandler+0x22c>
 8002c84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d106      	bne.n	8002c9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80d1 	beq.w	8002e40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00b      	beq.n	8002cc2 <HAL_UART_IRQHandler+0xae>
 8002caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d005      	beq.n	8002cc2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	f043 0201 	orr.w	r2, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00b      	beq.n	8002ce6 <HAL_UART_IRQHandler+0xd2>
 8002cce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d005      	beq.n	8002ce6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	f043 0202 	orr.w	r2, r3, #2
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00b      	beq.n	8002d0a <HAL_UART_IRQHandler+0xf6>
 8002cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d005      	beq.n	8002d0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	f043 0204 	orr.w	r2, r3, #4
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d011      	beq.n	8002d3a <HAL_UART_IRQHandler+0x126>
 8002d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d105      	bne.n	8002d2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	f043 0208 	orr.w	r2, r3, #8
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 81f2 	beq.w	8003128 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d008      	beq.n	8002d62 <HAL_UART_IRQHandler+0x14e>
 8002d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d54:	f003 0320 	and.w	r3, r3, #32
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d002      	beq.n	8002d62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 fbc3 	bl	80034e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	bf14      	ite	ne
 8002d70:	2301      	movne	r3, #1
 8002d72:	2300      	moveq	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d103      	bne.n	8002d8e <HAL_UART_IRQHandler+0x17a>
 8002d86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d04f      	beq.n	8002e2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 facd 	bl	800332e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d041      	beq.n	8002e26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	3314      	adds	r3, #20
 8002da8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002db0:	e853 3f00 	ldrex	r3, [r3]
 8002db4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002db8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	3314      	adds	r3, #20
 8002dca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002dce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002dd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002dda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002dde:	e841 2300 	strex	r3, r2, [r1]
 8002de2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002de6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1d9      	bne.n	8002da2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d013      	beq.n	8002e1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfa:	4a7e      	ldr	r2, [pc, #504]	; (8002ff4 <HAL_UART_IRQHandler+0x3e0>)
 8002dfc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fe fed4 	bl	8001bb0 <HAL_DMA_Abort_IT>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d016      	beq.n	8002e3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e18:	4610      	mov	r0, r2
 8002e1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e1c:	e00e      	b.n	8002e3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f9a5 	bl	800316e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e24:	e00a      	b.n	8002e3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f9a1 	bl	800316e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e2c:	e006      	b.n	8002e3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f99d 	bl	800316e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002e3a:	e175      	b.n	8003128 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e3c:	bf00      	nop
    return;
 8002e3e:	e173      	b.n	8003128 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	f040 814f 	bne.w	80030e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e4e:	f003 0310 	and.w	r3, r3, #16
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 8148 	beq.w	80030e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 8141 	beq.w	80030e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 80b6 	beq.w	8002ff8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 8145 	beq.w	800312c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ea6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	f080 813e 	bcs.w	800312c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002eb6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	2b20      	cmp	r3, #32
 8002ec0:	f000 8088 	beq.w	8002fd4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	330c      	adds	r3, #12
 8002eca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ece:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ed2:	e853 3f00 	ldrex	r3, [r3]
 8002ed6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002eda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ede:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ee2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	330c      	adds	r3, #12
 8002eec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002ef0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ef4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002efc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f00:	e841 2300 	strex	r3, r2, [r1]
 8002f04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1d9      	bne.n	8002ec4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	3314      	adds	r3, #20
 8002f16:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f1a:	e853 3f00 	ldrex	r3, [r3]
 8002f1e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f22:	f023 0301 	bic.w	r3, r3, #1
 8002f26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3314      	adds	r3, #20
 8002f30:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f34:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f38:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f40:	e841 2300 	strex	r3, r2, [r1]
 8002f44:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1e1      	bne.n	8002f10 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	3314      	adds	r3, #20
 8002f52:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f56:	e853 3f00 	ldrex	r3, [r3]
 8002f5a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	3314      	adds	r3, #20
 8002f6c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f70:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f74:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f76:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f78:	e841 2300 	strex	r3, r2, [r1]
 8002f7c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1e3      	bne.n	8002f4c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	330c      	adds	r3, #12
 8002f98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f9c:	e853 3f00 	ldrex	r3, [r3]
 8002fa0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fa4:	f023 0310 	bic.w	r3, r3, #16
 8002fa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	330c      	adds	r3, #12
 8002fb2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002fb6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002fb8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002fbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fbe:	e841 2300 	strex	r3, r2, [r1]
 8002fc2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1e3      	bne.n	8002f92 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe fdb2 	bl	8001b38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	4619      	mov	r1, r3
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f8c8 	bl	8003180 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ff0:	e09c      	b.n	800312c <HAL_UART_IRQHandler+0x518>
 8002ff2:	bf00      	nop
 8002ff4:	080033f3 	.word	0x080033f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003000:	b29b      	uxth	r3, r3
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 808e 	beq.w	8003130 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003014:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 8089 	beq.w	8003130 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	330c      	adds	r3, #12
 8003024:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003028:	e853 3f00 	ldrex	r3, [r3]
 800302c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800302e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003030:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003034:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	330c      	adds	r3, #12
 800303e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003042:	647a      	str	r2, [r7, #68]	; 0x44
 8003044:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003046:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003048:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800304a:	e841 2300 	strex	r3, r2, [r1]
 800304e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1e3      	bne.n	800301e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	3314      	adds	r3, #20
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	e853 3f00 	ldrex	r3, [r3]
 8003064:	623b      	str	r3, [r7, #32]
   return(result);
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	f023 0301 	bic.w	r3, r3, #1
 800306c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3314      	adds	r3, #20
 8003076:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800307a:	633a      	str	r2, [r7, #48]	; 0x30
 800307c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003082:	e841 2300 	strex	r3, r2, [r1]
 8003086:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1e3      	bne.n	8003056 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2220      	movs	r2, #32
 8003092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	330c      	adds	r3, #12
 80030a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	e853 3f00 	ldrex	r3, [r3]
 80030aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0310 	bic.w	r3, r3, #16
 80030b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	330c      	adds	r3, #12
 80030bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80030c0:	61fa      	str	r2, [r7, #28]
 80030c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c4:	69b9      	ldr	r1, [r7, #24]
 80030c6:	69fa      	ldr	r2, [r7, #28]
 80030c8:	e841 2300 	strex	r3, r2, [r1]
 80030cc:	617b      	str	r3, [r7, #20]
   return(result);
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1e3      	bne.n	800309c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030de:	4619      	mov	r1, r3
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f84d 	bl	8003180 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030e6:	e023      	b.n	8003130 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d009      	beq.n	8003108 <HAL_UART_IRQHandler+0x4f4>
 80030f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f98a 	bl	800341a <UART_Transmit_IT>
    return;
 8003106:	e014      	b.n	8003132 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800310c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00e      	beq.n	8003132 <HAL_UART_IRQHandler+0x51e>
 8003114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311c:	2b00      	cmp	r3, #0
 800311e:	d008      	beq.n	8003132 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f9c9 	bl	80034b8 <UART_EndTransmit_IT>
    return;
 8003126:	e004      	b.n	8003132 <HAL_UART_IRQHandler+0x51e>
    return;
 8003128:	bf00      	nop
 800312a:	e002      	b.n	8003132 <HAL_UART_IRQHandler+0x51e>
      return;
 800312c:	bf00      	nop
 800312e:	e000      	b.n	8003132 <HAL_UART_IRQHandler+0x51e>
      return;
 8003130:	bf00      	nop
  }
}
 8003132:	37e8      	adds	r7, #232	; 0xe8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr

0800314a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr

0800315c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr

0800316e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr

08003180 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr

08003196 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b090      	sub	sp, #64	; 0x40
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d137      	bne.n	8003222 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80031b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b4:	2200      	movs	r2, #0
 80031b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80031b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3314      	adds	r3, #20
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	e853 3f00 	ldrex	r3, [r3]
 80031c6:	623b      	str	r3, [r7, #32]
   return(result);
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80031d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	3314      	adds	r3, #20
 80031d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031d8:	633a      	str	r2, [r7, #48]	; 0x30
 80031da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031e0:	e841 2300 	strex	r3, r2, [r1]
 80031e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1e5      	bne.n	80031b8 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80031ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	330c      	adds	r3, #12
 80031f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	e853 3f00 	ldrex	r3, [r3]
 80031fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003202:	637b      	str	r3, [r7, #52]	; 0x34
 8003204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	330c      	adds	r3, #12
 800320a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800320c:	61fa      	str	r2, [r7, #28]
 800320e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003210:	69b9      	ldr	r1, [r7, #24]
 8003212:	69fa      	ldr	r2, [r7, #28]
 8003214:	e841 2300 	strex	r3, r2, [r1]
 8003218:	617b      	str	r3, [r7, #20]
   return(result);
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e5      	bne.n	80031ec <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003220:	e002      	b.n	8003228 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003222:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003224:	f7ff ff88 	bl	8003138 <HAL_UART_TxCpltCallback>
}
 8003228:	bf00      	nop
 800322a:	3740      	adds	r7, #64	; 0x40
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f7ff ff83 	bl	800314a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003244:	bf00      	nop
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003268:	2b00      	cmp	r3, #0
 800326a:	bf14      	ite	ne
 800326c:	2301      	movne	r3, #1
 800326e:	2300      	moveq	r3, #0
 8003270:	b2db      	uxtb	r3, r3
 8003272:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b21      	cmp	r3, #33	; 0x21
 800327e:	d108      	bne.n	8003292 <UART_DMAError+0x46>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2200      	movs	r2, #0
 800328a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800328c:	68b8      	ldr	r0, [r7, #8]
 800328e:	f000 f827 	bl	80032e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329c:	2b00      	cmp	r3, #0
 800329e:	bf14      	ite	ne
 80032a0:	2301      	movne	r3, #1
 80032a2:	2300      	moveq	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b22      	cmp	r3, #34	; 0x22
 80032b2:	d108      	bne.n	80032c6 <UART_DMAError+0x7a>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d005      	beq.n	80032c6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2200      	movs	r2, #0
 80032be:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80032c0:	68b8      	ldr	r0, [r7, #8]
 80032c2:	f000 f834 	bl	800332e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	f043 0210 	orr.w	r2, r3, #16
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032d2:	68b8      	ldr	r0, [r7, #8]
 80032d4:	f7ff ff4b 	bl	800316e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032d8:	bf00      	nop
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b089      	sub	sp, #36	; 0x24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	330c      	adds	r3, #12
 80032ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	e853 3f00 	ldrex	r3, [r3]
 80032f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80032fe:	61fb      	str	r3, [r7, #28]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	330c      	adds	r3, #12
 8003306:	69fa      	ldr	r2, [r7, #28]
 8003308:	61ba      	str	r2, [r7, #24]
 800330a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330c:	6979      	ldr	r1, [r7, #20]
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	e841 2300 	strex	r3, r2, [r1]
 8003314:	613b      	str	r3, [r7, #16]
   return(result);
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1e5      	bne.n	80032e8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003324:	bf00      	nop
 8003326:	3724      	adds	r7, #36	; 0x24
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr

0800332e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800332e:	b480      	push	{r7}
 8003330:	b095      	sub	sp, #84	; 0x54
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	330c      	adds	r3, #12
 800333c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003340:	e853 3f00 	ldrex	r3, [r3]
 8003344:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003348:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800334c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	330c      	adds	r3, #12
 8003354:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003356:	643a      	str	r2, [r7, #64]	; 0x40
 8003358:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800335c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800335e:	e841 2300 	strex	r3, r2, [r1]
 8003362:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1e5      	bne.n	8003336 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	3314      	adds	r3, #20
 8003370:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	e853 3f00 	ldrex	r3, [r3]
 8003378:	61fb      	str	r3, [r7, #28]
   return(result);
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	f023 0301 	bic.w	r3, r3, #1
 8003380:	64bb      	str	r3, [r7, #72]	; 0x48
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3314      	adds	r3, #20
 8003388:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800338a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800338c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003392:	e841 2300 	strex	r3, r2, [r1]
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1e5      	bne.n	800336a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d119      	bne.n	80033da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	330c      	adds	r3, #12
 80033ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	e853 3f00 	ldrex	r3, [r3]
 80033b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f023 0310 	bic.w	r3, r3, #16
 80033bc:	647b      	str	r3, [r7, #68]	; 0x44
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	330c      	adds	r3, #12
 80033c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033c6:	61ba      	str	r2, [r7, #24]
 80033c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ca:	6979      	ldr	r1, [r7, #20]
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	e841 2300 	strex	r3, r2, [r1]
 80033d2:	613b      	str	r3, [r7, #16]
   return(result);
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1e5      	bne.n	80033a6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2220      	movs	r2, #32
 80033de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80033e8:	bf00      	nop
 80033ea:	3754      	adds	r7, #84	; 0x54
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr

080033f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b084      	sub	sp, #16
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f7ff feae 	bl	800316e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003412:	bf00      	nop
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800341a:	b480      	push	{r7}
 800341c:	b085      	sub	sp, #20
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b21      	cmp	r3, #33	; 0x21
 800342c:	d13e      	bne.n	80034ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003436:	d114      	bne.n	8003462 <UART_Transmit_IT+0x48>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d110      	bne.n	8003462 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003454:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	1c9a      	adds	r2, r3, #2
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	621a      	str	r2, [r3, #32]
 8003460:	e008      	b.n	8003474 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	1c59      	adds	r1, r3, #1
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6211      	str	r1, [r2, #32]
 800346c:	781a      	ldrb	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003478:	b29b      	uxth	r3, r3
 800347a:	3b01      	subs	r3, #1
 800347c:	b29b      	uxth	r3, r3
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	4619      	mov	r1, r3
 8003482:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10f      	bne.n	80034a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003496:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	e000      	b.n	80034ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034ac:	2302      	movs	r3, #2
  }
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff fe2d 	bl	8003138 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08c      	sub	sp, #48	; 0x30
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b22      	cmp	r3, #34	; 0x22
 80034fa:	f040 80ae 	bne.w	800365a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003506:	d117      	bne.n	8003538 <UART_Receive_IT+0x50>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d113      	bne.n	8003538 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003510:	2300      	movs	r3, #0
 8003512:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	b29b      	uxth	r3, r3
 8003522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003526:	b29a      	uxth	r2, r3
 8003528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003530:	1c9a      	adds	r2, r3, #2
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	629a      	str	r2, [r3, #40]	; 0x28
 8003536:	e026      	b.n	8003586 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800353e:	2300      	movs	r3, #0
 8003540:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800354a:	d007      	beq.n	800355c <UART_Receive_IT+0x74>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10a      	bne.n	800356a <UART_Receive_IT+0x82>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d106      	bne.n	800356a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	b2da      	uxtb	r2, r3
 8003564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003566:	701a      	strb	r2, [r3, #0]
 8003568:	e008      	b.n	800357c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003576:	b2da      	uxtb	r2, r3
 8003578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29b      	uxth	r3, r3
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	4619      	mov	r1, r3
 8003594:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003596:	2b00      	cmp	r3, #0
 8003598:	d15d      	bne.n	8003656 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0220 	bic.w	r2, r2, #32
 80035a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0201 	bic.w	r2, r2, #1
 80035c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d135      	bne.n	800364c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	330c      	adds	r3, #12
 80035ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	e853 3f00 	ldrex	r3, [r3]
 80035f4:	613b      	str	r3, [r7, #16]
   return(result);
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f023 0310 	bic.w	r3, r3, #16
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	330c      	adds	r3, #12
 8003604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003606:	623a      	str	r2, [r7, #32]
 8003608:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360a:	69f9      	ldr	r1, [r7, #28]
 800360c:	6a3a      	ldr	r2, [r7, #32]
 800360e:	e841 2300 	strex	r3, r2, [r1]
 8003612:	61bb      	str	r3, [r7, #24]
   return(result);
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1e5      	bne.n	80035e6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	2b10      	cmp	r3, #16
 8003626:	d10a      	bne.n	800363e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003628:	2300      	movs	r3, #0
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003642:	4619      	mov	r1, r3
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7ff fd9b 	bl	8003180 <HAL_UARTEx_RxEventCallback>
 800364a:	e002      	b.n	8003652 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff fd85 	bl	800315c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	e002      	b.n	800365c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003656:	2300      	movs	r3, #0
 8003658:	e000      	b.n	800365c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800365a:	2302      	movs	r3, #2
  }
}
 800365c:	4618      	mov	r0, r3
 800365e:	3730      	adds	r7, #48	; 0x30
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	4313      	orrs	r3, r2
 8003692:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800369e:	f023 030c 	bic.w	r3, r3, #12
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6812      	ldr	r2, [r2, #0]
 80036a6:	68b9      	ldr	r1, [r7, #8]
 80036a8:	430b      	orrs	r3, r1
 80036aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699a      	ldr	r2, [r3, #24]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a2c      	ldr	r2, [pc, #176]	; (8003778 <UART_SetConfig+0x114>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d103      	bne.n	80036d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036cc:	f7ff f9b0 	bl	8002a30 <HAL_RCC_GetPCLK2Freq>
 80036d0:	60f8      	str	r0, [r7, #12]
 80036d2:	e002      	b.n	80036da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036d4:	f7ff f998 	bl	8002a08 <HAL_RCC_GetPCLK1Freq>
 80036d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	009a      	lsls	r2, r3, #2
 80036e4:	441a      	add	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f0:	4a22      	ldr	r2, [pc, #136]	; (800377c <UART_SetConfig+0x118>)
 80036f2:	fba2 2303 	umull	r2, r3, r2, r3
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	0119      	lsls	r1, r3, #4
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4613      	mov	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	009a      	lsls	r2, r3, #2
 8003704:	441a      	add	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003710:	4b1a      	ldr	r3, [pc, #104]	; (800377c <UART_SetConfig+0x118>)
 8003712:	fba3 0302 	umull	r0, r3, r3, r2
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	2064      	movs	r0, #100	; 0x64
 800371a:	fb00 f303 	mul.w	r3, r0, r3
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	3332      	adds	r3, #50	; 0x32
 8003724:	4a15      	ldr	r2, [pc, #84]	; (800377c <UART_SetConfig+0x118>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003730:	4419      	add	r1, r3
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	4613      	mov	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	009a      	lsls	r2, r3, #2
 800373c:	441a      	add	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	fbb2 f2f3 	udiv	r2, r2, r3
 8003748:	4b0c      	ldr	r3, [pc, #48]	; (800377c <UART_SetConfig+0x118>)
 800374a:	fba3 0302 	umull	r0, r3, r3, r2
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	2064      	movs	r0, #100	; 0x64
 8003752:	fb00 f303 	mul.w	r3, r0, r3
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	3332      	adds	r3, #50	; 0x32
 800375c:	4a07      	ldr	r2, [pc, #28]	; (800377c <UART_SetConfig+0x118>)
 800375e:	fba2 2303 	umull	r2, r3, r2, r3
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	f003 020f 	and.w	r2, r3, #15
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	440a      	add	r2, r1
 800376e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003770:	bf00      	nop
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40013800 	.word	0x40013800
 800377c:	51eb851f 	.word	0x51eb851f

08003780 <__libc_init_array>:
 8003780:	b570      	push	{r4, r5, r6, lr}
 8003782:	2600      	movs	r6, #0
 8003784:	4d0c      	ldr	r5, [pc, #48]	; (80037b8 <__libc_init_array+0x38>)
 8003786:	4c0d      	ldr	r4, [pc, #52]	; (80037bc <__libc_init_array+0x3c>)
 8003788:	1b64      	subs	r4, r4, r5
 800378a:	10a4      	asrs	r4, r4, #2
 800378c:	42a6      	cmp	r6, r4
 800378e:	d109      	bne.n	80037a4 <__libc_init_array+0x24>
 8003790:	f000 f822 	bl	80037d8 <_init>
 8003794:	2600      	movs	r6, #0
 8003796:	4d0a      	ldr	r5, [pc, #40]	; (80037c0 <__libc_init_array+0x40>)
 8003798:	4c0a      	ldr	r4, [pc, #40]	; (80037c4 <__libc_init_array+0x44>)
 800379a:	1b64      	subs	r4, r4, r5
 800379c:	10a4      	asrs	r4, r4, #2
 800379e:	42a6      	cmp	r6, r4
 80037a0:	d105      	bne.n	80037ae <__libc_init_array+0x2e>
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
 80037a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a8:	4798      	blx	r3
 80037aa:	3601      	adds	r6, #1
 80037ac:	e7ee      	b.n	800378c <__libc_init_array+0xc>
 80037ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80037b2:	4798      	blx	r3
 80037b4:	3601      	adds	r6, #1
 80037b6:	e7f2      	b.n	800379e <__libc_init_array+0x1e>
 80037b8:	08003980 	.word	0x08003980
 80037bc:	08003980 	.word	0x08003980
 80037c0:	08003980 	.word	0x08003980
 80037c4:	08003984 	.word	0x08003984

080037c8 <memset>:
 80037c8:	4603      	mov	r3, r0
 80037ca:	4402      	add	r2, r0
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d100      	bne.n	80037d2 <memset+0xa>
 80037d0:	4770      	bx	lr
 80037d2:	f803 1b01 	strb.w	r1, [r3], #1
 80037d6:	e7f9      	b.n	80037cc <memset+0x4>

080037d8 <_init>:
 80037d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037da:	bf00      	nop
 80037dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037de:	bc08      	pop	{r3}
 80037e0:	469e      	mov	lr, r3
 80037e2:	4770      	bx	lr

080037e4 <_fini>:
 80037e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e6:	bf00      	nop
 80037e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ea:	bc08      	pop	{r3}
 80037ec:	469e      	mov	lr, r3
 80037ee:	4770      	bx	lr
