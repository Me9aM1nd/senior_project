
Senior_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059c4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08005ad4  08005ad4  00015ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c98  08005c98  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005c98  08005c98  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c98  08005c98  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c98  08005c98  00015c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c9c  08005c9c  00015c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005ca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  20000070  08005d10  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08005d10  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db1f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021fd  00000000  00000000  0002dbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  0002fdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  000309c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001939b  00000000  00000000  00031518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f493  00000000  00000000  0004a8b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087806  00000000  00000000  00059d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e154c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000345c  00000000  00000000  000e159c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08005abc 	.word	0x08005abc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08005abc 	.word	0x08005abc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <dev_trace_send_byte_int>:

//------------------------------------------------------------------------------
//         Local functions
//------------------------------------------------------------------------------
void dev_trace_send_byte_int(UINT8 b)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
		UINT8 i; 

		for (i=0; i<8; i++)
 8000936:	2300      	movs	r3, #0
 8000938:	73fb      	strb	r3, [r7, #15]
 800093a:	e015      	b.n	8000968 <dev_trace_send_byte_int+0x3c>
		{
				dev_gpio_set(&trace_spi[TRACE_SPI_MOSI], b & 0x80); 
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000942:	b2db      	uxtb	r3, r3
 8000944:	4619      	mov	r1, r3
 8000946:	480c      	ldr	r0, [pc, #48]	; (8000978 <dev_trace_send_byte_int+0x4c>)
 8000948:	f000 ffce 	bl	80018e8 <dev_gpio_set>
//				dev_gpio_set(&trace_spi[TRACE_SPI_MOSI], b & 0x80); 
				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 1); 
 800094c:	2101      	movs	r1, #1
 800094e:	480b      	ldr	r0, [pc, #44]	; (800097c <dev_trace_send_byte_int+0x50>)
 8000950:	f000 ffca 	bl	80018e8 <dev_gpio_set>
//				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 1); 
				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 0); 
 8000954:	2100      	movs	r1, #0
 8000956:	4809      	ldr	r0, [pc, #36]	; (800097c <dev_trace_send_byte_int+0x50>)
 8000958:	f000 ffc6 	bl	80018e8 <dev_gpio_set>
//				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 0); 
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_SCK].port, trace_spi[TRACE_SPI_SCK].pin, b & 0x80);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 1);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
			
				b = b << 1;
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	71fb      	strb	r3, [r7, #7]
		for (i=0; i<8; i++)
 8000962:	7bfb      	ldrb	r3, [r7, #15]
 8000964:	3301      	adds	r3, #1
 8000966:	73fb      	strb	r3, [r7, #15]
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	2b07      	cmp	r3, #7
 800096c:	d9e6      	bls.n	800093c <dev_trace_send_byte_int+0x10>
		}
}
 800096e:	bf00      	nop
 8000970:	bf00      	nop
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000090 	.word	0x20000090
 800097c:	200000b0 	.word	0x200000b0

08000980 <dev_trace_init>:

//------------------------------------------------------------------------------
//         Global functions
//------------------------------------------------------------------------------
UINT8 dev_trace_init(dev_trace_init_t* init)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
		UINT8 ret;


		ret = dev_gpio_init_simp(&trace_spi[TRACE_SPI_MOSI], init->mosi.port, init->mosi.pin, GPIO_MODE_OUTPUT_PP);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	7899      	ldrb	r1, [r3, #2]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	881a      	ldrh	r2, [r3, #0]
 8000990:	2301      	movs	r3, #1
 8000992:	4827      	ldr	r0, [pc, #156]	; (8000a30 <dev_trace_init+0xb0>)
 8000994:	f000 ff78 	bl	8001888 <dev_gpio_init_simp>
 8000998:	4603      	mov	r3, r0
 800099a:	73fb      	strb	r3, [r7, #15]
		if (ret) return TRACE_EERROR(ret);
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d007      	beq.n	80009b2 <dev_trace_init+0x32>
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	224e      	movs	r2, #78	; 0x4e
 80009a6:	4923      	ldr	r1, [pc, #140]	; (8000a34 <dev_trace_init+0xb4>)
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 f873 	bl	8000a94 <dev_trace_get_error>
 80009ae:	4603      	mov	r3, r0
 80009b0:	e039      	b.n	8000a26 <dev_trace_init+0xa6>
		ret = dev_gpio_init_simp(&trace_spi[TRACE_SPI_SCK], init->sck.port, init->sck.pin, GPIO_MODE_OUTPUT_PP);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	7999      	ldrb	r1, [r3, #6]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	889a      	ldrh	r2, [r3, #4]
 80009ba:	2301      	movs	r3, #1
 80009bc:	481e      	ldr	r0, [pc, #120]	; (8000a38 <dev_trace_init+0xb8>)
 80009be:	f000 ff63 	bl	8001888 <dev_gpio_init_simp>
 80009c2:	4603      	mov	r3, r0
 80009c4:	73fb      	strb	r3, [r7, #15]
		if (ret) return TRACE_EERROR(ret);
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d007      	beq.n	80009dc <dev_trace_init+0x5c>
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	2250      	movs	r2, #80	; 0x50
 80009d0:	4918      	ldr	r1, [pc, #96]	; (8000a34 <dev_trace_init+0xb4>)
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f85e 	bl	8000a94 <dev_trace_get_error>
 80009d8:	4603      	mov	r3, r0
 80009da:	e024      	b.n	8000a26 <dev_trace_init+0xa6>
		ret = dev_gpio_init_simp(&trace_spi[TRACE_SPI_NSS], init->nss.port, init->nss.pin, GPIO_MODE_OUTPUT_PP);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	7a99      	ldrb	r1, [r3, #10]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	891a      	ldrh	r2, [r3, #8]
 80009e4:	2301      	movs	r3, #1
 80009e6:	4815      	ldr	r0, [pc, #84]	; (8000a3c <dev_trace_init+0xbc>)
 80009e8:	f000 ff4e 	bl	8001888 <dev_gpio_init_simp>
 80009ec:	4603      	mov	r3, r0
 80009ee:	73fb      	strb	r3, [r7, #15]
		if (ret) return TRACE_EERROR(ret);
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d007      	beq.n	8000a06 <dev_trace_init+0x86>
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	2252      	movs	r2, #82	; 0x52
 80009fa:	490e      	ldr	r1, [pc, #56]	; (8000a34 <dev_trace_init+0xb4>)
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 f849 	bl	8000a94 <dev_trace_get_error>
 8000a02:	4603      	mov	r3, r0
 8000a04:	e00f      	b.n	8000a26 <dev_trace_init+0xa6>
//  HAL_GPIO_Init(trace_spi[TRACE_SPI_NSS].port, &GPIO_InitStruct);	
	
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_NSS].port, trace_spi[TRACE_SPI_NSS].pin, 1);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_SCK].port, trace_spi[TRACE_SPI_SCK].pin, 0);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
		dev_gpio_set(&trace_spi[TRACE_SPI_NSS], 1);
 8000a06:	2101      	movs	r1, #1
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <dev_trace_init+0xbc>)
 8000a0a:	f000 ff6d 	bl	80018e8 <dev_gpio_set>
		dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 0);
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4809      	ldr	r0, [pc, #36]	; (8000a38 <dev_trace_init+0xb8>)
 8000a12:	f000 ff69 	bl	80018e8 <dev_gpio_set>
		dev_gpio_set(&trace_spi[TRACE_SPI_MOSI], 0);
 8000a16:	2100      	movs	r1, #0
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <dev_trace_init+0xb0>)
 8000a1a:	f000 ff65 	bl	80018e8 <dev_gpio_set>

		trace_ready = 1;	
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <dev_trace_init+0xc0>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	701a      	strb	r2, [r3, #0]

		return RET_OK;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000090 	.word	0x20000090
 8000a34:	08005ad4 	.word	0x08005ad4
 8000a38:	200000b0 	.word	0x200000b0
 8000a3c:	200000d0 	.word	0x200000d0
 8000a40:	2000008c 	.word	0x2000008c

08000a44 <dev_trace_send_byte>:

// Send one Byte 
void dev_trace_send_byte(UINT8 b)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
	if (trace_ready == 0) return;
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <dev_trace_send_byte+0x48>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d016      	beq.n	8000a84 <dev_trace_send_byte+0x40>

//		dev_gpio_set(&trace_spi[TRACE_SPI_NSS], 0);
		HAL_GPIO_WritePin(trace_spi[TRACE_SPI_NSS].port, trace_spi[TRACE_SPI_NSS].pin, 0);
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <dev_trace_send_byte+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <dev_trace_send_byte+0x4c>)
 8000a5c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 8000a60:	2200      	movs	r2, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f002 fbd2 	bl	800320c <HAL_GPIO_WritePin>
		dev_trace_send_byte_int(b);
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff ff5e 	bl	800092c <dev_trace_send_byte_int>
//		dev_gpio_set(&trace_spi[TRACE_SPI_NSS], 1);
	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_NSS].port, trace_spi[TRACE_SPI_NSS].pin, 1);
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <dev_trace_send_byte+0x4c>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	4a06      	ldr	r2, [pc, #24]	; (8000a90 <dev_trace_send_byte+0x4c>)
 8000a76:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f002 fbc5 	bl	800320c <HAL_GPIO_WritePin>
 8000a82:	e000      	b.n	8000a86 <dev_trace_send_byte+0x42>
	if (trace_ready == 0) return;
 8000a84:	bf00      	nop
//		HAL_GPIO_WritePin(trace_spi[TRACE_SPI_SCK].port, trace_spi[TRACE_SPI_SCK].pin, 0);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
}
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	2000008c 	.word	0x2000008c
 8000a90:	20000090 	.word	0x20000090

08000a94 <dev_trace_get_error>:
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
}

// Get Trace error
uint8_t dev_trace_get_error(uint8_t error_value, char* file_name, uint32_t file_line)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
 8000aa0:	73fb      	strb	r3, [r7, #15]
		if (error_value == RET_OK) return RET_OK;
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d101      	bne.n	8000aac <dev_trace_get_error+0x18>
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	e006      	b.n	8000aba <dev_trace_get_error+0x26>
	
		debug_printf("EE> %d at %s:%d\n\r", error_value, file_name, file_line); 
 8000aac:	7bf9      	ldrb	r1, [r7, #15]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	68ba      	ldr	r2, [r7, #8]
 8000ab2:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <dev_trace_get_error+0x30>)
 8000ab4:	f000 f976 	bl	8000da4 <debug_printf>

		return error_value;
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	08005aec 	.word	0x08005aec

08000ac8 <dev_trace_generate_error>:

// Generate Trace error
uint8_t dev_trace_generate_error(char* error_name, char* file_name, uint32_t file_line)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af02      	add	r7, sp, #8
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
		trace_error_id++;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <dev_trace_generate_error+0x54>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <dev_trace_generate_error+0x54>)
 8000ade:	701a      	strb	r2, [r3, #0]
		if (trace_error_id < 100) trace_error_id = 100;
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <dev_trace_generate_error+0x54>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b63      	cmp	r3, #99	; 0x63
 8000ae6:	d802      	bhi.n	8000aee <dev_trace_generate_error+0x26>
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <dev_trace_generate_error+0x54>)
 8000aea:	2264      	movs	r2, #100	; 0x64
 8000aec:	701a      	strb	r2, [r3, #0]
		if (trace_error_id >= 200) trace_error_id = 100;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <dev_trace_generate_error+0x54>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2bc7      	cmp	r3, #199	; 0xc7
 8000af4:	d902      	bls.n	8000afc <dev_trace_generate_error+0x34>
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <dev_trace_generate_error+0x54>)
 8000af8:	2264      	movs	r2, #100	; 0x64
 8000afa:	701a      	strb	r2, [r3, #0]

		debug_printf("GE> %d %s at %s:%d\n\r", trace_error_id, error_name, file_name, file_line);
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <dev_trace_generate_error+0x54>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4619      	mov	r1, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <dev_trace_generate_error+0x58>)
 8000b0c:	f000 f94a 	bl	8000da4 <debug_printf>

		return trace_error_id;
 8000b10:	4b02      	ldr	r3, [pc, #8]	; (8000b1c <dev_trace_generate_error+0x54>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	2000008d 	.word	0x2000008d
 8000b20:	08005b00 	.word	0x08005b00

08000b24 <debug_printf_char>:
}

// Custom Printf function
//////////////////////////////////////////////////////////////////////////
void debug_printf_char(UINT8 c)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
    if (c < ' ') 
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	2b1f      	cmp	r3, #31
 8000b32:	d82a      	bhi.n	8000b8a <debug_printf_char+0x66>
    {    
        dev_trace_send_byte('~');
 8000b34:	207e      	movs	r0, #126	; 0x7e
 8000b36:	f7ff ff85 	bl	8000a44 <dev_trace_send_byte>
        dev_trace_send_byte(HB2HEX(c / 0x10));
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	2b9f      	cmp	r3, #159	; 0x9f
 8000b3e:	d905      	bls.n	8000b4c <debug_printf_char+0x28>
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	091b      	lsrs	r3, r3, #4
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	3337      	adds	r3, #55	; 0x37
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	e004      	b.n	8000b56 <debug_printf_char+0x32>
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	091b      	lsrs	r3, r3, #4
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	3330      	adds	r3, #48	; 0x30
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ff74 	bl	8000a44 <dev_trace_send_byte>
        dev_trace_send_byte(HB2HEX(c % 0x10));
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	f003 030f 	and.w	r3, r3, #15
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	2b09      	cmp	r3, #9
 8000b66:	d906      	bls.n	8000b76 <debug_printf_char+0x52>
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	f003 030f 	and.w	r3, r3, #15
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	3337      	adds	r3, #55	; 0x37
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	e005      	b.n	8000b82 <debug_printf_char+0x5e>
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	f003 030f 	and.w	r3, r3, #15
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	3330      	adds	r3, #48	; 0x30
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff ff5e 	bl	8000a44 <dev_trace_send_byte>
    }
    else dev_trace_send_byte(c);
}
 8000b88:	e003      	b.n	8000b92 <debug_printf_char+0x6e>
    else dev_trace_send_byte(c);
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff59 	bl	8000a44 <dev_trace_send_byte>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <debug_printf_text>:

void debug_printf_text(char* text)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b084      	sub	sp, #16
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
   int i = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]

   while(text[i] != 0)
 8000ba6:	e009      	b.n	8000bbc <debug_printf_text+0x22>
   {   
      dev_trace_send_byte(text[i]);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff47 	bl	8000a44 <dev_trace_send_byte>
      i++;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	60fb      	str	r3, [r7, #12]
   while(text[i] != 0)
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d1ef      	bne.n	8000ba8 <debug_printf_text+0xe>
   }   
}
 8000bc8:	bf00      	nop
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <debug_printf_long>:

   debug_printf_ulong(d);
}

void debug_printf_long(unsigned long d, UINT8 mode)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	70fb      	strb	r3, [r7, #3]
   UINT8 buf[10], len = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	75fb      	strb	r3, [r7, #23]

   if (d == 0) 
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d103      	bne.n	8000bf2 <debug_printf_long+0x1e>
   {
      dev_trace_send_byte('0');
 8000bea:	2030      	movs	r0, #48	; 0x30
 8000bec:	f7ff ff2a 	bl	8000a44 <dev_trace_send_byte>
 8000bf0:	e03a      	b.n	8000c68 <debug_printf_long+0x94>
      return;
   }   
   
   if (mode == 'd') 
 8000bf2:	78fb      	ldrb	r3, [r7, #3]
 8000bf4:	2b64      	cmp	r3, #100	; 0x64
 8000bf6:	d122      	bne.n	8000c3e <debug_printf_long+0x6a>
   if ((signed long)d < 0) 
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	da1f      	bge.n	8000c3e <debug_printf_long+0x6a>
   {
      dev_trace_send_byte('-');
 8000bfe:	202d      	movs	r0, #45	; 0x2d
 8000c00:	f7ff ff20 	bl	8000a44 <dev_trace_send_byte>
      d = -((signed long)d);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	425b      	negs	r3, r3
 8000c08:	607b      	str	r3, [r7, #4]
   }   

   while (d > 0)
 8000c0a:	e018      	b.n	8000c3e <debug_printf_long+0x6a>
   {   
      buf[len] = d % 10;
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <debug_printf_long+0x9c>)
 8000c10:	fba3 2301 	umull	r2, r3, r3, r1
 8000c14:	08da      	lsrs	r2, r3, #3
 8000c16:	4613      	mov	r3, r2
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	4413      	add	r3, r2
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	1aca      	subs	r2, r1, r3
 8000c20:	7dfb      	ldrb	r3, [r7, #23]
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	3318      	adds	r3, #24
 8000c26:	443b      	add	r3, r7
 8000c28:	f803 2c0c 	strb.w	r2, [r3, #-12]
      d = d / 10;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a10      	ldr	r2, [pc, #64]	; (8000c70 <debug_printf_long+0x9c>)
 8000c30:	fba2 2303 	umull	r2, r3, r2, r3
 8000c34:	08db      	lsrs	r3, r3, #3
 8000c36:	607b      	str	r3, [r7, #4]
      len++;
 8000c38:	7dfb      	ldrb	r3, [r7, #23]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	75fb      	strb	r3, [r7, #23]
   while (d > 0)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d1e3      	bne.n	8000c0c <debug_printf_long+0x38>
   }   

   while (len > 0)
 8000c44:	e00d      	b.n	8000c62 <debug_printf_long+0x8e>
   {   
      dev_trace_send_byte(buf[len - 1] + 0x30);
 8000c46:	7dfb      	ldrb	r3, [r7, #23]
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	3318      	adds	r3, #24
 8000c4c:	443b      	add	r3, r7
 8000c4e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000c52:	3330      	adds	r3, #48	; 0x30
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fef4 	bl	8000a44 <dev_trace_send_byte>
      len--;
 8000c5c:	7dfb      	ldrb	r3, [r7, #23]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	75fb      	strb	r3, [r7, #23]
   while (len > 0)
 8000c62:	7dfb      	ldrb	r3, [r7, #23]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1ee      	bne.n	8000c46 <debug_printf_long+0x72>
   }   
}
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	cccccccd 	.word	0xcccccccd

08000c74 <debug_printf_hex>:

void debug_printf_hex(UINT32 d, UINT8 mode)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	70fb      	strb	r3, [r7, #3]
   UINT32 buf = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
   UINT8 b, len = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	72fb      	strb	r3, [r7, #11]

   if (d == 0) 
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d112      	bne.n	8000cb4 <debug_printf_hex+0x40>
   {
      dev_trace_send_byte('0');
 8000c8e:	2030      	movs	r0, #48	; 0x30
 8000c90:	f7ff fed8 	bl	8000a44 <dev_trace_send_byte>
      return;
 8000c94:	e03a      	b.n	8000d0c <debug_printf_hex+0x98>
   }   

   while (d > 0)
   {  
      buf = buf << 4;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	011b      	lsls	r3, r3, #4
 8000c9a:	60fb      	str	r3, [r7, #12]
      buf = buf + d % 0x10;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	60fb      	str	r3, [r7, #12]
      d = d >> 4;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	091b      	lsrs	r3, r3, #4
 8000cac:	607b      	str	r3, [r7, #4]
      len++;
 8000cae:	7afb      	ldrb	r3, [r7, #11]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	72fb      	strb	r3, [r7, #11]
   while (d > 0)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1ed      	bne.n	8000c96 <debug_printf_hex+0x22>
   }   

   while (len > 0)
 8000cba:	e024      	b.n	8000d06 <debug_printf_hex+0x92>
   {   
      b = buf % 0x10;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	f003 030f 	and.w	r3, r3, #15
 8000cc4:	72bb      	strb	r3, [r7, #10]
   
      if (b < 0xA) dev_trace_send_byte(b + 0x30);
 8000cc6:	7abb      	ldrb	r3, [r7, #10]
 8000cc8:	2b09      	cmp	r3, #9
 8000cca:	d806      	bhi.n	8000cda <debug_printf_hex+0x66>
 8000ccc:	7abb      	ldrb	r3, [r7, #10]
 8000cce:	3330      	adds	r3, #48	; 0x30
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff feb6 	bl	8000a44 <dev_trace_send_byte>
 8000cd8:	e00f      	b.n	8000cfa <debug_printf_hex+0x86>
      else  
      {      
         if (mode == 'X') dev_trace_send_byte(b + 0x41 - 0xA);
 8000cda:	78fb      	ldrb	r3, [r7, #3]
 8000cdc:	2b58      	cmp	r3, #88	; 0x58
 8000cde:	d106      	bne.n	8000cee <debug_printf_hex+0x7a>
 8000ce0:	7abb      	ldrb	r3, [r7, #10]
 8000ce2:	3337      	adds	r3, #55	; 0x37
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff feac 	bl	8000a44 <dev_trace_send_byte>
 8000cec:	e005      	b.n	8000cfa <debug_printf_hex+0x86>
                  else  dev_trace_send_byte(b + 0x61 - 0xA);
 8000cee:	7abb      	ldrb	r3, [r7, #10]
 8000cf0:	3357      	adds	r3, #87	; 0x57
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fea5 	bl	8000a44 <dev_trace_send_byte>
      }

      buf = buf >> 4;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	091b      	lsrs	r3, r3, #4
 8000cfe:	60fb      	str	r3, [r7, #12]
      len--;
 8000d00:	7afb      	ldrb	r3, [r7, #11]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	72fb      	strb	r3, [r7, #11]
   while (len > 0)
 8000d06:	7afb      	ldrb	r3, [r7, #11]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1d7      	bne.n	8000cbc <debug_printf_hex+0x48>
   }   
}
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <debug_printf_bin>:

void debug_printf_bin(UINT32 d, UINT8 mode)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b084      	sub	sp, #16
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	70fb      	strb	r3, [r7, #3]
   UINT32 buf = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
   UINT8 i, len = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	72bb      	strb	r3, [r7, #10]

   if (mode == 'B') len = 32;
 8000d26:	78fb      	ldrb	r3, [r7, #3]
 8000d28:	2b42      	cmp	r3, #66	; 0x42
 8000d2a:	d102      	bne.n	8000d32 <debug_printf_bin+0x20>
 8000d2c:	2320      	movs	r3, #32
 8000d2e:	72bb      	strb	r3, [r7, #10]
 8000d30:	e001      	b.n	8000d36 <debug_printf_bin+0x24>
                else len = 8;
 8000d32:	2308      	movs	r3, #8
 8000d34:	72bb      	strb	r3, [r7, #10]

   for(i=0; i<len; i++)
 8000d36:	2300      	movs	r3, #0
 8000d38:	72fb      	strb	r3, [r7, #11]
 8000d3a:	e010      	b.n	8000d5e <debug_printf_bin+0x4c>
   {
      buf = buf << 1;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	60fb      	str	r3, [r7, #12]
      if (d % 2) buf++;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d002      	beq.n	8000d52 <debug_printf_bin+0x40>
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	60fb      	str	r3, [r7, #12]
      d = d >> 1;      
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	085b      	lsrs	r3, r3, #1
 8000d56:	607b      	str	r3, [r7, #4]
   for(i=0; i<len; i++)
 8000d58:	7afb      	ldrb	r3, [r7, #11]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	72fb      	strb	r3, [r7, #11]
 8000d5e:	7afa      	ldrb	r2, [r7, #11]
 8000d60:	7abb      	ldrb	r3, [r7, #10]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d3ea      	bcc.n	8000d3c <debug_printf_bin+0x2a>
   }   
                
   for(i=0; i<len; i++)
 8000d66:	2300      	movs	r3, #0
 8000d68:	72fb      	strb	r3, [r7, #11]
 8000d6a:	e011      	b.n	8000d90 <debug_printf_bin+0x7e>
   {
      if (buf % 2) dev_trace_send_byte('1');
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d003      	beq.n	8000d7e <debug_printf_bin+0x6c>
 8000d76:	2031      	movs	r0, #49	; 0x31
 8000d78:	f7ff fe64 	bl	8000a44 <dev_trace_send_byte>
 8000d7c:	e002      	b.n	8000d84 <debug_printf_bin+0x72>
            else dev_trace_send_byte('0');
 8000d7e:	2030      	movs	r0, #48	; 0x30
 8000d80:	f7ff fe60 	bl	8000a44 <dev_trace_send_byte>
               
      buf = buf >> 1;      
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	085b      	lsrs	r3, r3, #1
 8000d88:	60fb      	str	r3, [r7, #12]
   for(i=0; i<len; i++)
 8000d8a:	7afb      	ldrb	r3, [r7, #11]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	72fb      	strb	r3, [r7, #11]
 8000d90:	7afa      	ldrb	r2, [r7, #11]
 8000d92:	7abb      	ldrb	r3, [r7, #10]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d3e9      	bcc.n	8000d6c <debug_printf_bin+0x5a>
   }   
}
 8000d98:	bf00      	nop
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <debug_printf>:

void debug_printf(char* text, ...)
{
 8000da4:	b40f      	push	{r0, r1, r2, r3}
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b092      	sub	sp, #72	; 0x48
 8000daa:	af00      	add	r7, sp, #0
   va_list tag;
   int i = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	647b      	str	r3, [r7, #68]	; 0x44

   va_start(tag, text);
 8000db0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000db4:	607b      	str	r3, [r7, #4]
   
   while(text[i] != 0)
 8000db6:	e181      	b.n	80010bc <debug_printf+0x318>
   {
      if (text[i] != '%') 
 8000db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000dba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000dbc:	4413      	add	r3, r2
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b25      	cmp	r3, #37	; 0x25
 8000dc2:	d00a      	beq.n	8000dda <debug_printf+0x36>
      {
         dev_trace_send_byte(text[i]);
 8000dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000dc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000dc8:	4413      	add	r3, r2
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fe39 	bl	8000a44 <dev_trace_send_byte>
         i++;
 8000dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	647b      	str	r3, [r7, #68]	; 0x44
 8000dd8:	e170      	b.n	80010bc <debug_printf+0x318>
//         continue;
      }   
      else if (text[i + 1] != 0)
 8000dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ddc:	3301      	adds	r3, #1
 8000dde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000de0:	4413      	add	r3, r2
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f000 8169 	beq.w	80010bc <debug_printf+0x318>
      {   
         switch(text[i + 1])   
 8000dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000dec:	3301      	adds	r3, #1
 8000dee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000df0:	4413      	add	r3, r2
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	3b42      	subs	r3, #66	; 0x42
 8000df6:	2b36      	cmp	r3, #54	; 0x36
 8000df8:	f200 815d 	bhi.w	80010b6 <debug_printf+0x312>
 8000dfc:	a201      	add	r2, pc, #4	; (adr r2, 8000e04 <debug_printf+0x60>)
 8000dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e02:	bf00      	nop
 8000e04:	08000f6d 	.word	0x08000f6d
 8000e08:	080010b7 	.word	0x080010b7
 8000e0c:	080010b7 	.word	0x080010b7
 8000e10:	080010b7 	.word	0x080010b7
 8000e14:	080010b7 	.word	0x080010b7
 8000e18:	080010b7 	.word	0x080010b7
 8000e1c:	080010b7 	.word	0x080010b7
 8000e20:	080010b7 	.word	0x080010b7
 8000e24:	080010b7 	.word	0x080010b7
 8000e28:	080010b7 	.word	0x080010b7
 8000e2c:	080010b7 	.word	0x080010b7
 8000e30:	08001023 	.word	0x08001023
 8000e34:	080010b7 	.word	0x080010b7
 8000e38:	080010b7 	.word	0x080010b7
 8000e3c:	080010b7 	.word	0x080010b7
 8000e40:	080010b7 	.word	0x080010b7
 8000e44:	080010b7 	.word	0x080010b7
 8000e48:	080010b7 	.word	0x080010b7
 8000e4c:	080010b7 	.word	0x080010b7
 8000e50:	080010b7 	.word	0x080010b7
 8000e54:	080010b7 	.word	0x080010b7
 8000e58:	080010b7 	.word	0x080010b7
 8000e5c:	08000f45 	.word	0x08000f45
 8000e60:	080010b7 	.word	0x080010b7
 8000e64:	080010b7 	.word	0x080010b7
 8000e68:	080010b7 	.word	0x080010b7
 8000e6c:	080010b7 	.word	0x080010b7
 8000e70:	080010b7 	.word	0x080010b7
 8000e74:	080010b7 	.word	0x080010b7
 8000e78:	080010b7 	.word	0x080010b7
 8000e7c:	080010b7 	.word	0x080010b7
 8000e80:	080010b7 	.word	0x080010b7
 8000e84:	08000f59 	.word	0x08000f59
 8000e88:	08000f1d 	.word	0x08000f1d
 8000e8c:	08000ee1 	.word	0x08000ee1
 8000e90:	080010b7 	.word	0x080010b7
 8000e94:	080010b7 	.word	0x080010b7
 8000e98:	080010b7 	.word	0x080010b7
 8000e9c:	080010b7 	.word	0x080010b7
 8000ea0:	080010b7 	.word	0x080010b7
 8000ea4:	080010b7 	.word	0x080010b7
 8000ea8:	080010b7 	.word	0x080010b7
 8000eac:	080010b7 	.word	0x080010b7
 8000eb0:	08000f81 	.word	0x08000f81
 8000eb4:	080010b7 	.word	0x080010b7
 8000eb8:	080010b7 	.word	0x080010b7
 8000ebc:	08001063 	.word	0x08001063
 8000ec0:	080010b7 	.word	0x080010b7
 8000ec4:	080010b7 	.word	0x080010b7
 8000ec8:	08000f0b 	.word	0x08000f0b
 8000ecc:	080010b7 	.word	0x080010b7
 8000ed0:	08000ef7 	.word	0x08000ef7
 8000ed4:	080010b7 	.word	0x080010b7
 8000ed8:	080010b7 	.word	0x080010b7
 8000edc:	08000f31 	.word	0x08000f31
         {
            case 'd' : 
               {
                  signed long d = va_arg(tag, signed long);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	1d1a      	adds	r2, r3, #4
 8000ee4:	607a      	str	r2, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	623b      	str	r3, [r7, #32]
                  debug_printf_long(d, 'd');
 8000eea:	6a3b      	ldr	r3, [r7, #32]
 8000eec:	2164      	movs	r1, #100	; 0x64
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fe70 	bl	8000bd4 <debug_printf_long>
               } break;
 8000ef4:	e0df      	b.n	80010b6 <debug_printf+0x312>

            case 'u' : 
               {
                  unsigned long d = va_arg(tag, unsigned long);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	1d1a      	adds	r2, r3, #4
 8000efa:	607a      	str	r2, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	637b      	str	r3, [r7, #52]	; 0x34
                  debug_printf_long(d, 'u');
 8000f00:	2175      	movs	r1, #117	; 0x75
 8000f02:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000f04:	f7ff fe66 	bl	8000bd4 <debug_printf_long>
               } break;
 8000f08:	e0d5      	b.n	80010b6 <debug_printf+0x312>
//               
//               } break;
           
            case 's' : 
               {
                  char* s = va_arg(tag, char*);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	1d1a      	adds	r2, r3, #4
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
                  debug_printf_text(s);
 8000f14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f16:	f7ff fe40 	bl	8000b9a <debug_printf_text>
               } break;
 8000f1a:	e0cc      	b.n	80010b6 <debug_printf+0x312>

            case 'c' : 
               {
                  UINT8 b = va_arg(tag, unsigned long);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	1d1a      	adds	r2, r3, #4
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	77fb      	strb	r3, [r7, #31]
                  debug_printf_char(b);
 8000f26:	7ffb      	ldrb	r3, [r7, #31]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fdfb 	bl	8000b24 <debug_printf_char>
               } break;
 8000f2e:	e0c2      	b.n	80010b6 <debug_printf+0x312>
           
            case 'x' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	1d1a      	adds	r2, r3, #4
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	63bb      	str	r3, [r7, #56]	; 0x38
                  debug_printf_hex(d, 'x');
 8000f3a:	2178      	movs	r1, #120	; 0x78
 8000f3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000f3e:	f7ff fe99 	bl	8000c74 <debug_printf_hex>
               } break;
 8000f42:	e0b8      	b.n	80010b6 <debug_printf+0x312>
            
            case 'X' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	1d1a      	adds	r2, r3, #4
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	617b      	str	r3, [r7, #20]
                  debug_printf_hex(d, 'X');
 8000f4e:	2158      	movs	r1, #88	; 0x58
 8000f50:	6978      	ldr	r0, [r7, #20]
 8000f52:	f7ff fe8f 	bl	8000c74 <debug_printf_hex>
               } break;
 8000f56:	e0ae      	b.n	80010b6 <debug_printf+0x312>
            
            case 'b' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	1d1a      	adds	r2, r3, #4
 8000f5c:	607a      	str	r2, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	61bb      	str	r3, [r7, #24]
                  debug_printf_bin(d, 'b');
 8000f62:	2162      	movs	r1, #98	; 0x62
 8000f64:	69b8      	ldr	r0, [r7, #24]
 8000f66:	f7ff fed4 	bl	8000d12 <debug_printf_bin>
               } break;
 8000f6a:	e0a4      	b.n	80010b6 <debug_printf+0x312>
            
            case 'B' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	1d1a      	adds	r2, r3, #4
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	60bb      	str	r3, [r7, #8]
                  debug_printf_bin(d, 'B');
 8000f76:	2142      	movs	r1, #66	; 0x42
 8000f78:	68b8      	ldr	r0, [r7, #8]
 8000f7a:	f7ff feca 	bl	8000d12 <debug_printf_bin>
               } break;
 8000f7e:	e09a      	b.n	80010b6 <debug_printf+0x312>
            
            case 'm' : 
               {
                  UINT8* mm = va_arg(tag, UINT8*);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	1d1a      	adds	r2, r3, #4
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
                  UINT16 size = va_arg(tag, int);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	1d1a      	adds	r2, r3, #4
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	84fb      	strh	r3, [r7, #38]	; 0x26
                  int ii;

                  for(ii=0; ii<size; ii++) 
 8000f94:	2300      	movs	r3, #0
 8000f96:	643b      	str	r3, [r7, #64]	; 0x40
 8000f98:	e03e      	b.n	8001018 <debug_printf+0x274>
                  {   
                     dev_trace_send_byte(HB2HEX(mm[ii] / 0x10));
 8000f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f9e:	4413      	add	r3, r2
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b9f      	cmp	r3, #159	; 0x9f
 8000fa4:	d908      	bls.n	8000fb8 <debug_printf+0x214>
 8000fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000faa:	4413      	add	r3, r2
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	091b      	lsrs	r3, r3, #4
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	3337      	adds	r3, #55	; 0x37
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	e007      	b.n	8000fc8 <debug_printf+0x224>
 8000fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fbc:	4413      	add	r3, r2
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	091b      	lsrs	r3, r3, #4
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	3330      	adds	r3, #48	; 0x30
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fd3b 	bl	8000a44 <dev_trace_send_byte>
                     dev_trace_send_byte(HB2HEX(mm[ii] % 0x10));
 8000fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fd2:	4413      	add	r3, r2
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b09      	cmp	r3, #9
 8000fde:	d909      	bls.n	8000ff4 <debug_printf+0x250>
 8000fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fe4:	4413      	add	r3, r2
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	f003 030f 	and.w	r3, r3, #15
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	3337      	adds	r3, #55	; 0x37
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	e008      	b.n	8001006 <debug_printf+0x262>
 8000ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ff8:	4413      	add	r3, r2
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	f003 030f 	and.w	r3, r3, #15
 8001000:	b2db      	uxtb	r3, r3
 8001002:	3330      	adds	r3, #48	; 0x30
 8001004:	b2db      	uxtb	r3, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fd1c 	bl	8000a44 <dev_trace_send_byte>
                     dev_trace_send_byte(' ');
 800100c:	2020      	movs	r0, #32
 800100e:	f7ff fd19 	bl	8000a44 <dev_trace_send_byte>
                  for(ii=0; ii<size; ii++) 
 8001012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001014:	3301      	adds	r3, #1
 8001016:	643b      	str	r3, [r7, #64]	; 0x40
 8001018:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800101a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800101c:	429a      	cmp	r2, r3
 800101e:	dbbc      	blt.n	8000f9a <debug_printf+0x1f6>
                  }
               
               } break;
 8001020:	e049      	b.n	80010b6 <debug_printf+0x312>

            case 'M' : 
               {
                  UINT8* mm = va_arg(tag, UINT8*);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	1d1a      	adds	r2, r3, #4
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	613b      	str	r3, [r7, #16]
                  UINT16 size = va_arg(tag, int);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	1d1a      	adds	r2, r3, #4
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	81fb      	strh	r3, [r7, #14]
                  int ii;

                  for(ii=0; ii<size; ii++) 
 8001036:	2300      	movs	r3, #0
 8001038:	63fb      	str	r3, [r7, #60]	; 0x3c
 800103a:	e00d      	b.n	8001058 <debug_printf+0x2b4>
                  {   
                     debug_printf_long(mm[ii], 'u');
 800103c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4413      	add	r3, r2
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2175      	movs	r1, #117	; 0x75
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fdc4 	bl	8000bd4 <debug_printf_long>
                     dev_trace_send_byte(' ');
 800104c:	2020      	movs	r0, #32
 800104e:	f7ff fcf9 	bl	8000a44 <dev_trace_send_byte>
                  for(ii=0; ii<size; ii++) 
 8001052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001054:	3301      	adds	r3, #1
 8001056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001058:	89fb      	ldrh	r3, [r7, #14]
 800105a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800105c:	429a      	cmp	r2, r3
 800105e:	dbed      	blt.n	800103c <debug_printf+0x298>
                  }
               
               } break;
 8001060:	e029      	b.n	80010b6 <debug_printf+0x312>

            case 'p' : 
               {
                  UINT8* mm = va_arg(tag, UINT8*);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	1d1a      	adds	r2, r3, #4
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
               
                  debug_printf_long(mm[0], 'u');
 800106c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2175      	movs	r1, #117	; 0x75
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fdae 	bl	8000bd4 <debug_printf_long>
                  dev_trace_send_byte('.');
 8001078:	202e      	movs	r0, #46	; 0x2e
 800107a:	f7ff fce3 	bl	8000a44 <dev_trace_send_byte>
                  debug_printf_long(mm[1], 'u');
 800107e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001080:	3301      	adds	r3, #1
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2175      	movs	r1, #117	; 0x75
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fda4 	bl	8000bd4 <debug_printf_long>
                  dev_trace_send_byte('.');
 800108c:	202e      	movs	r0, #46	; 0x2e
 800108e:	f7ff fcd9 	bl	8000a44 <dev_trace_send_byte>
                  debug_printf_long(mm[2], 'u');
 8001092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001094:	3302      	adds	r3, #2
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2175      	movs	r1, #117	; 0x75
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fd9a 	bl	8000bd4 <debug_printf_long>
                  dev_trace_send_byte('.');
 80010a0:	202e      	movs	r0, #46	; 0x2e
 80010a2:	f7ff fccf 	bl	8000a44 <dev_trace_send_byte>
                  debug_printf_long(mm[3], 'u');
 80010a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a8:	3303      	adds	r3, #3
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2175      	movs	r1, #117	; 0x75
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fd90 	bl	8000bd4 <debug_printf_long>
               
               } break;
 80010b4:	bf00      	nop
           
         }
      
         i += 2;
 80010b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010b8:	3302      	adds	r3, #2
 80010ba:	647b      	str	r3, [r7, #68]	; 0x44
   while(text[i] != 0)
 80010bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80010c0:	4413      	add	r3, r2
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f47f ae77 	bne.w	8000db8 <debug_printf+0x14>
      }
   }   

}
 80010ca:	bf00      	nop
 80010cc:	bf00      	nop
 80010ce:	3748      	adds	r7, #72	; 0x48
 80010d0:	46bd      	mov	sp, r7
 80010d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010d6:	b004      	add	sp, #16
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop

080010dc <hal_driver_set_info>:
static void* dma_2_irq_data[16];



void hal_driver_set_info(dev_info_t* info_1, dev_info_t* info_2)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
		info_2->id = info_1->id;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	781a      	ldrb	r2, [r3, #0]
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	701a      	strb	r2, [r3, #0]
		info_2->status_in = info_1->status_in;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	605a      	str	r2, [r3, #4]
		info_2->status_out = info_1->status_out;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	609a      	str	r2, [r3, #8]
		info_2->name = info_1->name;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	691a      	ldr	r2, [r3, #16]
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	611a      	str	r2, [r3, #16]
	
		info_2->rx_mode = HAL_DEFAULT_MODE_SYNC;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2200      	movs	r2, #0
 800110a:	731a      	strb	r2, [r3, #12]
		info_2->tx_mode = HAL_DEFAULT_MODE_SYNC;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	2200      	movs	r2, #0
 8001110:	735a      	strb	r2, [r3, #13]
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <EXTI1_IRQHandler>:
//------------------------------------------------------------------------------
//         internal Functions
//------------------------------------------------------------------------------

//void EXTI0_IRQHandler(void){ (*gpio_irq_cbf[0])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);}
void EXTI1_IRQHandler(void){ (*gpio_irq_cbf[1])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);}
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <EXTI1_IRQHandler+0x14>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	4798      	blx	r3
 8001126:	4b03      	ldr	r3, [pc, #12]	; (8001134 <EXTI1_IRQHandler+0x18>)
 8001128:	2202      	movs	r2, #2
 800112a:	615a      	str	r2, [r3, #20]
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200000f0 	.word	0x200000f0
 8001134:	40010400 	.word	0x40010400

08001138 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){ (*gpio_irq_cbf[2])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2);}
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <EXTI2_IRQHandler+0x14>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	4798      	blx	r3
 8001142:	4b03      	ldr	r3, [pc, #12]	; (8001150 <EXTI2_IRQHandler+0x18>)
 8001144:	2204      	movs	r2, #4
 8001146:	615a      	str	r2, [r3, #20]
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200000f0 	.word	0x200000f0
 8001150:	40010400 	.word	0x40010400

08001154 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){ (*gpio_irq_cbf[3])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);}
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <EXTI3_IRQHandler+0x14>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	4798      	blx	r3
 800115e:	4b03      	ldr	r3, [pc, #12]	; (800116c <EXTI3_IRQHandler+0x18>)
 8001160:	2208      	movs	r2, #8
 8001162:	615a      	str	r2, [r3, #20]
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200000f0 	.word	0x200000f0
 800116c:	40010400 	.word	0x40010400

08001170 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){ (*gpio_irq_cbf[4])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);}
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
 8001174:	4b03      	ldr	r3, [pc, #12]	; (8001184 <EXTI4_IRQHandler+0x14>)
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	4798      	blx	r3
 800117a:	4b03      	ldr	r3, [pc, #12]	; (8001188 <EXTI4_IRQHandler+0x18>)
 800117c:	2210      	movs	r2, #16
 800117e:	615a      	str	r2, [r3, #20]
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200000f0 	.word	0x200000f0
 8001188:	40010400 	.word	0x40010400

0800118c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{ 
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_5) != RESET) { (*gpio_irq_cbf[5])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5); }
 8001190:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <EXTI9_5_IRQHandler+0x84>)
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	f003 0320 	and.w	r3, r3, #32
 8001198:	2b00      	cmp	r3, #0
 800119a:	d005      	beq.n	80011a8 <EXTI9_5_IRQHandler+0x1c>
 800119c:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <EXTI9_5_IRQHandler+0x88>)
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	4798      	blx	r3
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <EXTI9_5_IRQHandler+0x84>)
 80011a4:	2220      	movs	r2, #32
 80011a6:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET) { (*gpio_irq_cbf[6])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6); }
 80011a8:	4b19      	ldr	r3, [pc, #100]	; (8001210 <EXTI9_5_IRQHandler+0x84>)
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d005      	beq.n	80011c0 <EXTI9_5_IRQHandler+0x34>
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <EXTI9_5_IRQHandler+0x88>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4798      	blx	r3
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <EXTI9_5_IRQHandler+0x84>)
 80011bc:	2240      	movs	r2, #64	; 0x40
 80011be:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET) { (*gpio_irq_cbf[7])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7); }
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <EXTI9_5_IRQHandler+0x84>)
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d005      	beq.n	80011d8 <EXTI9_5_IRQHandler+0x4c>
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <EXTI9_5_IRQHandler+0x88>)
 80011ce:	69db      	ldr	r3, [r3, #28]
 80011d0:	4798      	blx	r3
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <EXTI9_5_IRQHandler+0x84>)
 80011d4:	2280      	movs	r2, #128	; 0x80
 80011d6:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET) { (*gpio_irq_cbf[8])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8); }
 80011d8:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <EXTI9_5_IRQHandler+0x84>)
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d006      	beq.n	80011f2 <EXTI9_5_IRQHandler+0x66>
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <EXTI9_5_IRQHandler+0x88>)
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	4798      	blx	r3
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <EXTI9_5_IRQHandler+0x84>)
 80011ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011f0:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET) { (*gpio_irq_cbf[9])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9); }
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <EXTI9_5_IRQHandler+0x84>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d006      	beq.n	800120c <EXTI9_5_IRQHandler+0x80>
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <EXTI9_5_IRQHandler+0x88>)
 8001200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001202:	4798      	blx	r3
 8001204:	4b02      	ldr	r3, [pc, #8]	; (8001210 <EXTI9_5_IRQHandler+0x84>)
 8001206:	f44f 7200 	mov.w	r2, #512	; 0x200
 800120a:	615a      	str	r2, [r3, #20]
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40010400 	.word	0x40010400
 8001214:	200000f0 	.word	0x200000f0

08001218 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{ 
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_10) != RESET) { (*gpio_irq_cbf[10])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10); }
 800121c:	4b27      	ldr	r3, [pc, #156]	; (80012bc <EXTI15_10_IRQHandler+0xa4>)
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001224:	2b00      	cmp	r3, #0
 8001226:	d006      	beq.n	8001236 <EXTI15_10_IRQHandler+0x1e>
 8001228:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <EXTI15_10_IRQHandler+0xa8>)
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	4798      	blx	r3
 800122e:	4b23      	ldr	r3, [pc, #140]	; (80012bc <EXTI15_10_IRQHandler+0xa4>)
 8001230:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001234:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_11) != RESET) { (*gpio_irq_cbf[11])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11); }
 8001236:	4b21      	ldr	r3, [pc, #132]	; (80012bc <EXTI15_10_IRQHandler+0xa4>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800123e:	2b00      	cmp	r3, #0
 8001240:	d006      	beq.n	8001250 <EXTI15_10_IRQHandler+0x38>
 8001242:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <EXTI15_10_IRQHandler+0xa8>)
 8001244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001246:	4798      	blx	r3
 8001248:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <EXTI15_10_IRQHandler+0xa4>)
 800124a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800124e:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_12) != RESET) { (*gpio_irq_cbf[12])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12); }
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <EXTI15_10_IRQHandler+0xa4>)
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d006      	beq.n	800126a <EXTI15_10_IRQHandler+0x52>
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <EXTI15_10_IRQHandler+0xa8>)
 800125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001260:	4798      	blx	r3
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <EXTI15_10_IRQHandler+0xa4>)
 8001264:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001268:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET) { (*gpio_irq_cbf[13])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13); }
 800126a:	4b14      	ldr	r3, [pc, #80]	; (80012bc <EXTI15_10_IRQHandler+0xa4>)
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d006      	beq.n	8001284 <EXTI15_10_IRQHandler+0x6c>
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <EXTI15_10_IRQHandler+0xa8>)
 8001278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800127a:	4798      	blx	r3
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <EXTI15_10_IRQHandler+0xa4>)
 800127e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001282:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_14) != RESET) { (*gpio_irq_cbf[14])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14); }
 8001284:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <EXTI15_10_IRQHandler+0xa4>)
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d006      	beq.n	800129e <EXTI15_10_IRQHandler+0x86>
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <EXTI15_10_IRQHandler+0xa8>)
 8001292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001294:	4798      	blx	r3
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <EXTI15_10_IRQHandler+0xa4>)
 8001298:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800129c:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_15) != RESET) { (*gpio_irq_cbf[15])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_15); }
 800129e:	4b07      	ldr	r3, [pc, #28]	; (80012bc <EXTI15_10_IRQHandler+0xa4>)
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d006      	beq.n	80012b8 <EXTI15_10_IRQHandler+0xa0>
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <EXTI15_10_IRQHandler+0xa8>)
 80012ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ae:	4798      	blx	r3
 80012b0:	4b02      	ldr	r3, [pc, #8]	; (80012bc <EXTI15_10_IRQHandler+0xa4>)
 80012b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012b6:	615a      	str	r2, [r3, #20]
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40010400 	.word	0x40010400
 80012c0:	200000f0 	.word	0x200000f0

080012c4 <dev_gpio_id_port>:

//------------------------------------------------------------------------------
//         GPIO Local Functions
//------------------------------------------------------------------------------
GPIO_TypeDef* dev_gpio_id_port(UINT8 gpio_id)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
		switch(gpio_id)
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	2b04      	cmp	r3, #4
 80012d2:	d817      	bhi.n	8001304 <dev_gpio_id_port+0x40>
 80012d4:	a201      	add	r2, pc, #4	; (adr r2, 80012dc <dev_gpio_id_port+0x18>)
 80012d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012da:	bf00      	nop
 80012dc:	080012f1 	.word	0x080012f1
 80012e0:	080012f5 	.word	0x080012f5
 80012e4:	080012f9 	.word	0x080012f9
 80012e8:	080012fd 	.word	0x080012fd
 80012ec:	08001301 	.word	0x08001301
		{
				case GPIO_PA : return GPIOA;
 80012f0:	4b07      	ldr	r3, [pc, #28]	; (8001310 <dev_gpio_id_port+0x4c>)
 80012f2:	e008      	b.n	8001306 <dev_gpio_id_port+0x42>
				case GPIO_PB : return GPIOB;
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <dev_gpio_id_port+0x50>)
 80012f6:	e006      	b.n	8001306 <dev_gpio_id_port+0x42>
				case GPIO_PC : return GPIOC;
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <dev_gpio_id_port+0x54>)
 80012fa:	e004      	b.n	8001306 <dev_gpio_id_port+0x42>
				case GPIO_PD : return GPIOD;
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <dev_gpio_id_port+0x58>)
 80012fe:	e002      	b.n	8001306 <dev_gpio_id_port+0x42>
				case GPIO_PE : return GPIOE;
 8001300:	4b07      	ldr	r3, [pc, #28]	; (8001320 <dev_gpio_id_port+0x5c>)
 8001302:	e000      	b.n	8001306 <dev_gpio_id_port+0x42>
				case GPIO_PI : return GPIOI;
#endif

		}

		return (GPIO_TypeDef*)0;	
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	40010800 	.word	0x40010800
 8001314:	40010c00 	.word	0x40010c00
 8001318:	40011000 	.word	0x40011000
 800131c:	40011400 	.word	0x40011400
 8001320:	40011800 	.word	0x40011800

08001324 <dev_gpio_pin_id>:

		return 0;	
}

int dev_gpio_pin_id(UINT16 pin)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	80fb      	strh	r3, [r7, #6]
		if (pin & 0x0001) return 0;
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <dev_gpio_pin_id+0x18>
 8001338:	2300      	movs	r3, #0
 800133a:	e069      	b.n	8001410 <dev_gpio_pin_id+0xec>
		if (pin & 0x0002) return 1;
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <dev_gpio_pin_id+0x26>
 8001346:	2301      	movs	r3, #1
 8001348:	e062      	b.n	8001410 <dev_gpio_pin_id+0xec>
		if (pin & 0x0004) return 2;
 800134a:	88fb      	ldrh	r3, [r7, #6]
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <dev_gpio_pin_id+0x34>
 8001354:	2302      	movs	r3, #2
 8001356:	e05b      	b.n	8001410 <dev_gpio_pin_id+0xec>
		if (pin & 0x0008) return 3;
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <dev_gpio_pin_id+0x42>
 8001362:	2303      	movs	r3, #3
 8001364:	e054      	b.n	8001410 <dev_gpio_pin_id+0xec>
		if (pin & 0x0010) return 4;
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	f003 0310 	and.w	r3, r3, #16
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <dev_gpio_pin_id+0x50>
 8001370:	2304      	movs	r3, #4
 8001372:	e04d      	b.n	8001410 <dev_gpio_pin_id+0xec>
		if (pin & 0x0020) return 5;
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	f003 0320 	and.w	r3, r3, #32
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <dev_gpio_pin_id+0x5e>
 800137e:	2305      	movs	r3, #5
 8001380:	e046      	b.n	8001410 <dev_gpio_pin_id+0xec>
		if (pin & 0x0040) return 6;
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <dev_gpio_pin_id+0x6c>
 800138c:	2306      	movs	r3, #6
 800138e:	e03f      	b.n	8001410 <dev_gpio_pin_id+0xec>
		if (pin & 0x0080) return 7;
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <dev_gpio_pin_id+0x7a>
 800139a:	2307      	movs	r3, #7
 800139c:	e038      	b.n	8001410 <dev_gpio_pin_id+0xec>
	
		if (pin & 0x0100) return 8;
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <dev_gpio_pin_id+0x88>
 80013a8:	2308      	movs	r3, #8
 80013aa:	e031      	b.n	8001410 <dev_gpio_pin_id+0xec>
		if (pin & 0x0200) return 9;
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <dev_gpio_pin_id+0x96>
 80013b6:	2309      	movs	r3, #9
 80013b8:	e02a      	b.n	8001410 <dev_gpio_pin_id+0xec>
		if (pin & 0x0400) return 10;
 80013ba:	88fb      	ldrh	r3, [r7, #6]
 80013bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <dev_gpio_pin_id+0xa4>
 80013c4:	230a      	movs	r3, #10
 80013c6:	e023      	b.n	8001410 <dev_gpio_pin_id+0xec>
		if (pin & 0x0800) return 11;
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <dev_gpio_pin_id+0xb2>
 80013d2:	230b      	movs	r3, #11
 80013d4:	e01c      	b.n	8001410 <dev_gpio_pin_id+0xec>
		if (pin & 0x1000) return 12;
 80013d6:	88fb      	ldrh	r3, [r7, #6]
 80013d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <dev_gpio_pin_id+0xc0>
 80013e0:	230c      	movs	r3, #12
 80013e2:	e015      	b.n	8001410 <dev_gpio_pin_id+0xec>
		if (pin & 0x2000) return 13;
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <dev_gpio_pin_id+0xce>
 80013ee:	230d      	movs	r3, #13
 80013f0:	e00e      	b.n	8001410 <dev_gpio_pin_id+0xec>
		if (pin & 0x4000) return 14;
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <dev_gpio_pin_id+0xdc>
 80013fc:	230e      	movs	r3, #14
 80013fe:	e007      	b.n	8001410 <dev_gpio_pin_id+0xec>
		if (pin & 0x8000) return 15;
 8001400:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001404:	2b00      	cmp	r3, #0
 8001406:	da01      	bge.n	800140c <dev_gpio_pin_id+0xe8>
 8001408:	230f      	movs	r3, #15
 800140a:	e001      	b.n	8001410 <dev_gpio_pin_id+0xec>

		return -1;	
 800140c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr
	...

0800141c <dev_gpio_init_rcc>:

//------------------------------------------------------------------------------
//         GPIO Init Functions
//------------------------------------------------------------------------------
UINT8 dev_gpio_init_rcc(UINT8 gpio_id)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
		switch(gpio_id)
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	2b04      	cmp	r3, #4
 800142a:	d84e      	bhi.n	80014ca <dev_gpio_init_rcc+0xae>
 800142c:	a201      	add	r2, pc, #4	; (adr r2, 8001434 <dev_gpio_init_rcc+0x18>)
 800142e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001432:	bf00      	nop
 8001434:	08001449 	.word	0x08001449
 8001438:	08001463 	.word	0x08001463
 800143c:	0800147d 	.word	0x0800147d
 8001440:	08001497 	.word	0x08001497
 8001444:	080014b1 	.word	0x080014b1
		{
				case GPIO_PA : __HAL_RCC_GPIOA_CLK_ENABLE(); break;
 8001448:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <dev_gpio_init_rcc+0xc4>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a24      	ldr	r2, [pc, #144]	; (80014e0 <dev_gpio_init_rcc+0xc4>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <dev_gpio_init_rcc+0xc4>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	61fb      	str	r3, [r7, #28]
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	e038      	b.n	80014d4 <dev_gpio_init_rcc+0xb8>
				case GPIO_PB : __HAL_RCC_GPIOB_CLK_ENABLE(); break;
 8001462:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <dev_gpio_init_rcc+0xc4>)
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	4a1e      	ldr	r2, [pc, #120]	; (80014e0 <dev_gpio_init_rcc+0xc4>)
 8001468:	f043 0308 	orr.w	r3, r3, #8
 800146c:	6193      	str	r3, [r2, #24]
 800146e:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <dev_gpio_init_rcc+0xc4>)
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	61bb      	str	r3, [r7, #24]
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	e02b      	b.n	80014d4 <dev_gpio_init_rcc+0xb8>
				case GPIO_PC : __HAL_RCC_GPIOC_CLK_ENABLE(); break;
 800147c:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <dev_gpio_init_rcc+0xc4>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	4a17      	ldr	r2, [pc, #92]	; (80014e0 <dev_gpio_init_rcc+0xc4>)
 8001482:	f043 0310 	orr.w	r3, r3, #16
 8001486:	6193      	str	r3, [r2, #24]
 8001488:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <dev_gpio_init_rcc+0xc4>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f003 0310 	and.w	r3, r3, #16
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	e01e      	b.n	80014d4 <dev_gpio_init_rcc+0xb8>
				case GPIO_PD : __HAL_RCC_GPIOD_CLK_ENABLE(); break;
 8001496:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <dev_gpio_init_rcc+0xc4>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	4a11      	ldr	r2, [pc, #68]	; (80014e0 <dev_gpio_init_rcc+0xc4>)
 800149c:	f043 0320 	orr.w	r3, r3, #32
 80014a0:	6193      	str	r3, [r2, #24]
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <dev_gpio_init_rcc+0xc4>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	f003 0320 	and.w	r3, r3, #32
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	e011      	b.n	80014d4 <dev_gpio_init_rcc+0xb8>
				case GPIO_PE : __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <dev_gpio_init_rcc+0xc4>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <dev_gpio_init_rcc+0xc4>)
 80014b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014ba:	6193      	str	r3, [r2, #24]
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <dev_gpio_init_rcc+0xc4>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	e004      	b.n	80014d4 <dev_gpio_init_rcc+0xb8>
			
#ifdef	GPIOI			
				case GPIO_PI : __HAL_RCC_GPIOI_CLK_ENABLE(); break;
#endif
			
				default : TRACE_GERROR("Unknow GPIO !!!");
 80014ca:	22a4      	movs	r2, #164	; 0xa4
 80014cc:	4905      	ldr	r1, [pc, #20]	; (80014e4 <dev_gpio_init_rcc+0xc8>)
 80014ce:	4806      	ldr	r0, [pc, #24]	; (80014e8 <dev_gpio_init_rcc+0xcc>)
 80014d0:	f7ff fafa 	bl	8000ac8 <dev_trace_generate_error>
		}
		
		return RET_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000
 80014e4:	08005b44 	.word	0x08005b44
 80014e8:	08005b5c 	.word	0x08005b5c

080014ec <dev_gpio_init_mode>:
			
		return RET_OK;
}

UINT8 dev_gpio_init_mode(GPIO_InitTypeDef* init, UINT8 gpio_mode)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	70fb      	strb	r3, [r7, #3]
	
		switch(gpio_mode)
 80014f8:	78fb      	ldrb	r3, [r7, #3]
 80014fa:	2b0b      	cmp	r3, #11
 80014fc:	d859      	bhi.n	80015b2 <dev_gpio_init_mode+0xc6>
 80014fe:	a201      	add	r2, pc, #4	; (adr r2, 8001504 <dev_gpio_init_mode+0x18>)
 8001500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001504:	08001535 	.word	0x08001535
 8001508:	0800155f 	.word	0x0800155f
 800150c:	08001535 	.word	0x08001535
 8001510:	08001551 	.word	0x08001551
 8001514:	08001543 	.word	0x08001543
 8001518:	0800155f 	.word	0x0800155f
 800151c:	0800156d 	.word	0x0800156d
 8001520:	0800157b 	.word	0x0800157b
 8001524:	08001589 	.word	0x08001589
 8001528:	08001597 	.word	0x08001597
 800152c:	0800157b 	.word	0x0800157b
 8001530:	080015a5 	.word	0x080015a5
		{
				case GPIO_MODE_IN : 
				case GPIO_MODE_IN_FLOAT : 	init->Mode = GPIO_MODE_INPUT;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	605a      	str	r2, [r3, #4]
																		init->Pull = GPIO_NOPULL; break;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	e03e      	b.n	80015c0 <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_IN_UP : 			init->Mode = GPIO_MODE_INPUT;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	605a      	str	r2, [r3, #4]
																		init->Pull = GPIO_PULLUP; break;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	e037      	b.n	80015c0 <dev_gpio_init_mode+0xd4>
				
				case GPIO_MODE_IN_DOWN : 		init->Mode = GPIO_MODE_INPUT;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	605a      	str	r2, [r3, #4]
																		init->Pull = GPIO_PULLDOWN; break;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2202      	movs	r2, #2
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	e030      	b.n	80015c0 <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_OUT : 
				case GPIO_MODE_OUT_PP : 		init->Mode 	= GPIO_MODE_OUTPUT_PP;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	e029      	b.n	80015c0 <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_OUT_OD : 		init->Mode 	= GPIO_MODE_OUTPUT_OD;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2211      	movs	r2, #17
 8001570:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	e022      	b.n	80015c0 <dev_gpio_init_mode+0xd4>
#ifdef GPIO_MODE_AF_INPUT				
				case GPIO_MODE_ALF : 
				case GPIO_MODE_ALF_IN : 		init->Mode 	= GPIO_MODE_AF_INPUT;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	e01b      	b.n	80015c0 <dev_gpio_init_mode+0xd4>
#endif				
				
				case GPIO_MODE_ALF_PP : 		init->Mode 	= GPIO_MODE_AF_PP;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2202      	movs	r2, #2
 800158c:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	e014      	b.n	80015c0 <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_ALF_OD : 		init->Mode 	= GPIO_MODE_AF_OD;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2212      	movs	r2, #18
 800159a:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	e00d      	b.n	80015c0 <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_AN : 				init->Mode 	= GPIO_MODE_ANALOG;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2203      	movs	r2, #3
 80015a8:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	e006      	b.n	80015c0 <dev_gpio_init_mode+0xd4>

				default : 									return TRACE_GERROR("Unknow GPIO Mode !!!");
 80015b2:	22e9      	movs	r2, #233	; 0xe9
 80015b4:	4905      	ldr	r1, [pc, #20]	; (80015cc <dev_gpio_init_mode+0xe0>)
 80015b6:	4806      	ldr	r0, [pc, #24]	; (80015d0 <dev_gpio_init_mode+0xe4>)
 80015b8:	f7ff fa86 	bl	8000ac8 <dev_trace_generate_error>
 80015bc:	4603      	mov	r3, r0
 80015be:	e000      	b.n	80015c2 <dev_gpio_init_mode+0xd6>
				
		};
		
		return RET_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	08005b44 	.word	0x08005b44
 80015d0:	08005b6c 	.word	0x08005b6c

080015d4 <dev_gpio_init_speed>:

UINT8 dev_gpio_init_speed(GPIO_InitTypeDef* init, UINT8 gpio_speed)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	70fb      	strb	r3, [r7, #3]
		switch(gpio_speed)
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d81a      	bhi.n	800161c <dev_gpio_init_speed+0x48>
 80015e6:	a201      	add	r2, pc, #4	; (adr r2, 80015ec <dev_gpio_init_speed+0x18>)
 80015e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ec:	080015fd 	.word	0x080015fd
 80015f0:	08001605 	.word	0x08001605
 80015f4:	0800160d 	.word	0x0800160d
 80015f8:	08001615 	.word	0x08001615
		{
				case GPIO_PIN_SPEED_VHIGH : 			init->Speed = GPIO_SPEED_FREQ_HIGH; break;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2203      	movs	r2, #3
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	e012      	b.n	800162a <dev_gpio_init_speed+0x56>
				case GPIO_PIN_SPEED_HIGH : 				init->Speed = GPIO_SPEED_FREQ_HIGH; break;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2203      	movs	r2, #3
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	e00e      	b.n	800162a <dev_gpio_init_speed+0x56>
				case GPIO_PIN_SPEED_MED : 				init->Speed = GPIO_SPEED_FREQ_MEDIUM; break;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	e00a      	b.n	800162a <dev_gpio_init_speed+0x56>
				case GPIO_PIN_SPEED_LOW : 				init->Speed = GPIO_SPEED_FREQ_LOW; break;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2202      	movs	r2, #2
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	e006      	b.n	800162a <dev_gpio_init_speed+0x56>
			
				default : 									return TRACE_GERROR("Unknow GPIO Speed !!!");
 800161c:	22f9      	movs	r2, #249	; 0xf9
 800161e:	4905      	ldr	r1, [pc, #20]	; (8001634 <dev_gpio_init_speed+0x60>)
 8001620:	4805      	ldr	r0, [pc, #20]	; (8001638 <dev_gpio_init_speed+0x64>)
 8001622:	f7ff fa51 	bl	8000ac8 <dev_trace_generate_error>
 8001626:	4603      	mov	r3, r0
 8001628:	e000      	b.n	800162c <dev_gpio_init_speed+0x58>
		};

		return RET_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	08005b44 	.word	0x08005b44
 8001638:	08005b84 	.word	0x08005b84

0800163c <dev_gpio_init>:
	
		return RET_OK;
}

UINT8 dev_gpio_init(dev_gpio_t* gpio, dev_gpio_init_t* init)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
		UINT8 ret;
		GPIO_InitTypeDef GPIO_InitStructure;

		hal_driver_set_info(&init->info, &gpio->info);
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3304      	adds	r3, #4
 800164c:	4619      	mov	r1, r3
 800164e:	4610      	mov	r0, r2
 8001650:	f7ff fd44 	bl	80010dc <hal_driver_set_info>
	
		gpio->port = dev_gpio_id_port(gpio->info.id);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	791b      	ldrb	r3, [r3, #4]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fe33 	bl	80012c4 <dev_gpio_id_port>
 800165e:	4602      	mov	r2, r0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	601a      	str	r2, [r3, #0]
		gpio->pin = init->pin;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	8b1a      	ldrh	r2, [r3, #24]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	839a      	strh	r2, [r3, #28]
	
		GPIO_InitStructure.Pin = gpio->pin; 
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	8b9b      	ldrh	r3, [r3, #28]
 8001670:	60bb      	str	r3, [r7, #8]
	
		ret = dev_gpio_init_rcc(gpio->info.id);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	791b      	ldrb	r3, [r3, #4]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fed0 	bl	800141c <dev_gpio_init_rcc>
 800167c:	4603      	mov	r3, r0
 800167e:	77fb      	strb	r3, [r7, #31]
		if (ret) return TRACE_EERROR(ret);
 8001680:	7ffb      	ldrb	r3, [r7, #31]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d008      	beq.n	8001698 <dev_gpio_init+0x5c>
 8001686:	7ffb      	ldrb	r3, [r7, #31]
 8001688:	f240 1213 	movw	r2, #275	; 0x113
 800168c:	4978      	ldr	r1, [pc, #480]	; (8001870 <dev_gpio_init+0x234>)
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fa00 	bl	8000a94 <dev_trace_get_error>
 8001694:	4603      	mov	r3, r0
 8001696:	e0e7      	b.n	8001868 <dev_gpio_init+0x22c>
	
		ret = dev_gpio_init_mode(&GPIO_InitStructure, init->mode);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	7e9a      	ldrb	r2, [r3, #26]
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	4611      	mov	r1, r2
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff ff22 	bl	80014ec <dev_gpio_init_mode>
 80016a8:	4603      	mov	r3, r0
 80016aa:	77fb      	strb	r3, [r7, #31]
		if (ret) return TRACE_EERROR(ret);
 80016ac:	7ffb      	ldrb	r3, [r7, #31]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d008      	beq.n	80016c4 <dev_gpio_init+0x88>
 80016b2:	7ffb      	ldrb	r3, [r7, #31]
 80016b4:	f44f 728b 	mov.w	r2, #278	; 0x116
 80016b8:	496d      	ldr	r1, [pc, #436]	; (8001870 <dev_gpio_init+0x234>)
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff f9ea 	bl	8000a94 <dev_trace_get_error>
 80016c0:	4603      	mov	r3, r0
 80016c2:	e0d1      	b.n	8001868 <dev_gpio_init+0x22c>
	
		ret = dev_gpio_init_speed(&GPIO_InitStructure, init->speed);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	7eda      	ldrb	r2, [r3, #27]
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff ff80 	bl	80015d4 <dev_gpio_init_speed>
 80016d4:	4603      	mov	r3, r0
 80016d6:	77fb      	strb	r3, [r7, #31]
		if (ret) return TRACE_EERROR(ret);
 80016d8:	7ffb      	ldrb	r3, [r7, #31]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d008      	beq.n	80016f0 <dev_gpio_init+0xb4>
 80016de:	7ffb      	ldrb	r3, [r7, #31]
 80016e0:	f240 1219 	movw	r2, #281	; 0x119
 80016e4:	4962      	ldr	r1, [pc, #392]	; (8001870 <dev_gpio_init+0x234>)
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff f9d4 	bl	8000a94 <dev_trace_get_error>
 80016ec:	4603      	mov	r3, r0
 80016ee:	e0bb      	b.n	8001868 <dev_gpio_init+0x22c>
	
	  // EXTI interrupt init
		if (init->irq_cbf)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d013      	beq.n	8001720 <dev_gpio_init+0xe4>
		{
				switch(init->irq_mode)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	7f1b      	ldrb	r3, [r3, #28]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d00c      	beq.n	800171a <dev_gpio_init+0xde>
 8001700:	2b03      	cmp	r3, #3
 8001702:	dc0e      	bgt.n	8001722 <dev_gpio_init+0xe6>
 8001704:	2b01      	cmp	r3, #1
 8001706:	d002      	beq.n	800170e <dev_gpio_init+0xd2>
 8001708:	2b02      	cmp	r3, #2
 800170a:	d003      	beq.n	8001714 <dev_gpio_init+0xd8>
 800170c:	e009      	b.n	8001722 <dev_gpio_init+0xe6>
				{
						case GPIO_IRQ_RISING : 		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING; break;
 800170e:	4b59      	ldr	r3, [pc, #356]	; (8001874 <dev_gpio_init+0x238>)
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	e006      	b.n	8001722 <dev_gpio_init+0xe6>
						case GPIO_IRQ_FALLING : 	GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING; break;
 8001714:	4b57      	ldr	r3, [pc, #348]	; (8001874 <dev_gpio_init+0x238>)
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	e003      	b.n	8001722 <dev_gpio_init+0xe6>
						case GPIO_IRQ_CHANGE : 		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING; break;
 800171a:	4b56      	ldr	r3, [pc, #344]	; (8001874 <dev_gpio_init+0x238>)
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	e000      	b.n	8001722 <dev_gpio_init+0xe6>
				}
		}	
 8001720:	bf00      	nop
	
		HAL_GPIO_Init(gpio->port, &GPIO_InitStructure);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f107 0208 	add.w	r2, r7, #8
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f001 fbe9 	bl	8002f04 <HAL_GPIO_Init>

		HAL_DRIVER_DEBUG(gpio->info.status_in, debug_printf("Init Gpio %s - %d, %X\n\r", gpio->info.name, gpio->info.id, gpio->pin));		
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00e      	beq.n	8001758 <dev_gpio_init+0x11c>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d009      	beq.n	8001758 <dev_gpio_init+0x11c>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6959      	ldr	r1, [r3, #20]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	791b      	ldrb	r3, [r3, #4]
 800174c:	461a      	mov	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	8b9b      	ldrh	r3, [r3, #28]
 8001752:	4849      	ldr	r0, [pc, #292]	; (8001878 <dev_gpio_init+0x23c>)
 8001754:	f7ff fb26 	bl	8000da4 <debug_printf>

	  // EXTI interrupt init
		if (init->irq_cbf)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 8082 	beq.w	8001866 <dev_gpio_init+0x22a>
		{
				int pin_id = dev_gpio_pin_id(gpio->pin);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	8b9b      	ldrh	r3, [r3, #28]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fddc 	bl	8001324 <dev_gpio_pin_id>
 800176c:	61b8      	str	r0, [r7, #24]
			
				if (pin_id < 0) return TRACE_GERROR("Irq Line!!!");
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	2b00      	cmp	r3, #0
 8001772:	da07      	bge.n	8001784 <dev_gpio_init+0x148>
 8001774:	f240 122f 	movw	r2, #303	; 0x12f
 8001778:	493d      	ldr	r1, [pc, #244]	; (8001870 <dev_gpio_init+0x234>)
 800177a:	4840      	ldr	r0, [pc, #256]	; (800187c <dev_gpio_init+0x240>)
 800177c:	f7ff f9a4 	bl	8000ac8 <dev_trace_generate_error>
 8001780:	4603      	mov	r3, r0
 8001782:	e071      	b.n	8001868 <dev_gpio_init+0x22c>
			
				gpio_irq_cbf[pin_id] = init->irq_cbf;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	6a1a      	ldr	r2, [r3, #32]
 8001788:	493d      	ldr	r1, [pc, #244]	; (8001880 <dev_gpio_init+0x244>)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			
				switch(pin_id)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	2b0f      	cmp	r3, #15
 8001794:	d83e      	bhi.n	8001814 <dev_gpio_init+0x1d8>
 8001796:	a201      	add	r2, pc, #4	; (adr r2, 800179c <dev_gpio_init+0x160>)
 8001798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179c:	080017dd 	.word	0x080017dd
 80017a0:	080017e5 	.word	0x080017e5
 80017a4:	080017ed 	.word	0x080017ed
 80017a8:	080017f5 	.word	0x080017f5
 80017ac:	080017fd 	.word	0x080017fd
 80017b0:	08001805 	.word	0x08001805
 80017b4:	08001805 	.word	0x08001805
 80017b8:	08001805 	.word	0x08001805
 80017bc:	08001805 	.word	0x08001805
 80017c0:	08001805 	.word	0x08001805
 80017c4:	0800180d 	.word	0x0800180d
 80017c8:	0800180d 	.word	0x0800180d
 80017cc:	0800180d 	.word	0x0800180d
 80017d0:	0800180d 	.word	0x0800180d
 80017d4:	0800180d 	.word	0x0800180d
 80017d8:	0800180d 	.word	0x0800180d
				{
						case 0 : gpio->irq_line = EXTI0_IRQn; break;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2206      	movs	r2, #6
 80017e0:	779a      	strb	r2, [r3, #30]
 80017e2:	e017      	b.n	8001814 <dev_gpio_init+0x1d8>
						case 1 : gpio->irq_line = EXTI1_IRQn; break;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2207      	movs	r2, #7
 80017e8:	779a      	strb	r2, [r3, #30]
 80017ea:	e013      	b.n	8001814 <dev_gpio_init+0x1d8>
						case 2 : gpio->irq_line = EXTI2_IRQn; break;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2208      	movs	r2, #8
 80017f0:	779a      	strb	r2, [r3, #30]
 80017f2:	e00f      	b.n	8001814 <dev_gpio_init+0x1d8>
						case 3 : gpio->irq_line = EXTI3_IRQn; break;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2209      	movs	r2, #9
 80017f8:	779a      	strb	r2, [r3, #30]
 80017fa:	e00b      	b.n	8001814 <dev_gpio_init+0x1d8>
						case 4 : gpio->irq_line = EXTI4_IRQn; break;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	220a      	movs	r2, #10
 8001800:	779a      	strb	r2, [r3, #30]
 8001802:	e007      	b.n	8001814 <dev_gpio_init+0x1d8>

						case 5 : 
						case 6 : 
						case 7 : 
						case 8 : 
						case 9 : gpio->irq_line = EXTI9_5_IRQn; break;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2217      	movs	r2, #23
 8001808:	779a      	strb	r2, [r3, #30]
 800180a:	e003      	b.n	8001814 <dev_gpio_init+0x1d8>
						case 10 : 
						case 11 : 
						case 12 : 
						case 13 : 
						case 14 : 
						case 15 : gpio->irq_line = EXTI15_10_IRQn; break;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2228      	movs	r2, #40	; 0x28
 8001810:	779a      	strb	r2, [r3, #30]
 8001812:	bf00      	nop
				}
			
				HAL_NVIC_SetPriority((IRQn_Type)gpio->irq_line, (init->irq_prior >> 4) & 0x0F, init->irq_prior & 0x0F);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	7f9b      	ldrb	r3, [r3, #30]
 8001818:	b258      	sxtb	r0, r3
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	7f5b      	ldrb	r3, [r3, #29]
 800181e:	091b      	lsrs	r3, r3, #4
 8001820:	b2db      	uxtb	r3, r3
 8001822:	f003 010f 	and.w	r1, r3, #15
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	7f5b      	ldrb	r3, [r3, #29]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	461a      	mov	r2, r3
 8001830:	f001 f88f 	bl	8002952 <HAL_NVIC_SetPriority>
				HAL_NVIC_EnableIRQ((IRQn_Type)gpio->irq_line);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	7f9b      	ldrb	r3, [r3, #30]
 8001838:	b25b      	sxtb	r3, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f001 f8a5 	bl	800298a <HAL_NVIC_EnableIRQ>

			
				HAL_DRIVER_DEBUG(gpio->info.status_in, debug_printf("Init Gpio IRQ %s -, %d, %X\n\r", gpio->info.name, gpio->info.id, gpio->irq_line));		
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00e      	beq.n	8001866 <dev_gpio_init+0x22a>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d009      	beq.n	8001866 <dev_gpio_init+0x22a>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6959      	ldr	r1, [r3, #20]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	791b      	ldrb	r3, [r3, #4]
 800185a:	461a      	mov	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	7f9b      	ldrb	r3, [r3, #30]
 8001860:	4808      	ldr	r0, [pc, #32]	; (8001884 <dev_gpio_init+0x248>)
 8001862:	f7ff fa9f 	bl	8000da4 <debug_printf>
		}	

		return RET_OK;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3720      	adds	r7, #32
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	08005b44 	.word	0x08005b44
 8001874:	10110000 	.word	0x10110000
 8001878:	08005b9c 	.word	0x08005b9c
 800187c:	08005bb4 	.word	0x08005bb4
 8001880:	200000f0 	.word	0x200000f0
 8001884:	08005bc0 	.word	0x08005bc0

08001888 <dev_gpio_init_simp>:

UINT8 dev_gpio_init_simp(dev_gpio_t* gpio, UINT8 gpio_id, UINT16 gpio_pin, UINT8 gpio_mode)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08c      	sub	sp, #48	; 0x30
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	4608      	mov	r0, r1
 8001892:	4611      	mov	r1, r2
 8001894:	461a      	mov	r2, r3
 8001896:	4603      	mov	r3, r0
 8001898:	70fb      	strb	r3, [r7, #3]
 800189a:	460b      	mov	r3, r1
 800189c:	803b      	strh	r3, [r7, #0]
 800189e:	4613      	mov	r3, r2
 80018a0:	70bb      	strb	r3, [r7, #2]
		dev_gpio_init_t init;
	
		init.info.id = gpio_id;
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	733b      	strb	r3, [r7, #12]
		init.info.name = "";
 80018a6:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <dev_gpio_init_simp+0x5c>)
 80018a8:	61fb      	str	r3, [r7, #28]
		init.info.status_in = 0; 
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
		init.info.status_out = 0; 
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]

		init.pin = gpio_pin;
 80018b2:	883b      	ldrh	r3, [r7, #0]
 80018b4:	84bb      	strh	r3, [r7, #36]	; 0x24
		init.mode = gpio_mode;
 80018b6:	78bb      	ldrb	r3, [r7, #2]
 80018b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		init.speed = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		init.irq_cbf = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
		init.irq_mode = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	
		return dev_gpio_init(gpio, &init);
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	4619      	mov	r1, r3
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff feb2 	bl	800163c <dev_gpio_init>
 80018d8:	4603      	mov	r3, r0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3730      	adds	r7, #48	; 0x30
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	08005be0 	.word	0x08005be0

080018e8 <dev_gpio_set>:
{
		return 0; //HAL_GPIO_ReadPins(gpio->port, gpio->pin); 
}

void dev_gpio_set(dev_gpio_t* gpio, UINT8 val)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	70fb      	strb	r3, [r7, #3]
		if (val) HAL_GPIO_WritePin(gpio->port, gpio->pin, (GPIO_PinState)1); 
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d008      	beq.n	800190c <dev_gpio_set+0x24>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6818      	ldr	r0, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	8b9b      	ldrh	r3, [r3, #28]
 8001902:	2201      	movs	r2, #1
 8001904:	4619      	mov	r1, r3
 8001906:	f001 fc81 	bl	800320c <HAL_GPIO_WritePin>
				else HAL_GPIO_WritePin(gpio->port, gpio->pin, (GPIO_PinState)0);
}
 800190a:	e007      	b.n	800191c <dev_gpio_set+0x34>
				else HAL_GPIO_WritePin(gpio->port, gpio->pin, (GPIO_PinState)0);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	8b9b      	ldrh	r3, [r3, #28]
 8001914:	2200      	movs	r2, #0
 8001916:	4619      	mov	r1, r3
 8001918:	f001 fc78 	bl	800320c <HAL_GPIO_WritePin>
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <max30102_plot>:
uint8_t tx_buffer[128];
//uint8_t data[128];

// Override plot function
void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
    // printf("ir:%u\n", ir_sample);                  // Print IR only
    // printf("r:%u\n", red_sample);                  // Print Red only
	debug_printf("ir:%d,r:%d\n", ir_sample, red_sample);    // Print IR and Red
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	4803      	ldr	r0, [pc, #12]	; (8001940 <max30102_plot+0x1c>)
 8001934:	f7ff fa36 	bl	8000da4 <debug_printf>
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	08005c04 	.word	0x08005c04

08001944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b090      	sub	sp, #64	; 0x40
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800194a:	f000 fea5 	bl	8002698 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800194e:	f000 f8b7 	bl	8001ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001952:	f000 f979 	bl	8001c48 <MX_GPIO_Init>
  MX_DMA_Init();
 8001956:	f000 f951 	bl	8001bfc <MX_DMA_Init>
  MX_USART1_UART_Init();
 800195a:	f000 f925 	bl	8001ba8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800195e:	f000 f8f5 	bl	8001b4c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  dev_trace_init_t trace_init;
  trace_init.mosi.port = GPIO_PA;
 8001962:	2300      	movs	r3, #0
 8001964:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  trace_init.sck. port = GPIO_PA;
 8001968:	2300      	movs	r3, #0
 800196a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  trace_init.nss.port = GPIO_PA;
 800196e:	2300      	movs	r3, #0
 8001970:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  trace_init.mosi.pin =BB(0, b00000001);
 8001974:	2301      	movs	r3, #1
 8001976:	86bb      	strh	r3, [r7, #52]	; 0x34
  trace_init.sck.pin = BB(0, b00000010);
 8001978:	2302      	movs	r3, #2
 800197a:	873b      	strh	r3, [r7, #56]	; 0x38
  trace_init.nss.pin = BB(0, b00000100);
 800197c:	2304      	movs	r3, #4
 800197e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  dev_trace_init(&trace_init);
 8001980:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fffb 	bl	8000980 <dev_trace_init>

  debug_printf("\r\n\n\n\n******HUMAN HEALTH MONITORING SENSOR******\r\n");
 800198a:	4845      	ldr	r0, [pc, #276]	; (8001aa0 <main+0x15c>)
 800198c:	f7ff fa0a 	bl	8000da4 <debug_printf>

  uint32_t serial_id = 1717;
 8001990:	f240 63b5 	movw	r3, #1717	; 0x6b5
 8001994:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t temperature = 3755;
 8001996:	f640 63ab 	movw	r3, #3755	; 0xeab
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pressure = 140000;
 800199c:	4b41      	ldr	r3, [pc, #260]	; (8001aa4 <main+0x160>)
 800199e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t heart_rate = 55555;
 80019a0:	f64d 1303 	movw	r3, #55555	; 0xd903
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t saturation = 7777;
 80019a6:	f641 6361 	movw	r3, #7777	; 0x1e61
 80019aa:	623b      	str	r3, [r7, #32]


  int data[] = {START_MESSAGE, serial_id, temperature, pressure, heart_rate, saturation, END_MESSAGE};
 80019ac:	23aa      	movs	r3, #170	; 0xaa
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	6a3b      	ldr	r3, [r7, #32]
 80019c2:	61bb      	str	r3, [r7, #24]
 80019c4:	2355      	movs	r3, #85	; 0x55
 80019c6:	61fb      	str	r3, [r7, #28]
  tx_buffer[0] = START_MESSAGE;
 80019c8:	4b37      	ldr	r3, [pc, #220]	; (8001aa8 <main+0x164>)
 80019ca:	22aa      	movs	r2, #170	; 0xaa
 80019cc:	701a      	strb	r2, [r3, #0]
 80019ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  memcpy(&tx_buffer[1], &serial_id, 4);
 80019d0:	4a35      	ldr	r2, [pc, #212]	; (8001aa8 <main+0x164>)
 80019d2:	f8c2 3001 	str.w	r3, [r2, #1]
 80019d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  memcpy(&tx_buffer[5], &temperature, 4);
 80019d8:	4a33      	ldr	r2, [pc, #204]	; (8001aa8 <main+0x164>)
 80019da:	f8c2 3005 	str.w	r3, [r2, #5]
 80019de:	6abb      	ldr	r3, [r7, #40]	; 0x28
  memcpy(&tx_buffer[9], &pressure, 4);
 80019e0:	4a31      	ldr	r2, [pc, #196]	; (8001aa8 <main+0x164>)
 80019e2:	f8c2 3009 	str.w	r3, [r2, #9]
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  memcpy(&tx_buffer[13], &heart_rate, 4);
 80019e8:	4a2f      	ldr	r2, [pc, #188]	; (8001aa8 <main+0x164>)
 80019ea:	f8c2 300d 	str.w	r3, [r2, #13]
 80019ee:	6a3b      	ldr	r3, [r7, #32]
  memcpy(&tx_buffer[17], &saturation, 4);
 80019f0:	4a2d      	ldr	r2, [pc, #180]	; (8001aa8 <main+0x164>)
 80019f2:	f8c2 3011 	str.w	r3, [r2, #17]
  tx_buffer[21] = END_MESSAGE;
 80019f6:	4b2c      	ldr	r3, [pc, #176]	; (8001aa8 <main+0x164>)
 80019f8:	2255      	movs	r2, #85	; 0x55
 80019fa:	755a      	strb	r2, [r3, #21]

  max30102_init(&max30102, &hi2c1);
 80019fc:	492b      	ldr	r1, [pc, #172]	; (8001aac <main+0x168>)
 80019fe:	482c      	ldr	r0, [pc, #176]	; (8001ab0 <main+0x16c>)
 8001a00:	f000 f997 	bl	8001d32 <max30102_init>
//  max30102_on_interrupt(&max30102);

  max30102_reset(&max30102);
 8001a04:	482a      	ldr	r0, [pc, #168]	; (8001ab0 <main+0x16c>)
 8001a06:	f000 fa08 	bl	8001e1a <max30102_reset>
   max30102_clear_fifo(&max30102);
 8001a0a:	4829      	ldr	r0, [pc, #164]	; (8001ab0 <main+0x16c>)
 8001a0c:	f000 fbea 	bl	80021e4 <max30102_clear_fifo>


   // FIFO configurations
     max30102_set_fifo_config(&max30102, max30102_smp_ave_8, 1, 7);
 8001a10:	2307      	movs	r3, #7
 8001a12:	2201      	movs	r2, #1
 8001a14:	2103      	movs	r1, #3
 8001a16:	4826      	ldr	r0, [pc, #152]	; (8001ab0 <main+0x16c>)
 8001a18:	f000 fbaa 	bl	8002170 <max30102_set_fifo_config>
     // LED configurations
     max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	4824      	ldr	r0, [pc, #144]	; (8001ab0 <main+0x16c>)
 8001a20:	f000 fb0d 	bl	800203e <max30102_set_led_pulse_width>
     max30102_set_adc_resolution(&max30102, max30102_adc_2048);
 8001a24:	2100      	movs	r1, #0
 8001a26:	4822      	ldr	r0, [pc, #136]	; (8001ab0 <main+0x16c>)
 8001a28:	f000 fb2c 	bl	8002084 <max30102_set_adc_resolution>
     max30102_set_sampling_rate(&max30102, max30102_sr_800);
 8001a2c:	2104      	movs	r1, #4
 8001a2e:	4820      	ldr	r0, [pc, #128]	; (8001ab0 <main+0x16c>)
 8001a30:	f000 fae6 	bl	8002000 <max30102_set_sampling_rate>
     max30102_set_led_current_1(&max30102, 6.2);
 8001a34:	491f      	ldr	r1, [pc, #124]	; (8001ab4 <main+0x170>)
 8001a36:	481e      	ldr	r0, [pc, #120]	; (8001ab0 <main+0x16c>)
 8001a38:	f000 fb4a 	bl	80020d0 <max30102_set_led_current_1>
     max30102_set_led_current_2(&max30102, 6.2);
 8001a3c:	491d      	ldr	r1, [pc, #116]	; (8001ab4 <main+0x170>)
 8001a3e:	481c      	ldr	r0, [pc, #112]	; (8001ab0 <main+0x16c>)
 8001a40:	f000 fb6e 	bl	8002120 <max30102_set_led_current_2>

     // Enter SpO2 mode
     max30102_set_mode(&max30102, max30102_spo2);
 8001a44:	2103      	movs	r1, #3
 8001a46:	481a      	ldr	r0, [pc, #104]	; (8001ab0 <main+0x16c>)
 8001a48:	f000 fab4 	bl	8001fb4 <max30102_set_mode>

     // Enable FIFO_A_FULL interrupt
     max30102_set_a_full(&max30102, 1);
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	4818      	ldr	r0, [pc, #96]	; (8001ab0 <main+0x16c>)
 8001a50:	f000 f9f4 	bl	8001e3c <max30102_set_a_full>
     // Enable die temperature measurement
     max30102_set_die_temp_en(&max30102, 1);
 8001a54:	2101      	movs	r1, #1
 8001a56:	4816      	ldr	r0, [pc, #88]	; (8001ab0 <main+0x16c>)
 8001a58:	f000 fa30 	bl	8001ebc <max30102_set_die_temp_en>
     // Enable DIE_TEMP_RDY interrupt
     max30102_set_die_temp_rdy(&max30102, 1);
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	4814      	ldr	r0, [pc, #80]	; (8001ab0 <main+0x16c>)
 8001a60:	f000 fa14 	bl	8001e8c <max30102_set_die_temp_rdy>

     uint8_t en_reg[2] = {0};
 8001a64:	2300      	movs	r3, #0
 8001a66:	803b      	strh	r3, [r7, #0]
     max30102_read(&max30102, 0x00, en_reg, 1);
 8001a68:	463a      	mov	r2, r7
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4810      	ldr	r0, [pc, #64]	; (8001ab0 <main+0x16c>)
 8001a70:	f000 f9b0 	bl	8001dd4 <max30102_read>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13);
 8001a74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a78:	480f      	ldr	r0, [pc, #60]	; (8001ab8 <main+0x174>)
 8001a7a:	f001 fbdf 	bl	800323c <HAL_GPIO_TogglePin>
	  HAL_Delay (1000);   /* Insert delay 100 ms */
 8001a7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a82:	f000 fe6b 	bl	800275c <HAL_Delay>

//	  HAL_UART_Transmit_DMA(&huart1, tx_buffer, sizeof(tx_buffer));
//	  HAL_Delay(1000);


	  HAL_UART_Transmit_DMA(&huart1, tx_buffer, 22);
 8001a86:	2216      	movs	r2, #22
 8001a88:	4907      	ldr	r1, [pc, #28]	; (8001aa8 <main+0x164>)
 8001a8a:	480c      	ldr	r0, [pc, #48]	; (8001abc <main+0x178>)
 8001a8c:	f003 f8a6 	bl	8004bdc <HAL_UART_Transmit_DMA>
	  HAL_Delay(1000);
 8001a90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a94:	f000 fe62 	bl	800275c <HAL_Delay>

	  // If interrupt flag is active
//	  	  if (max30102_has_interrupt(&max30102))
//	  	  {
	  		// Run interrupt handler to read FIFO
	  		max30102_interrupt_handler(&max30102);
 8001a98:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <main+0x16c>)
 8001a9a:	f000 fa35 	bl	8001f08 <max30102_interrupt_handler>
	  HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13);
 8001a9e:	e7e9      	b.n	8001a74 <main+0x130>
 8001aa0:	08005c10 	.word	0x08005c10
 8001aa4:	000222e0 	.word	0x000222e0
 8001aa8:	20000254 	.word	0x20000254
 8001aac:	20000130 	.word	0x20000130
 8001ab0:	200002d4 	.word	0x200002d4
 8001ab4:	40c66666 	.word	0x40c66666
 8001ab8:	40011000 	.word	0x40011000
 8001abc:	20000184 	.word	0x20000184

08001ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b090      	sub	sp, #64	; 0x40
 8001ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ac6:	f107 0318 	add.w	r3, r7, #24
 8001aca:	2228      	movs	r2, #40	; 0x28
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 fef2 	bl	80058b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
 8001ae0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ae6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001af0:	2301      	movs	r3, #1
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001af4:	2302      	movs	r3, #2
 8001af6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001af8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001afc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001afe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b04:	f107 0318 	add.w	r3, r7, #24
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f002 fc07 	bl	800431c <HAL_RCC_OscConfig>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001b14:	f000 f908 	bl	8001d28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b18:	230f      	movs	r3, #15
 8001b1a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	2102      	movs	r1, #2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f002 fe74 	bl	8004820 <HAL_RCC_ClockConfig>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001b3e:	f000 f8f3 	bl	8001d28 <Error_Handler>
  }
}
 8001b42:	bf00      	nop
 8001b44:	3740      	adds	r7, #64	; 0x40
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <MX_I2C1_Init+0x50>)
 8001b52:	4a13      	ldr	r2, [pc, #76]	; (8001ba0 <MX_I2C1_Init+0x54>)
 8001b54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <MX_I2C1_Init+0x50>)
 8001b58:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <MX_I2C1_Init+0x58>)
 8001b5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <MX_I2C1_Init+0x50>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b62:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <MX_I2C1_Init+0x50>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <MX_I2C1_Init+0x50>)
 8001b6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b70:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <MX_I2C1_Init+0x50>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <MX_I2C1_Init+0x50>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b7c:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <MX_I2C1_Init+0x50>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b82:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <MX_I2C1_Init+0x50>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b88:	4804      	ldr	r0, [pc, #16]	; (8001b9c <MX_I2C1_Init+0x50>)
 8001b8a:	f001 fb93 	bl	80032b4 <HAL_I2C_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b94:	f000 f8c8 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000130 	.word	0x20000130
 8001ba0:	40005400 	.word	0x40005400
 8001ba4:	000186a0 	.word	0x000186a0

08001ba8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bae:	4a12      	ldr	r2, [pc, #72]	; (8001bf8 <MX_USART1_UART_Init+0x50>)
 8001bb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bcc:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bce:	220c      	movs	r2, #12
 8001bd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd2:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bde:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001be0:	f002 ffac 	bl	8004b3c <HAL_UART_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bea:	f000 f89d 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000184 	.word	0x20000184
 8001bf8:	40013800 	.word	0x40013800

08001bfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <MX_DMA_Init+0x48>)
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	4a0f      	ldr	r2, [pc, #60]	; (8001c44 <MX_DMA_Init+0x48>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6153      	str	r3, [r2, #20]
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <MX_DMA_Init+0x48>)
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	200e      	movs	r0, #14
 8001c20:	f000 fe97 	bl	8002952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001c24:	200e      	movs	r0, #14
 8001c26:	f000 feb0 	bl	800298a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	200f      	movs	r0, #15
 8001c30:	f000 fe8f 	bl	8002952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001c34:	200f      	movs	r0, #15
 8001c36:	f000 fea8 	bl	800298a <HAL_NVIC_EnableIRQ>

}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000

08001c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4e:	f107 0310 	add.w	r3, r7, #16
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5c:	4b2e      	ldr	r3, [pc, #184]	; (8001d18 <MX_GPIO_Init+0xd0>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	4a2d      	ldr	r2, [pc, #180]	; (8001d18 <MX_GPIO_Init+0xd0>)
 8001c62:	f043 0310 	orr.w	r3, r3, #16
 8001c66:	6193      	str	r3, [r2, #24]
 8001c68:	4b2b      	ldr	r3, [pc, #172]	; (8001d18 <MX_GPIO_Init+0xd0>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c74:	4b28      	ldr	r3, [pc, #160]	; (8001d18 <MX_GPIO_Init+0xd0>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	4a27      	ldr	r2, [pc, #156]	; (8001d18 <MX_GPIO_Init+0xd0>)
 8001c7a:	f043 0320 	orr.w	r3, r3, #32
 8001c7e:	6193      	str	r3, [r2, #24]
 8001c80:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <MX_GPIO_Init+0xd0>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f003 0320 	and.w	r3, r3, #32
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8c:	4b22      	ldr	r3, [pc, #136]	; (8001d18 <MX_GPIO_Init+0xd0>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	4a21      	ldr	r2, [pc, #132]	; (8001d18 <MX_GPIO_Init+0xd0>)
 8001c92:	f043 0308 	orr.w	r3, r3, #8
 8001c96:	6193      	str	r3, [r2, #24]
 8001c98:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <MX_GPIO_Init+0xd0>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca4:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <MX_GPIO_Init+0xd0>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	4a1b      	ldr	r2, [pc, #108]	; (8001d18 <MX_GPIO_Init+0xd0>)
 8001caa:	f043 0304 	orr.w	r3, r3, #4
 8001cae:	6193      	str	r3, [r2, #24]
 8001cb0:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <MX_GPIO_Init+0xd0>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	603b      	str	r3, [r7, #0]
 8001cba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cc2:	4816      	ldr	r0, [pc, #88]	; (8001d1c <MX_GPIO_Init+0xd4>)
 8001cc4:	f001 faa2 	bl	800320c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001cc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ccc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cda:	f107 0310 	add.w	r3, r7, #16
 8001cde:	4619      	mov	r1, r3
 8001ce0:	480e      	ldr	r0, [pc, #56]	; (8001d1c <MX_GPIO_Init+0xd4>)
 8001ce2:	f001 f90f 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cea:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <MX_GPIO_Init+0xd8>)
 8001cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf2:	f107 0310 	add.w	r3, r7, #16
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	480a      	ldr	r0, [pc, #40]	; (8001d24 <MX_GPIO_Init+0xdc>)
 8001cfa:	f001 f903 	bl	8002f04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2100      	movs	r1, #0
 8001d02:	2006      	movs	r0, #6
 8001d04:	f000 fe25 	bl	8002952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d08:	2006      	movs	r0, #6
 8001d0a:	f000 fe3e 	bl	800298a <HAL_NVIC_EnableIRQ>

}
 8001d0e:	bf00      	nop
 8001d10:	3720      	adds	r7, #32
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40011000 	.word	0x40011000
 8001d20:	10210000 	.word	0x10210000
 8001d24:	40010c00 	.word	0x40010c00

08001d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d2c:	b672      	cpsid	i
}
 8001d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <Error_Handler+0x8>

08001d32 <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	2280      	movs	r2, #128	; 0x80
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f003 fdb0 	bl	80058b8 <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3384      	adds	r3, #132	; 0x84
 8001d5c:	2280      	movs	r2, #128	; 0x80
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f003 fda9 	bl	80058b8 <memset>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b088      	sub	sp, #32
 8001d72:	af02      	add	r7, sp, #8
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	72fb      	strb	r3, [r7, #11]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001d82:	893b      	ldrh	r3, [r7, #8]
 8001d84:	3301      	adds	r3, #1
 8001d86:	4618      	mov	r0, r3
 8001d88:	f003 fd78 	bl	800587c <malloc>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	617b      	str	r3, [r7, #20]
    *payload = reg;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	7afa      	ldrb	r2, [r7, #11]
 8001d94:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d009      	beq.n	8001db0 <max30102_write+0x42>
 8001d9c:	893b      	ldrh	r3, [r7, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d006      	beq.n	8001db0 <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	3301      	adds	r3, #1
 8001da6:	893a      	ldrh	r2, [r7, #8]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f003 fd76 	bl	800589c <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	893b      	ldrh	r3, [r7, #8]
 8001db6:	3301      	adds	r3, #1
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	220a      	movs	r2, #10
 8001dbc:	9200      	str	r2, [sp, #0]
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	21ae      	movs	r1, #174	; 0xae
 8001dc2:	f001 fbbb 	bl	800353c <HAL_I2C_Master_Transmit>
    free(payload);
 8001dc6:	6978      	ldr	r0, [r7, #20]
 8001dc8:	f003 fd60 	bl	800588c <free>
}
 8001dcc:	bf00      	nop
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af02      	add	r7, sp, #8
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	607a      	str	r2, [r7, #4]
 8001dde:	461a      	mov	r2, r3
 8001de0:	460b      	mov	r3, r1
 8001de2:	72fb      	strb	r3, [r7, #11]
 8001de4:	4613      	mov	r3, r2
 8001de6:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 8001de8:	7afb      	ldrb	r3, [r7, #11]
 8001dea:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	f107 0217 	add.w	r2, r7, #23
 8001df4:	230a      	movs	r3, #10
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	2301      	movs	r3, #1
 8001dfa:	21ae      	movs	r1, #174	; 0xae
 8001dfc:	f001 fb9e 	bl	800353c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6818      	ldr	r0, [r3, #0]
 8001e04:	893b      	ldrh	r3, [r7, #8]
 8001e06:	220a      	movs	r2, #10
 8001e08:	9200      	str	r2, [sp, #0]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	21ae      	movs	r1, #174	; 0xae
 8001e0e:	f001 fc93 	bl	8003738 <HAL_I2C_Master_Receive>
}
 8001e12:	bf00      	nop
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 8001e22:	2340      	movs	r3, #64	; 0x40
 8001e24:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 8001e26:	f107 020f 	add.w	r2, r7, #15
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	2109      	movs	r1, #9
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ff9d 	bl	8001d6e <max30102_write>
}
 8001e34:	bf00      	nop
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8001e4c:	f107 020f 	add.w	r2, r7, #15
 8001e50:	2301      	movs	r3, #1
 8001e52:	2102      	movs	r1, #2
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ffbd 	bl	8001dd4 <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	01db      	lsls	r3, r3, #7
 8001e68:	b25a      	sxtb	r2, r3
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	b25b      	sxtb	r3, r3
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	b25b      	sxtb	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8001e76:	f107 020f 	add.w	r2, r7, #15
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	2102      	movs	r1, #2
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ff75 	bl	8001d6e <max30102_write>
}
 8001e84:	bf00      	nop
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 8001ea6:	f107 020f 	add.w	r2, r7, #15
 8001eaa:	2301      	movs	r3, #1
 8001eac:	2103      	movs	r1, #3
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff ff5d 	bl	8001d6e <max30102_write>
}
 8001eb4:	bf00      	nop
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 8001ed6:	f107 020f 	add.w	r2, r7, #15
 8001eda:	2301      	movs	r3, #1
 8001edc:	2121      	movs	r1, #33	; 0x21
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff ff45 	bl	8001d6e <max30102_write>
}
 8001ee4:	bf00      	nop
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr
	...

08001f08 <max30102_interrupt_handler>:
 * @brief Read interrupt status registers (0x00 and 0x01) and perform corresponding tasks.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_interrupt_handler(max30102_t *obj)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
	debug_printf("handler\n\r");
 8001f10:	4823      	ldr	r0, [pc, #140]	; (8001fa0 <max30102_interrupt_handler+0x98>)
 8001f12:	f7fe ff47 	bl	8000da4 <debug_printf>
    uint8_t reg[2] = {0x00};
 8001f16:	2300      	movs	r3, #0
 8001f18:	81bb      	strh	r3, [r7, #12]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    max30102_read(obj, MAX30102_INTERRUPT_STATUS_1, reg, 2);
 8001f1a:	f107 020c 	add.w	r2, r7, #12
 8001f1e:	2302      	movs	r3, #2
 8001f20:	2100      	movs	r1, #0
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff ff56 	bl	8001dd4 <max30102_read>

    if ((reg[0] >> MAX30102_INTERRUPT_A_FULL) & 0x01)
 8001f28:	7b3b      	ldrb	r3, [r7, #12]
 8001f2a:	09db      	lsrs	r3, r3, #7
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d005      	beq.n	8001f42 <max30102_interrupt_handler+0x3a>
    {
    	debug_printf("1\n\r");
 8001f36:	481b      	ldr	r0, [pc, #108]	; (8001fa4 <max30102_interrupt_handler+0x9c>)
 8001f38:	f7fe ff34 	bl	8000da4 <debug_printf>
        // FIFO almost full
        max30102_read_fifo(obj);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f970 	bl	8002222 <max30102_read_fifo>
    }

    if ((reg[0] >> MAX30102_INTERRUPT_PPG_RDY) & 0x01)
 8001f42:	7b3b      	ldrb	r3, [r7, #12]
 8001f44:	099b      	lsrs	r3, r3, #6
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d002      	beq.n	8001f56 <max30102_interrupt_handler+0x4e>
    {
    	debug_printf("2\n\r");
 8001f50:	4815      	ldr	r0, [pc, #84]	; (8001fa8 <max30102_interrupt_handler+0xa0>)
 8001f52:	f7fe ff27 	bl	8000da4 <debug_printf>
        // New FIFO data ready
    }

    if ((reg[0] >> MAX30102_INTERRUPT_ALC_OVF) & 0x01)
 8001f56:	7b3b      	ldrb	r3, [r7, #12]
 8001f58:	095b      	lsrs	r3, r3, #5
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <max30102_interrupt_handler+0x62>
    {
    	debug_printf("3\n\r");
 8001f64:	4811      	ldr	r0, [pc, #68]	; (8001fac <max30102_interrupt_handler+0xa4>)
 8001f66:	f7fe ff1d 	bl	8000da4 <debug_printf>
        // Ambient light overflow
    }

    if ((reg[1] >> MAX30102_INTERRUPT_DIE_TEMP_RDY) & 0x01)
 8001f6a:	7b7b      	ldrb	r3, [r7, #13]
 8001f6c:	085b      	lsrs	r3, r3, #1
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00a      	beq.n	8001f8e <max30102_interrupt_handler+0x86>
    {
    	debug_printf("4\n\r");
 8001f78:	480d      	ldr	r0, [pc, #52]	; (8001fb0 <max30102_interrupt_handler+0xa8>)
 8001f7a:	f7fe ff13 	bl	8000da4 <debug_printf>
        // Temperature data ready
        int8_t temp_int;
        uint8_t temp_frac;
        max30102_read_temp(obj, &temp_int, &temp_frac);
 8001f7e:	f107 020a 	add.w	r2, r7, #10
 8001f82:	f107 030b 	add.w	r3, r7, #11
 8001f86:	4619      	mov	r1, r3
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f9b1 	bl	80022f0 <max30102_read_temp>
        // float temp = temp_int + 0.0625f * temp_frac;
    }

    // Reset interrupt flag
    obj->_interrupt_flag = 0;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
}
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	08005c50 	.word	0x08005c50
 8001fa4:	08005c5c 	.word	0x08005c5c
 8001fa8:	08005c60 	.word	0x08005c60
 8001fac:	08005c64 	.word	0x08005c64
 8001fb0:	08005c68 	.word	0x08005c68

08001fb4 <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 8001fc0:	f107 020f 	add.w	r2, r7, #15
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	2109      	movs	r1, #9
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff03 	bl	8001dd4 <max30102_read>
    config = (config & 0xf8) | mode;
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	b25b      	sxtb	r3, r3
 8001fd2:	f023 0307 	bic.w	r3, r3, #7
 8001fd6:	b25a      	sxtb	r2, r3
 8001fd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	b25b      	sxtb	r3, r3
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 8001fe4:	f107 020f 	add.w	r2, r7, #15
 8001fe8:	2301      	movs	r3, #1
 8001fea:	2109      	movs	r1, #9
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff febe 	bl	8001d6e <max30102_write>
    max30102_clear_fifo(obj);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f8f6 	bl	80021e4 <max30102_clear_fifo>
}
 8001ff8:	bf00      	nop
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800200c:	f107 020f 	add.w	r2, r7, #15
 8002010:	2301      	movs	r3, #1
 8002012:	210a      	movs	r1, #10
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff fedd 	bl	8001dd4 <max30102_read>
    config = (config & 0x63) << MAX30102_SPO2_SR;
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	b2db      	uxtb	r3, r3
 8002020:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002024:	b2db      	uxtb	r3, r3
 8002026:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8002028:	f107 020f 	add.w	r2, r7, #15
 800202c:	2301      	movs	r3, #1
 800202e:	210a      	movs	r1, #10
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff fe9c 	bl	8001d6e <max30102_write>
}
 8002036:	bf00      	nop
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	460b      	mov	r3, r1
 8002048:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800204a:	f107 020f 	add.w	r2, r7, #15
 800204e:	2301      	movs	r3, #1
 8002050:	210a      	movs	r1, #10
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff febe 	bl	8001dd4 <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	b25b      	sxtb	r3, r3
 800205c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8002060:	b25a      	sxtb	r2, r3
 8002062:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002066:	4313      	orrs	r3, r2
 8002068:	b25b      	sxtb	r3, r3
 800206a:	b2db      	uxtb	r3, r3
 800206c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800206e:	f107 020f 	add.w	r2, r7, #15
 8002072:	2301      	movs	r3, #1
 8002074:	210a      	movs	r1, #10
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff fe79 	bl	8001d6e <max30102_write>
}
 800207c:	bf00      	nop
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8002090:	f107 020f 	add.w	r2, r7, #15
 8002094:	2301      	movs	r3, #1
 8002096:	210a      	movs	r1, #10
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff fe9b 	bl	8001dd4 <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	b25b      	sxtb	r3, r3
 80020a2:	f003 031f 	and.w	r3, r3, #31
 80020a6:	b25a      	sxtb	r2, r3
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	015b      	lsls	r3, r3, #5
 80020ac:	b25b      	sxtb	r3, r3
 80020ae:	4313      	orrs	r3, r2
 80020b0:	b25b      	sxtb	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80020b6:	f107 020f 	add.w	r2, r7, #15
 80020ba:	2301      	movs	r3, #1
 80020bc:	210a      	movs	r1, #10
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff fe55 	bl	8001d6e <max30102_write>
}
 80020c4:	bf00      	nop
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	0000      	movs	r0, r0
	...

080020d0 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 80020da:	6838      	ldr	r0, [r7, #0]
 80020dc:	f7fe f99c 	bl	8000418 <__aeabi_f2d>
 80020e0:	a30d      	add	r3, pc, #52	; (adr r3, 8002118 <max30102_set_led_current_1+0x48>)
 80020e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e6:	f7fe fb19 	bl	800071c <__aeabi_ddiv>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4610      	mov	r0, r2
 80020f0:	4619      	mov	r1, r3
 80020f2:	f7fe fbfb 	bl	80008ec <__aeabi_d2uiz>
 80020f6:	4603      	mov	r3, r0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 80020fc:	f107 020f 	add.w	r2, r7, #15
 8002100:	2301      	movs	r3, #1
 8002102:	210c      	movs	r1, #12
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff fe32 	bl	8001d6e <max30102_write>
}
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	f3af 8000 	nop.w
 8002118:	9999999a 	.word	0x9999999a
 800211c:	3fc99999 	.word	0x3fc99999

08002120 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 800212a:	6838      	ldr	r0, [r7, #0]
 800212c:	f7fe f974 	bl	8000418 <__aeabi_f2d>
 8002130:	a30d      	add	r3, pc, #52	; (adr r3, 8002168 <max30102_set_led_current_2+0x48>)
 8002132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002136:	f7fe faf1 	bl	800071c <__aeabi_ddiv>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	f7fe fbd3 	bl	80008ec <__aeabi_d2uiz>
 8002146:	4603      	mov	r3, r0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 800214c:	f107 020f 	add.w	r2, r7, #15
 8002150:	2301      	movs	r3, #1
 8002152:	210d      	movs	r1, #13
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff fe0a 	bl	8001d6e <max30102_write>
}
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	f3af 8000 	nop.w
 8002168:	9999999a 	.word	0x9999999a
 800216c:	3fc99999 	.word	0x3fc99999

08002170 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	4608      	mov	r0, r1
 800217a:	4611      	mov	r1, r2
 800217c:	461a      	mov	r2, r3
 800217e:	4603      	mov	r3, r0
 8002180:	70fb      	strb	r3, [r7, #3]
 8002182:	460b      	mov	r3, r1
 8002184:	70bb      	strb	r3, [r7, #2]
 8002186:	4613      	mov	r3, r2
 8002188:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 800218a:	2300      	movs	r3, #0
 800218c:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	015b      	lsls	r3, r3, #5
 8002192:	b25a      	sxtb	r2, r3
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	b25b      	sxtb	r3, r3
 8002198:	4313      	orrs	r3, r2
 800219a:	b25b      	sxtb	r3, r3
 800219c:	b2db      	uxtb	r3, r3
 800219e:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 80021a0:	78bb      	ldrb	r3, [r7, #2]
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	b25b      	sxtb	r3, r3
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	b25a      	sxtb	r2, r3
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	b25b      	sxtb	r3, r3
 80021b0:	4313      	orrs	r3, r2
 80021b2:	b25b      	sxtb	r3, r3
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 80021b8:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80021bc:	f003 030f 	and.w	r3, r3, #15
 80021c0:	b25a      	sxtb	r2, r3
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	b25b      	sxtb	r3, r3
 80021c6:	4313      	orrs	r3, r2
 80021c8:	b25b      	sxtb	r3, r3
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 80021ce:	f107 020f 	add.w	r2, r7, #15
 80021d2:	2301      	movs	r3, #1
 80021d4:	2108      	movs	r1, #8
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff fdc9 	bl	8001d6e <max30102_write>
}
 80021dc:	bf00      	nop
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 80021ec:	2300      	movs	r3, #0
 80021ee:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 80021f0:	f107 020f 	add.w	r2, r7, #15
 80021f4:	2303      	movs	r3, #3
 80021f6:	2104      	movs	r1, #4
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff fdb8 	bl	8001d6e <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 80021fe:	f107 020f 	add.w	r2, r7, #15
 8002202:	2303      	movs	r3, #3
 8002204:	2106      	movs	r1, #6
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff fdb1 	bl	8001d6e <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 800220c:	f107 020f 	add.w	r2, r7, #15
 8002210:	2303      	movs	r3, #3
 8002212:	2105      	movs	r1, #5
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff fdaa 	bl	8001d6e <max30102_write>
}
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b088      	sub	sp, #32
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	74fb      	strb	r3, [r7, #19]
 800222e:	2300      	movs	r3, #0
 8002230:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 8002232:	f107 0213 	add.w	r2, r7, #19
 8002236:	2301      	movs	r3, #1
 8002238:	2104      	movs	r1, #4
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff fdca 	bl	8001dd4 <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 8002240:	f107 0212 	add.w	r2, r7, #18
 8002244:	2301      	movs	r3, #1
 8002246:	2106      	movs	r1, #6
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff fdc3 	bl	8001dd4 <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 800224e:	7cfa      	ldrb	r2, [r7, #19]
 8002250:	7cbb      	ldrb	r3, [r7, #18]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	b2db      	uxtb	r3, r3
 8002256:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 8002258:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800225c:	2b00      	cmp	r3, #0
 800225e:	dc03      	bgt.n	8002268 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 8002260:	7ffb      	ldrb	r3, [r7, #31]
 8002262:	3320      	adds	r3, #32
 8002264:	b2db      	uxtb	r3, r3
 8002266:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 8002268:	2300      	movs	r3, #0
 800226a:	77bb      	strb	r3, [r7, #30]
 800226c:	e035      	b.n	80022da <max30102_read_fifo+0xb8>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 800226e:	f107 020c 	add.w	r2, r7, #12
 8002272:	2306      	movs	r3, #6
 8002274:	2107      	movs	r1, #7
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff fdac 	bl	8001dd4 <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 800227c:	7b3b      	ldrb	r3, [r7, #12]
 800227e:	041b      	lsls	r3, r3, #16
 8002280:	461a      	mov	r2, r3
 8002282:	7b7b      	ldrb	r3, [r7, #13]
 8002284:	021b      	lsls	r3, r3, #8
 8002286:	4313      	orrs	r3, r2
 8002288:	7bba      	ldrb	r2, [r7, #14]
 800228a:	4313      	orrs	r3, r2
 800228c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002290:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	041b      	lsls	r3, r3, #16
 8002296:	461a      	mov	r2, r3
 8002298:	7c3b      	ldrb	r3, [r7, #16]
 800229a:	021b      	lsls	r3, r3, #8
 800229c:	4313      	orrs	r3, r2
 800229e:	7c7a      	ldrb	r2, [r7, #17]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80022a6:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 80022a8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 80022b6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	3320      	adds	r3, #32
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 80022c6:	6979      	ldr	r1, [r7, #20]
 80022c8:	69b8      	ldr	r0, [r7, #24]
 80022ca:	f7ff fb2b 	bl	8001924 <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 80022ce:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	3301      	adds	r3, #1
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	77bb      	strb	r3, [r7, #30]
 80022da:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80022de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	dbc3      	blt.n	800226e <max30102_read_fifo+0x4c>
    }
}
 80022e6:	bf00      	nop
 80022e8:	bf00      	nop
 80022ea:	3720      	adds	r7, #32
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <max30102_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30102_read_temp(max30102_t *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
    max30102_read(obj, MAX30102_DIE_TINT, (uint8_t *)temp_int, 1);
 80022fc:	2301      	movs	r3, #1
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	211f      	movs	r1, #31
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f7ff fd66 	bl	8001dd4 <max30102_read>
    max30102_read(obj, MAX30102_DIE_TFRAC, temp_frac, 1);
 8002308:	2301      	movs	r3, #1
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	2120      	movs	r1, #32
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f7ff fd60 	bl	8001dd4 <max30102_read>
}
 8002314:	bf00      	nop
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002322:	4b0e      	ldr	r3, [pc, #56]	; (800235c <HAL_MspInit+0x40>)
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	4a0d      	ldr	r2, [pc, #52]	; (800235c <HAL_MspInit+0x40>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	6193      	str	r3, [r2, #24]
 800232e:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_MspInit+0x40>)
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	607b      	str	r3, [r7, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <HAL_MspInit+0x40>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	4a07      	ldr	r2, [pc, #28]	; (800235c <HAL_MspInit+0x40>)
 8002340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002344:	61d3      	str	r3, [r2, #28]
 8002346:	4b05      	ldr	r3, [pc, #20]	; (800235c <HAL_MspInit+0x40>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr
 800235c:	40021000 	.word	0x40021000

08002360 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 0310 	add.w	r3, r7, #16
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a15      	ldr	r2, [pc, #84]	; (80023d0 <HAL_I2C_MspInit+0x70>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d123      	bne.n	80023c8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002380:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <HAL_I2C_MspInit+0x74>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	4a13      	ldr	r2, [pc, #76]	; (80023d4 <HAL_I2C_MspInit+0x74>)
 8002386:	f043 0308 	orr.w	r3, r3, #8
 800238a:	6193      	str	r3, [r2, #24]
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <HAL_I2C_MspInit+0x74>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002398:	23c0      	movs	r3, #192	; 0xc0
 800239a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800239c:	2312      	movs	r3, #18
 800239e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023a0:	2303      	movs	r3, #3
 80023a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a4:	f107 0310 	add.w	r3, r7, #16
 80023a8:	4619      	mov	r1, r3
 80023aa:	480b      	ldr	r0, [pc, #44]	; (80023d8 <HAL_I2C_MspInit+0x78>)
 80023ac:	f000 fdaa 	bl	8002f04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <HAL_I2C_MspInit+0x74>)
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	4a07      	ldr	r2, [pc, #28]	; (80023d4 <HAL_I2C_MspInit+0x74>)
 80023b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023ba:	61d3      	str	r3, [r2, #28]
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_I2C_MspInit+0x74>)
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023c8:	bf00      	nop
 80023ca:	3720      	adds	r7, #32
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40005400 	.word	0x40005400
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40010c00 	.word	0x40010c00

080023dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e4:	f107 0310 	add.w	r3, r7, #16
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a47      	ldr	r2, [pc, #284]	; (8002514 <HAL_UART_MspInit+0x138>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	f040 8086 	bne.w	800250a <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023fe:	4b46      	ldr	r3, [pc, #280]	; (8002518 <HAL_UART_MspInit+0x13c>)
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	4a45      	ldr	r2, [pc, #276]	; (8002518 <HAL_UART_MspInit+0x13c>)
 8002404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002408:	6193      	str	r3, [r2, #24]
 800240a:	4b43      	ldr	r3, [pc, #268]	; (8002518 <HAL_UART_MspInit+0x13c>)
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002416:	4b40      	ldr	r3, [pc, #256]	; (8002518 <HAL_UART_MspInit+0x13c>)
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	4a3f      	ldr	r2, [pc, #252]	; (8002518 <HAL_UART_MspInit+0x13c>)
 800241c:	f043 0304 	orr.w	r3, r3, #4
 8002420:	6193      	str	r3, [r2, #24]
 8002422:	4b3d      	ldr	r3, [pc, #244]	; (8002518 <HAL_UART_MspInit+0x13c>)
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800242e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002432:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002434:	2302      	movs	r3, #2
 8002436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002438:	2303      	movs	r3, #3
 800243a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243c:	f107 0310 	add.w	r3, r7, #16
 8002440:	4619      	mov	r1, r3
 8002442:	4836      	ldr	r0, [pc, #216]	; (800251c <HAL_UART_MspInit+0x140>)
 8002444:	f000 fd5e 	bl	8002f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800244c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002456:	f107 0310 	add.w	r3, r7, #16
 800245a:	4619      	mov	r1, r3
 800245c:	482f      	ldr	r0, [pc, #188]	; (800251c <HAL_UART_MspInit+0x140>)
 800245e:	f000 fd51 	bl	8002f04 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002462:	4b2f      	ldr	r3, [pc, #188]	; (8002520 <HAL_UART_MspInit+0x144>)
 8002464:	4a2f      	ldr	r2, [pc, #188]	; (8002524 <HAL_UART_MspInit+0x148>)
 8002466:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002468:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <HAL_UART_MspInit+0x144>)
 800246a:	2200      	movs	r2, #0
 800246c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800246e:	4b2c      	ldr	r3, [pc, #176]	; (8002520 <HAL_UART_MspInit+0x144>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002474:	4b2a      	ldr	r3, [pc, #168]	; (8002520 <HAL_UART_MspInit+0x144>)
 8002476:	2280      	movs	r2, #128	; 0x80
 8002478:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800247a:	4b29      	ldr	r3, [pc, #164]	; (8002520 <HAL_UART_MspInit+0x144>)
 800247c:	2200      	movs	r2, #0
 800247e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002480:	4b27      	ldr	r3, [pc, #156]	; (8002520 <HAL_UART_MspInit+0x144>)
 8002482:	2200      	movs	r2, #0
 8002484:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002486:	4b26      	ldr	r3, [pc, #152]	; (8002520 <HAL_UART_MspInit+0x144>)
 8002488:	2200      	movs	r2, #0
 800248a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800248c:	4b24      	ldr	r3, [pc, #144]	; (8002520 <HAL_UART_MspInit+0x144>)
 800248e:	2200      	movs	r2, #0
 8002490:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002492:	4823      	ldr	r0, [pc, #140]	; (8002520 <HAL_UART_MspInit+0x144>)
 8002494:	f000 fa94 	bl	80029c0 <HAL_DMA_Init>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800249e:	f7ff fc43 	bl	8001d28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a1e      	ldr	r2, [pc, #120]	; (8002520 <HAL_UART_MspInit+0x144>)
 80024a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80024a8:	4a1d      	ldr	r2, [pc, #116]	; (8002520 <HAL_UART_MspInit+0x144>)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80024ae:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <HAL_UART_MspInit+0x14c>)
 80024b0:	4a1e      	ldr	r2, [pc, #120]	; (800252c <HAL_UART_MspInit+0x150>)
 80024b2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024b4:	4b1c      	ldr	r3, [pc, #112]	; (8002528 <HAL_UART_MspInit+0x14c>)
 80024b6:	2210      	movs	r2, #16
 80024b8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ba:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <HAL_UART_MspInit+0x14c>)
 80024bc:	2200      	movs	r2, #0
 80024be:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024c0:	4b19      	ldr	r3, [pc, #100]	; (8002528 <HAL_UART_MspInit+0x14c>)
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024c6:	4b18      	ldr	r3, [pc, #96]	; (8002528 <HAL_UART_MspInit+0x14c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024cc:	4b16      	ldr	r3, [pc, #88]	; (8002528 <HAL_UART_MspInit+0x14c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <HAL_UART_MspInit+0x14c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024d8:	4b13      	ldr	r3, [pc, #76]	; (8002528 <HAL_UART_MspInit+0x14c>)
 80024da:	2200      	movs	r2, #0
 80024dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80024de:	4812      	ldr	r0, [pc, #72]	; (8002528 <HAL_UART_MspInit+0x14c>)
 80024e0:	f000 fa6e 	bl	80029c0 <HAL_DMA_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80024ea:	f7ff fc1d 	bl	8001d28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a0d      	ldr	r2, [pc, #52]	; (8002528 <HAL_UART_MspInit+0x14c>)
 80024f2:	639a      	str	r2, [r3, #56]	; 0x38
 80024f4:	4a0c      	ldr	r2, [pc, #48]	; (8002528 <HAL_UART_MspInit+0x14c>)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80024fa:	2200      	movs	r2, #0
 80024fc:	2100      	movs	r1, #0
 80024fe:	2025      	movs	r0, #37	; 0x25
 8002500:	f000 fa27 	bl	8002952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002504:	2025      	movs	r0, #37	; 0x25
 8002506:	f000 fa40 	bl	800298a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800250a:	bf00      	nop
 800250c:	3720      	adds	r7, #32
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40013800 	.word	0x40013800
 8002518:	40021000 	.word	0x40021000
 800251c:	40010800 	.word	0x40010800
 8002520:	200001cc 	.word	0x200001cc
 8002524:	40020058 	.word	0x40020058
 8002528:	20000210 	.word	0x20000210
 800252c:	40020044 	.word	0x40020044

08002530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002534:	e7fe      	b.n	8002534 <NMI_Handler+0x4>

08002536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800253a:	e7fe      	b.n	800253a <HardFault_Handler+0x4>

0800253c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002540:	e7fe      	b.n	8002540 <MemManage_Handler+0x4>

08002542 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002546:	e7fe      	b.n	8002546 <BusFault_Handler+0x4>

08002548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800254c:	e7fe      	b.n	800254c <UsageFault_Handler+0x4>

0800254e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr

0800255a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr

08002566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr

08002572 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002576:	f000 f8d5 	bl	8002724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	max30102_on_interrupt(&max30102);
 8002584:	4803      	ldr	r0, [pc, #12]	; (8002594 <EXTI0_IRQHandler+0x14>)
 8002586:	f7ff fcb1 	bl	8001eec <max30102_on_interrupt>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800258a:	2001      	movs	r0, #1
 800258c:	f000 fe70 	bl	8003270 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}
 8002594:	200002d4 	.word	0x200002d4

08002598 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800259c:	4802      	ldr	r0, [pc, #8]	; (80025a8 <DMA1_Channel4_IRQHandler+0x10>)
 800259e:	f000 fb7d 	bl	8002c9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000210 	.word	0x20000210

080025ac <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80025b0:	4802      	ldr	r0, [pc, #8]	; (80025bc <DMA1_Channel5_IRQHandler+0x10>)
 80025b2:	f000 fb73 	bl	8002c9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	200001cc 	.word	0x200001cc

080025c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025c4:	4802      	ldr	r0, [pc, #8]	; (80025d0 <USART1_IRQHandler+0x10>)
 80025c6:	f002 fb79 	bl	8004cbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000184 	.word	0x20000184

080025d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025dc:	4a14      	ldr	r2, [pc, #80]	; (8002630 <_sbrk+0x5c>)
 80025de:	4b15      	ldr	r3, [pc, #84]	; (8002634 <_sbrk+0x60>)
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025e8:	4b13      	ldr	r3, [pc, #76]	; (8002638 <_sbrk+0x64>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d102      	bne.n	80025f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <_sbrk+0x64>)
 80025f2:	4a12      	ldr	r2, [pc, #72]	; (800263c <_sbrk+0x68>)
 80025f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <_sbrk+0x64>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4413      	add	r3, r2
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	429a      	cmp	r2, r3
 8002602:	d207      	bcs.n	8002614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002604:	f003 f910 	bl	8005828 <__errno>
 8002608:	4603      	mov	r3, r0
 800260a:	220c      	movs	r2, #12
 800260c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800260e:	f04f 33ff 	mov.w	r3, #4294967295
 8002612:	e009      	b.n	8002628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002614:	4b08      	ldr	r3, [pc, #32]	; (8002638 <_sbrk+0x64>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800261a:	4b07      	ldr	r3, [pc, #28]	; (8002638 <_sbrk+0x64>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4413      	add	r3, r2
 8002622:	4a05      	ldr	r2, [pc, #20]	; (8002638 <_sbrk+0x64>)
 8002624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002626:	68fb      	ldr	r3, [r7, #12]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20005000 	.word	0x20005000
 8002634:	00000400 	.word	0x00000400
 8002638:	200003dc 	.word	0x200003dc
 800263c:	200003f8 	.word	0x200003f8

08002640 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800264c:	f7ff fff8 	bl	8002640 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002650:	480b      	ldr	r0, [pc, #44]	; (8002680 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002652:	490c      	ldr	r1, [pc, #48]	; (8002684 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002654:	4a0c      	ldr	r2, [pc, #48]	; (8002688 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002658:	e002      	b.n	8002660 <LoopCopyDataInit>

0800265a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800265a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800265c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800265e:	3304      	adds	r3, #4

08002660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002664:	d3f9      	bcc.n	800265a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002666:	4a09      	ldr	r2, [pc, #36]	; (800268c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002668:	4c09      	ldr	r4, [pc, #36]	; (8002690 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800266a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800266c:	e001      	b.n	8002672 <LoopFillZerobss>

0800266e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800266e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002670:	3204      	adds	r2, #4

08002672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002674:	d3fb      	bcc.n	800266e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002676:	f003 f8dd 	bl	8005834 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800267a:	f7ff f963 	bl	8001944 <main>
  bx lr
 800267e:	4770      	bx	lr
  ldr r0, =_sdata
 8002680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002684:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002688:	08005ca0 	.word	0x08005ca0
  ldr r2, =_sbss
 800268c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002690:	200003f4 	.word	0x200003f4

08002694 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002694:	e7fe      	b.n	8002694 <ADC1_2_IRQHandler>
	...

08002698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800269c:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <HAL_Init+0x28>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a07      	ldr	r2, [pc, #28]	; (80026c0 <HAL_Init+0x28>)
 80026a2:	f043 0310 	orr.w	r3, r3, #16
 80026a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026a8:	2003      	movs	r0, #3
 80026aa:	f000 f947 	bl	800293c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ae:	200f      	movs	r0, #15
 80026b0:	f000 f808 	bl	80026c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026b4:	f7ff fe32 	bl	800231c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40022000 	.word	0x40022000

080026c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026cc:	4b12      	ldr	r3, [pc, #72]	; (8002718 <HAL_InitTick+0x54>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4b12      	ldr	r3, [pc, #72]	; (800271c <HAL_InitTick+0x58>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	4619      	mov	r1, r3
 80026d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026da:	fbb3 f3f1 	udiv	r3, r3, r1
 80026de:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 f95f 	bl	80029a6 <HAL_SYSTICK_Config>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e00e      	b.n	8002710 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b0f      	cmp	r3, #15
 80026f6:	d80a      	bhi.n	800270e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026f8:	2200      	movs	r2, #0
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002700:	f000 f927 	bl	8002952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002704:	4a06      	ldr	r2, [pc, #24]	; (8002720 <HAL_InitTick+0x5c>)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	e000      	b.n	8002710 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
}
 8002710:	4618      	mov	r0, r3
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	20000000 	.word	0x20000000
 800271c:	20000008 	.word	0x20000008
 8002720:	20000004 	.word	0x20000004

08002724 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_IncTick+0x1c>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	461a      	mov	r2, r3
 800272e:	4b05      	ldr	r3, [pc, #20]	; (8002744 <HAL_IncTick+0x20>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4413      	add	r3, r2
 8002734:	4a03      	ldr	r2, [pc, #12]	; (8002744 <HAL_IncTick+0x20>)
 8002736:	6013      	str	r3, [r2, #0]
}
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr
 8002740:	20000008 	.word	0x20000008
 8002744:	200003e0 	.word	0x200003e0

08002748 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return uwTick;
 800274c:	4b02      	ldr	r3, [pc, #8]	; (8002758 <HAL_GetTick+0x10>)
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr
 8002758:	200003e0 	.word	0x200003e0

0800275c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002764:	f7ff fff0 	bl	8002748 <HAL_GetTick>
 8002768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d005      	beq.n	8002782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002776:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <HAL_Delay+0x44>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4413      	add	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002782:	bf00      	nop
 8002784:	f7ff ffe0 	bl	8002748 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	429a      	cmp	r2, r3
 8002792:	d8f7      	bhi.n	8002784 <HAL_Delay+0x28>
  {
  }
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000008 	.word	0x20000008

080027a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b4:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <__NVIC_SetPriorityGrouping+0x44>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027c0:	4013      	ands	r3, r2
 80027c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027d6:	4a04      	ldr	r2, [pc, #16]	; (80027e8 <__NVIC_SetPriorityGrouping+0x44>)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	60d3      	str	r3, [r2, #12]
}
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f0:	4b04      	ldr	r3, [pc, #16]	; (8002804 <__NVIC_GetPriorityGrouping+0x18>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	0a1b      	lsrs	r3, r3, #8
 80027f6:	f003 0307 	and.w	r3, r3, #7
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	2b00      	cmp	r3, #0
 8002818:	db0b      	blt.n	8002832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	f003 021f 	and.w	r2, r3, #31
 8002820:	4906      	ldr	r1, [pc, #24]	; (800283c <__NVIC_EnableIRQ+0x34>)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	2001      	movs	r0, #1
 800282a:	fa00 f202 	lsl.w	r2, r0, r2
 800282e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr
 800283c:	e000e100 	.word	0xe000e100

08002840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	6039      	str	r1, [r7, #0]
 800284a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002850:	2b00      	cmp	r3, #0
 8002852:	db0a      	blt.n	800286a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	b2da      	uxtb	r2, r3
 8002858:	490c      	ldr	r1, [pc, #48]	; (800288c <__NVIC_SetPriority+0x4c>)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	0112      	lsls	r2, r2, #4
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	440b      	add	r3, r1
 8002864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002868:	e00a      	b.n	8002880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	b2da      	uxtb	r2, r3
 800286e:	4908      	ldr	r1, [pc, #32]	; (8002890 <__NVIC_SetPriority+0x50>)
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	3b04      	subs	r3, #4
 8002878:	0112      	lsls	r2, r2, #4
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	440b      	add	r3, r1
 800287e:	761a      	strb	r2, [r3, #24]
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	e000e100 	.word	0xe000e100
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002894:	b480      	push	{r7}
 8002896:	b089      	sub	sp, #36	; 0x24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f1c3 0307 	rsb	r3, r3, #7
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	bf28      	it	cs
 80028b2:	2304      	movcs	r3, #4
 80028b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3304      	adds	r3, #4
 80028ba:	2b06      	cmp	r3, #6
 80028bc:	d902      	bls.n	80028c4 <NVIC_EncodePriority+0x30>
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3b03      	subs	r3, #3
 80028c2:	e000      	b.n	80028c6 <NVIC_EncodePriority+0x32>
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c8:	f04f 32ff 	mov.w	r2, #4294967295
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43da      	mvns	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	401a      	ands	r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028dc:	f04f 31ff 	mov.w	r1, #4294967295
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	fa01 f303 	lsl.w	r3, r1, r3
 80028e6:	43d9      	mvns	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ec:	4313      	orrs	r3, r2
         );
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3724      	adds	r7, #36	; 0x24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3b01      	subs	r3, #1
 8002904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002908:	d301      	bcc.n	800290e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800290a:	2301      	movs	r3, #1
 800290c:	e00f      	b.n	800292e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800290e:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <SysTick_Config+0x40>)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3b01      	subs	r3, #1
 8002914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002916:	210f      	movs	r1, #15
 8002918:	f04f 30ff 	mov.w	r0, #4294967295
 800291c:	f7ff ff90 	bl	8002840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002920:	4b05      	ldr	r3, [pc, #20]	; (8002938 <SysTick_Config+0x40>)
 8002922:	2200      	movs	r2, #0
 8002924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002926:	4b04      	ldr	r3, [pc, #16]	; (8002938 <SysTick_Config+0x40>)
 8002928:	2207      	movs	r2, #7
 800292a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	e000e010 	.word	0xe000e010

0800293c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7ff ff2d 	bl	80027a4 <__NVIC_SetPriorityGrouping>
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002952:	b580      	push	{r7, lr}
 8002954:	b086      	sub	sp, #24
 8002956:	af00      	add	r7, sp, #0
 8002958:	4603      	mov	r3, r0
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002964:	f7ff ff42 	bl	80027ec <__NVIC_GetPriorityGrouping>
 8002968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	68b9      	ldr	r1, [r7, #8]
 800296e:	6978      	ldr	r0, [r7, #20]
 8002970:	f7ff ff90 	bl	8002894 <NVIC_EncodePriority>
 8002974:	4602      	mov	r2, r0
 8002976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800297a:	4611      	mov	r1, r2
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff5f 	bl	8002840 <__NVIC_SetPriority>
}
 8002982:	bf00      	nop
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	4603      	mov	r3, r0
 8002992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff ff35 	bl	8002808 <__NVIC_EnableIRQ>
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff ffa2 	bl	80028f8 <SysTick_Config>
 80029b4:	4603      	mov	r3, r0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e043      	b.n	8002a5e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	4b22      	ldr	r3, [pc, #136]	; (8002a68 <HAL_DMA_Init+0xa8>)
 80029de:	4413      	add	r3, r2
 80029e0:	4a22      	ldr	r2, [pc, #136]	; (8002a6c <HAL_DMA_Init+0xac>)
 80029e2:	fba2 2303 	umull	r2, r3, r2, r3
 80029e6:	091b      	lsrs	r3, r3, #4
 80029e8:	009a      	lsls	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a1f      	ldr	r2, [pc, #124]	; (8002a70 <HAL_DMA_Init+0xb0>)
 80029f2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a0a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr
 8002a68:	bffdfff8 	.word	0xbffdfff8
 8002a6c:	cccccccd 	.word	0xcccccccd
 8002a70:	40020000 	.word	0x40020000

08002a74 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a82:	2300      	movs	r3, #0
 8002a84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d101      	bne.n	8002a94 <HAL_DMA_Start_IT+0x20>
 8002a90:	2302      	movs	r3, #2
 8002a92:	e04b      	b.n	8002b2c <HAL_DMA_Start_IT+0xb8>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d13a      	bne.n	8002b1e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0201 	bic.w	r2, r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	68b9      	ldr	r1, [r7, #8]
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 f9eb 	bl	8002ea8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d008      	beq.n	8002aec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 020e 	orr.w	r2, r2, #14
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	e00f      	b.n	8002b0c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0204 	bic.w	r2, r2, #4
 8002afa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 020a 	orr.w	r2, r2, #10
 8002b0a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	e005      	b.n	8002b2a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b26:	2302      	movs	r3, #2
 8002b28:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d008      	beq.n	8002b5e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2204      	movs	r2, #4
 8002b50:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e020      	b.n	8002ba0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 020e 	bic.w	r2, r2, #14
 8002b6c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0201 	bic.w	r2, r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b86:	2101      	movs	r1, #1
 8002b88:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr
	...

08002bac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d005      	beq.n	8002bd0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2204      	movs	r2, #4
 8002bc8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
 8002bce:	e051      	b.n	8002c74 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 020e 	bic.w	r2, r2, #14
 8002bde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0201 	bic.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a22      	ldr	r2, [pc, #136]	; (8002c80 <HAL_DMA_Abort_IT+0xd4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d029      	beq.n	8002c4e <HAL_DMA_Abort_IT+0xa2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a21      	ldr	r2, [pc, #132]	; (8002c84 <HAL_DMA_Abort_IT+0xd8>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d022      	beq.n	8002c4a <HAL_DMA_Abort_IT+0x9e>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a1f      	ldr	r2, [pc, #124]	; (8002c88 <HAL_DMA_Abort_IT+0xdc>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d01a      	beq.n	8002c44 <HAL_DMA_Abort_IT+0x98>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a1e      	ldr	r2, [pc, #120]	; (8002c8c <HAL_DMA_Abort_IT+0xe0>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d012      	beq.n	8002c3e <HAL_DMA_Abort_IT+0x92>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a1c      	ldr	r2, [pc, #112]	; (8002c90 <HAL_DMA_Abort_IT+0xe4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00a      	beq.n	8002c38 <HAL_DMA_Abort_IT+0x8c>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a1b      	ldr	r2, [pc, #108]	; (8002c94 <HAL_DMA_Abort_IT+0xe8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d102      	bne.n	8002c32 <HAL_DMA_Abort_IT+0x86>
 8002c2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c30:	e00e      	b.n	8002c50 <HAL_DMA_Abort_IT+0xa4>
 8002c32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c36:	e00b      	b.n	8002c50 <HAL_DMA_Abort_IT+0xa4>
 8002c38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c3c:	e008      	b.n	8002c50 <HAL_DMA_Abort_IT+0xa4>
 8002c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c42:	e005      	b.n	8002c50 <HAL_DMA_Abort_IT+0xa4>
 8002c44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c48:	e002      	b.n	8002c50 <HAL_DMA_Abort_IT+0xa4>
 8002c4a:	2310      	movs	r3, #16
 8002c4c:	e000      	b.n	8002c50 <HAL_DMA_Abort_IT+0xa4>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	4a11      	ldr	r2, [pc, #68]	; (8002c98 <HAL_DMA_Abort_IT+0xec>)
 8002c52:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	4798      	blx	r3
    } 
  }
  return status;
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40020008 	.word	0x40020008
 8002c84:	4002001c 	.word	0x4002001c
 8002c88:	40020030 	.word	0x40020030
 8002c8c:	40020044 	.word	0x40020044
 8002c90:	40020058 	.word	0x40020058
 8002c94:	4002006c 	.word	0x4002006c
 8002c98:	40020000 	.word	0x40020000

08002c9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	2204      	movs	r2, #4
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d04f      	beq.n	8002d64 <HAL_DMA_IRQHandler+0xc8>
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d04a      	beq.n	8002d64 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0320 	and.w	r3, r3, #32
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d107      	bne.n	8002cec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0204 	bic.w	r2, r2, #4
 8002cea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a66      	ldr	r2, [pc, #408]	; (8002e8c <HAL_DMA_IRQHandler+0x1f0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d029      	beq.n	8002d4a <HAL_DMA_IRQHandler+0xae>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a65      	ldr	r2, [pc, #404]	; (8002e90 <HAL_DMA_IRQHandler+0x1f4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d022      	beq.n	8002d46 <HAL_DMA_IRQHandler+0xaa>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a63      	ldr	r2, [pc, #396]	; (8002e94 <HAL_DMA_IRQHandler+0x1f8>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d01a      	beq.n	8002d40 <HAL_DMA_IRQHandler+0xa4>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a62      	ldr	r2, [pc, #392]	; (8002e98 <HAL_DMA_IRQHandler+0x1fc>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d012      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x9e>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a60      	ldr	r2, [pc, #384]	; (8002e9c <HAL_DMA_IRQHandler+0x200>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00a      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x98>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a5f      	ldr	r2, [pc, #380]	; (8002ea0 <HAL_DMA_IRQHandler+0x204>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d102      	bne.n	8002d2e <HAL_DMA_IRQHandler+0x92>
 8002d28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d2c:	e00e      	b.n	8002d4c <HAL_DMA_IRQHandler+0xb0>
 8002d2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d32:	e00b      	b.n	8002d4c <HAL_DMA_IRQHandler+0xb0>
 8002d34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d38:	e008      	b.n	8002d4c <HAL_DMA_IRQHandler+0xb0>
 8002d3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d3e:	e005      	b.n	8002d4c <HAL_DMA_IRQHandler+0xb0>
 8002d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d44:	e002      	b.n	8002d4c <HAL_DMA_IRQHandler+0xb0>
 8002d46:	2340      	movs	r3, #64	; 0x40
 8002d48:	e000      	b.n	8002d4c <HAL_DMA_IRQHandler+0xb0>
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	4a55      	ldr	r2, [pc, #340]	; (8002ea4 <HAL_DMA_IRQHandler+0x208>)
 8002d4e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 8094 	beq.w	8002e82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d62:	e08e      	b.n	8002e82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	2202      	movs	r2, #2
 8002d6a:	409a      	lsls	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d056      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x186>
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d051      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0320 	and.w	r3, r3, #32
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10b      	bne.n	8002da4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 020a 	bic.w	r2, r2, #10
 8002d9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a38      	ldr	r2, [pc, #224]	; (8002e8c <HAL_DMA_IRQHandler+0x1f0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d029      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x166>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a37      	ldr	r2, [pc, #220]	; (8002e90 <HAL_DMA_IRQHandler+0x1f4>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d022      	beq.n	8002dfe <HAL_DMA_IRQHandler+0x162>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a35      	ldr	r2, [pc, #212]	; (8002e94 <HAL_DMA_IRQHandler+0x1f8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d01a      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x15c>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a34      	ldr	r2, [pc, #208]	; (8002e98 <HAL_DMA_IRQHandler+0x1fc>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d012      	beq.n	8002df2 <HAL_DMA_IRQHandler+0x156>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a32      	ldr	r2, [pc, #200]	; (8002e9c <HAL_DMA_IRQHandler+0x200>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00a      	beq.n	8002dec <HAL_DMA_IRQHandler+0x150>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a31      	ldr	r2, [pc, #196]	; (8002ea0 <HAL_DMA_IRQHandler+0x204>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d102      	bne.n	8002de6 <HAL_DMA_IRQHandler+0x14a>
 8002de0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002de4:	e00e      	b.n	8002e04 <HAL_DMA_IRQHandler+0x168>
 8002de6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dea:	e00b      	b.n	8002e04 <HAL_DMA_IRQHandler+0x168>
 8002dec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002df0:	e008      	b.n	8002e04 <HAL_DMA_IRQHandler+0x168>
 8002df2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002df6:	e005      	b.n	8002e04 <HAL_DMA_IRQHandler+0x168>
 8002df8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dfc:	e002      	b.n	8002e04 <HAL_DMA_IRQHandler+0x168>
 8002dfe:	2320      	movs	r3, #32
 8002e00:	e000      	b.n	8002e04 <HAL_DMA_IRQHandler+0x168>
 8002e02:	2302      	movs	r3, #2
 8002e04:	4a27      	ldr	r2, [pc, #156]	; (8002ea4 <HAL_DMA_IRQHandler+0x208>)
 8002e06:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d034      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e20:	e02f      	b.n	8002e82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	2208      	movs	r2, #8
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d028      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x1e8>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d023      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 020e 	bic.w	r2, r2, #14
 8002e4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e54:	2101      	movs	r1, #1
 8002e56:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d004      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	4798      	blx	r3
    }
  }
  return;
 8002e82:	bf00      	nop
 8002e84:	bf00      	nop
}
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40020008 	.word	0x40020008
 8002e90:	4002001c 	.word	0x4002001c
 8002e94:	40020030 	.word	0x40020030
 8002e98:	40020044 	.word	0x40020044
 8002e9c:	40020058 	.word	0x40020058
 8002ea0:	4002006c 	.word	0x4002006c
 8002ea4:	40020000 	.word	0x40020000

08002ea8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
 8002eb4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b10      	cmp	r3, #16
 8002ed4:	d108      	bne.n	8002ee8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ee6:	e007      	b.n	8002ef8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	60da      	str	r2, [r3, #12]
}
 8002ef8:	bf00      	nop
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr
	...

08002f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b08b      	sub	sp, #44	; 0x2c
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f12:	2300      	movs	r3, #0
 8002f14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f16:	e169      	b.n	80031ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f18:	2201      	movs	r2, #1
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69fa      	ldr	r2, [r7, #28]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	f040 8158 	bne.w	80031e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	4a9a      	ldr	r2, [pc, #616]	; (80031a4 <HAL_GPIO_Init+0x2a0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d05e      	beq.n	8002ffe <HAL_GPIO_Init+0xfa>
 8002f40:	4a98      	ldr	r2, [pc, #608]	; (80031a4 <HAL_GPIO_Init+0x2a0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d875      	bhi.n	8003032 <HAL_GPIO_Init+0x12e>
 8002f46:	4a98      	ldr	r2, [pc, #608]	; (80031a8 <HAL_GPIO_Init+0x2a4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d058      	beq.n	8002ffe <HAL_GPIO_Init+0xfa>
 8002f4c:	4a96      	ldr	r2, [pc, #600]	; (80031a8 <HAL_GPIO_Init+0x2a4>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d86f      	bhi.n	8003032 <HAL_GPIO_Init+0x12e>
 8002f52:	4a96      	ldr	r2, [pc, #600]	; (80031ac <HAL_GPIO_Init+0x2a8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d052      	beq.n	8002ffe <HAL_GPIO_Init+0xfa>
 8002f58:	4a94      	ldr	r2, [pc, #592]	; (80031ac <HAL_GPIO_Init+0x2a8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d869      	bhi.n	8003032 <HAL_GPIO_Init+0x12e>
 8002f5e:	4a94      	ldr	r2, [pc, #592]	; (80031b0 <HAL_GPIO_Init+0x2ac>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d04c      	beq.n	8002ffe <HAL_GPIO_Init+0xfa>
 8002f64:	4a92      	ldr	r2, [pc, #584]	; (80031b0 <HAL_GPIO_Init+0x2ac>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d863      	bhi.n	8003032 <HAL_GPIO_Init+0x12e>
 8002f6a:	4a92      	ldr	r2, [pc, #584]	; (80031b4 <HAL_GPIO_Init+0x2b0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d046      	beq.n	8002ffe <HAL_GPIO_Init+0xfa>
 8002f70:	4a90      	ldr	r2, [pc, #576]	; (80031b4 <HAL_GPIO_Init+0x2b0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d85d      	bhi.n	8003032 <HAL_GPIO_Init+0x12e>
 8002f76:	2b12      	cmp	r3, #18
 8002f78:	d82a      	bhi.n	8002fd0 <HAL_GPIO_Init+0xcc>
 8002f7a:	2b12      	cmp	r3, #18
 8002f7c:	d859      	bhi.n	8003032 <HAL_GPIO_Init+0x12e>
 8002f7e:	a201      	add	r2, pc, #4	; (adr r2, 8002f84 <HAL_GPIO_Init+0x80>)
 8002f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f84:	08002fff 	.word	0x08002fff
 8002f88:	08002fd9 	.word	0x08002fd9
 8002f8c:	08002feb 	.word	0x08002feb
 8002f90:	0800302d 	.word	0x0800302d
 8002f94:	08003033 	.word	0x08003033
 8002f98:	08003033 	.word	0x08003033
 8002f9c:	08003033 	.word	0x08003033
 8002fa0:	08003033 	.word	0x08003033
 8002fa4:	08003033 	.word	0x08003033
 8002fa8:	08003033 	.word	0x08003033
 8002fac:	08003033 	.word	0x08003033
 8002fb0:	08003033 	.word	0x08003033
 8002fb4:	08003033 	.word	0x08003033
 8002fb8:	08003033 	.word	0x08003033
 8002fbc:	08003033 	.word	0x08003033
 8002fc0:	08003033 	.word	0x08003033
 8002fc4:	08003033 	.word	0x08003033
 8002fc8:	08002fe1 	.word	0x08002fe1
 8002fcc:	08002ff5 	.word	0x08002ff5
 8002fd0:	4a79      	ldr	r2, [pc, #484]	; (80031b8 <HAL_GPIO_Init+0x2b4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d013      	beq.n	8002ffe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002fd6:	e02c      	b.n	8003032 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	623b      	str	r3, [r7, #32]
          break;
 8002fde:	e029      	b.n	8003034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	623b      	str	r3, [r7, #32]
          break;
 8002fe8:	e024      	b.n	8003034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	3308      	adds	r3, #8
 8002ff0:	623b      	str	r3, [r7, #32]
          break;
 8002ff2:	e01f      	b.n	8003034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	330c      	adds	r3, #12
 8002ffa:	623b      	str	r3, [r7, #32]
          break;
 8002ffc:	e01a      	b.n	8003034 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d102      	bne.n	800300c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003006:	2304      	movs	r3, #4
 8003008:	623b      	str	r3, [r7, #32]
          break;
 800300a:	e013      	b.n	8003034 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d105      	bne.n	8003020 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003014:	2308      	movs	r3, #8
 8003016:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	69fa      	ldr	r2, [r7, #28]
 800301c:	611a      	str	r2, [r3, #16]
          break;
 800301e:	e009      	b.n	8003034 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003020:	2308      	movs	r3, #8
 8003022:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69fa      	ldr	r2, [r7, #28]
 8003028:	615a      	str	r2, [r3, #20]
          break;
 800302a:	e003      	b.n	8003034 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800302c:	2300      	movs	r3, #0
 800302e:	623b      	str	r3, [r7, #32]
          break;
 8003030:	e000      	b.n	8003034 <HAL_GPIO_Init+0x130>
          break;
 8003032:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	2bff      	cmp	r3, #255	; 0xff
 8003038:	d801      	bhi.n	800303e <HAL_GPIO_Init+0x13a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	e001      	b.n	8003042 <HAL_GPIO_Init+0x13e>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3304      	adds	r3, #4
 8003042:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	2bff      	cmp	r3, #255	; 0xff
 8003048:	d802      	bhi.n	8003050 <HAL_GPIO_Init+0x14c>
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	e002      	b.n	8003056 <HAL_GPIO_Init+0x152>
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	3b08      	subs	r3, #8
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	210f      	movs	r1, #15
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	fa01 f303 	lsl.w	r3, r1, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	401a      	ands	r2, r3
 8003068:	6a39      	ldr	r1, [r7, #32]
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	fa01 f303 	lsl.w	r3, r1, r3
 8003070:	431a      	orrs	r2, r3
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 80b1 	beq.w	80031e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003084:	4b4d      	ldr	r3, [pc, #308]	; (80031bc <HAL_GPIO_Init+0x2b8>)
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	4a4c      	ldr	r2, [pc, #304]	; (80031bc <HAL_GPIO_Init+0x2b8>)
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	6193      	str	r3, [r2, #24]
 8003090:	4b4a      	ldr	r3, [pc, #296]	; (80031bc <HAL_GPIO_Init+0x2b8>)
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800309c:	4a48      	ldr	r2, [pc, #288]	; (80031c0 <HAL_GPIO_Init+0x2bc>)
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	089b      	lsrs	r3, r3, #2
 80030a2:	3302      	adds	r3, #2
 80030a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	220f      	movs	r2, #15
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4013      	ands	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a40      	ldr	r2, [pc, #256]	; (80031c4 <HAL_GPIO_Init+0x2c0>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d013      	beq.n	80030f0 <HAL_GPIO_Init+0x1ec>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a3f      	ldr	r2, [pc, #252]	; (80031c8 <HAL_GPIO_Init+0x2c4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d00d      	beq.n	80030ec <HAL_GPIO_Init+0x1e8>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a3e      	ldr	r2, [pc, #248]	; (80031cc <HAL_GPIO_Init+0x2c8>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d007      	beq.n	80030e8 <HAL_GPIO_Init+0x1e4>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a3d      	ldr	r2, [pc, #244]	; (80031d0 <HAL_GPIO_Init+0x2cc>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d101      	bne.n	80030e4 <HAL_GPIO_Init+0x1e0>
 80030e0:	2303      	movs	r3, #3
 80030e2:	e006      	b.n	80030f2 <HAL_GPIO_Init+0x1ee>
 80030e4:	2304      	movs	r3, #4
 80030e6:	e004      	b.n	80030f2 <HAL_GPIO_Init+0x1ee>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e002      	b.n	80030f2 <HAL_GPIO_Init+0x1ee>
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <HAL_GPIO_Init+0x1ee>
 80030f0:	2300      	movs	r3, #0
 80030f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f4:	f002 0203 	and.w	r2, r2, #3
 80030f8:	0092      	lsls	r2, r2, #2
 80030fa:	4093      	lsls	r3, r2
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003102:	492f      	ldr	r1, [pc, #188]	; (80031c0 <HAL_GPIO_Init+0x2bc>)
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	089b      	lsrs	r3, r3, #2
 8003108:	3302      	adds	r3, #2
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d006      	beq.n	800312a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800311c:	4b2d      	ldr	r3, [pc, #180]	; (80031d4 <HAL_GPIO_Init+0x2d0>)
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	492c      	ldr	r1, [pc, #176]	; (80031d4 <HAL_GPIO_Init+0x2d0>)
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	4313      	orrs	r3, r2
 8003126:	608b      	str	r3, [r1, #8]
 8003128:	e006      	b.n	8003138 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800312a:	4b2a      	ldr	r3, [pc, #168]	; (80031d4 <HAL_GPIO_Init+0x2d0>)
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	43db      	mvns	r3, r3
 8003132:	4928      	ldr	r1, [pc, #160]	; (80031d4 <HAL_GPIO_Init+0x2d0>)
 8003134:	4013      	ands	r3, r2
 8003136:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d006      	beq.n	8003152 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003144:	4b23      	ldr	r3, [pc, #140]	; (80031d4 <HAL_GPIO_Init+0x2d0>)
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	4922      	ldr	r1, [pc, #136]	; (80031d4 <HAL_GPIO_Init+0x2d0>)
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	4313      	orrs	r3, r2
 800314e:	60cb      	str	r3, [r1, #12]
 8003150:	e006      	b.n	8003160 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003152:	4b20      	ldr	r3, [pc, #128]	; (80031d4 <HAL_GPIO_Init+0x2d0>)
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	43db      	mvns	r3, r3
 800315a:	491e      	ldr	r1, [pc, #120]	; (80031d4 <HAL_GPIO_Init+0x2d0>)
 800315c:	4013      	ands	r3, r2
 800315e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d006      	beq.n	800317a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800316c:	4b19      	ldr	r3, [pc, #100]	; (80031d4 <HAL_GPIO_Init+0x2d0>)
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	4918      	ldr	r1, [pc, #96]	; (80031d4 <HAL_GPIO_Init+0x2d0>)
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	4313      	orrs	r3, r2
 8003176:	604b      	str	r3, [r1, #4]
 8003178:	e006      	b.n	8003188 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800317a:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <HAL_GPIO_Init+0x2d0>)
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	43db      	mvns	r3, r3
 8003182:	4914      	ldr	r1, [pc, #80]	; (80031d4 <HAL_GPIO_Init+0x2d0>)
 8003184:	4013      	ands	r3, r2
 8003186:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d021      	beq.n	80031d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003194:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <HAL_GPIO_Init+0x2d0>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	490e      	ldr	r1, [pc, #56]	; (80031d4 <HAL_GPIO_Init+0x2d0>)
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	4313      	orrs	r3, r2
 800319e:	600b      	str	r3, [r1, #0]
 80031a0:	e021      	b.n	80031e6 <HAL_GPIO_Init+0x2e2>
 80031a2:	bf00      	nop
 80031a4:	10320000 	.word	0x10320000
 80031a8:	10310000 	.word	0x10310000
 80031ac:	10220000 	.word	0x10220000
 80031b0:	10210000 	.word	0x10210000
 80031b4:	10120000 	.word	0x10120000
 80031b8:	10110000 	.word	0x10110000
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40010000 	.word	0x40010000
 80031c4:	40010800 	.word	0x40010800
 80031c8:	40010c00 	.word	0x40010c00
 80031cc:	40011000 	.word	0x40011000
 80031d0:	40011400 	.word	0x40011400
 80031d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_GPIO_Init+0x304>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	43db      	mvns	r3, r3
 80031e0:	4909      	ldr	r1, [pc, #36]	; (8003208 <HAL_GPIO_Init+0x304>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	3301      	adds	r3, #1
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	fa22 f303 	lsr.w	r3, r2, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f47f ae8e 	bne.w	8002f18 <HAL_GPIO_Init+0x14>
  }
}
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
 8003200:	372c      	adds	r7, #44	; 0x2c
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr
 8003208:	40010400 	.word	0x40010400

0800320c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	807b      	strh	r3, [r7, #2]
 8003218:	4613      	mov	r3, r2
 800321a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800321c:	787b      	ldrb	r3, [r7, #1]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003222:	887a      	ldrh	r2, [r7, #2]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003228:	e003      	b.n	8003232 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800322a:	887b      	ldrh	r3, [r7, #2]
 800322c:	041a      	lsls	r2, r3, #16
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	611a      	str	r2, [r3, #16]
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr

0800323c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800324e:	887a      	ldrh	r2, [r7, #2]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4013      	ands	r3, r2
 8003254:	041a      	lsls	r2, r3, #16
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	43d9      	mvns	r1, r3
 800325a:	887b      	ldrh	r3, [r7, #2]
 800325c:	400b      	ands	r3, r1
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	611a      	str	r2, [r3, #16]
}
 8003264:	bf00      	nop
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	bc80      	pop	{r7}
 800326c:	4770      	bx	lr
	...

08003270 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800327a:	4b08      	ldr	r3, [pc, #32]	; (800329c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800327c:	695a      	ldr	r2, [r3, #20]
 800327e:	88fb      	ldrh	r3, [r7, #6]
 8003280:	4013      	ands	r3, r2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d006      	beq.n	8003294 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003286:	4a05      	ldr	r2, [pc, #20]	; (800329c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003288:	88fb      	ldrh	r3, [r7, #6]
 800328a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800328c:	88fb      	ldrh	r3, [r7, #6]
 800328e:	4618      	mov	r0, r3
 8003290:	f000 f806 	bl	80032a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003294:	bf00      	nop
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40010400 	.word	0x40010400

080032a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr

080032b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e12b      	b.n	800351e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7ff f840 	bl	8002360 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2224      	movs	r2, #36	; 0x24
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0201 	bic.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003306:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003316:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003318:	f001 fbca 	bl	8004ab0 <HAL_RCC_GetPCLK1Freq>
 800331c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	4a81      	ldr	r2, [pc, #516]	; (8003528 <HAL_I2C_Init+0x274>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d807      	bhi.n	8003338 <HAL_I2C_Init+0x84>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4a80      	ldr	r2, [pc, #512]	; (800352c <HAL_I2C_Init+0x278>)
 800332c:	4293      	cmp	r3, r2
 800332e:	bf94      	ite	ls
 8003330:	2301      	movls	r3, #1
 8003332:	2300      	movhi	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	e006      	b.n	8003346 <HAL_I2C_Init+0x92>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4a7d      	ldr	r2, [pc, #500]	; (8003530 <HAL_I2C_Init+0x27c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	bf94      	ite	ls
 8003340:	2301      	movls	r3, #1
 8003342:	2300      	movhi	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e0e7      	b.n	800351e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4a78      	ldr	r2, [pc, #480]	; (8003534 <HAL_I2C_Init+0x280>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	0c9b      	lsrs	r3, r3, #18
 8003358:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	430a      	orrs	r2, r1
 800336c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	4a6a      	ldr	r2, [pc, #424]	; (8003528 <HAL_I2C_Init+0x274>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d802      	bhi.n	8003388 <HAL_I2C_Init+0xd4>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	3301      	adds	r3, #1
 8003386:	e009      	b.n	800339c <HAL_I2C_Init+0xe8>
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800338e:	fb02 f303 	mul.w	r3, r2, r3
 8003392:	4a69      	ldr	r2, [pc, #420]	; (8003538 <HAL_I2C_Init+0x284>)
 8003394:	fba2 2303 	umull	r2, r3, r2, r3
 8003398:	099b      	lsrs	r3, r3, #6
 800339a:	3301      	adds	r3, #1
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	430b      	orrs	r3, r1
 80033a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	495c      	ldr	r1, [pc, #368]	; (8003528 <HAL_I2C_Init+0x274>)
 80033b8:	428b      	cmp	r3, r1
 80033ba:	d819      	bhi.n	80033f0 <HAL_I2C_Init+0x13c>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1e59      	subs	r1, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80033ca:	1c59      	adds	r1, r3, #1
 80033cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033d0:	400b      	ands	r3, r1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <HAL_I2C_Init+0x138>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1e59      	subs	r1, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80033e4:	3301      	adds	r3, #1
 80033e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ea:	e051      	b.n	8003490 <HAL_I2C_Init+0x1dc>
 80033ec:	2304      	movs	r3, #4
 80033ee:	e04f      	b.n	8003490 <HAL_I2C_Init+0x1dc>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d111      	bne.n	800341c <HAL_I2C_Init+0x168>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1e58      	subs	r0, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	440b      	add	r3, r1
 8003406:	fbb0 f3f3 	udiv	r3, r0, r3
 800340a:	3301      	adds	r3, #1
 800340c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003410:	2b00      	cmp	r3, #0
 8003412:	bf0c      	ite	eq
 8003414:	2301      	moveq	r3, #1
 8003416:	2300      	movne	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	e012      	b.n	8003442 <HAL_I2C_Init+0x18e>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	1e58      	subs	r0, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6859      	ldr	r1, [r3, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	0099      	lsls	r1, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003432:	3301      	adds	r3, #1
 8003434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003438:	2b00      	cmp	r3, #0
 800343a:	bf0c      	ite	eq
 800343c:	2301      	moveq	r3, #1
 800343e:	2300      	movne	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_I2C_Init+0x196>
 8003446:	2301      	movs	r3, #1
 8003448:	e022      	b.n	8003490 <HAL_I2C_Init+0x1dc>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10e      	bne.n	8003470 <HAL_I2C_Init+0x1bc>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	1e58      	subs	r0, r3, #1
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6859      	ldr	r1, [r3, #4]
 800345a:	460b      	mov	r3, r1
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	440b      	add	r3, r1
 8003460:	fbb0 f3f3 	udiv	r3, r0, r3
 8003464:	3301      	adds	r3, #1
 8003466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800346e:	e00f      	b.n	8003490 <HAL_I2C_Init+0x1dc>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	1e58      	subs	r0, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6859      	ldr	r1, [r3, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	0099      	lsls	r1, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	fbb0 f3f3 	udiv	r3, r0, r3
 8003486:	3301      	adds	r3, #1
 8003488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800348c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	6809      	ldr	r1, [r1, #0]
 8003494:	4313      	orrs	r3, r2
 8003496:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69da      	ldr	r2, [r3, #28]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6911      	ldr	r1, [r2, #16]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	68d2      	ldr	r2, [r2, #12]
 80034ca:	4311      	orrs	r1, r2
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6812      	ldr	r2, [r2, #0]
 80034d0:	430b      	orrs	r3, r1
 80034d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695a      	ldr	r2, [r3, #20]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	000186a0 	.word	0x000186a0
 800352c:	001e847f 	.word	0x001e847f
 8003530:	003d08ff 	.word	0x003d08ff
 8003534:	431bde83 	.word	0x431bde83
 8003538:	10624dd3 	.word	0x10624dd3

0800353c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af02      	add	r7, sp, #8
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	607a      	str	r2, [r7, #4]
 8003546:	461a      	mov	r2, r3
 8003548:	460b      	mov	r3, r1
 800354a:	817b      	strh	r3, [r7, #10]
 800354c:	4613      	mov	r3, r2
 800354e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003550:	f7ff f8fa 	bl	8002748 <HAL_GetTick>
 8003554:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b20      	cmp	r3, #32
 8003560:	f040 80e0 	bne.w	8003724 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	2319      	movs	r3, #25
 800356a:	2201      	movs	r2, #1
 800356c:	4970      	ldr	r1, [pc, #448]	; (8003730 <HAL_I2C_Master_Transmit+0x1f4>)
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 fc9e 	bl	8003eb0 <I2C_WaitOnFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800357a:	2302      	movs	r3, #2
 800357c:	e0d3      	b.n	8003726 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003584:	2b01      	cmp	r3, #1
 8003586:	d101      	bne.n	800358c <HAL_I2C_Master_Transmit+0x50>
 8003588:	2302      	movs	r3, #2
 800358a:	e0cc      	b.n	8003726 <HAL_I2C_Master_Transmit+0x1ea>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d007      	beq.n	80035b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0201 	orr.w	r2, r2, #1
 80035b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2221      	movs	r2, #33	; 0x21
 80035c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2210      	movs	r2, #16
 80035ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	893a      	ldrh	r2, [r7, #8]
 80035e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	4a50      	ldr	r2, [pc, #320]	; (8003734 <HAL_I2C_Master_Transmit+0x1f8>)
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035f4:	8979      	ldrh	r1, [r7, #10]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	6a3a      	ldr	r2, [r7, #32]
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 fb08 	bl	8003c10 <I2C_MasterRequestWrite>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e08d      	b.n	8003726 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800360a:	2300      	movs	r3, #0
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003620:	e066      	b.n	80036f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	6a39      	ldr	r1, [r7, #32]
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 fd5c 	bl	80040e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00d      	beq.n	800364e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	2b04      	cmp	r3, #4
 8003638:	d107      	bne.n	800364a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003648:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e06b      	b.n	8003726 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	781a      	ldrb	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003676:	3b01      	subs	r3, #1
 8003678:	b29a      	uxth	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b04      	cmp	r3, #4
 800368a:	d11b      	bne.n	80036c4 <HAL_I2C_Master_Transmit+0x188>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003690:	2b00      	cmp	r3, #0
 8003692:	d017      	beq.n	80036c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	781a      	ldrb	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	6a39      	ldr	r1, [r7, #32]
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 fd53 	bl	8004174 <I2C_WaitOnBTFFlagUntilTimeout>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00d      	beq.n	80036f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d107      	bne.n	80036ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e01a      	b.n	8003726 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d194      	bne.n	8003622 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	e000      	b.n	8003726 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003724:	2302      	movs	r3, #2
  }
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	00100002 	.word	0x00100002
 8003734:	ffff0000 	.word	0xffff0000

08003738 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08c      	sub	sp, #48	; 0x30
 800373c:	af02      	add	r7, sp, #8
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	607a      	str	r2, [r7, #4]
 8003742:	461a      	mov	r2, r3
 8003744:	460b      	mov	r3, r1
 8003746:	817b      	strh	r3, [r7, #10]
 8003748:	4613      	mov	r3, r2
 800374a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003750:	f7fe fffa 	bl	8002748 <HAL_GetTick>
 8003754:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b20      	cmp	r3, #32
 8003760:	f040 824b 	bne.w	8003bfa <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	2319      	movs	r3, #25
 800376a:	2201      	movs	r2, #1
 800376c:	497f      	ldr	r1, [pc, #508]	; (800396c <HAL_I2C_Master_Receive+0x234>)
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 fb9e 	bl	8003eb0 <I2C_WaitOnFlagUntilTimeout>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800377a:	2302      	movs	r3, #2
 800377c:	e23e      	b.n	8003bfc <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_I2C_Master_Receive+0x54>
 8003788:	2302      	movs	r3, #2
 800378a:	e237      	b.n	8003bfc <HAL_I2C_Master_Receive+0x4c4>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d007      	beq.n	80037b2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 0201 	orr.w	r2, r2, #1
 80037b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2222      	movs	r2, #34	; 0x22
 80037c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2210      	movs	r2, #16
 80037ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	893a      	ldrh	r2, [r7, #8]
 80037e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4a5f      	ldr	r2, [pc, #380]	; (8003970 <HAL_I2C_Master_Receive+0x238>)
 80037f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037f4:	8979      	ldrh	r1, [r7, #10]
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 fa8a 	bl	8003d14 <I2C_MasterRequestRead>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e1f8      	b.n	8003bfc <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380e:	2b00      	cmp	r3, #0
 8003810:	d113      	bne.n	800383a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003812:	2300      	movs	r3, #0
 8003814:	61fb      	str	r3, [r7, #28]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	61fb      	str	r3, [r7, #28]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	61fb      	str	r3, [r7, #28]
 8003826:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	e1cc      	b.n	8003bd4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383e:	2b01      	cmp	r3, #1
 8003840:	d11e      	bne.n	8003880 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003850:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003852:	b672      	cpsid	i
}
 8003854:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003856:	2300      	movs	r3, #0
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	61bb      	str	r3, [r7, #24]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	61bb      	str	r3, [r7, #24]
 800386a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800387a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800387c:	b662      	cpsie	i
}
 800387e:	e035      	b.n	80038ec <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003884:	2b02      	cmp	r3, #2
 8003886:	d11e      	bne.n	80038c6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003896:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003898:	b672      	cpsid	i
}
 800389a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038c2:	b662      	cpsie	i
}
 80038c4:	e012      	b.n	80038ec <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d6:	2300      	movs	r3, #0
 80038d8:	613b      	str	r3, [r7, #16]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80038ec:	e172      	b.n	8003bd4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f2:	2b03      	cmp	r3, #3
 80038f4:	f200 811f 	bhi.w	8003b36 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d123      	bne.n	8003948 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003902:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 fc7d 	bl	8004204 <I2C_WaitOnRXNEFlagUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e173      	b.n	8003bfc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	691a      	ldr	r2, [r3, #16]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	1c5a      	adds	r2, r3, #1
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003930:	3b01      	subs	r3, #1
 8003932:	b29a      	uxth	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393c:	b29b      	uxth	r3, r3
 800393e:	3b01      	subs	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003946:	e145      	b.n	8003bd4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394c:	2b02      	cmp	r3, #2
 800394e:	d152      	bne.n	80039f6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003956:	2200      	movs	r2, #0
 8003958:	4906      	ldr	r1, [pc, #24]	; (8003974 <HAL_I2C_Master_Receive+0x23c>)
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 faa8 	bl	8003eb0 <I2C_WaitOnFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d008      	beq.n	8003978 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e148      	b.n	8003bfc <HAL_I2C_Master_Receive+0x4c4>
 800396a:	bf00      	nop
 800396c:	00100002 	.word	0x00100002
 8003970:	ffff0000 	.word	0xffff0000
 8003974:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003978:	b672      	cpsid	i
}
 800397a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691a      	ldr	r2, [r3, #16]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80039be:	b662      	cpsie	i
}
 80039c0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039f4:	e0ee      	b.n	8003bd4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fc:	2200      	movs	r2, #0
 80039fe:	4981      	ldr	r1, [pc, #516]	; (8003c04 <HAL_I2C_Master_Receive+0x4cc>)
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 fa55 	bl	8003eb0 <I2C_WaitOnFlagUntilTimeout>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0f5      	b.n	8003bfc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a20:	b672      	cpsid	i
}
 8003a22:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691a      	ldr	r2, [r3, #16]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a56:	4b6c      	ldr	r3, [pc, #432]	; (8003c08 <HAL_I2C_Master_Receive+0x4d0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	08db      	lsrs	r3, r3, #3
 8003a5c:	4a6b      	ldr	r2, [pc, #428]	; (8003c0c <HAL_I2C_Master_Receive+0x4d4>)
 8003a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a62:	0a1a      	lsrs	r2, r3, #8
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	00da      	lsls	r2, r3, #3
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d118      	bne.n	8003aae <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	f043 0220 	orr.w	r2, r3, #32
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003a9e:	b662      	cpsie	i
}
 8003aa0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e0a6      	b.n	8003bfc <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d1d9      	bne.n	8003a70 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691a      	ldr	r2, [r3, #16]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003afe:	b662      	cpsie	i
}
 8003b00:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b34:	e04e      	b.n	8003bd4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 fb62 	bl	8004204 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e058      	b.n	8003bfc <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d124      	bne.n	8003bd4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8e:	2b03      	cmp	r3, #3
 8003b90:	d107      	bne.n	8003ba2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	691a      	ldr	r2, [r3, #16]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f47f ae88 	bne.w	80038ee <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	e000      	b.n	8003bfc <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003bfa:	2302      	movs	r3, #2
  }
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3728      	adds	r7, #40	; 0x28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	00010004 	.word	0x00010004
 8003c08:	20000000 	.word	0x20000000
 8003c0c:	14f8b589 	.word	0x14f8b589

08003c10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	607a      	str	r2, [r7, #4]
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d006      	beq.n	8003c3a <I2C_MasterRequestWrite+0x2a>
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d003      	beq.n	8003c3a <I2C_MasterRequestWrite+0x2a>
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c38:	d108      	bne.n	8003c4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	e00b      	b.n	8003c64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	2b12      	cmp	r3, #18
 8003c52:	d107      	bne.n	8003c64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 f91d 	bl	8003eb0 <I2C_WaitOnFlagUntilTimeout>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00d      	beq.n	8003c98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c8a:	d103      	bne.n	8003c94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e035      	b.n	8003d04 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ca0:	d108      	bne.n	8003cb4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ca2:	897b      	ldrh	r3, [r7, #10]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cb0:	611a      	str	r2, [r3, #16]
 8003cb2:	e01b      	b.n	8003cec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003cb4:	897b      	ldrh	r3, [r7, #10]
 8003cb6:	11db      	asrs	r3, r3, #7
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	f003 0306 	and.w	r3, r3, #6
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	f063 030f 	orn	r3, r3, #15
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	490e      	ldr	r1, [pc, #56]	; (8003d0c <I2C_MasterRequestWrite+0xfc>)
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 f966 	bl	8003fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e010      	b.n	8003d04 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ce2:	897b      	ldrh	r3, [r7, #10]
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	4907      	ldr	r1, [pc, #28]	; (8003d10 <I2C_MasterRequestWrite+0x100>)
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 f956 	bl	8003fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	00010008 	.word	0x00010008
 8003d10:	00010002 	.word	0x00010002

08003d14 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	607a      	str	r2, [r7, #4]
 8003d1e:	603b      	str	r3, [r7, #0]
 8003d20:	460b      	mov	r3, r1
 8003d22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d38:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d006      	beq.n	8003d4e <I2C_MasterRequestRead+0x3a>
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d003      	beq.n	8003d4e <I2C_MasterRequestRead+0x3a>
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d4c:	d108      	bne.n	8003d60 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	e00b      	b.n	8003d78 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d64:	2b11      	cmp	r3, #17
 8003d66:	d107      	bne.n	8003d78 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 f893 	bl	8003eb0 <I2C_WaitOnFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00d      	beq.n	8003dac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d9e:	d103      	bne.n	8003da8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003da6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e079      	b.n	8003ea0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003db4:	d108      	bne.n	8003dc8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003db6:	897b      	ldrh	r3, [r7, #10]
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	f043 0301 	orr.w	r3, r3, #1
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	611a      	str	r2, [r3, #16]
 8003dc6:	e05f      	b.n	8003e88 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003dc8:	897b      	ldrh	r3, [r7, #10]
 8003dca:	11db      	asrs	r3, r3, #7
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	f003 0306 	and.w	r3, r3, #6
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	f063 030f 	orn	r3, r3, #15
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	4930      	ldr	r1, [pc, #192]	; (8003ea8 <I2C_MasterRequestRead+0x194>)
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f8dc 	bl	8003fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e054      	b.n	8003ea0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003df6:	897b      	ldrh	r3, [r7, #10]
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	4929      	ldr	r1, [pc, #164]	; (8003eac <I2C_MasterRequestRead+0x198>)
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 f8cc 	bl	8003fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e044      	b.n	8003ea0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e16:	2300      	movs	r3, #0
 8003e18:	613b      	str	r3, [r7, #16]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	613b      	str	r3, [r7, #16]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e3a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f831 	bl	8003eb0 <I2C_WaitOnFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00d      	beq.n	8003e70 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e62:	d103      	bne.n	8003e6c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e6a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e017      	b.n	8003ea0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003e70:	897b      	ldrh	r3, [r7, #10]
 8003e72:	11db      	asrs	r3, r3, #7
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	f003 0306 	and.w	r3, r3, #6
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	f063 030e 	orn	r3, r3, #14
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	4907      	ldr	r1, [pc, #28]	; (8003eac <I2C_MasterRequestRead+0x198>)
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f888 	bl	8003fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3718      	adds	r7, #24
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	00010008 	.word	0x00010008
 8003eac:	00010002 	.word	0x00010002

08003eb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ec0:	e048      	b.n	8003f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec8:	d044      	beq.n	8003f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eca:	f7fe fc3d 	bl	8002748 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d302      	bcc.n	8003ee0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d139      	bne.n	8003f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	0c1b      	lsrs	r3, r3, #16
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d10d      	bne.n	8003f06 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	43da      	mvns	r2, r3
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	bf0c      	ite	eq
 8003efc:	2301      	moveq	r3, #1
 8003efe:	2300      	movne	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	461a      	mov	r2, r3
 8003f04:	e00c      	b.n	8003f20 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	43da      	mvns	r2, r3
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	4013      	ands	r3, r2
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	bf0c      	ite	eq
 8003f18:	2301      	moveq	r3, #1
 8003f1a:	2300      	movne	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d116      	bne.n	8003f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	f043 0220 	orr.w	r2, r3, #32
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e023      	b.n	8003f9c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	0c1b      	lsrs	r3, r3, #16
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d10d      	bne.n	8003f7a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	43da      	mvns	r2, r3
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	bf0c      	ite	eq
 8003f70:	2301      	moveq	r3, #1
 8003f72:	2300      	movne	r3, #0
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	461a      	mov	r2, r3
 8003f78:	e00c      	b.n	8003f94 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	43da      	mvns	r2, r3
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	4013      	ands	r3, r2
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	bf0c      	ite	eq
 8003f8c:	2301      	moveq	r3, #1
 8003f8e:	2300      	movne	r3, #0
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	461a      	mov	r2, r3
 8003f94:	79fb      	ldrb	r3, [r7, #7]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d093      	beq.n	8003ec2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
 8003fb0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fb2:	e071      	b.n	8004098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc2:	d123      	bne.n	800400c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	f043 0204 	orr.w	r2, r3, #4
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e067      	b.n	80040dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004012:	d041      	beq.n	8004098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004014:	f7fe fb98 	bl	8002748 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	429a      	cmp	r2, r3
 8004022:	d302      	bcc.n	800402a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d136      	bne.n	8004098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	0c1b      	lsrs	r3, r3, #16
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b01      	cmp	r3, #1
 8004032:	d10c      	bne.n	800404e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	43da      	mvns	r2, r3
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	4013      	ands	r3, r2
 8004040:	b29b      	uxth	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	bf14      	ite	ne
 8004046:	2301      	movne	r3, #1
 8004048:	2300      	moveq	r3, #0
 800404a:	b2db      	uxtb	r3, r3
 800404c:	e00b      	b.n	8004066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	43da      	mvns	r2, r3
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	4013      	ands	r3, r2
 800405a:	b29b      	uxth	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	bf14      	ite	ne
 8004060:	2301      	movne	r3, #1
 8004062:	2300      	moveq	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d016      	beq.n	8004098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	f043 0220 	orr.w	r2, r3, #32
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e021      	b.n	80040dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	0c1b      	lsrs	r3, r3, #16
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d10c      	bne.n	80040bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	43da      	mvns	r2, r3
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	4013      	ands	r3, r2
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	bf14      	ite	ne
 80040b4:	2301      	movne	r3, #1
 80040b6:	2300      	moveq	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	e00b      	b.n	80040d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	43da      	mvns	r2, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	4013      	ands	r3, r2
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	bf14      	ite	ne
 80040ce:	2301      	movne	r3, #1
 80040d0:	2300      	moveq	r3, #0
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f47f af6d 	bne.w	8003fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040f0:	e034      	b.n	800415c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 f8e3 	bl	80042be <I2C_IsAcknowledgeFailed>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e034      	b.n	800416c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004108:	d028      	beq.n	800415c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410a:	f7fe fb1d 	bl	8002748 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	429a      	cmp	r2, r3
 8004118:	d302      	bcc.n	8004120 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d11d      	bne.n	800415c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412a:	2b80      	cmp	r3, #128	; 0x80
 800412c:	d016      	beq.n	800415c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	f043 0220 	orr.w	r2, r3, #32
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e007      	b.n	800416c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004166:	2b80      	cmp	r3, #128	; 0x80
 8004168:	d1c3      	bne.n	80040f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004180:	e034      	b.n	80041ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f89b 	bl	80042be <I2C_IsAcknowledgeFailed>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e034      	b.n	80041fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004198:	d028      	beq.n	80041ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800419a:	f7fe fad5 	bl	8002748 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d302      	bcc.n	80041b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d11d      	bne.n	80041ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f003 0304 	and.w	r3, r3, #4
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d016      	beq.n	80041ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	f043 0220 	orr.w	r2, r3, #32
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e007      	b.n	80041fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d1c3      	bne.n	8004182 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004210:	e049      	b.n	80042a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	f003 0310 	and.w	r3, r3, #16
 800421c:	2b10      	cmp	r3, #16
 800421e:	d119      	bne.n	8004254 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0210 	mvn.w	r2, #16
 8004228:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e030      	b.n	80042b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004254:	f7fe fa78 	bl	8002748 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	429a      	cmp	r2, r3
 8004262:	d302      	bcc.n	800426a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d11d      	bne.n	80042a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004274:	2b40      	cmp	r3, #64	; 0x40
 8004276:	d016      	beq.n	80042a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2220      	movs	r2, #32
 8004282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f043 0220 	orr.w	r2, r3, #32
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e007      	b.n	80042b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b0:	2b40      	cmp	r3, #64	; 0x40
 80042b2:	d1ae      	bne.n	8004212 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d4:	d11b      	bne.n	800430e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	f043 0204 	orr.w	r2, r3, #4
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e000      	b.n	8004310 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	bc80      	pop	{r7}
 8004318:	4770      	bx	lr
	...

0800431c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e272      	b.n	8004814 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 8087 	beq.w	800444a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800433c:	4b92      	ldr	r3, [pc, #584]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f003 030c 	and.w	r3, r3, #12
 8004344:	2b04      	cmp	r3, #4
 8004346:	d00c      	beq.n	8004362 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004348:	4b8f      	ldr	r3, [pc, #572]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f003 030c 	and.w	r3, r3, #12
 8004350:	2b08      	cmp	r3, #8
 8004352:	d112      	bne.n	800437a <HAL_RCC_OscConfig+0x5e>
 8004354:	4b8c      	ldr	r3, [pc, #560]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800435c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004360:	d10b      	bne.n	800437a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004362:	4b89      	ldr	r3, [pc, #548]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d06c      	beq.n	8004448 <HAL_RCC_OscConfig+0x12c>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d168      	bne.n	8004448 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e24c      	b.n	8004814 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004382:	d106      	bne.n	8004392 <HAL_RCC_OscConfig+0x76>
 8004384:	4b80      	ldr	r3, [pc, #512]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a7f      	ldr	r2, [pc, #508]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 800438a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	e02e      	b.n	80043f0 <HAL_RCC_OscConfig+0xd4>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10c      	bne.n	80043b4 <HAL_RCC_OscConfig+0x98>
 800439a:	4b7b      	ldr	r3, [pc, #492]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a7a      	ldr	r2, [pc, #488]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 80043a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	4b78      	ldr	r3, [pc, #480]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a77      	ldr	r2, [pc, #476]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 80043ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	e01d      	b.n	80043f0 <HAL_RCC_OscConfig+0xd4>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043bc:	d10c      	bne.n	80043d8 <HAL_RCC_OscConfig+0xbc>
 80043be:	4b72      	ldr	r3, [pc, #456]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a71      	ldr	r2, [pc, #452]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 80043c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	4b6f      	ldr	r3, [pc, #444]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a6e      	ldr	r2, [pc, #440]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 80043d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	e00b      	b.n	80043f0 <HAL_RCC_OscConfig+0xd4>
 80043d8:	4b6b      	ldr	r3, [pc, #428]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a6a      	ldr	r2, [pc, #424]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 80043de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	4b68      	ldr	r3, [pc, #416]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a67      	ldr	r2, [pc, #412]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 80043ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d013      	beq.n	8004420 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f8:	f7fe f9a6 	bl	8002748 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004400:	f7fe f9a2 	bl	8002748 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b64      	cmp	r3, #100	; 0x64
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e200      	b.n	8004814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004412:	4b5d      	ldr	r3, [pc, #372]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f0      	beq.n	8004400 <HAL_RCC_OscConfig+0xe4>
 800441e:	e014      	b.n	800444a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004420:	f7fe f992 	bl	8002748 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004428:	f7fe f98e 	bl	8002748 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b64      	cmp	r3, #100	; 0x64
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e1ec      	b.n	8004814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800443a:	4b53      	ldr	r3, [pc, #332]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x10c>
 8004446:	e000      	b.n	800444a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d063      	beq.n	800451e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004456:	4b4c      	ldr	r3, [pc, #304]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f003 030c 	and.w	r3, r3, #12
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00b      	beq.n	800447a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004462:	4b49      	ldr	r3, [pc, #292]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f003 030c 	and.w	r3, r3, #12
 800446a:	2b08      	cmp	r3, #8
 800446c:	d11c      	bne.n	80044a8 <HAL_RCC_OscConfig+0x18c>
 800446e:	4b46      	ldr	r3, [pc, #280]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d116      	bne.n	80044a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800447a:	4b43      	ldr	r3, [pc, #268]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d005      	beq.n	8004492 <HAL_RCC_OscConfig+0x176>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d001      	beq.n	8004492 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e1c0      	b.n	8004814 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004492:	4b3d      	ldr	r3, [pc, #244]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	4939      	ldr	r1, [pc, #228]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044a6:	e03a      	b.n	800451e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d020      	beq.n	80044f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044b0:	4b36      	ldr	r3, [pc, #216]	; (800458c <HAL_RCC_OscConfig+0x270>)
 80044b2:	2201      	movs	r2, #1
 80044b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b6:	f7fe f947 	bl	8002748 <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044be:	f7fe f943 	bl	8002748 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e1a1      	b.n	8004814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d0:	4b2d      	ldr	r3, [pc, #180]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0f0      	beq.n	80044be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044dc:	4b2a      	ldr	r3, [pc, #168]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	4927      	ldr	r1, [pc, #156]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	600b      	str	r3, [r1, #0]
 80044f0:	e015      	b.n	800451e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044f2:	4b26      	ldr	r3, [pc, #152]	; (800458c <HAL_RCC_OscConfig+0x270>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f8:	f7fe f926 	bl	8002748 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004500:	f7fe f922 	bl	8002748 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e180      	b.n	8004814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004512:	4b1d      	ldr	r3, [pc, #116]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f0      	bne.n	8004500 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d03a      	beq.n	80045a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d019      	beq.n	8004566 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004532:	4b17      	ldr	r3, [pc, #92]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 8004534:	2201      	movs	r2, #1
 8004536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004538:	f7fe f906 	bl	8002748 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004540:	f7fe f902 	bl	8002748 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e160      	b.n	8004814 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004552:	4b0d      	ldr	r3, [pc, #52]	; (8004588 <HAL_RCC_OscConfig+0x26c>)
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0f0      	beq.n	8004540 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800455e:	2001      	movs	r0, #1
 8004560:	f000 face 	bl	8004b00 <RCC_Delay>
 8004564:	e01c      	b.n	80045a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004566:	4b0a      	ldr	r3, [pc, #40]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800456c:	f7fe f8ec 	bl	8002748 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004572:	e00f      	b.n	8004594 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004574:	f7fe f8e8 	bl	8002748 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d908      	bls.n	8004594 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e146      	b.n	8004814 <HAL_RCC_OscConfig+0x4f8>
 8004586:	bf00      	nop
 8004588:	40021000 	.word	0x40021000
 800458c:	42420000 	.word	0x42420000
 8004590:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004594:	4b92      	ldr	r3, [pc, #584]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1e9      	bne.n	8004574 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 80a6 	beq.w	80046fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ae:	2300      	movs	r3, #0
 80045b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045b2:	4b8b      	ldr	r3, [pc, #556]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10d      	bne.n	80045da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045be:	4b88      	ldr	r3, [pc, #544]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	4a87      	ldr	r2, [pc, #540]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 80045c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c8:	61d3      	str	r3, [r2, #28]
 80045ca:	4b85      	ldr	r3, [pc, #532]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d2:	60bb      	str	r3, [r7, #8]
 80045d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045d6:	2301      	movs	r3, #1
 80045d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045da:	4b82      	ldr	r3, [pc, #520]	; (80047e4 <HAL_RCC_OscConfig+0x4c8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d118      	bne.n	8004618 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045e6:	4b7f      	ldr	r3, [pc, #508]	; (80047e4 <HAL_RCC_OscConfig+0x4c8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a7e      	ldr	r2, [pc, #504]	; (80047e4 <HAL_RCC_OscConfig+0x4c8>)
 80045ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045f2:	f7fe f8a9 	bl	8002748 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045fa:	f7fe f8a5 	bl	8002748 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b64      	cmp	r3, #100	; 0x64
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e103      	b.n	8004814 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460c:	4b75      	ldr	r3, [pc, #468]	; (80047e4 <HAL_RCC_OscConfig+0x4c8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0f0      	beq.n	80045fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d106      	bne.n	800462e <HAL_RCC_OscConfig+0x312>
 8004620:	4b6f      	ldr	r3, [pc, #444]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	4a6e      	ldr	r2, [pc, #440]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 8004626:	f043 0301 	orr.w	r3, r3, #1
 800462a:	6213      	str	r3, [r2, #32]
 800462c:	e02d      	b.n	800468a <HAL_RCC_OscConfig+0x36e>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10c      	bne.n	8004650 <HAL_RCC_OscConfig+0x334>
 8004636:	4b6a      	ldr	r3, [pc, #424]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	4a69      	ldr	r2, [pc, #420]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 800463c:	f023 0301 	bic.w	r3, r3, #1
 8004640:	6213      	str	r3, [r2, #32]
 8004642:	4b67      	ldr	r3, [pc, #412]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	4a66      	ldr	r2, [pc, #408]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 8004648:	f023 0304 	bic.w	r3, r3, #4
 800464c:	6213      	str	r3, [r2, #32]
 800464e:	e01c      	b.n	800468a <HAL_RCC_OscConfig+0x36e>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	2b05      	cmp	r3, #5
 8004656:	d10c      	bne.n	8004672 <HAL_RCC_OscConfig+0x356>
 8004658:	4b61      	ldr	r3, [pc, #388]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	4a60      	ldr	r2, [pc, #384]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 800465e:	f043 0304 	orr.w	r3, r3, #4
 8004662:	6213      	str	r3, [r2, #32]
 8004664:	4b5e      	ldr	r3, [pc, #376]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	4a5d      	ldr	r2, [pc, #372]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	6213      	str	r3, [r2, #32]
 8004670:	e00b      	b.n	800468a <HAL_RCC_OscConfig+0x36e>
 8004672:	4b5b      	ldr	r3, [pc, #364]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	4a5a      	ldr	r2, [pc, #360]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 8004678:	f023 0301 	bic.w	r3, r3, #1
 800467c:	6213      	str	r3, [r2, #32]
 800467e:	4b58      	ldr	r3, [pc, #352]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	4a57      	ldr	r2, [pc, #348]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 8004684:	f023 0304 	bic.w	r3, r3, #4
 8004688:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d015      	beq.n	80046be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004692:	f7fe f859 	bl	8002748 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004698:	e00a      	b.n	80046b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800469a:	f7fe f855 	bl	8002748 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e0b1      	b.n	8004814 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b0:	4b4b      	ldr	r3, [pc, #300]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0ee      	beq.n	800469a <HAL_RCC_OscConfig+0x37e>
 80046bc:	e014      	b.n	80046e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046be:	f7fe f843 	bl	8002748 <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c4:	e00a      	b.n	80046dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c6:	f7fe f83f 	bl	8002748 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e09b      	b.n	8004814 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046dc:	4b40      	ldr	r3, [pc, #256]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1ee      	bne.n	80046c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046e8:	7dfb      	ldrb	r3, [r7, #23]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d105      	bne.n	80046fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ee:	4b3c      	ldr	r3, [pc, #240]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	4a3b      	ldr	r2, [pc, #236]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 80046f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 8087 	beq.w	8004812 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004704:	4b36      	ldr	r3, [pc, #216]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f003 030c 	and.w	r3, r3, #12
 800470c:	2b08      	cmp	r3, #8
 800470e:	d061      	beq.n	80047d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	2b02      	cmp	r3, #2
 8004716:	d146      	bne.n	80047a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004718:	4b33      	ldr	r3, [pc, #204]	; (80047e8 <HAL_RCC_OscConfig+0x4cc>)
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471e:	f7fe f813 	bl	8002748 <HAL_GetTick>
 8004722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004724:	e008      	b.n	8004738 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004726:	f7fe f80f 	bl	8002748 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d901      	bls.n	8004738 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e06d      	b.n	8004814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004738:	4b29      	ldr	r3, [pc, #164]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1f0      	bne.n	8004726 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800474c:	d108      	bne.n	8004760 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800474e:	4b24      	ldr	r3, [pc, #144]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	4921      	ldr	r1, [pc, #132]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 800475c:	4313      	orrs	r3, r2
 800475e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004760:	4b1f      	ldr	r3, [pc, #124]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a19      	ldr	r1, [r3, #32]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	430b      	orrs	r3, r1
 8004772:	491b      	ldr	r1, [pc, #108]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 8004774:	4313      	orrs	r3, r2
 8004776:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004778:	4b1b      	ldr	r3, [pc, #108]	; (80047e8 <HAL_RCC_OscConfig+0x4cc>)
 800477a:	2201      	movs	r2, #1
 800477c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477e:	f7fd ffe3 	bl	8002748 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004786:	f7fd ffdf 	bl	8002748 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e03d      	b.n	8004814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004798:	4b11      	ldr	r3, [pc, #68]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0f0      	beq.n	8004786 <HAL_RCC_OscConfig+0x46a>
 80047a4:	e035      	b.n	8004812 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a6:	4b10      	ldr	r3, [pc, #64]	; (80047e8 <HAL_RCC_OscConfig+0x4cc>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ac:	f7fd ffcc 	bl	8002748 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b4:	f7fd ffc8 	bl	8002748 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e026      	b.n	8004814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047c6:	4b06      	ldr	r3, [pc, #24]	; (80047e0 <HAL_RCC_OscConfig+0x4c4>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCC_OscConfig+0x498>
 80047d2:	e01e      	b.n	8004812 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d107      	bne.n	80047ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e019      	b.n	8004814 <HAL_RCC_OscConfig+0x4f8>
 80047e0:	40021000 	.word	0x40021000
 80047e4:	40007000 	.word	0x40007000
 80047e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047ec:	4b0b      	ldr	r3, [pc, #44]	; (800481c <HAL_RCC_OscConfig+0x500>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d106      	bne.n	800480e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800480a:	429a      	cmp	r2, r3
 800480c:	d001      	beq.n	8004812 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e000      	b.n	8004814 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	40021000 	.word	0x40021000

08004820 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e0d0      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004834:	4b6a      	ldr	r3, [pc, #424]	; (80049e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	429a      	cmp	r2, r3
 8004840:	d910      	bls.n	8004864 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004842:	4b67      	ldr	r3, [pc, #412]	; (80049e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f023 0207 	bic.w	r2, r3, #7
 800484a:	4965      	ldr	r1, [pc, #404]	; (80049e0 <HAL_RCC_ClockConfig+0x1c0>)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	4313      	orrs	r3, r2
 8004850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004852:	4b63      	ldr	r3, [pc, #396]	; (80049e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	429a      	cmp	r2, r3
 800485e:	d001      	beq.n	8004864 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e0b8      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d020      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800487c:	4b59      	ldr	r3, [pc, #356]	; (80049e4 <HAL_RCC_ClockConfig+0x1c4>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	4a58      	ldr	r2, [pc, #352]	; (80049e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004882:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004886:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0308 	and.w	r3, r3, #8
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004894:	4b53      	ldr	r3, [pc, #332]	; (80049e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	4a52      	ldr	r2, [pc, #328]	; (80049e4 <HAL_RCC_ClockConfig+0x1c4>)
 800489a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800489e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048a0:	4b50      	ldr	r3, [pc, #320]	; (80049e4 <HAL_RCC_ClockConfig+0x1c4>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	494d      	ldr	r1, [pc, #308]	; (80049e4 <HAL_RCC_ClockConfig+0x1c4>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d040      	beq.n	8004940 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d107      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c6:	4b47      	ldr	r3, [pc, #284]	; (80049e4 <HAL_RCC_ClockConfig+0x1c4>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d115      	bne.n	80048fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e07f      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d107      	bne.n	80048ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048de:	4b41      	ldr	r3, [pc, #260]	; (80049e4 <HAL_RCC_ClockConfig+0x1c4>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d109      	bne.n	80048fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e073      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ee:	4b3d      	ldr	r3, [pc, #244]	; (80049e4 <HAL_RCC_ClockConfig+0x1c4>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e06b      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048fe:	4b39      	ldr	r3, [pc, #228]	; (80049e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f023 0203 	bic.w	r2, r3, #3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	4936      	ldr	r1, [pc, #216]	; (80049e4 <HAL_RCC_ClockConfig+0x1c4>)
 800490c:	4313      	orrs	r3, r2
 800490e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004910:	f7fd ff1a 	bl	8002748 <HAL_GetTick>
 8004914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004916:	e00a      	b.n	800492e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004918:	f7fd ff16 	bl	8002748 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	f241 3288 	movw	r2, #5000	; 0x1388
 8004926:	4293      	cmp	r3, r2
 8004928:	d901      	bls.n	800492e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e053      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800492e:	4b2d      	ldr	r3, [pc, #180]	; (80049e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f003 020c 	and.w	r2, r3, #12
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	429a      	cmp	r2, r3
 800493e:	d1eb      	bne.n	8004918 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004940:	4b27      	ldr	r3, [pc, #156]	; (80049e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d210      	bcs.n	8004970 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494e:	4b24      	ldr	r3, [pc, #144]	; (80049e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f023 0207 	bic.w	r2, r3, #7
 8004956:	4922      	ldr	r1, [pc, #136]	; (80049e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	4313      	orrs	r3, r2
 800495c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800495e:	4b20      	ldr	r3, [pc, #128]	; (80049e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	429a      	cmp	r2, r3
 800496a:	d001      	beq.n	8004970 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e032      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	d008      	beq.n	800498e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800497c:	4b19      	ldr	r3, [pc, #100]	; (80049e4 <HAL_RCC_ClockConfig+0x1c4>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	4916      	ldr	r1, [pc, #88]	; (80049e4 <HAL_RCC_ClockConfig+0x1c4>)
 800498a:	4313      	orrs	r3, r2
 800498c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b00      	cmp	r3, #0
 8004998:	d009      	beq.n	80049ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800499a:	4b12      	ldr	r3, [pc, #72]	; (80049e4 <HAL_RCC_ClockConfig+0x1c4>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	490e      	ldr	r1, [pc, #56]	; (80049e4 <HAL_RCC_ClockConfig+0x1c4>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049ae:	f000 f821 	bl	80049f4 <HAL_RCC_GetSysClockFreq>
 80049b2:	4602      	mov	r2, r0
 80049b4:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <HAL_RCC_ClockConfig+0x1c4>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	091b      	lsrs	r3, r3, #4
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	490a      	ldr	r1, [pc, #40]	; (80049e8 <HAL_RCC_ClockConfig+0x1c8>)
 80049c0:	5ccb      	ldrb	r3, [r1, r3]
 80049c2:	fa22 f303 	lsr.w	r3, r2, r3
 80049c6:	4a09      	ldr	r2, [pc, #36]	; (80049ec <HAL_RCC_ClockConfig+0x1cc>)
 80049c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049ca:	4b09      	ldr	r3, [pc, #36]	; (80049f0 <HAL_RCC_ClockConfig+0x1d0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fd fe78 	bl	80026c4 <HAL_InitTick>

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	40022000 	.word	0x40022000
 80049e4:	40021000 	.word	0x40021000
 80049e8:	08005c6c 	.word	0x08005c6c
 80049ec:	20000000 	.word	0x20000000
 80049f0:	20000004 	.word	0x20000004

080049f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	2300      	movs	r3, #0
 8004a00:	60bb      	str	r3, [r7, #8]
 8004a02:	2300      	movs	r3, #0
 8004a04:	617b      	str	r3, [r7, #20]
 8004a06:	2300      	movs	r3, #0
 8004a08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a0e:	4b1e      	ldr	r3, [pc, #120]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x94>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f003 030c 	and.w	r3, r3, #12
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d002      	beq.n	8004a24 <HAL_RCC_GetSysClockFreq+0x30>
 8004a1e:	2b08      	cmp	r3, #8
 8004a20:	d003      	beq.n	8004a2a <HAL_RCC_GetSysClockFreq+0x36>
 8004a22:	e027      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a24:	4b19      	ldr	r3, [pc, #100]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x98>)
 8004a26:	613b      	str	r3, [r7, #16]
      break;
 8004a28:	e027      	b.n	8004a7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	0c9b      	lsrs	r3, r3, #18
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	4a17      	ldr	r2, [pc, #92]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004a34:	5cd3      	ldrb	r3, [r2, r3]
 8004a36:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d010      	beq.n	8004a64 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a42:	4b11      	ldr	r3, [pc, #68]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x94>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	0c5b      	lsrs	r3, r3, #17
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	4a11      	ldr	r2, [pc, #68]	; (8004a94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004a4e:	5cd3      	ldrb	r3, [r2, r3]
 8004a50:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a0d      	ldr	r2, [pc, #52]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x98>)
 8004a56:	fb03 f202 	mul.w	r2, r3, r2
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a60:	617b      	str	r3, [r7, #20]
 8004a62:	e004      	b.n	8004a6e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a0c      	ldr	r2, [pc, #48]	; (8004a98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004a68:	fb02 f303 	mul.w	r3, r2, r3
 8004a6c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	613b      	str	r3, [r7, #16]
      break;
 8004a72:	e002      	b.n	8004a7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a74:	4b05      	ldr	r3, [pc, #20]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x98>)
 8004a76:	613b      	str	r3, [r7, #16]
      break;
 8004a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a7a:	693b      	ldr	r3, [r7, #16]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	371c      	adds	r7, #28
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bc80      	pop	{r7}
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	007a1200 	.word	0x007a1200
 8004a90:	08005c84 	.word	0x08005c84
 8004a94:	08005c94 	.word	0x08005c94
 8004a98:	003d0900 	.word	0x003d0900

08004a9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aa0:	4b02      	ldr	r3, [pc, #8]	; (8004aac <HAL_RCC_GetHCLKFreq+0x10>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr
 8004aac:	20000000 	.word	0x20000000

08004ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ab4:	f7ff fff2 	bl	8004a9c <HAL_RCC_GetHCLKFreq>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	0a1b      	lsrs	r3, r3, #8
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	4903      	ldr	r1, [pc, #12]	; (8004ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ac6:	5ccb      	ldrb	r3, [r1, r3]
 8004ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	08005c7c 	.word	0x08005c7c

08004ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004adc:	f7ff ffde 	bl	8004a9c <HAL_RCC_GetHCLKFreq>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	0adb      	lsrs	r3, r3, #11
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	4903      	ldr	r1, [pc, #12]	; (8004afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aee:	5ccb      	ldrb	r3, [r1, r3]
 8004af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40021000 	.word	0x40021000
 8004afc:	08005c7c 	.word	0x08005c7c

08004b00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b08:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <RCC_Delay+0x34>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a0a      	ldr	r2, [pc, #40]	; (8004b38 <RCC_Delay+0x38>)
 8004b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b12:	0a5b      	lsrs	r3, r3, #9
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	fb02 f303 	mul.w	r3, r2, r3
 8004b1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b1c:	bf00      	nop
  }
  while (Delay --);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	1e5a      	subs	r2, r3, #1
 8004b22:	60fa      	str	r2, [r7, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1f9      	bne.n	8004b1c <RCC_Delay+0x1c>
}
 8004b28:	bf00      	nop
 8004b2a:	bf00      	nop
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr
 8004b34:	20000000 	.word	0x20000000
 8004b38:	10624dd3 	.word	0x10624dd3

08004b3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e042      	b.n	8004bd4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d106      	bne.n	8004b68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fd fc3a 	bl	80023dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2224      	movs	r2, #36	; 0x24
 8004b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 fdc3 	bl	800570c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	691a      	ldr	r2, [r3, #16]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	695a      	ldr	r2, [r3, #20]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ba4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68da      	ldr	r2, [r3, #12]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08c      	sub	sp, #48	; 0x30
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	4613      	mov	r3, r2
 8004be8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	d156      	bne.n	8004ca4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <HAL_UART_Transmit_DMA+0x26>
 8004bfc:	88fb      	ldrh	r3, [r7, #6]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e04f      	b.n	8004ca6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	88fa      	ldrh	r2, [r7, #6]
 8004c10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	88fa      	ldrh	r2, [r7, #6]
 8004c16:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2221      	movs	r2, #33	; 0x21
 8004c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2a:	4a21      	ldr	r2, [pc, #132]	; (8004cb0 <HAL_UART_Transmit_DMA+0xd4>)
 8004c2c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c32:	4a20      	ldr	r2, [pc, #128]	; (8004cb4 <HAL_UART_Transmit_DMA+0xd8>)
 8004c34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3a:	4a1f      	ldr	r2, [pc, #124]	; (8004cb8 <HAL_UART_Transmit_DMA+0xdc>)
 8004c3c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c42:	2200      	movs	r2, #0
 8004c44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8004c46:	f107 0308 	add.w	r3, r7, #8
 8004c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c52:	6819      	ldr	r1, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	88fb      	ldrh	r3, [r7, #6]
 8004c5e:	f7fd ff09 	bl	8002a74 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c6a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3314      	adds	r3, #20
 8004c72:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	e853 3f00 	ldrex	r3, [r3]
 8004c7a:	617b      	str	r3, [r7, #20]
   return(result);
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c82:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3314      	adds	r3, #20
 8004c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c8c:	627a      	str	r2, [r7, #36]	; 0x24
 8004c8e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c90:	6a39      	ldr	r1, [r7, #32]
 8004c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c94:	e841 2300 	strex	r3, r2, [r1]
 8004c98:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1e5      	bne.n	8004c6c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	e000      	b.n	8004ca6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004ca4:	2302      	movs	r3, #2
  }
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3730      	adds	r7, #48	; 0x30
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	0800523f 	.word	0x0800523f
 8004cb4:	080052d9 	.word	0x080052d9
 8004cb8:	080052f5 	.word	0x080052f5

08004cbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b0ba      	sub	sp, #232	; 0xe8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004cfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10f      	bne.n	8004d22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d06:	f003 0320 	and.w	r3, r3, #32
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d009      	beq.n	8004d22 <HAL_UART_IRQHandler+0x66>
 8004d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d12:	f003 0320 	and.w	r3, r3, #32
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 fc38 	bl	8005590 <UART_Receive_IT>
      return;
 8004d20:	e25b      	b.n	80051da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 80de 	beq.w	8004ee8 <HAL_UART_IRQHandler+0x22c>
 8004d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d106      	bne.n	8004d46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 80d1 	beq.w	8004ee8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00b      	beq.n	8004d6a <HAL_UART_IRQHandler+0xae>
 8004d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d005      	beq.n	8004d6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d62:	f043 0201 	orr.w	r2, r3, #1
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d6e:	f003 0304 	and.w	r3, r3, #4
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00b      	beq.n	8004d8e <HAL_UART_IRQHandler+0xd2>
 8004d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d005      	beq.n	8004d8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d86:	f043 0202 	orr.w	r2, r3, #2
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00b      	beq.n	8004db2 <HAL_UART_IRQHandler+0xf6>
 8004d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d005      	beq.n	8004db2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004daa:	f043 0204 	orr.w	r2, r3, #4
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004db6:	f003 0308 	and.w	r3, r3, #8
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d011      	beq.n	8004de2 <HAL_UART_IRQHandler+0x126>
 8004dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d105      	bne.n	8004dd6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d005      	beq.n	8004de2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dda:	f043 0208 	orr.w	r2, r3, #8
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 81f2 	beq.w	80051d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df0:	f003 0320 	and.w	r3, r3, #32
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d008      	beq.n	8004e0a <HAL_UART_IRQHandler+0x14e>
 8004df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dfc:	f003 0320 	and.w	r3, r3, #32
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 fbc3 	bl	8005590 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	bf14      	ite	ne
 8004e18:	2301      	movne	r3, #1
 8004e1a:	2300      	moveq	r3, #0
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d103      	bne.n	8004e36 <HAL_UART_IRQHandler+0x17a>
 8004e2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d04f      	beq.n	8004ed6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 facd 	bl	80053d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d041      	beq.n	8004ece <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3314      	adds	r3, #20
 8004e50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3314      	adds	r3, #20
 8004e72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e86:	e841 2300 	strex	r3, r2, [r1]
 8004e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1d9      	bne.n	8004e4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d013      	beq.n	8004ec6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea2:	4a7e      	ldr	r2, [pc, #504]	; (800509c <HAL_UART_IRQHandler+0x3e0>)
 8004ea4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fd fe7e 	bl	8002bac <HAL_DMA_Abort_IT>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d016      	beq.n	8004ee4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec4:	e00e      	b.n	8004ee4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f9a5 	bl	8005216 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ecc:	e00a      	b.n	8004ee4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f9a1 	bl	8005216 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed4:	e006      	b.n	8004ee4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f99d 	bl	8005216 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004ee2:	e175      	b.n	80051d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee4:	bf00      	nop
    return;
 8004ee6:	e173      	b.n	80051d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	f040 814f 	bne.w	8005190 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef6:	f003 0310 	and.w	r3, r3, #16
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 8148 	beq.w	8005190 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f04:	f003 0310 	and.w	r3, r3, #16
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 8141 	beq.w	8005190 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60bb      	str	r3, [r7, #8]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	60bb      	str	r3, [r7, #8]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	60bb      	str	r3, [r7, #8]
 8004f22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 80b6 	beq.w	80050a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 8145 	beq.w	80051d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f52:	429a      	cmp	r2, r3
 8004f54:	f080 813e 	bcs.w	80051d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	2b20      	cmp	r3, #32
 8004f68:	f000 8088 	beq.w	800507c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	330c      	adds	r3, #12
 8004f72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f7a:	e853 3f00 	ldrex	r3, [r3]
 8004f7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	330c      	adds	r3, #12
 8004f94:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004f98:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004fa4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004fa8:	e841 2300 	strex	r3, r2, [r1]
 8004fac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004fb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1d9      	bne.n	8004f6c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3314      	adds	r3, #20
 8004fbe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fc2:	e853 3f00 	ldrex	r3, [r3]
 8004fc6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004fc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fca:	f023 0301 	bic.w	r3, r3, #1
 8004fce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	3314      	adds	r3, #20
 8004fd8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fdc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004fe0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004fe4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fe8:	e841 2300 	strex	r3, r2, [r1]
 8004fec:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004fee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1e1      	bne.n	8004fb8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	3314      	adds	r3, #20
 8004ffa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ffe:	e853 3f00 	ldrex	r3, [r3]
 8005002:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800500a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	3314      	adds	r3, #20
 8005014:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005018:	66fa      	str	r2, [r7, #108]	; 0x6c
 800501a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800501e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005020:	e841 2300 	strex	r3, r2, [r1]
 8005024:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1e3      	bne.n	8004ff4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	330c      	adds	r3, #12
 8005040:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005044:	e853 3f00 	ldrex	r3, [r3]
 8005048:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800504a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800504c:	f023 0310 	bic.w	r3, r3, #16
 8005050:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	330c      	adds	r3, #12
 800505a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800505e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005060:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005062:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005064:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005066:	e841 2300 	strex	r3, r2, [r1]
 800506a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800506c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1e3      	bne.n	800503a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005076:	4618      	mov	r0, r3
 8005078:	f7fd fd5c 	bl	8002b34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800508a:	b29b      	uxth	r3, r3
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	b29b      	uxth	r3, r3
 8005090:	4619      	mov	r1, r3
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f8c8 	bl	8005228 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005098:	e09c      	b.n	80051d4 <HAL_UART_IRQHandler+0x518>
 800509a:	bf00      	nop
 800509c:	0800549b 	.word	0x0800549b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 808e 	beq.w	80051d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80050bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 8089 	beq.w	80051d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	330c      	adds	r3, #12
 80050cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d0:	e853 3f00 	ldrex	r3, [r3]
 80050d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	330c      	adds	r3, #12
 80050e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80050ea:	647a      	str	r2, [r7, #68]	; 0x44
 80050ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050f2:	e841 2300 	strex	r3, r2, [r1]
 80050f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1e3      	bne.n	80050c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3314      	adds	r3, #20
 8005104:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	623b      	str	r3, [r7, #32]
   return(result);
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	f023 0301 	bic.w	r3, r3, #1
 8005114:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3314      	adds	r3, #20
 800511e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005122:	633a      	str	r2, [r7, #48]	; 0x30
 8005124:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005126:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800512a:	e841 2300 	strex	r3, r2, [r1]
 800512e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1e3      	bne.n	80050fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2220      	movs	r2, #32
 800513a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	330c      	adds	r3, #12
 800514a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	e853 3f00 	ldrex	r3, [r3]
 8005152:	60fb      	str	r3, [r7, #12]
   return(result);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 0310 	bic.w	r3, r3, #16
 800515a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	330c      	adds	r3, #12
 8005164:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005168:	61fa      	str	r2, [r7, #28]
 800516a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516c:	69b9      	ldr	r1, [r7, #24]
 800516e:	69fa      	ldr	r2, [r7, #28]
 8005170:	e841 2300 	strex	r3, r2, [r1]
 8005174:	617b      	str	r3, [r7, #20]
   return(result);
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1e3      	bne.n	8005144 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005182:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005186:	4619      	mov	r1, r3
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f84d 	bl	8005228 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800518e:	e023      	b.n	80051d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005198:	2b00      	cmp	r3, #0
 800519a:	d009      	beq.n	80051b0 <HAL_UART_IRQHandler+0x4f4>
 800519c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f98a 	bl	80054c2 <UART_Transmit_IT>
    return;
 80051ae:	e014      	b.n	80051da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00e      	beq.n	80051da <HAL_UART_IRQHandler+0x51e>
 80051bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f9c9 	bl	8005560 <UART_EndTransmit_IT>
    return;
 80051ce:	e004      	b.n	80051da <HAL_UART_IRQHandler+0x51e>
    return;
 80051d0:	bf00      	nop
 80051d2:	e002      	b.n	80051da <HAL_UART_IRQHandler+0x51e>
      return;
 80051d4:	bf00      	nop
 80051d6:	e000      	b.n	80051da <HAL_UART_IRQHandler+0x51e>
      return;
 80051d8:	bf00      	nop
  }
}
 80051da:	37e8      	adds	r7, #232	; 0xe8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bc80      	pop	{r7}
 80051f0:	4770      	bx	lr

080051f2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr

08005204 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	bc80      	pop	{r7}
 8005214:	4770      	bx	lr

08005216 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005216:	b480      	push	{r7}
 8005218:	b083      	sub	sp, #12
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800521e:	bf00      	nop
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	bc80      	pop	{r7}
 8005226:	4770      	bx	lr

08005228 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	460b      	mov	r3, r1
 8005232:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	bc80      	pop	{r7}
 800523c:	4770      	bx	lr

0800523e <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b090      	sub	sp, #64	; 0x40
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b00      	cmp	r3, #0
 8005258:	d137      	bne.n	80052ca <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800525a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800525c:	2200      	movs	r2, #0
 800525e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3314      	adds	r3, #20
 8005266:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	e853 3f00 	ldrex	r3, [r3]
 800526e:	623b      	str	r3, [r7, #32]
   return(result);
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005276:	63bb      	str	r3, [r7, #56]	; 0x38
 8005278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3314      	adds	r3, #20
 800527e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005280:	633a      	str	r2, [r7, #48]	; 0x30
 8005282:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005284:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005288:	e841 2300 	strex	r3, r2, [r1]
 800528c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800528e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e5      	bne.n	8005260 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	330c      	adds	r3, #12
 800529a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	e853 3f00 	ldrex	r3, [r3]
 80052a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052aa:	637b      	str	r3, [r7, #52]	; 0x34
 80052ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	330c      	adds	r3, #12
 80052b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052b4:	61fa      	str	r2, [r7, #28]
 80052b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	69b9      	ldr	r1, [r7, #24]
 80052ba:	69fa      	ldr	r2, [r7, #28]
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	617b      	str	r3, [r7, #20]
   return(result);
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e5      	bne.n	8005294 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052c8:	e002      	b.n	80052d0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80052ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80052cc:	f7ff ff88 	bl	80051e0 <HAL_UART_TxCpltCallback>
}
 80052d0:	bf00      	nop
 80052d2:	3740      	adds	r7, #64	; 0x40
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f7ff ff83 	bl	80051f2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052ec:	bf00      	nop
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005310:	2b00      	cmp	r3, #0
 8005312:	bf14      	ite	ne
 8005314:	2301      	movne	r3, #1
 8005316:	2300      	moveq	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b21      	cmp	r3, #33	; 0x21
 8005326:	d108      	bne.n	800533a <UART_DMAError+0x46>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d005      	beq.n	800533a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2200      	movs	r2, #0
 8005332:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005334:	68b8      	ldr	r0, [r7, #8]
 8005336:	f000 f827 	bl	8005388 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005344:	2b00      	cmp	r3, #0
 8005346:	bf14      	ite	ne
 8005348:	2301      	movne	r3, #1
 800534a:	2300      	moveq	r3, #0
 800534c:	b2db      	uxtb	r3, r3
 800534e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b22      	cmp	r3, #34	; 0x22
 800535a:	d108      	bne.n	800536e <UART_DMAError+0x7a>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d005      	beq.n	800536e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2200      	movs	r2, #0
 8005366:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005368:	68b8      	ldr	r0, [r7, #8]
 800536a:	f000 f834 	bl	80053d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005372:	f043 0210 	orr.w	r2, r3, #16
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800537a:	68b8      	ldr	r0, [r7, #8]
 800537c:	f7ff ff4b 	bl	8005216 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005380:	bf00      	nop
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005388:	b480      	push	{r7}
 800538a:	b089      	sub	sp, #36	; 0x24
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	330c      	adds	r3, #12
 8005396:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	e853 3f00 	ldrex	r3, [r3]
 800539e:	60bb      	str	r3, [r7, #8]
   return(result);
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80053a6:	61fb      	str	r3, [r7, #28]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	330c      	adds	r3, #12
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	61ba      	str	r2, [r7, #24]
 80053b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	6979      	ldr	r1, [r7, #20]
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	613b      	str	r3, [r7, #16]
   return(result);
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e5      	bne.n	8005390 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80053cc:	bf00      	nop
 80053ce:	3724      	adds	r7, #36	; 0x24
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bc80      	pop	{r7}
 80053d4:	4770      	bx	lr

080053d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b095      	sub	sp, #84	; 0x54
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	330c      	adds	r3, #12
 80053e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e8:	e853 3f00 	ldrex	r3, [r3]
 80053ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	330c      	adds	r3, #12
 80053fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053fe:	643a      	str	r2, [r7, #64]	; 0x40
 8005400:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005402:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005404:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005406:	e841 2300 	strex	r3, r2, [r1]
 800540a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800540c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1e5      	bne.n	80053de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3314      	adds	r3, #20
 8005418:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	61fb      	str	r3, [r7, #28]
   return(result);
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	f023 0301 	bic.w	r3, r3, #1
 8005428:	64bb      	str	r3, [r7, #72]	; 0x48
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3314      	adds	r3, #20
 8005430:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005432:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005434:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1e5      	bne.n	8005412 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544a:	2b01      	cmp	r3, #1
 800544c:	d119      	bne.n	8005482 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	330c      	adds	r3, #12
 8005454:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	e853 3f00 	ldrex	r3, [r3]
 800545c:	60bb      	str	r3, [r7, #8]
   return(result);
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f023 0310 	bic.w	r3, r3, #16
 8005464:	647b      	str	r3, [r7, #68]	; 0x44
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	330c      	adds	r3, #12
 800546c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800546e:	61ba      	str	r2, [r7, #24]
 8005470:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005472:	6979      	ldr	r1, [r7, #20]
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	e841 2300 	strex	r3, r2, [r1]
 800547a:	613b      	str	r3, [r7, #16]
   return(result);
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1e5      	bne.n	800544e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2220      	movs	r2, #32
 8005486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005490:	bf00      	nop
 8005492:	3754      	adds	r7, #84	; 0x54
 8005494:	46bd      	mov	sp, r7
 8005496:	bc80      	pop	{r7}
 8005498:	4770      	bx	lr

0800549a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b084      	sub	sp, #16
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f7ff feae 	bl	8005216 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054ba:	bf00      	nop
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b085      	sub	sp, #20
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b21      	cmp	r3, #33	; 0x21
 80054d4:	d13e      	bne.n	8005554 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054de:	d114      	bne.n	800550a <UART_Transmit_IT+0x48>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d110      	bne.n	800550a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	461a      	mov	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	1c9a      	adds	r2, r3, #2
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	621a      	str	r2, [r3, #32]
 8005508:	e008      	b.n	800551c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	1c59      	adds	r1, r3, #1
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6211      	str	r1, [r2, #32]
 8005514:	781a      	ldrb	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005520:	b29b      	uxth	r3, r3
 8005522:	3b01      	subs	r3, #1
 8005524:	b29b      	uxth	r3, r3
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	4619      	mov	r1, r3
 800552a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10f      	bne.n	8005550 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68da      	ldr	r2, [r3, #12]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800553e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800554e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005550:	2300      	movs	r3, #0
 8005552:	e000      	b.n	8005556 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005554:	2302      	movs	r3, #2
  }
}
 8005556:	4618      	mov	r0, r3
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr

08005560 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005576:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2220      	movs	r2, #32
 800557c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f7ff fe2d 	bl	80051e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b08c      	sub	sp, #48	; 0x30
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b22      	cmp	r3, #34	; 0x22
 80055a2:	f040 80ae 	bne.w	8005702 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ae:	d117      	bne.n	80055e0 <UART_Receive_IT+0x50>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d113      	bne.n	80055e0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055b8:	2300      	movs	r3, #0
 80055ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d8:	1c9a      	adds	r2, r3, #2
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	629a      	str	r2, [r3, #40]	; 0x28
 80055de:	e026      	b.n	800562e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f2:	d007      	beq.n	8005604 <UART_Receive_IT+0x74>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10a      	bne.n	8005612 <UART_Receive_IT+0x82>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d106      	bne.n	8005612 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	b2da      	uxtb	r2, r3
 800560c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560e:	701a      	strb	r2, [r3, #0]
 8005610:	e008      	b.n	8005624 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	b2db      	uxtb	r3, r3
 800561a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800561e:	b2da      	uxtb	r2, r3
 8005620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005622:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005628:	1c5a      	adds	r2, r3, #1
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b01      	subs	r3, #1
 8005636:	b29b      	uxth	r3, r3
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	4619      	mov	r1, r3
 800563c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800563e:	2b00      	cmp	r3, #0
 8005640:	d15d      	bne.n	80056fe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68da      	ldr	r2, [r3, #12]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 0220 	bic.w	r2, r2, #32
 8005650:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68da      	ldr	r2, [r3, #12]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005660:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	695a      	ldr	r2, [r3, #20]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 0201 	bic.w	r2, r2, #1
 8005670:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2220      	movs	r2, #32
 8005676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005684:	2b01      	cmp	r3, #1
 8005686:	d135      	bne.n	80056f4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	330c      	adds	r3, #12
 8005694:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	e853 3f00 	ldrex	r3, [r3]
 800569c:	613b      	str	r3, [r7, #16]
   return(result);
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f023 0310 	bic.w	r3, r3, #16
 80056a4:	627b      	str	r3, [r7, #36]	; 0x24
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	330c      	adds	r3, #12
 80056ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ae:	623a      	str	r2, [r7, #32]
 80056b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b2:	69f9      	ldr	r1, [r7, #28]
 80056b4:	6a3a      	ldr	r2, [r7, #32]
 80056b6:	e841 2300 	strex	r3, r2, [r1]
 80056ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1e5      	bne.n	800568e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0310 	and.w	r3, r3, #16
 80056cc:	2b10      	cmp	r3, #16
 80056ce:	d10a      	bne.n	80056e6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056d0:	2300      	movs	r3, #0
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	60fb      	str	r3, [r7, #12]
 80056e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056ea:	4619      	mov	r1, r3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7ff fd9b 	bl	8005228 <HAL_UARTEx_RxEventCallback>
 80056f2:	e002      	b.n	80056fa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7ff fd85 	bl	8005204 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	e002      	b.n	8005704 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	e000      	b.n	8005704 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005702:	2302      	movs	r3, #2
  }
}
 8005704:	4618      	mov	r0, r3
 8005706:	3730      	adds	r7, #48	; 0x30
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689a      	ldr	r2, [r3, #8]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	431a      	orrs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	4313      	orrs	r3, r2
 800573a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005746:	f023 030c 	bic.w	r3, r3, #12
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	6812      	ldr	r2, [r2, #0]
 800574e:	68b9      	ldr	r1, [r7, #8]
 8005750:	430b      	orrs	r3, r1
 8005752:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	699a      	ldr	r2, [r3, #24]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a2c      	ldr	r2, [pc, #176]	; (8005820 <UART_SetConfig+0x114>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d103      	bne.n	800577c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005774:	f7ff f9b0 	bl	8004ad8 <HAL_RCC_GetPCLK2Freq>
 8005778:	60f8      	str	r0, [r7, #12]
 800577a:	e002      	b.n	8005782 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800577c:	f7ff f998 	bl	8004ab0 <HAL_RCC_GetPCLK1Freq>
 8005780:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4613      	mov	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	009a      	lsls	r2, r3, #2
 800578c:	441a      	add	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	fbb2 f3f3 	udiv	r3, r2, r3
 8005798:	4a22      	ldr	r2, [pc, #136]	; (8005824 <UART_SetConfig+0x118>)
 800579a:	fba2 2303 	umull	r2, r3, r2, r3
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	0119      	lsls	r1, r3, #4
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	4613      	mov	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	009a      	lsls	r2, r3, #2
 80057ac:	441a      	add	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80057b8:	4b1a      	ldr	r3, [pc, #104]	; (8005824 <UART_SetConfig+0x118>)
 80057ba:	fba3 0302 	umull	r0, r3, r3, r2
 80057be:	095b      	lsrs	r3, r3, #5
 80057c0:	2064      	movs	r0, #100	; 0x64
 80057c2:	fb00 f303 	mul.w	r3, r0, r3
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	011b      	lsls	r3, r3, #4
 80057ca:	3332      	adds	r3, #50	; 0x32
 80057cc:	4a15      	ldr	r2, [pc, #84]	; (8005824 <UART_SetConfig+0x118>)
 80057ce:	fba2 2303 	umull	r2, r3, r2, r3
 80057d2:	095b      	lsrs	r3, r3, #5
 80057d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057d8:	4419      	add	r1, r3
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4613      	mov	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	009a      	lsls	r2, r3, #2
 80057e4:	441a      	add	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80057f0:	4b0c      	ldr	r3, [pc, #48]	; (8005824 <UART_SetConfig+0x118>)
 80057f2:	fba3 0302 	umull	r0, r3, r3, r2
 80057f6:	095b      	lsrs	r3, r3, #5
 80057f8:	2064      	movs	r0, #100	; 0x64
 80057fa:	fb00 f303 	mul.w	r3, r0, r3
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	3332      	adds	r3, #50	; 0x32
 8005804:	4a07      	ldr	r2, [pc, #28]	; (8005824 <UART_SetConfig+0x118>)
 8005806:	fba2 2303 	umull	r2, r3, r2, r3
 800580a:	095b      	lsrs	r3, r3, #5
 800580c:	f003 020f 	and.w	r2, r3, #15
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	440a      	add	r2, r1
 8005816:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005818:	bf00      	nop
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40013800 	.word	0x40013800
 8005824:	51eb851f 	.word	0x51eb851f

08005828 <__errno>:
 8005828:	4b01      	ldr	r3, [pc, #4]	; (8005830 <__errno+0x8>)
 800582a:	6818      	ldr	r0, [r3, #0]
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	2000000c 	.word	0x2000000c

08005834 <__libc_init_array>:
 8005834:	b570      	push	{r4, r5, r6, lr}
 8005836:	2600      	movs	r6, #0
 8005838:	4d0c      	ldr	r5, [pc, #48]	; (800586c <__libc_init_array+0x38>)
 800583a:	4c0d      	ldr	r4, [pc, #52]	; (8005870 <__libc_init_array+0x3c>)
 800583c:	1b64      	subs	r4, r4, r5
 800583e:	10a4      	asrs	r4, r4, #2
 8005840:	42a6      	cmp	r6, r4
 8005842:	d109      	bne.n	8005858 <__libc_init_array+0x24>
 8005844:	f000 f93a 	bl	8005abc <_init>
 8005848:	2600      	movs	r6, #0
 800584a:	4d0a      	ldr	r5, [pc, #40]	; (8005874 <__libc_init_array+0x40>)
 800584c:	4c0a      	ldr	r4, [pc, #40]	; (8005878 <__libc_init_array+0x44>)
 800584e:	1b64      	subs	r4, r4, r5
 8005850:	10a4      	asrs	r4, r4, #2
 8005852:	42a6      	cmp	r6, r4
 8005854:	d105      	bne.n	8005862 <__libc_init_array+0x2e>
 8005856:	bd70      	pop	{r4, r5, r6, pc}
 8005858:	f855 3b04 	ldr.w	r3, [r5], #4
 800585c:	4798      	blx	r3
 800585e:	3601      	adds	r6, #1
 8005860:	e7ee      	b.n	8005840 <__libc_init_array+0xc>
 8005862:	f855 3b04 	ldr.w	r3, [r5], #4
 8005866:	4798      	blx	r3
 8005868:	3601      	adds	r6, #1
 800586a:	e7f2      	b.n	8005852 <__libc_init_array+0x1e>
 800586c:	08005c98 	.word	0x08005c98
 8005870:	08005c98 	.word	0x08005c98
 8005874:	08005c98 	.word	0x08005c98
 8005878:	08005c9c 	.word	0x08005c9c

0800587c <malloc>:
 800587c:	4b02      	ldr	r3, [pc, #8]	; (8005888 <malloc+0xc>)
 800587e:	4601      	mov	r1, r0
 8005880:	6818      	ldr	r0, [r3, #0]
 8005882:	f000 b889 	b.w	8005998 <_malloc_r>
 8005886:	bf00      	nop
 8005888:	2000000c 	.word	0x2000000c

0800588c <free>:
 800588c:	4b02      	ldr	r3, [pc, #8]	; (8005898 <free+0xc>)
 800588e:	4601      	mov	r1, r0
 8005890:	6818      	ldr	r0, [r3, #0]
 8005892:	f000 b819 	b.w	80058c8 <_free_r>
 8005896:	bf00      	nop
 8005898:	2000000c 	.word	0x2000000c

0800589c <memcpy>:
 800589c:	440a      	add	r2, r1
 800589e:	4291      	cmp	r1, r2
 80058a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80058a4:	d100      	bne.n	80058a8 <memcpy+0xc>
 80058a6:	4770      	bx	lr
 80058a8:	b510      	push	{r4, lr}
 80058aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058ae:	4291      	cmp	r1, r2
 80058b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058b4:	d1f9      	bne.n	80058aa <memcpy+0xe>
 80058b6:	bd10      	pop	{r4, pc}

080058b8 <memset>:
 80058b8:	4603      	mov	r3, r0
 80058ba:	4402      	add	r2, r0
 80058bc:	4293      	cmp	r3, r2
 80058be:	d100      	bne.n	80058c2 <memset+0xa>
 80058c0:	4770      	bx	lr
 80058c2:	f803 1b01 	strb.w	r1, [r3], #1
 80058c6:	e7f9      	b.n	80058bc <memset+0x4>

080058c8 <_free_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	4605      	mov	r5, r0
 80058cc:	2900      	cmp	r1, #0
 80058ce:	d040      	beq.n	8005952 <_free_r+0x8a>
 80058d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058d4:	1f0c      	subs	r4, r1, #4
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	bfb8      	it	lt
 80058da:	18e4      	addlt	r4, r4, r3
 80058dc:	f000 f8e0 	bl	8005aa0 <__malloc_lock>
 80058e0:	4a1c      	ldr	r2, [pc, #112]	; (8005954 <_free_r+0x8c>)
 80058e2:	6813      	ldr	r3, [r2, #0]
 80058e4:	b933      	cbnz	r3, 80058f4 <_free_r+0x2c>
 80058e6:	6063      	str	r3, [r4, #4]
 80058e8:	6014      	str	r4, [r2, #0]
 80058ea:	4628      	mov	r0, r5
 80058ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058f0:	f000 b8dc 	b.w	8005aac <__malloc_unlock>
 80058f4:	42a3      	cmp	r3, r4
 80058f6:	d908      	bls.n	800590a <_free_r+0x42>
 80058f8:	6820      	ldr	r0, [r4, #0]
 80058fa:	1821      	adds	r1, r4, r0
 80058fc:	428b      	cmp	r3, r1
 80058fe:	bf01      	itttt	eq
 8005900:	6819      	ldreq	r1, [r3, #0]
 8005902:	685b      	ldreq	r3, [r3, #4]
 8005904:	1809      	addeq	r1, r1, r0
 8005906:	6021      	streq	r1, [r4, #0]
 8005908:	e7ed      	b.n	80058e6 <_free_r+0x1e>
 800590a:	461a      	mov	r2, r3
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	b10b      	cbz	r3, 8005914 <_free_r+0x4c>
 8005910:	42a3      	cmp	r3, r4
 8005912:	d9fa      	bls.n	800590a <_free_r+0x42>
 8005914:	6811      	ldr	r1, [r2, #0]
 8005916:	1850      	adds	r0, r2, r1
 8005918:	42a0      	cmp	r0, r4
 800591a:	d10b      	bne.n	8005934 <_free_r+0x6c>
 800591c:	6820      	ldr	r0, [r4, #0]
 800591e:	4401      	add	r1, r0
 8005920:	1850      	adds	r0, r2, r1
 8005922:	4283      	cmp	r3, r0
 8005924:	6011      	str	r1, [r2, #0]
 8005926:	d1e0      	bne.n	80058ea <_free_r+0x22>
 8005928:	6818      	ldr	r0, [r3, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	4401      	add	r1, r0
 800592e:	6011      	str	r1, [r2, #0]
 8005930:	6053      	str	r3, [r2, #4]
 8005932:	e7da      	b.n	80058ea <_free_r+0x22>
 8005934:	d902      	bls.n	800593c <_free_r+0x74>
 8005936:	230c      	movs	r3, #12
 8005938:	602b      	str	r3, [r5, #0]
 800593a:	e7d6      	b.n	80058ea <_free_r+0x22>
 800593c:	6820      	ldr	r0, [r4, #0]
 800593e:	1821      	adds	r1, r4, r0
 8005940:	428b      	cmp	r3, r1
 8005942:	bf01      	itttt	eq
 8005944:	6819      	ldreq	r1, [r3, #0]
 8005946:	685b      	ldreq	r3, [r3, #4]
 8005948:	1809      	addeq	r1, r1, r0
 800594a:	6021      	streq	r1, [r4, #0]
 800594c:	6063      	str	r3, [r4, #4]
 800594e:	6054      	str	r4, [r2, #4]
 8005950:	e7cb      	b.n	80058ea <_free_r+0x22>
 8005952:	bd38      	pop	{r3, r4, r5, pc}
 8005954:	200003e4 	.word	0x200003e4

08005958 <sbrk_aligned>:
 8005958:	b570      	push	{r4, r5, r6, lr}
 800595a:	4e0e      	ldr	r6, [pc, #56]	; (8005994 <sbrk_aligned+0x3c>)
 800595c:	460c      	mov	r4, r1
 800595e:	6831      	ldr	r1, [r6, #0]
 8005960:	4605      	mov	r5, r0
 8005962:	b911      	cbnz	r1, 800596a <sbrk_aligned+0x12>
 8005964:	f000 f88c 	bl	8005a80 <_sbrk_r>
 8005968:	6030      	str	r0, [r6, #0]
 800596a:	4621      	mov	r1, r4
 800596c:	4628      	mov	r0, r5
 800596e:	f000 f887 	bl	8005a80 <_sbrk_r>
 8005972:	1c43      	adds	r3, r0, #1
 8005974:	d00a      	beq.n	800598c <sbrk_aligned+0x34>
 8005976:	1cc4      	adds	r4, r0, #3
 8005978:	f024 0403 	bic.w	r4, r4, #3
 800597c:	42a0      	cmp	r0, r4
 800597e:	d007      	beq.n	8005990 <sbrk_aligned+0x38>
 8005980:	1a21      	subs	r1, r4, r0
 8005982:	4628      	mov	r0, r5
 8005984:	f000 f87c 	bl	8005a80 <_sbrk_r>
 8005988:	3001      	adds	r0, #1
 800598a:	d101      	bne.n	8005990 <sbrk_aligned+0x38>
 800598c:	f04f 34ff 	mov.w	r4, #4294967295
 8005990:	4620      	mov	r0, r4
 8005992:	bd70      	pop	{r4, r5, r6, pc}
 8005994:	200003e8 	.word	0x200003e8

08005998 <_malloc_r>:
 8005998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800599c:	1ccd      	adds	r5, r1, #3
 800599e:	f025 0503 	bic.w	r5, r5, #3
 80059a2:	3508      	adds	r5, #8
 80059a4:	2d0c      	cmp	r5, #12
 80059a6:	bf38      	it	cc
 80059a8:	250c      	movcc	r5, #12
 80059aa:	2d00      	cmp	r5, #0
 80059ac:	4607      	mov	r7, r0
 80059ae:	db01      	blt.n	80059b4 <_malloc_r+0x1c>
 80059b0:	42a9      	cmp	r1, r5
 80059b2:	d905      	bls.n	80059c0 <_malloc_r+0x28>
 80059b4:	230c      	movs	r3, #12
 80059b6:	2600      	movs	r6, #0
 80059b8:	603b      	str	r3, [r7, #0]
 80059ba:	4630      	mov	r0, r6
 80059bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059c0:	4e2e      	ldr	r6, [pc, #184]	; (8005a7c <_malloc_r+0xe4>)
 80059c2:	f000 f86d 	bl	8005aa0 <__malloc_lock>
 80059c6:	6833      	ldr	r3, [r6, #0]
 80059c8:	461c      	mov	r4, r3
 80059ca:	bb34      	cbnz	r4, 8005a1a <_malloc_r+0x82>
 80059cc:	4629      	mov	r1, r5
 80059ce:	4638      	mov	r0, r7
 80059d0:	f7ff ffc2 	bl	8005958 <sbrk_aligned>
 80059d4:	1c43      	adds	r3, r0, #1
 80059d6:	4604      	mov	r4, r0
 80059d8:	d14d      	bne.n	8005a76 <_malloc_r+0xde>
 80059da:	6834      	ldr	r4, [r6, #0]
 80059dc:	4626      	mov	r6, r4
 80059de:	2e00      	cmp	r6, #0
 80059e0:	d140      	bne.n	8005a64 <_malloc_r+0xcc>
 80059e2:	6823      	ldr	r3, [r4, #0]
 80059e4:	4631      	mov	r1, r6
 80059e6:	4638      	mov	r0, r7
 80059e8:	eb04 0803 	add.w	r8, r4, r3
 80059ec:	f000 f848 	bl	8005a80 <_sbrk_r>
 80059f0:	4580      	cmp	r8, r0
 80059f2:	d13a      	bne.n	8005a6a <_malloc_r+0xd2>
 80059f4:	6821      	ldr	r1, [r4, #0]
 80059f6:	3503      	adds	r5, #3
 80059f8:	1a6d      	subs	r5, r5, r1
 80059fa:	f025 0503 	bic.w	r5, r5, #3
 80059fe:	3508      	adds	r5, #8
 8005a00:	2d0c      	cmp	r5, #12
 8005a02:	bf38      	it	cc
 8005a04:	250c      	movcc	r5, #12
 8005a06:	4638      	mov	r0, r7
 8005a08:	4629      	mov	r1, r5
 8005a0a:	f7ff ffa5 	bl	8005958 <sbrk_aligned>
 8005a0e:	3001      	adds	r0, #1
 8005a10:	d02b      	beq.n	8005a6a <_malloc_r+0xd2>
 8005a12:	6823      	ldr	r3, [r4, #0]
 8005a14:	442b      	add	r3, r5
 8005a16:	6023      	str	r3, [r4, #0]
 8005a18:	e00e      	b.n	8005a38 <_malloc_r+0xa0>
 8005a1a:	6822      	ldr	r2, [r4, #0]
 8005a1c:	1b52      	subs	r2, r2, r5
 8005a1e:	d41e      	bmi.n	8005a5e <_malloc_r+0xc6>
 8005a20:	2a0b      	cmp	r2, #11
 8005a22:	d916      	bls.n	8005a52 <_malloc_r+0xba>
 8005a24:	1961      	adds	r1, r4, r5
 8005a26:	42a3      	cmp	r3, r4
 8005a28:	6025      	str	r5, [r4, #0]
 8005a2a:	bf18      	it	ne
 8005a2c:	6059      	strne	r1, [r3, #4]
 8005a2e:	6863      	ldr	r3, [r4, #4]
 8005a30:	bf08      	it	eq
 8005a32:	6031      	streq	r1, [r6, #0]
 8005a34:	5162      	str	r2, [r4, r5]
 8005a36:	604b      	str	r3, [r1, #4]
 8005a38:	4638      	mov	r0, r7
 8005a3a:	f104 060b 	add.w	r6, r4, #11
 8005a3e:	f000 f835 	bl	8005aac <__malloc_unlock>
 8005a42:	f026 0607 	bic.w	r6, r6, #7
 8005a46:	1d23      	adds	r3, r4, #4
 8005a48:	1af2      	subs	r2, r6, r3
 8005a4a:	d0b6      	beq.n	80059ba <_malloc_r+0x22>
 8005a4c:	1b9b      	subs	r3, r3, r6
 8005a4e:	50a3      	str	r3, [r4, r2]
 8005a50:	e7b3      	b.n	80059ba <_malloc_r+0x22>
 8005a52:	6862      	ldr	r2, [r4, #4]
 8005a54:	42a3      	cmp	r3, r4
 8005a56:	bf0c      	ite	eq
 8005a58:	6032      	streq	r2, [r6, #0]
 8005a5a:	605a      	strne	r2, [r3, #4]
 8005a5c:	e7ec      	b.n	8005a38 <_malloc_r+0xa0>
 8005a5e:	4623      	mov	r3, r4
 8005a60:	6864      	ldr	r4, [r4, #4]
 8005a62:	e7b2      	b.n	80059ca <_malloc_r+0x32>
 8005a64:	4634      	mov	r4, r6
 8005a66:	6876      	ldr	r6, [r6, #4]
 8005a68:	e7b9      	b.n	80059de <_malloc_r+0x46>
 8005a6a:	230c      	movs	r3, #12
 8005a6c:	4638      	mov	r0, r7
 8005a6e:	603b      	str	r3, [r7, #0]
 8005a70:	f000 f81c 	bl	8005aac <__malloc_unlock>
 8005a74:	e7a1      	b.n	80059ba <_malloc_r+0x22>
 8005a76:	6025      	str	r5, [r4, #0]
 8005a78:	e7de      	b.n	8005a38 <_malloc_r+0xa0>
 8005a7a:	bf00      	nop
 8005a7c:	200003e4 	.word	0x200003e4

08005a80 <_sbrk_r>:
 8005a80:	b538      	push	{r3, r4, r5, lr}
 8005a82:	2300      	movs	r3, #0
 8005a84:	4d05      	ldr	r5, [pc, #20]	; (8005a9c <_sbrk_r+0x1c>)
 8005a86:	4604      	mov	r4, r0
 8005a88:	4608      	mov	r0, r1
 8005a8a:	602b      	str	r3, [r5, #0]
 8005a8c:	f7fc fda2 	bl	80025d4 <_sbrk>
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	d102      	bne.n	8005a9a <_sbrk_r+0x1a>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	b103      	cbz	r3, 8005a9a <_sbrk_r+0x1a>
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	bd38      	pop	{r3, r4, r5, pc}
 8005a9c:	200003ec 	.word	0x200003ec

08005aa0 <__malloc_lock>:
 8005aa0:	4801      	ldr	r0, [pc, #4]	; (8005aa8 <__malloc_lock+0x8>)
 8005aa2:	f000 b809 	b.w	8005ab8 <__retarget_lock_acquire_recursive>
 8005aa6:	bf00      	nop
 8005aa8:	200003f0 	.word	0x200003f0

08005aac <__malloc_unlock>:
 8005aac:	4801      	ldr	r0, [pc, #4]	; (8005ab4 <__malloc_unlock+0x8>)
 8005aae:	f000 b804 	b.w	8005aba <__retarget_lock_release_recursive>
 8005ab2:	bf00      	nop
 8005ab4:	200003f0 	.word	0x200003f0

08005ab8 <__retarget_lock_acquire_recursive>:
 8005ab8:	4770      	bx	lr

08005aba <__retarget_lock_release_recursive>:
 8005aba:	4770      	bx	lr

08005abc <_init>:
 8005abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005abe:	bf00      	nop
 8005ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ac2:	bc08      	pop	{r3}
 8005ac4:	469e      	mov	lr, r3
 8005ac6:	4770      	bx	lr

08005ac8 <_fini>:
 8005ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aca:	bf00      	nop
 8005acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ace:	bc08      	pop	{r3}
 8005ad0:	469e      	mov	lr, r3
 8005ad2:	4770      	bx	lr
