
Senior_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f34  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08007048  08007048  00017048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007248  08007248  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08007248  08007248  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007248  08007248  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007248  08007248  00017248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800724c  0800724c  0001724c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000070  080072c0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  080072c0  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcb6  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000226c  00000000  00000000  0002dd4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0002ffc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b60  00000000  00000000  00030be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193b7  00000000  00000000  00031740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f5ff  00000000  00000000  0004aaf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000878a0  00000000  00000000  0005a0f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1996  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003890  00000000  00000000  000e19e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800702c 	.word	0x0800702c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800702c 	.word	0x0800702c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <dev_trace_send_byte_int>:

//------------------------------------------------------------------------------
//         Local functions
//------------------------------------------------------------------------------
void dev_trace_send_byte_int(UINT8 b)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
		UINT8 i; 

		for (i=0; i<8; i++)
 8000d7e:	2300      	movs	r3, #0
 8000d80:	73fb      	strb	r3, [r7, #15]
 8000d82:	e015      	b.n	8000db0 <dev_trace_send_byte_int+0x3c>
		{
				dev_gpio_set(&trace_spi[TRACE_SPI_MOSI], b & 0x80); 
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <dev_trace_send_byte_int+0x4c>)
 8000d90:	f001 f8bc 	bl	8001f0c <dev_gpio_set>
//				dev_gpio_set(&trace_spi[TRACE_SPI_MOSI], b & 0x80); 
				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 1); 
 8000d94:	2101      	movs	r1, #1
 8000d96:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <dev_trace_send_byte_int+0x50>)
 8000d98:	f001 f8b8 	bl	8001f0c <dev_gpio_set>
//				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 1); 
				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 0); 
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <dev_trace_send_byte_int+0x50>)
 8000da0:	f001 f8b4 	bl	8001f0c <dev_gpio_set>
//				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 0); 
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_SCK].port, trace_spi[TRACE_SPI_SCK].pin, b & 0x80);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 1);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
			
				b = b << 1;
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	71fb      	strb	r3, [r7, #7]
		for (i=0; i<8; i++)
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	3301      	adds	r3, #1
 8000dae:	73fb      	strb	r3, [r7, #15]
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	2b07      	cmp	r3, #7
 8000db4:	d9e6      	bls.n	8000d84 <dev_trace_send_byte_int+0x10>
		}
}
 8000db6:	bf00      	nop
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000090 	.word	0x20000090
 8000dc4:	200000b0 	.word	0x200000b0

08000dc8 <dev_trace_init>:

//------------------------------------------------------------------------------
//         Global functions
//------------------------------------------------------------------------------
UINT8 dev_trace_init(dev_trace_init_t* init)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
		UINT8 ret;


		ret = dev_gpio_init_simp(&trace_spi[TRACE_SPI_MOSI], init->mosi.port, init->mosi.pin, GPIO_MODE_OUTPUT_PP);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	7899      	ldrb	r1, [r3, #2]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	881a      	ldrh	r2, [r3, #0]
 8000dd8:	2301      	movs	r3, #1
 8000dda:	4827      	ldr	r0, [pc, #156]	; (8000e78 <dev_trace_init+0xb0>)
 8000ddc:	f001 f866 	bl	8001eac <dev_gpio_init_simp>
 8000de0:	4603      	mov	r3, r0
 8000de2:	73fb      	strb	r3, [r7, #15]
		if (ret) return TRACE_EERROR(ret);
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d007      	beq.n	8000dfa <dev_trace_init+0x32>
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	224e      	movs	r2, #78	; 0x4e
 8000dee:	4923      	ldr	r1, [pc, #140]	; (8000e7c <dev_trace_init+0xb4>)
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 f873 	bl	8000edc <dev_trace_get_error>
 8000df6:	4603      	mov	r3, r0
 8000df8:	e039      	b.n	8000e6e <dev_trace_init+0xa6>
		ret = dev_gpio_init_simp(&trace_spi[TRACE_SPI_SCK], init->sck.port, init->sck.pin, GPIO_MODE_OUTPUT_PP);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	7999      	ldrb	r1, [r3, #6]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	889a      	ldrh	r2, [r3, #4]
 8000e02:	2301      	movs	r3, #1
 8000e04:	481e      	ldr	r0, [pc, #120]	; (8000e80 <dev_trace_init+0xb8>)
 8000e06:	f001 f851 	bl	8001eac <dev_gpio_init_simp>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	73fb      	strb	r3, [r7, #15]
		if (ret) return TRACE_EERROR(ret);
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d007      	beq.n	8000e24 <dev_trace_init+0x5c>
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	2250      	movs	r2, #80	; 0x50
 8000e18:	4918      	ldr	r1, [pc, #96]	; (8000e7c <dev_trace_init+0xb4>)
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f85e 	bl	8000edc <dev_trace_get_error>
 8000e20:	4603      	mov	r3, r0
 8000e22:	e024      	b.n	8000e6e <dev_trace_init+0xa6>
		ret = dev_gpio_init_simp(&trace_spi[TRACE_SPI_NSS], init->nss.port, init->nss.pin, GPIO_MODE_OUTPUT_PP);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	7a99      	ldrb	r1, [r3, #10]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	891a      	ldrh	r2, [r3, #8]
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	4815      	ldr	r0, [pc, #84]	; (8000e84 <dev_trace_init+0xbc>)
 8000e30:	f001 f83c 	bl	8001eac <dev_gpio_init_simp>
 8000e34:	4603      	mov	r3, r0
 8000e36:	73fb      	strb	r3, [r7, #15]
		if (ret) return TRACE_EERROR(ret);
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d007      	beq.n	8000e4e <dev_trace_init+0x86>
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	2252      	movs	r2, #82	; 0x52
 8000e42:	490e      	ldr	r1, [pc, #56]	; (8000e7c <dev_trace_init+0xb4>)
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 f849 	bl	8000edc <dev_trace_get_error>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	e00f      	b.n	8000e6e <dev_trace_init+0xa6>
//  HAL_GPIO_Init(trace_spi[TRACE_SPI_NSS].port, &GPIO_InitStruct);	
	
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_NSS].port, trace_spi[TRACE_SPI_NSS].pin, 1);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_SCK].port, trace_spi[TRACE_SPI_SCK].pin, 0);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
		dev_gpio_set(&trace_spi[TRACE_SPI_NSS], 1);
 8000e4e:	2101      	movs	r1, #1
 8000e50:	480c      	ldr	r0, [pc, #48]	; (8000e84 <dev_trace_init+0xbc>)
 8000e52:	f001 f85b 	bl	8001f0c <dev_gpio_set>
		dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 0);
 8000e56:	2100      	movs	r1, #0
 8000e58:	4809      	ldr	r0, [pc, #36]	; (8000e80 <dev_trace_init+0xb8>)
 8000e5a:	f001 f857 	bl	8001f0c <dev_gpio_set>
		dev_gpio_set(&trace_spi[TRACE_SPI_MOSI], 0);
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <dev_trace_init+0xb0>)
 8000e62:	f001 f853 	bl	8001f0c <dev_gpio_set>

		trace_ready = 1;	
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <dev_trace_init+0xc0>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	701a      	strb	r2, [r3, #0]

		return RET_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000090 	.word	0x20000090
 8000e7c:	08007048 	.word	0x08007048
 8000e80:	200000b0 	.word	0x200000b0
 8000e84:	200000d0 	.word	0x200000d0
 8000e88:	2000008c 	.word	0x2000008c

08000e8c <dev_trace_send_byte>:

// Send one Byte 
void dev_trace_send_byte(UINT8 b)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
	if (trace_ready == 0) return;
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <dev_trace_send_byte+0x48>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d016      	beq.n	8000ecc <dev_trace_send_byte+0x40>

//		dev_gpio_set(&trace_spi[TRACE_SPI_NSS], 0);
		HAL_GPIO_WritePin(trace_spi[TRACE_SPI_NSS].port, trace_spi[TRACE_SPI_NSS].pin, 0);
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <dev_trace_send_byte+0x4c>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a0d      	ldr	r2, [pc, #52]	; (8000ed8 <dev_trace_send_byte+0x4c>)
 8000ea4:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f002 fd84 	bl	80039b8 <HAL_GPIO_WritePin>
		dev_trace_send_byte_int(b);
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff ff5e 	bl	8000d74 <dev_trace_send_byte_int>
//		dev_gpio_set(&trace_spi[TRACE_SPI_NSS], 1);
	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_NSS].port, trace_spi[TRACE_SPI_NSS].pin, 1);
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <dev_trace_send_byte+0x4c>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	4a06      	ldr	r2, [pc, #24]	; (8000ed8 <dev_trace_send_byte+0x4c>)
 8000ebe:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f002 fd77 	bl	80039b8 <HAL_GPIO_WritePin>
 8000eca:	e000      	b.n	8000ece <dev_trace_send_byte+0x42>
	if (trace_ready == 0) return;
 8000ecc:	bf00      	nop
//		HAL_GPIO_WritePin(trace_spi[TRACE_SPI_SCK].port, trace_spi[TRACE_SPI_SCK].pin, 0);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
}
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	2000008c 	.word	0x2000008c
 8000ed8:	20000090 	.word	0x20000090

08000edc <dev_trace_get_error>:
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
}

// Get Trace error
uint8_t dev_trace_get_error(uint8_t error_value, char* file_name, uint32_t file_line)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	73fb      	strb	r3, [r7, #15]
		if (error_value == RET_OK) return RET_OK;
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d101      	bne.n	8000ef4 <dev_trace_get_error+0x18>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	e006      	b.n	8000f02 <dev_trace_get_error+0x26>
	
		debug_printf("EE> %d at %s:%d\n\r", error_value, file_name, file_line); 
 8000ef4:	7bf9      	ldrb	r1, [r7, #15]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68ba      	ldr	r2, [r7, #8]
 8000efa:	4804      	ldr	r0, [pc, #16]	; (8000f0c <dev_trace_get_error+0x30>)
 8000efc:	f000 f9b8 	bl	8001270 <debug_printf>

		return error_value;
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	08007060 	.word	0x08007060

08000f10 <dev_trace_generate_error>:

// Generate Trace error
uint8_t dev_trace_generate_error(char* error_name, char* file_name, uint32_t file_line)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af02      	add	r7, sp, #8
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
		trace_error_id++;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <dev_trace_generate_error+0x54>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	3301      	adds	r3, #1
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <dev_trace_generate_error+0x54>)
 8000f26:	701a      	strb	r2, [r3, #0]
		if (trace_error_id < 100) trace_error_id = 100;
 8000f28:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <dev_trace_generate_error+0x54>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b63      	cmp	r3, #99	; 0x63
 8000f2e:	d802      	bhi.n	8000f36 <dev_trace_generate_error+0x26>
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <dev_trace_generate_error+0x54>)
 8000f32:	2264      	movs	r2, #100	; 0x64
 8000f34:	701a      	strb	r2, [r3, #0]
		if (trace_error_id >= 200) trace_error_id = 100;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <dev_trace_generate_error+0x54>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2bc7      	cmp	r3, #199	; 0xc7
 8000f3c:	d902      	bls.n	8000f44 <dev_trace_generate_error+0x34>
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <dev_trace_generate_error+0x54>)
 8000f40:	2264      	movs	r2, #100	; 0x64
 8000f42:	701a      	strb	r2, [r3, #0]

		debug_printf("GE> %d %s at %s:%d\n\r", trace_error_id, error_name, file_name, file_line);
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <dev_trace_generate_error+0x54>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <dev_trace_generate_error+0x58>)
 8000f54:	f000 f98c 	bl	8001270 <debug_printf>

		return trace_error_id;
 8000f58:	4b02      	ldr	r3, [pc, #8]	; (8000f64 <dev_trace_generate_error+0x54>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	2000008d 	.word	0x2000008d
 8000f68:	08007074 	.word	0x08007074

08000f6c <debug_printf_char>:
}

// Custom Printf function
//////////////////////////////////////////////////////////////////////////
void debug_printf_char(UINT8 c)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
    if (c < ' ') 
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	2b1f      	cmp	r3, #31
 8000f7a:	d82a      	bhi.n	8000fd2 <debug_printf_char+0x66>
    {    
        dev_trace_send_byte('~');
 8000f7c:	207e      	movs	r0, #126	; 0x7e
 8000f7e:	f7ff ff85 	bl	8000e8c <dev_trace_send_byte>
        dev_trace_send_byte(HB2HEX(c / 0x10));
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2b9f      	cmp	r3, #159	; 0x9f
 8000f86:	d905      	bls.n	8000f94 <debug_printf_char+0x28>
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	091b      	lsrs	r3, r3, #4
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	3337      	adds	r3, #55	; 0x37
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	e004      	b.n	8000f9e <debug_printf_char+0x32>
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	091b      	lsrs	r3, r3, #4
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	3330      	adds	r3, #48	; 0x30
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff ff74 	bl	8000e8c <dev_trace_send_byte>
        dev_trace_send_byte(HB2HEX(c % 0x10));
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b09      	cmp	r3, #9
 8000fae:	d906      	bls.n	8000fbe <debug_printf_char+0x52>
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	3337      	adds	r3, #55	; 0x37
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	e005      	b.n	8000fca <debug_printf_char+0x5e>
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f003 030f 	and.w	r3, r3, #15
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	3330      	adds	r3, #48	; 0x30
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ff5e 	bl	8000e8c <dev_trace_send_byte>
    }
    else dev_trace_send_byte(c);
}
 8000fd0:	e003      	b.n	8000fda <debug_printf_char+0x6e>
    else dev_trace_send_byte(c);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff59 	bl	8000e8c <dev_trace_send_byte>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <debug_printf_text>:

void debug_printf_text(char* text)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b084      	sub	sp, #16
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
   int i = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]

   while(text[i] != 0)
 8000fee:	e009      	b.n	8001004 <debug_printf_text+0x22>
   {   
      dev_trace_send_byte(text[i]);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff47 	bl	8000e8c <dev_trace_send_byte>
      i++;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	3301      	adds	r3, #1
 8001002:	60fb      	str	r3, [r7, #12]
   while(text[i] != 0)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1ef      	bne.n	8000ff0 <debug_printf_text+0xe>
   }   
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <debug_printf_ulong>:

void debug_printf_ulong(unsigned long d)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
   UINT8 buf[10], len = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	75fb      	strb	r3, [r7, #23]

   if (d == 0) 
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d11c      	bne.n	8001068 <debug_printf_ulong+0x4c>
   {
      dev_trace_send_byte('0');
 800102e:	2030      	movs	r0, #48	; 0x30
 8001030:	f7ff ff2c 	bl	8000e8c <dev_trace_send_byte>
 8001034:	e02d      	b.n	8001092 <debug_printf_ulong+0x76>
      return;
   }   
   
   while (d > 0)
   {   
      buf[len] = d % 10;
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	4b17      	ldr	r3, [pc, #92]	; (8001098 <debug_printf_ulong+0x7c>)
 800103a:	fba3 2301 	umull	r2, r3, r3, r1
 800103e:	08da      	lsrs	r2, r3, #3
 8001040:	4613      	mov	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	1aca      	subs	r2, r1, r3
 800104a:	7dfb      	ldrb	r3, [r7, #23]
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	3318      	adds	r3, #24
 8001050:	443b      	add	r3, r7
 8001052:	f803 2c0c 	strb.w	r2, [r3, #-12]
      d = d / 10;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a0f      	ldr	r2, [pc, #60]	; (8001098 <debug_printf_ulong+0x7c>)
 800105a:	fba2 2303 	umull	r2, r3, r2, r3
 800105e:	08db      	lsrs	r3, r3, #3
 8001060:	607b      	str	r3, [r7, #4]
      len++;
 8001062:	7dfb      	ldrb	r3, [r7, #23]
 8001064:	3301      	adds	r3, #1
 8001066:	75fb      	strb	r3, [r7, #23]
   while (d > 0)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1e3      	bne.n	8001036 <debug_printf_ulong+0x1a>
   }   

   while (len > 0)
 800106e:	e00d      	b.n	800108c <debug_printf_ulong+0x70>
   {   
      dev_trace_send_byte(buf[len - 1] + 0x30);
 8001070:	7dfb      	ldrb	r3, [r7, #23]
 8001072:	3b01      	subs	r3, #1
 8001074:	3318      	adds	r3, #24
 8001076:	443b      	add	r3, r7
 8001078:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800107c:	3330      	adds	r3, #48	; 0x30
 800107e:	b2db      	uxtb	r3, r3
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff03 	bl	8000e8c <dev_trace_send_byte>
      len--;
 8001086:	7dfb      	ldrb	r3, [r7, #23]
 8001088:	3b01      	subs	r3, #1
 800108a:	75fb      	strb	r3, [r7, #23]
   while (len > 0)
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1ee      	bne.n	8001070 <debug_printf_ulong+0x54>
   }   
}
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	cccccccd 	.word	0xcccccccd

0800109c <debug_printf_long>:

   debug_printf_ulong(d);
}

void debug_printf_long(unsigned long d, UINT8 mode)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
   UINT8 buf[10], len = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	75fb      	strb	r3, [r7, #23]

   if (d == 0) 
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d103      	bne.n	80010ba <debug_printf_long+0x1e>
   {
      dev_trace_send_byte('0');
 80010b2:	2030      	movs	r0, #48	; 0x30
 80010b4:	f7ff feea 	bl	8000e8c <dev_trace_send_byte>
 80010b8:	e03a      	b.n	8001130 <debug_printf_long+0x94>
      return;
   }   
   
   if (mode == 'd') 
 80010ba:	78fb      	ldrb	r3, [r7, #3]
 80010bc:	2b64      	cmp	r3, #100	; 0x64
 80010be:	d122      	bne.n	8001106 <debug_printf_long+0x6a>
   if ((signed long)d < 0) 
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	da1f      	bge.n	8001106 <debug_printf_long+0x6a>
   {
      dev_trace_send_byte('-');
 80010c6:	202d      	movs	r0, #45	; 0x2d
 80010c8:	f7ff fee0 	bl	8000e8c <dev_trace_send_byte>
      d = -((signed long)d);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	425b      	negs	r3, r3
 80010d0:	607b      	str	r3, [r7, #4]
   }   

   while (d > 0)
 80010d2:	e018      	b.n	8001106 <debug_printf_long+0x6a>
   {   
      buf[len] = d % 10;
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <debug_printf_long+0x9c>)
 80010d8:	fba3 2301 	umull	r2, r3, r3, r1
 80010dc:	08da      	lsrs	r2, r3, #3
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	1aca      	subs	r2, r1, r3
 80010e8:	7dfb      	ldrb	r3, [r7, #23]
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	3318      	adds	r3, #24
 80010ee:	443b      	add	r3, r7
 80010f0:	f803 2c0c 	strb.w	r2, [r3, #-12]
      d = d / 10;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a10      	ldr	r2, [pc, #64]	; (8001138 <debug_printf_long+0x9c>)
 80010f8:	fba2 2303 	umull	r2, r3, r2, r3
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	607b      	str	r3, [r7, #4]
      len++;
 8001100:	7dfb      	ldrb	r3, [r7, #23]
 8001102:	3301      	adds	r3, #1
 8001104:	75fb      	strb	r3, [r7, #23]
   while (d > 0)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1e3      	bne.n	80010d4 <debug_printf_long+0x38>
   }   

   while (len > 0)
 800110c:	e00d      	b.n	800112a <debug_printf_long+0x8e>
   {   
      dev_trace_send_byte(buf[len - 1] + 0x30);
 800110e:	7dfb      	ldrb	r3, [r7, #23]
 8001110:	3b01      	subs	r3, #1
 8001112:	3318      	adds	r3, #24
 8001114:	443b      	add	r3, r7
 8001116:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800111a:	3330      	adds	r3, #48	; 0x30
 800111c:	b2db      	uxtb	r3, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff feb4 	bl	8000e8c <dev_trace_send_byte>
      len--;
 8001124:	7dfb      	ldrb	r3, [r7, #23]
 8001126:	3b01      	subs	r3, #1
 8001128:	75fb      	strb	r3, [r7, #23]
   while (len > 0)
 800112a:	7dfb      	ldrb	r3, [r7, #23]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1ee      	bne.n	800110e <debug_printf_long+0x72>
   }   
}
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	cccccccd 	.word	0xcccccccd

0800113c <debug_printf_hex>:

void debug_printf_hex(UINT32 d, UINT8 mode)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	70fb      	strb	r3, [r7, #3]
   UINT32 buf = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
   UINT8 b, len = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	72fb      	strb	r3, [r7, #11]

   if (d == 0) 
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d112      	bne.n	800117c <debug_printf_hex+0x40>
   {
      dev_trace_send_byte('0');
 8001156:	2030      	movs	r0, #48	; 0x30
 8001158:	f7ff fe98 	bl	8000e8c <dev_trace_send_byte>
      return;
 800115c:	e03a      	b.n	80011d4 <debug_printf_hex+0x98>
   }   

   while (d > 0)
   {  
      buf = buf << 4;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	011b      	lsls	r3, r3, #4
 8001162:	60fb      	str	r3, [r7, #12]
      buf = buf + d % 0x10;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	4413      	add	r3, r2
 800116e:	60fb      	str	r3, [r7, #12]
      d = d >> 4;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	091b      	lsrs	r3, r3, #4
 8001174:	607b      	str	r3, [r7, #4]
      len++;
 8001176:	7afb      	ldrb	r3, [r7, #11]
 8001178:	3301      	adds	r3, #1
 800117a:	72fb      	strb	r3, [r7, #11]
   while (d > 0)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1ed      	bne.n	800115e <debug_printf_hex+0x22>
   }   

   while (len > 0)
 8001182:	e024      	b.n	80011ce <debug_printf_hex+0x92>
   {   
      b = buf % 0x10;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	f003 030f 	and.w	r3, r3, #15
 800118c:	72bb      	strb	r3, [r7, #10]
   
      if (b < 0xA) dev_trace_send_byte(b + 0x30);
 800118e:	7abb      	ldrb	r3, [r7, #10]
 8001190:	2b09      	cmp	r3, #9
 8001192:	d806      	bhi.n	80011a2 <debug_printf_hex+0x66>
 8001194:	7abb      	ldrb	r3, [r7, #10]
 8001196:	3330      	adds	r3, #48	; 0x30
 8001198:	b2db      	uxtb	r3, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fe76 	bl	8000e8c <dev_trace_send_byte>
 80011a0:	e00f      	b.n	80011c2 <debug_printf_hex+0x86>
      else  
      {      
         if (mode == 'X') dev_trace_send_byte(b + 0x41 - 0xA);
 80011a2:	78fb      	ldrb	r3, [r7, #3]
 80011a4:	2b58      	cmp	r3, #88	; 0x58
 80011a6:	d106      	bne.n	80011b6 <debug_printf_hex+0x7a>
 80011a8:	7abb      	ldrb	r3, [r7, #10]
 80011aa:	3337      	adds	r3, #55	; 0x37
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fe6c 	bl	8000e8c <dev_trace_send_byte>
 80011b4:	e005      	b.n	80011c2 <debug_printf_hex+0x86>
                  else  dev_trace_send_byte(b + 0x61 - 0xA);
 80011b6:	7abb      	ldrb	r3, [r7, #10]
 80011b8:	3357      	adds	r3, #87	; 0x57
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fe65 	bl	8000e8c <dev_trace_send_byte>
      }

      buf = buf >> 4;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	091b      	lsrs	r3, r3, #4
 80011c6:	60fb      	str	r3, [r7, #12]
      len--;
 80011c8:	7afb      	ldrb	r3, [r7, #11]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	72fb      	strb	r3, [r7, #11]
   while (len > 0)
 80011ce:	7afb      	ldrb	r3, [r7, #11]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1d7      	bne.n	8001184 <debug_printf_hex+0x48>
   }   
}
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <debug_printf_bin>:

void debug_printf_bin(UINT32 d, UINT8 mode)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b084      	sub	sp, #16
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	460b      	mov	r3, r1
 80011e4:	70fb      	strb	r3, [r7, #3]
   UINT32 buf = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
   UINT8 i, len = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	72bb      	strb	r3, [r7, #10]

   if (mode == 'B') len = 32;
 80011ee:	78fb      	ldrb	r3, [r7, #3]
 80011f0:	2b42      	cmp	r3, #66	; 0x42
 80011f2:	d102      	bne.n	80011fa <debug_printf_bin+0x20>
 80011f4:	2320      	movs	r3, #32
 80011f6:	72bb      	strb	r3, [r7, #10]
 80011f8:	e001      	b.n	80011fe <debug_printf_bin+0x24>
                else len = 8;
 80011fa:	2308      	movs	r3, #8
 80011fc:	72bb      	strb	r3, [r7, #10]

   for(i=0; i<len; i++)
 80011fe:	2300      	movs	r3, #0
 8001200:	72fb      	strb	r3, [r7, #11]
 8001202:	e010      	b.n	8001226 <debug_printf_bin+0x4c>
   {
      buf = buf << 1;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
      if (d % 2) buf++;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	2b00      	cmp	r3, #0
 8001212:	d002      	beq.n	800121a <debug_printf_bin+0x40>
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3301      	adds	r3, #1
 8001218:	60fb      	str	r3, [r7, #12]
      d = d >> 1;      
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	085b      	lsrs	r3, r3, #1
 800121e:	607b      	str	r3, [r7, #4]
   for(i=0; i<len; i++)
 8001220:	7afb      	ldrb	r3, [r7, #11]
 8001222:	3301      	adds	r3, #1
 8001224:	72fb      	strb	r3, [r7, #11]
 8001226:	7afa      	ldrb	r2, [r7, #11]
 8001228:	7abb      	ldrb	r3, [r7, #10]
 800122a:	429a      	cmp	r2, r3
 800122c:	d3ea      	bcc.n	8001204 <debug_printf_bin+0x2a>
   }   
                
   for(i=0; i<len; i++)
 800122e:	2300      	movs	r3, #0
 8001230:	72fb      	strb	r3, [r7, #11]
 8001232:	e011      	b.n	8001258 <debug_printf_bin+0x7e>
   {
      if (buf % 2) dev_trace_send_byte('1');
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <debug_printf_bin+0x6c>
 800123e:	2031      	movs	r0, #49	; 0x31
 8001240:	f7ff fe24 	bl	8000e8c <dev_trace_send_byte>
 8001244:	e002      	b.n	800124c <debug_printf_bin+0x72>
            else dev_trace_send_byte('0');
 8001246:	2030      	movs	r0, #48	; 0x30
 8001248:	f7ff fe20 	bl	8000e8c <dev_trace_send_byte>
               
      buf = buf >> 1;      
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	085b      	lsrs	r3, r3, #1
 8001250:	60fb      	str	r3, [r7, #12]
   for(i=0; i<len; i++)
 8001252:	7afb      	ldrb	r3, [r7, #11]
 8001254:	3301      	adds	r3, #1
 8001256:	72fb      	strb	r3, [r7, #11]
 8001258:	7afa      	ldrb	r2, [r7, #11]
 800125a:	7abb      	ldrb	r3, [r7, #10]
 800125c:	429a      	cmp	r2, r3
 800125e:	d3e9      	bcc.n	8001234 <debug_printf_bin+0x5a>
   }   
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	0000      	movs	r0, r0
 800126c:	0000      	movs	r0, r0
	...

08001270 <debug_printf>:

void debug_printf(char* text, ...)
{
 8001270:	b40f      	push	{r0, r1, r2, r3}
 8001272:	b5b0      	push	{r4, r5, r7, lr}
 8001274:	b098      	sub	sp, #96	; 0x60
 8001276:	af00      	add	r7, sp, #0
   va_list tag;
   int i = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	65fb      	str	r3, [r7, #92]	; 0x5c

   va_start(tag, text);
 800127c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001280:	60bb      	str	r3, [r7, #8]
   
   while(text[i] != 0)
 8001282:	e225      	b.n	80016d0 <debug_printf+0x460>
   {
      if (text[i] != '%') 
 8001284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001286:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001288:	4413      	add	r3, r2
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b25      	cmp	r3, #37	; 0x25
 800128e:	d00a      	beq.n	80012a6 <debug_printf+0x36>
      {
         dev_trace_send_byte(text[i]);
 8001290:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001292:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001294:	4413      	add	r3, r2
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fdf7 	bl	8000e8c <dev_trace_send_byte>
         i++;
 800129e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012a0:	3301      	adds	r3, #1
 80012a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012a4:	e214      	b.n	80016d0 <debug_printf+0x460>
//         continue;
      }   
      else if (text[i + 1] != 0)
 80012a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012a8:	3301      	adds	r3, #1
 80012aa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80012ac:	4413      	add	r3, r2
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 820d 	beq.w	80016d0 <debug_printf+0x460>
      {   
         switch(text[i + 1])   
 80012b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012b8:	3301      	adds	r3, #1
 80012ba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80012bc:	4413      	add	r3, r2
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	3b42      	subs	r3, #66	; 0x42
 80012c2:	2b36      	cmp	r3, #54	; 0x36
 80012c4:	f200 8201 	bhi.w	80016ca <debug_printf+0x45a>
 80012c8:	a201      	add	r2, pc, #4	; (adr r2, 80012d0 <debug_printf+0x60>)
 80012ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ce:	bf00      	nop
 80012d0:	08001581 	.word	0x08001581
 80012d4:	080016cb 	.word	0x080016cb
 80012d8:	080016cb 	.word	0x080016cb
 80012dc:	080016cb 	.word	0x080016cb
 80012e0:	080016cb 	.word	0x080016cb
 80012e4:	080016cb 	.word	0x080016cb
 80012e8:	080016cb 	.word	0x080016cb
 80012ec:	080016cb 	.word	0x080016cb
 80012f0:	080016cb 	.word	0x080016cb
 80012f4:	080016cb 	.word	0x080016cb
 80012f8:	080016cb 	.word	0x080016cb
 80012fc:	08001637 	.word	0x08001637
 8001300:	080016cb 	.word	0x080016cb
 8001304:	080016cb 	.word	0x080016cb
 8001308:	080016cb 	.word	0x080016cb
 800130c:	080016cb 	.word	0x080016cb
 8001310:	080016cb 	.word	0x080016cb
 8001314:	080016cb 	.word	0x080016cb
 8001318:	080016cb 	.word	0x080016cb
 800131c:	080016cb 	.word	0x080016cb
 8001320:	080016cb 	.word	0x080016cb
 8001324:	080016cb 	.word	0x080016cb
 8001328:	08001559 	.word	0x08001559
 800132c:	080016cb 	.word	0x080016cb
 8001330:	080016cb 	.word	0x080016cb
 8001334:	080016cb 	.word	0x080016cb
 8001338:	080016cb 	.word	0x080016cb
 800133c:	080016cb 	.word	0x080016cb
 8001340:	080016cb 	.word	0x080016cb
 8001344:	080016cb 	.word	0x080016cb
 8001348:	080016cb 	.word	0x080016cb
 800134c:	080016cb 	.word	0x080016cb
 8001350:	0800156d 	.word	0x0800156d
 8001354:	0800152d 	.word	0x0800152d
 8001358:	080013ad 	.word	0x080013ad
 800135c:	080016cb 	.word	0x080016cb
 8001360:	080013d7 	.word	0x080013d7
 8001364:	080016cb 	.word	0x080016cb
 8001368:	080016cb 	.word	0x080016cb
 800136c:	080016cb 	.word	0x080016cb
 8001370:	080016cb 	.word	0x080016cb
 8001374:	080016cb 	.word	0x080016cb
 8001378:	080016cb 	.word	0x080016cb
 800137c:	08001595 	.word	0x08001595
 8001380:	080016cb 	.word	0x080016cb
 8001384:	080016cb 	.word	0x080016cb
 8001388:	08001677 	.word	0x08001677
 800138c:	080016cb 	.word	0x080016cb
 8001390:	080016cb 	.word	0x080016cb
 8001394:	0800151b 	.word	0x0800151b
 8001398:	080016cb 	.word	0x080016cb
 800139c:	080013c3 	.word	0x080013c3
 80013a0:	080016cb 	.word	0x080016cb
 80013a4:	080016cb 	.word	0x080016cb
 80013a8:	08001545 	.word	0x08001545
         {
            case 'd' : 
               {
                  signed long d = va_arg(tag, signed long);
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	1d1a      	adds	r2, r3, #4
 80013b0:	60ba      	str	r2, [r7, #8]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
                  debug_printf_long(d, 'd');
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	2164      	movs	r1, #100	; 0x64
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fe6e 	bl	800109c <debug_printf_long>
               } break;
 80013c0:	e183      	b.n	80016ca <debug_printf+0x45a>

            case 'u' : 
               {
                  unsigned long d = va_arg(tag, unsigned long);
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1d1a      	adds	r2, r3, #4
 80013c6:	60ba      	str	r2, [r7, #8]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	63bb      	str	r3, [r7, #56]	; 0x38
                  debug_printf_long(d, 'u');
 80013cc:	2175      	movs	r1, #117	; 0x75
 80013ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80013d0:	f7ff fe64 	bl	800109c <debug_printf_long>
               } break;
 80013d4:	e179      	b.n	80016ca <debug_printf+0x45a>

            case 'f' :
               {
                  signed long l;
                  unsigned char i, m[8];
                  double d = va_arg(tag, double);
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	3307      	adds	r3, #7
 80013da:	f023 0307 	bic.w	r3, r3, #7
 80013de:	f103 0208 	add.w	r2, r3, #8
 80013e2:	60ba      	str	r2, [r7, #8]
 80013e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

                  if (d < 0)
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	f04f 0300 	mov.w	r3, #0
 80013f4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80013f8:	f7ff fad8 	bl	80009ac <__aeabi_dcmplt>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d008      	beq.n	8001414 <debug_printf+0x1a4>
                  {
                    d = -d;
 8001402:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8001404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001406:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800140a:	e9c7 4512 	strd	r4, r5, [r7, #72]	; 0x48
                    dev_trace_send_byte('-');
 800140e:	202d      	movs	r0, #45	; 0x2d
 8001410:	f7ff fd3c 	bl	8000e8c <dev_trace_send_byte>
                  }

                  debug_printf_ulong(d);
 8001414:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001418:	f7ff fb2e 	bl	8000a78 <__aeabi_d2uiz>
 800141c:	4603      	mov	r3, r0
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fdfc 	bl	800101c <debug_printf_ulong>
                  dev_trace_send_byte('.');
 8001424:	202e      	movs	r0, #46	; 0x2e
 8001426:	f7ff fd31 	bl	8000e8c <dev_trace_send_byte>

                  d =  d - (signed long)d;
 800142a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800142e:	f7ff fafb 	bl	8000a28 <__aeabi_d2iz>
 8001432:	4603      	mov	r3, r0
 8001434:	4618      	mov	r0, r3
 8001436:	f7fe ffdd 	bl	80003f4 <__aeabi_i2d>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001442:	f7fe fe89 	bl	8000158 <__aeabi_dsub>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
                  l = d * 1000000000;
 800144e:	a3a8      	add	r3, pc, #672	; (adr r3, 80016f0 <debug_printf+0x480>)
 8001450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001454:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001458:	f7ff f836 	bl	80004c8 <__aeabi_dmul>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fae0 	bl	8000a28 <__aeabi_d2iz>
 8001468:	4603      	mov	r3, r0
 800146a:	65bb      	str	r3, [r7, #88]	; 0x58

                  if ((l % 1000) > 500) l = l / 1000 + 1;
 800146c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800146e:	4ba2      	ldr	r3, [pc, #648]	; (80016f8 <debug_printf+0x488>)
 8001470:	fb83 1302 	smull	r1, r3, r3, r2
 8001474:	1199      	asrs	r1, r3, #6
 8001476:	17d3      	asrs	r3, r2, #31
 8001478:	1acb      	subs	r3, r1, r3
 800147a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800147e:	fb01 f303 	mul.w	r3, r1, r3
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001488:	dd09      	ble.n	800149e <debug_printf+0x22e>
 800148a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800148c:	4a9a      	ldr	r2, [pc, #616]	; (80016f8 <debug_printf+0x488>)
 800148e:	fb82 1203 	smull	r1, r2, r2, r3
 8001492:	1192      	asrs	r2, r2, #6
 8001494:	17db      	asrs	r3, r3, #31
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	3301      	adds	r3, #1
 800149a:	65bb      	str	r3, [r7, #88]	; 0x58
 800149c:	e007      	b.n	80014ae <debug_printf+0x23e>
                                  else  l = l / 1000;
 800149e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014a0:	4a95      	ldr	r2, [pc, #596]	; (80016f8 <debug_printf+0x488>)
 80014a2:	fb82 1203 	smull	r1, r2, r2, r3
 80014a6:	1192      	asrs	r2, r2, #6
 80014a8:	17db      	asrs	r3, r3, #31
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	65bb      	str	r3, [r7, #88]	; 0x58
      //                m[1] = 0;
        //              debug_printf_text(m);
          //            break;
            //      }

                  i = 6; //sizeof(m);
 80014ae:	2306      	movs	r3, #6
 80014b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  //                {
    //                 l = l / 10;
      //               i--;
        //          }

                  m[i] = 0;
 80014b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80014b8:	3360      	adds	r3, #96	; 0x60
 80014ba:	443b      	add	r3, r7
 80014bc:	2200      	movs	r2, #0
 80014be:	f803 2c60 	strb.w	r2, [r3, #-96]
                  while (i)
 80014c2:	e021      	b.n	8001508 <debug_printf+0x298>
                  {
                     i--;
 80014c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80014c8:	3b01      	subs	r3, #1
 80014ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                     m[i] = 0x30 + (l % 10);
 80014ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80014d0:	4b8a      	ldr	r3, [pc, #552]	; (80016fc <debug_printf+0x48c>)
 80014d2:	fb83 1302 	smull	r1, r3, r3, r2
 80014d6:	1099      	asrs	r1, r3, #2
 80014d8:	17d3      	asrs	r3, r2, #31
 80014da:	1ac9      	subs	r1, r1, r3
 80014dc:	460b      	mov	r3, r1
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	440b      	add	r3, r1
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	1ad1      	subs	r1, r2, r3
 80014e6:	b2ca      	uxtb	r2, r1
 80014e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80014ec:	3230      	adds	r2, #48	; 0x30
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	3360      	adds	r3, #96	; 0x60
 80014f2:	443b      	add	r3, r7
 80014f4:	f803 2c60 	strb.w	r2, [r3, #-96]
                     l = l / 10;
 80014f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014fa:	4a80      	ldr	r2, [pc, #512]	; (80016fc <debug_printf+0x48c>)
 80014fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001500:	1092      	asrs	r2, r2, #2
 8001502:	17db      	asrs	r3, r3, #31
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	65bb      	str	r3, [r7, #88]	; 0x58
                  while (i)
 8001508:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1d9      	bne.n	80014c4 <debug_printf+0x254>
                  }

                  debug_printf_text((char*)m);
 8001510:	463b      	mov	r3, r7
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fd65 	bl	8000fe2 <debug_printf_text>

               } break;
 8001518:	e0d7      	b.n	80016ca <debug_printf+0x45a>
           
            case 's' : 
               {
                  char* s = va_arg(tag, char*);
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	1d1a      	adds	r2, r3, #4
 800151e:	60ba      	str	r2, [r7, #8]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
                  debug_printf_text(s);
 8001524:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001526:	f7ff fd5c 	bl	8000fe2 <debug_printf_text>
               } break;
 800152a:	e0ce      	b.n	80016ca <debug_printf+0x45a>

            case 'c' : 
               {
                  UINT8 b = va_arg(tag, unsigned long);
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	1d1a      	adds	r2, r3, #4
 8001530:	60ba      	str	r2, [r7, #8]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                  debug_printf_char(b);
 8001538:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fd15 	bl	8000f6c <debug_printf_char>
               } break;
 8001542:	e0c2      	b.n	80016ca <debug_printf+0x45a>
           
            case 'x' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	1d1a      	adds	r2, r3, #4
 8001548:	60ba      	str	r2, [r7, #8]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	63fb      	str	r3, [r7, #60]	; 0x3c
                  debug_printf_hex(d, 'x');
 800154e:	2178      	movs	r1, #120	; 0x78
 8001550:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001552:	f7ff fdf3 	bl	800113c <debug_printf_hex>
               } break;
 8001556:	e0b8      	b.n	80016ca <debug_printf+0x45a>
            
            case 'X' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	1d1a      	adds	r2, r3, #4
 800155c:	60ba      	str	r2, [r7, #8]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	61bb      	str	r3, [r7, #24]
                  debug_printf_hex(d, 'X');
 8001562:	2158      	movs	r1, #88	; 0x58
 8001564:	69b8      	ldr	r0, [r7, #24]
 8001566:	f7ff fde9 	bl	800113c <debug_printf_hex>
               } break;
 800156a:	e0ae      	b.n	80016ca <debug_printf+0x45a>
            
            case 'b' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	1d1a      	adds	r2, r3, #4
 8001570:	60ba      	str	r2, [r7, #8]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	61fb      	str	r3, [r7, #28]
                  debug_printf_bin(d, 'b');
 8001576:	2162      	movs	r1, #98	; 0x62
 8001578:	69f8      	ldr	r0, [r7, #28]
 800157a:	f7ff fe2e 	bl	80011da <debug_printf_bin>
               } break;
 800157e:	e0a4      	b.n	80016ca <debug_printf+0x45a>
            
            case 'B' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	1d1a      	adds	r2, r3, #4
 8001584:	60ba      	str	r2, [r7, #8]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	60fb      	str	r3, [r7, #12]
                  debug_printf_bin(d, 'B');
 800158a:	2142      	movs	r1, #66	; 0x42
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f7ff fe24 	bl	80011da <debug_printf_bin>
               } break;
 8001592:	e09a      	b.n	80016ca <debug_printf+0x45a>
            
            case 'm' : 
               {
                  UINT8* mm = va_arg(tag, UINT8*);
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	1d1a      	adds	r2, r3, #4
 8001598:	60ba      	str	r2, [r7, #8]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
                  UINT16 size = va_arg(tag, int);
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	1d1a      	adds	r2, r3, #4
 80015a2:	60ba      	str	r2, [r7, #8]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	857b      	strh	r3, [r7, #42]	; 0x2a
                  int ii;

                  for(ii=0; ii<size; ii++) 
 80015a8:	2300      	movs	r3, #0
 80015aa:	647b      	str	r3, [r7, #68]	; 0x44
 80015ac:	e03e      	b.n	800162c <debug_printf+0x3bc>
                  {   
                     dev_trace_send_byte(HB2HEX(mm[ii] / 0x10));
 80015ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015b2:	4413      	add	r3, r2
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b9f      	cmp	r3, #159	; 0x9f
 80015b8:	d908      	bls.n	80015cc <debug_printf+0x35c>
 80015ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015be:	4413      	add	r3, r2
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	091b      	lsrs	r3, r3, #4
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	3337      	adds	r3, #55	; 0x37
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	e007      	b.n	80015dc <debug_printf+0x36c>
 80015cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015d0:	4413      	add	r3, r2
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	091b      	lsrs	r3, r3, #4
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	3330      	adds	r3, #48	; 0x30
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fc55 	bl	8000e8c <dev_trace_send_byte>
                     dev_trace_send_byte(HB2HEX(mm[ii] % 0x10));
 80015e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015e6:	4413      	add	r3, r2
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b09      	cmp	r3, #9
 80015f2:	d909      	bls.n	8001608 <debug_printf+0x398>
 80015f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015f8:	4413      	add	r3, r2
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	f003 030f 	and.w	r3, r3, #15
 8001600:	b2db      	uxtb	r3, r3
 8001602:	3337      	adds	r3, #55	; 0x37
 8001604:	b2db      	uxtb	r3, r3
 8001606:	e008      	b.n	800161a <debug_printf+0x3aa>
 8001608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800160a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800160c:	4413      	add	r3, r2
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	f003 030f 	and.w	r3, r3, #15
 8001614:	b2db      	uxtb	r3, r3
 8001616:	3330      	adds	r3, #48	; 0x30
 8001618:	b2db      	uxtb	r3, r3
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fc36 	bl	8000e8c <dev_trace_send_byte>
                     dev_trace_send_byte(' ');
 8001620:	2020      	movs	r0, #32
 8001622:	f7ff fc33 	bl	8000e8c <dev_trace_send_byte>
                  for(ii=0; ii<size; ii++) 
 8001626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001628:	3301      	adds	r3, #1
 800162a:	647b      	str	r3, [r7, #68]	; 0x44
 800162c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800162e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001630:	429a      	cmp	r2, r3
 8001632:	dbbc      	blt.n	80015ae <debug_printf+0x33e>
                  }
               
               } break;
 8001634:	e049      	b.n	80016ca <debug_printf+0x45a>

            case 'M' : 
               {
                  UINT8* mm = va_arg(tag, UINT8*);
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	1d1a      	adds	r2, r3, #4
 800163a:	60ba      	str	r2, [r7, #8]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	617b      	str	r3, [r7, #20]
                  UINT16 size = va_arg(tag, int);
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	1d1a      	adds	r2, r3, #4
 8001644:	60ba      	str	r2, [r7, #8]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	827b      	strh	r3, [r7, #18]
                  int ii;

                  for(ii=0; ii<size; ii++) 
 800164a:	2300      	movs	r3, #0
 800164c:	643b      	str	r3, [r7, #64]	; 0x40
 800164e:	e00d      	b.n	800166c <debug_printf+0x3fc>
                  {   
                     debug_printf_long(mm[ii], 'u');
 8001650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	4413      	add	r3, r2
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2175      	movs	r1, #117	; 0x75
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fd1e 	bl	800109c <debug_printf_long>
                     dev_trace_send_byte(' ');
 8001660:	2020      	movs	r0, #32
 8001662:	f7ff fc13 	bl	8000e8c <dev_trace_send_byte>
                  for(ii=0; ii<size; ii++) 
 8001666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001668:	3301      	adds	r3, #1
 800166a:	643b      	str	r3, [r7, #64]	; 0x40
 800166c:	8a7b      	ldrh	r3, [r7, #18]
 800166e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001670:	429a      	cmp	r2, r3
 8001672:	dbed      	blt.n	8001650 <debug_printf+0x3e0>
                  }
               
               } break;
 8001674:	e029      	b.n	80016ca <debug_printf+0x45a>

            case 'p' : 
               {
                  UINT8* mm = va_arg(tag, UINT8*);
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	1d1a      	adds	r2, r3, #4
 800167a:	60ba      	str	r2, [r7, #8]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	633b      	str	r3, [r7, #48]	; 0x30
               
                  debug_printf_long(mm[0], 'u');
 8001680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2175      	movs	r1, #117	; 0x75
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fd08 	bl	800109c <debug_printf_long>
                  dev_trace_send_byte('.');
 800168c:	202e      	movs	r0, #46	; 0x2e
 800168e:	f7ff fbfd 	bl	8000e8c <dev_trace_send_byte>
                  debug_printf_long(mm[1], 'u');
 8001692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001694:	3301      	adds	r3, #1
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2175      	movs	r1, #117	; 0x75
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fcfe 	bl	800109c <debug_printf_long>
                  dev_trace_send_byte('.');
 80016a0:	202e      	movs	r0, #46	; 0x2e
 80016a2:	f7ff fbf3 	bl	8000e8c <dev_trace_send_byte>
                  debug_printf_long(mm[2], 'u');
 80016a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a8:	3302      	adds	r3, #2
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2175      	movs	r1, #117	; 0x75
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fcf4 	bl	800109c <debug_printf_long>
                  dev_trace_send_byte('.');
 80016b4:	202e      	movs	r0, #46	; 0x2e
 80016b6:	f7ff fbe9 	bl	8000e8c <dev_trace_send_byte>
                  debug_printf_long(mm[3], 'u');
 80016ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016bc:	3303      	adds	r3, #3
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2175      	movs	r1, #117	; 0x75
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fcea 	bl	800109c <debug_printf_long>
               
               } break;
 80016c8:	bf00      	nop
           
         }
      
         i += 2;
 80016ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016cc:	3302      	adds	r3, #2
 80016ce:	65fb      	str	r3, [r7, #92]	; 0x5c
   while(text[i] != 0)
 80016d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80016d4:	4413      	add	r3, r2
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f47f add3 	bne.w	8001284 <debug_printf+0x14>
      }
   }   

}
 80016de:	bf00      	nop
 80016e0:	bf00      	nop
 80016e2:	3760      	adds	r7, #96	; 0x60
 80016e4:	46bd      	mov	sp, r7
 80016e6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80016ea:	b004      	add	sp, #16
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	00000000 	.word	0x00000000
 80016f4:	41cdcd65 	.word	0x41cdcd65
 80016f8:	10624dd3 	.word	0x10624dd3
 80016fc:	66666667 	.word	0x66666667

08001700 <hal_driver_set_info>:
static void* dma_2_irq_data[16];



void hal_driver_set_info(dev_info_t* info_1, dev_info_t* info_2)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
		info_2->id = info_1->id;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	781a      	ldrb	r2, [r3, #0]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	701a      	strb	r2, [r3, #0]
		info_2->status_in = info_1->status_in;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	605a      	str	r2, [r3, #4]
		info_2->status_out = info_1->status_out;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	609a      	str	r2, [r3, #8]
		info_2->name = info_1->name;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691a      	ldr	r2, [r3, #16]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	611a      	str	r2, [r3, #16]
	
		info_2->rx_mode = HAL_DEFAULT_MODE_SYNC;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	2200      	movs	r2, #0
 800172e:	731a      	strb	r2, [r3, #12]
		info_2->tx_mode = HAL_DEFAULT_MODE_SYNC;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	2200      	movs	r2, #0
 8001734:	735a      	strb	r2, [r3, #13]
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr

08001740 <EXTI1_IRQHandler>:
//------------------------------------------------------------------------------
//         internal Functions
//------------------------------------------------------------------------------

//void EXTI0_IRQHandler(void){ (*gpio_irq_cbf[0])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);}
void EXTI1_IRQHandler(void){ (*gpio_irq_cbf[1])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);}
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <EXTI1_IRQHandler+0x14>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	4798      	blx	r3
 800174a:	4b03      	ldr	r3, [pc, #12]	; (8001758 <EXTI1_IRQHandler+0x18>)
 800174c:	2202      	movs	r2, #2
 800174e:	615a      	str	r2, [r3, #20]
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200000f0 	.word	0x200000f0
 8001758:	40010400 	.word	0x40010400

0800175c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){ (*gpio_irq_cbf[2])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2);}
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <EXTI2_IRQHandler+0x14>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	4798      	blx	r3
 8001766:	4b03      	ldr	r3, [pc, #12]	; (8001774 <EXTI2_IRQHandler+0x18>)
 8001768:	2204      	movs	r2, #4
 800176a:	615a      	str	r2, [r3, #20]
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	200000f0 	.word	0x200000f0
 8001774:	40010400 	.word	0x40010400

08001778 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){ (*gpio_irq_cbf[3])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);}
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <EXTI3_IRQHandler+0x14>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	4798      	blx	r3
 8001782:	4b03      	ldr	r3, [pc, #12]	; (8001790 <EXTI3_IRQHandler+0x18>)
 8001784:	2208      	movs	r2, #8
 8001786:	615a      	str	r2, [r3, #20]
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	200000f0 	.word	0x200000f0
 8001790:	40010400 	.word	0x40010400

08001794 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){ (*gpio_irq_cbf[4])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);}
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
 8001798:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <EXTI4_IRQHandler+0x14>)
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	4798      	blx	r3
 800179e:	4b03      	ldr	r3, [pc, #12]	; (80017ac <EXTI4_IRQHandler+0x18>)
 80017a0:	2210      	movs	r2, #16
 80017a2:	615a      	str	r2, [r3, #20]
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200000f0 	.word	0x200000f0
 80017ac:	40010400 	.word	0x40010400

080017b0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{ 
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_5) != RESET) { (*gpio_irq_cbf[5])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5); }
 80017b4:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <EXTI9_5_IRQHandler+0x84>)
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	f003 0320 	and.w	r3, r3, #32
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <EXTI9_5_IRQHandler+0x1c>
 80017c0:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <EXTI9_5_IRQHandler+0x88>)
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	4798      	blx	r3
 80017c6:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <EXTI9_5_IRQHandler+0x84>)
 80017c8:	2220      	movs	r2, #32
 80017ca:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET) { (*gpio_irq_cbf[6])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6); }
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <EXTI9_5_IRQHandler+0x84>)
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d005      	beq.n	80017e4 <EXTI9_5_IRQHandler+0x34>
 80017d8:	4b17      	ldr	r3, [pc, #92]	; (8001838 <EXTI9_5_IRQHandler+0x88>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	4798      	blx	r3
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <EXTI9_5_IRQHandler+0x84>)
 80017e0:	2240      	movs	r2, #64	; 0x40
 80017e2:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET) { (*gpio_irq_cbf[7])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7); }
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <EXTI9_5_IRQHandler+0x84>)
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <EXTI9_5_IRQHandler+0x4c>
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <EXTI9_5_IRQHandler+0x88>)
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	4798      	blx	r3
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <EXTI9_5_IRQHandler+0x84>)
 80017f8:	2280      	movs	r2, #128	; 0x80
 80017fa:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET) { (*gpio_irq_cbf[8])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8); }
 80017fc:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <EXTI9_5_IRQHandler+0x84>)
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001804:	2b00      	cmp	r3, #0
 8001806:	d006      	beq.n	8001816 <EXTI9_5_IRQHandler+0x66>
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <EXTI9_5_IRQHandler+0x88>)
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	4798      	blx	r3
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <EXTI9_5_IRQHandler+0x84>)
 8001810:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001814:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET) { (*gpio_irq_cbf[9])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9); }
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <EXTI9_5_IRQHandler+0x84>)
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800181e:	2b00      	cmp	r3, #0
 8001820:	d006      	beq.n	8001830 <EXTI9_5_IRQHandler+0x80>
 8001822:	4b05      	ldr	r3, [pc, #20]	; (8001838 <EXTI9_5_IRQHandler+0x88>)
 8001824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001826:	4798      	blx	r3
 8001828:	4b02      	ldr	r3, [pc, #8]	; (8001834 <EXTI9_5_IRQHandler+0x84>)
 800182a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800182e:	615a      	str	r2, [r3, #20]
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40010400 	.word	0x40010400
 8001838:	200000f0 	.word	0x200000f0

0800183c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{ 
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_10) != RESET) { (*gpio_irq_cbf[10])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10); }
 8001840:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <EXTI15_10_IRQHandler+0xa4>)
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001848:	2b00      	cmp	r3, #0
 800184a:	d006      	beq.n	800185a <EXTI15_10_IRQHandler+0x1e>
 800184c:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <EXTI15_10_IRQHandler+0xa8>)
 800184e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001850:	4798      	blx	r3
 8001852:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <EXTI15_10_IRQHandler+0xa4>)
 8001854:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001858:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_11) != RESET) { (*gpio_irq_cbf[11])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11); }
 800185a:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <EXTI15_10_IRQHandler+0xa4>)
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <EXTI15_10_IRQHandler+0x38>
 8001866:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <EXTI15_10_IRQHandler+0xa8>)
 8001868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186a:	4798      	blx	r3
 800186c:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <EXTI15_10_IRQHandler+0xa4>)
 800186e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001872:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_12) != RESET) { (*gpio_irq_cbf[12])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12); }
 8001874:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <EXTI15_10_IRQHandler+0xa4>)
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d006      	beq.n	800188e <EXTI15_10_IRQHandler+0x52>
 8001880:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <EXTI15_10_IRQHandler+0xa8>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	4798      	blx	r3
 8001886:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <EXTI15_10_IRQHandler+0xa4>)
 8001888:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800188c:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET) { (*gpio_irq_cbf[13])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13); }
 800188e:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <EXTI15_10_IRQHandler+0xa4>)
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d006      	beq.n	80018a8 <EXTI15_10_IRQHandler+0x6c>
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <EXTI15_10_IRQHandler+0xa8>)
 800189c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800189e:	4798      	blx	r3
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <EXTI15_10_IRQHandler+0xa4>)
 80018a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018a6:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_14) != RESET) { (*gpio_irq_cbf[14])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14); }
 80018a8:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <EXTI15_10_IRQHandler+0xa4>)
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d006      	beq.n	80018c2 <EXTI15_10_IRQHandler+0x86>
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <EXTI15_10_IRQHandler+0xa8>)
 80018b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b8:	4798      	blx	r3
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <EXTI15_10_IRQHandler+0xa4>)
 80018bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018c0:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_15) != RESET) { (*gpio_irq_cbf[15])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_15); }
 80018c2:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <EXTI15_10_IRQHandler+0xa4>)
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d006      	beq.n	80018dc <EXTI15_10_IRQHandler+0xa0>
 80018ce:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <EXTI15_10_IRQHandler+0xa8>)
 80018d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d2:	4798      	blx	r3
 80018d4:	4b02      	ldr	r3, [pc, #8]	; (80018e0 <EXTI15_10_IRQHandler+0xa4>)
 80018d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018da:	615a      	str	r2, [r3, #20]
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40010400 	.word	0x40010400
 80018e4:	200000f0 	.word	0x200000f0

080018e8 <dev_gpio_id_port>:

//------------------------------------------------------------------------------
//         GPIO Local Functions
//------------------------------------------------------------------------------
GPIO_TypeDef* dev_gpio_id_port(UINT8 gpio_id)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
		switch(gpio_id)
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d817      	bhi.n	8001928 <dev_gpio_id_port+0x40>
 80018f8:	a201      	add	r2, pc, #4	; (adr r2, 8001900 <dev_gpio_id_port+0x18>)
 80018fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fe:	bf00      	nop
 8001900:	08001915 	.word	0x08001915
 8001904:	08001919 	.word	0x08001919
 8001908:	0800191d 	.word	0x0800191d
 800190c:	08001921 	.word	0x08001921
 8001910:	08001925 	.word	0x08001925
		{
				case GPIO_PA : return GPIOA;
 8001914:	4b07      	ldr	r3, [pc, #28]	; (8001934 <dev_gpio_id_port+0x4c>)
 8001916:	e008      	b.n	800192a <dev_gpio_id_port+0x42>
				case GPIO_PB : return GPIOB;
 8001918:	4b07      	ldr	r3, [pc, #28]	; (8001938 <dev_gpio_id_port+0x50>)
 800191a:	e006      	b.n	800192a <dev_gpio_id_port+0x42>
				case GPIO_PC : return GPIOC;
 800191c:	4b07      	ldr	r3, [pc, #28]	; (800193c <dev_gpio_id_port+0x54>)
 800191e:	e004      	b.n	800192a <dev_gpio_id_port+0x42>
				case GPIO_PD : return GPIOD;
 8001920:	4b07      	ldr	r3, [pc, #28]	; (8001940 <dev_gpio_id_port+0x58>)
 8001922:	e002      	b.n	800192a <dev_gpio_id_port+0x42>
				case GPIO_PE : return GPIOE;
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <dev_gpio_id_port+0x5c>)
 8001926:	e000      	b.n	800192a <dev_gpio_id_port+0x42>
				case GPIO_PI : return GPIOI;
#endif

		}

		return (GPIO_TypeDef*)0;	
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	40010800 	.word	0x40010800
 8001938:	40010c00 	.word	0x40010c00
 800193c:	40011000 	.word	0x40011000
 8001940:	40011400 	.word	0x40011400
 8001944:	40011800 	.word	0x40011800

08001948 <dev_gpio_pin_id>:

		return 0;	
}

int dev_gpio_pin_id(UINT16 pin)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	80fb      	strh	r3, [r7, #6]
		if (pin & 0x0001) return 0;
 8001952:	88fb      	ldrh	r3, [r7, #6]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <dev_gpio_pin_id+0x18>
 800195c:	2300      	movs	r3, #0
 800195e:	e069      	b.n	8001a34 <dev_gpio_pin_id+0xec>
		if (pin & 0x0002) return 1;
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <dev_gpio_pin_id+0x26>
 800196a:	2301      	movs	r3, #1
 800196c:	e062      	b.n	8001a34 <dev_gpio_pin_id+0xec>
		if (pin & 0x0004) return 2;
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <dev_gpio_pin_id+0x34>
 8001978:	2302      	movs	r3, #2
 800197a:	e05b      	b.n	8001a34 <dev_gpio_pin_id+0xec>
		if (pin & 0x0008) return 3;
 800197c:	88fb      	ldrh	r3, [r7, #6]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <dev_gpio_pin_id+0x42>
 8001986:	2303      	movs	r3, #3
 8001988:	e054      	b.n	8001a34 <dev_gpio_pin_id+0xec>
		if (pin & 0x0010) return 4;
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	f003 0310 	and.w	r3, r3, #16
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <dev_gpio_pin_id+0x50>
 8001994:	2304      	movs	r3, #4
 8001996:	e04d      	b.n	8001a34 <dev_gpio_pin_id+0xec>
		if (pin & 0x0020) return 5;
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	f003 0320 	and.w	r3, r3, #32
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <dev_gpio_pin_id+0x5e>
 80019a2:	2305      	movs	r3, #5
 80019a4:	e046      	b.n	8001a34 <dev_gpio_pin_id+0xec>
		if (pin & 0x0040) return 6;
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <dev_gpio_pin_id+0x6c>
 80019b0:	2306      	movs	r3, #6
 80019b2:	e03f      	b.n	8001a34 <dev_gpio_pin_id+0xec>
		if (pin & 0x0080) return 7;
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <dev_gpio_pin_id+0x7a>
 80019be:	2307      	movs	r3, #7
 80019c0:	e038      	b.n	8001a34 <dev_gpio_pin_id+0xec>
	
		if (pin & 0x0100) return 8;
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <dev_gpio_pin_id+0x88>
 80019cc:	2308      	movs	r3, #8
 80019ce:	e031      	b.n	8001a34 <dev_gpio_pin_id+0xec>
		if (pin & 0x0200) return 9;
 80019d0:	88fb      	ldrh	r3, [r7, #6]
 80019d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <dev_gpio_pin_id+0x96>
 80019da:	2309      	movs	r3, #9
 80019dc:	e02a      	b.n	8001a34 <dev_gpio_pin_id+0xec>
		if (pin & 0x0400) return 10;
 80019de:	88fb      	ldrh	r3, [r7, #6]
 80019e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <dev_gpio_pin_id+0xa4>
 80019e8:	230a      	movs	r3, #10
 80019ea:	e023      	b.n	8001a34 <dev_gpio_pin_id+0xec>
		if (pin & 0x0800) return 11;
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <dev_gpio_pin_id+0xb2>
 80019f6:	230b      	movs	r3, #11
 80019f8:	e01c      	b.n	8001a34 <dev_gpio_pin_id+0xec>
		if (pin & 0x1000) return 12;
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <dev_gpio_pin_id+0xc0>
 8001a04:	230c      	movs	r3, #12
 8001a06:	e015      	b.n	8001a34 <dev_gpio_pin_id+0xec>
		if (pin & 0x2000) return 13;
 8001a08:	88fb      	ldrh	r3, [r7, #6]
 8001a0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <dev_gpio_pin_id+0xce>
 8001a12:	230d      	movs	r3, #13
 8001a14:	e00e      	b.n	8001a34 <dev_gpio_pin_id+0xec>
		if (pin & 0x4000) return 14;
 8001a16:	88fb      	ldrh	r3, [r7, #6]
 8001a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <dev_gpio_pin_id+0xdc>
 8001a20:	230e      	movs	r3, #14
 8001a22:	e007      	b.n	8001a34 <dev_gpio_pin_id+0xec>
		if (pin & 0x8000) return 15;
 8001a24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	da01      	bge.n	8001a30 <dev_gpio_pin_id+0xe8>
 8001a2c:	230f      	movs	r3, #15
 8001a2e:	e001      	b.n	8001a34 <dev_gpio_pin_id+0xec>

		return -1;	
 8001a30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
	...

08001a40 <dev_gpio_init_rcc>:

//------------------------------------------------------------------------------
//         GPIO Init Functions
//------------------------------------------------------------------------------
UINT8 dev_gpio_init_rcc(UINT8 gpio_id)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
		switch(gpio_id)
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	2b04      	cmp	r3, #4
 8001a4e:	d84e      	bhi.n	8001aee <dev_gpio_init_rcc+0xae>
 8001a50:	a201      	add	r2, pc, #4	; (adr r2, 8001a58 <dev_gpio_init_rcc+0x18>)
 8001a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a56:	bf00      	nop
 8001a58:	08001a6d 	.word	0x08001a6d
 8001a5c:	08001a87 	.word	0x08001a87
 8001a60:	08001aa1 	.word	0x08001aa1
 8001a64:	08001abb 	.word	0x08001abb
 8001a68:	08001ad5 	.word	0x08001ad5
		{
				case GPIO_PA : __HAL_RCC_GPIOA_CLK_ENABLE(); break;
 8001a6c:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <dev_gpio_init_rcc+0xc4>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	4a24      	ldr	r2, [pc, #144]	; (8001b04 <dev_gpio_init_rcc+0xc4>)
 8001a72:	f043 0304 	orr.w	r3, r3, #4
 8001a76:	6193      	str	r3, [r2, #24]
 8001a78:	4b22      	ldr	r3, [pc, #136]	; (8001b04 <dev_gpio_init_rcc+0xc4>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	e038      	b.n	8001af8 <dev_gpio_init_rcc+0xb8>
				case GPIO_PB : __HAL_RCC_GPIOB_CLK_ENABLE(); break;
 8001a86:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <dev_gpio_init_rcc+0xc4>)
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	4a1e      	ldr	r2, [pc, #120]	; (8001b04 <dev_gpio_init_rcc+0xc4>)
 8001a8c:	f043 0308 	orr.w	r3, r3, #8
 8001a90:	6193      	str	r3, [r2, #24]
 8001a92:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <dev_gpio_init_rcc+0xc4>)
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	61bb      	str	r3, [r7, #24]
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	e02b      	b.n	8001af8 <dev_gpio_init_rcc+0xb8>
				case GPIO_PC : __HAL_RCC_GPIOC_CLK_ENABLE(); break;
 8001aa0:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <dev_gpio_init_rcc+0xc4>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	4a17      	ldr	r2, [pc, #92]	; (8001b04 <dev_gpio_init_rcc+0xc4>)
 8001aa6:	f043 0310 	orr.w	r3, r3, #16
 8001aaa:	6193      	str	r3, [r2, #24]
 8001aac:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <dev_gpio_init_rcc+0xc4>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	f003 0310 	and.w	r3, r3, #16
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	e01e      	b.n	8001af8 <dev_gpio_init_rcc+0xb8>
				case GPIO_PD : __HAL_RCC_GPIOD_CLK_ENABLE(); break;
 8001aba:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <dev_gpio_init_rcc+0xc4>)
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	4a11      	ldr	r2, [pc, #68]	; (8001b04 <dev_gpio_init_rcc+0xc4>)
 8001ac0:	f043 0320 	orr.w	r3, r3, #32
 8001ac4:	6193      	str	r3, [r2, #24]
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <dev_gpio_init_rcc+0xc4>)
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	f003 0320 	and.w	r3, r3, #32
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	e011      	b.n	8001af8 <dev_gpio_init_rcc+0xb8>
				case GPIO_PE : __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <dev_gpio_init_rcc+0xc4>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <dev_gpio_init_rcc+0xc4>)
 8001ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <dev_gpio_init_rcc+0xc4>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	e004      	b.n	8001af8 <dev_gpio_init_rcc+0xb8>
			
#ifdef	GPIOI			
				case GPIO_PI : __HAL_RCC_GPIOI_CLK_ENABLE(); break;
#endif
			
				default : TRACE_GERROR("Unknow GPIO !!!");
 8001aee:	22a4      	movs	r2, #164	; 0xa4
 8001af0:	4905      	ldr	r1, [pc, #20]	; (8001b08 <dev_gpio_init_rcc+0xc8>)
 8001af2:	4806      	ldr	r0, [pc, #24]	; (8001b0c <dev_gpio_init_rcc+0xcc>)
 8001af4:	f7ff fa0c 	bl	8000f10 <dev_trace_generate_error>
		}
		
		return RET_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3720      	adds	r7, #32
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000
 8001b08:	080070b8 	.word	0x080070b8
 8001b0c:	080070d0 	.word	0x080070d0

08001b10 <dev_gpio_init_mode>:
			
		return RET_OK;
}

UINT8 dev_gpio_init_mode(GPIO_InitTypeDef* init, UINT8 gpio_mode)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	70fb      	strb	r3, [r7, #3]
	
		switch(gpio_mode)
 8001b1c:	78fb      	ldrb	r3, [r7, #3]
 8001b1e:	2b0b      	cmp	r3, #11
 8001b20:	d859      	bhi.n	8001bd6 <dev_gpio_init_mode+0xc6>
 8001b22:	a201      	add	r2, pc, #4	; (adr r2, 8001b28 <dev_gpio_init_mode+0x18>)
 8001b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b28:	08001b59 	.word	0x08001b59
 8001b2c:	08001b83 	.word	0x08001b83
 8001b30:	08001b59 	.word	0x08001b59
 8001b34:	08001b75 	.word	0x08001b75
 8001b38:	08001b67 	.word	0x08001b67
 8001b3c:	08001b83 	.word	0x08001b83
 8001b40:	08001b91 	.word	0x08001b91
 8001b44:	08001b9f 	.word	0x08001b9f
 8001b48:	08001bad 	.word	0x08001bad
 8001b4c:	08001bbb 	.word	0x08001bbb
 8001b50:	08001b9f 	.word	0x08001b9f
 8001b54:	08001bc9 	.word	0x08001bc9
		{
				case GPIO_MODE_IN : 
				case GPIO_MODE_IN_FLOAT : 	init->Mode = GPIO_MODE_INPUT;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	605a      	str	r2, [r3, #4]
																		init->Pull = GPIO_NOPULL; break;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	e03e      	b.n	8001be4 <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_IN_UP : 			init->Mode = GPIO_MODE_INPUT;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	605a      	str	r2, [r3, #4]
																		init->Pull = GPIO_PULLUP; break;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	e037      	b.n	8001be4 <dev_gpio_init_mode+0xd4>
				
				case GPIO_MODE_IN_DOWN : 		init->Mode = GPIO_MODE_INPUT;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	605a      	str	r2, [r3, #4]
																		init->Pull = GPIO_PULLDOWN; break;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	e030      	b.n	8001be4 <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_OUT : 
				case GPIO_MODE_OUT_PP : 		init->Mode 	= GPIO_MODE_OUTPUT_PP;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
 8001b8e:	e029      	b.n	8001be4 <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_OUT_OD : 		init->Mode 	= GPIO_MODE_OUTPUT_OD;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2211      	movs	r2, #17
 8001b94:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	e022      	b.n	8001be4 <dev_gpio_init_mode+0xd4>
#ifdef GPIO_MODE_AF_INPUT				
				case GPIO_MODE_ALF : 
				case GPIO_MODE_ALF_IN : 		init->Mode 	= GPIO_MODE_AF_INPUT;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	e01b      	b.n	8001be4 <dev_gpio_init_mode+0xd4>
#endif				
				
				case GPIO_MODE_ALF_PP : 		init->Mode 	= GPIO_MODE_AF_PP;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	e014      	b.n	8001be4 <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_ALF_OD : 		init->Mode 	= GPIO_MODE_AF_OD;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2212      	movs	r2, #18
 8001bbe:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	e00d      	b.n	8001be4 <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_AN : 				init->Mode 	= GPIO_MODE_ANALOG;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2203      	movs	r2, #3
 8001bcc:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	e006      	b.n	8001be4 <dev_gpio_init_mode+0xd4>

				default : 									return TRACE_GERROR("Unknow GPIO Mode !!!");
 8001bd6:	22e9      	movs	r2, #233	; 0xe9
 8001bd8:	4905      	ldr	r1, [pc, #20]	; (8001bf0 <dev_gpio_init_mode+0xe0>)
 8001bda:	4806      	ldr	r0, [pc, #24]	; (8001bf4 <dev_gpio_init_mode+0xe4>)
 8001bdc:	f7ff f998 	bl	8000f10 <dev_trace_generate_error>
 8001be0:	4603      	mov	r3, r0
 8001be2:	e000      	b.n	8001be6 <dev_gpio_init_mode+0xd6>
				
		};
		
		return RET_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	080070b8 	.word	0x080070b8
 8001bf4:	080070e0 	.word	0x080070e0

08001bf8 <dev_gpio_init_speed>:

UINT8 dev_gpio_init_speed(GPIO_InitTypeDef* init, UINT8 gpio_speed)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	70fb      	strb	r3, [r7, #3]
		switch(gpio_speed)
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	2b03      	cmp	r3, #3
 8001c08:	d81a      	bhi.n	8001c40 <dev_gpio_init_speed+0x48>
 8001c0a:	a201      	add	r2, pc, #4	; (adr r2, 8001c10 <dev_gpio_init_speed+0x18>)
 8001c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c10:	08001c21 	.word	0x08001c21
 8001c14:	08001c29 	.word	0x08001c29
 8001c18:	08001c31 	.word	0x08001c31
 8001c1c:	08001c39 	.word	0x08001c39
		{
				case GPIO_PIN_SPEED_VHIGH : 			init->Speed = GPIO_SPEED_FREQ_HIGH; break;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2203      	movs	r2, #3
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	e012      	b.n	8001c4e <dev_gpio_init_speed+0x56>
				case GPIO_PIN_SPEED_HIGH : 				init->Speed = GPIO_SPEED_FREQ_HIGH; break;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	e00e      	b.n	8001c4e <dev_gpio_init_speed+0x56>
				case GPIO_PIN_SPEED_MED : 				init->Speed = GPIO_SPEED_FREQ_MEDIUM; break;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	e00a      	b.n	8001c4e <dev_gpio_init_speed+0x56>
				case GPIO_PIN_SPEED_LOW : 				init->Speed = GPIO_SPEED_FREQ_LOW; break;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	e006      	b.n	8001c4e <dev_gpio_init_speed+0x56>
			
				default : 									return TRACE_GERROR("Unknow GPIO Speed !!!");
 8001c40:	22f9      	movs	r2, #249	; 0xf9
 8001c42:	4905      	ldr	r1, [pc, #20]	; (8001c58 <dev_gpio_init_speed+0x60>)
 8001c44:	4805      	ldr	r0, [pc, #20]	; (8001c5c <dev_gpio_init_speed+0x64>)
 8001c46:	f7ff f963 	bl	8000f10 <dev_trace_generate_error>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	e000      	b.n	8001c50 <dev_gpio_init_speed+0x58>
		};

		return RET_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	080070b8 	.word	0x080070b8
 8001c5c:	080070f8 	.word	0x080070f8

08001c60 <dev_gpio_init>:
	
		return RET_OK;
}

UINT8 dev_gpio_init(dev_gpio_t* gpio, dev_gpio_init_t* init)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
		UINT8 ret;
		GPIO_InitTypeDef GPIO_InitStructure;

		hal_driver_set_info(&init->info, &gpio->info);
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3304      	adds	r3, #4
 8001c70:	4619      	mov	r1, r3
 8001c72:	4610      	mov	r0, r2
 8001c74:	f7ff fd44 	bl	8001700 <hal_driver_set_info>
	
		gpio->port = dev_gpio_id_port(gpio->info.id);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	791b      	ldrb	r3, [r3, #4]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fe33 	bl	80018e8 <dev_gpio_id_port>
 8001c82:	4602      	mov	r2, r0
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	601a      	str	r2, [r3, #0]
		gpio->pin = init->pin;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	8b1a      	ldrh	r2, [r3, #24]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	839a      	strh	r2, [r3, #28]
	
		GPIO_InitStructure.Pin = gpio->pin; 
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	8b9b      	ldrh	r3, [r3, #28]
 8001c94:	60bb      	str	r3, [r7, #8]
	
		ret = dev_gpio_init_rcc(gpio->info.id);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	791b      	ldrb	r3, [r3, #4]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fed0 	bl	8001a40 <dev_gpio_init_rcc>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	77fb      	strb	r3, [r7, #31]
		if (ret) return TRACE_EERROR(ret);
 8001ca4:	7ffb      	ldrb	r3, [r7, #31]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d008      	beq.n	8001cbc <dev_gpio_init+0x5c>
 8001caa:	7ffb      	ldrb	r3, [r7, #31]
 8001cac:	f240 1213 	movw	r2, #275	; 0x113
 8001cb0:	4978      	ldr	r1, [pc, #480]	; (8001e94 <dev_gpio_init+0x234>)
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff f912 	bl	8000edc <dev_trace_get_error>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	e0e7      	b.n	8001e8c <dev_gpio_init+0x22c>
	
		ret = dev_gpio_init_mode(&GPIO_InitStructure, init->mode);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	7e9a      	ldrb	r2, [r3, #26]
 8001cc0:	f107 0308 	add.w	r3, r7, #8
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff ff22 	bl	8001b10 <dev_gpio_init_mode>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	77fb      	strb	r3, [r7, #31]
		if (ret) return TRACE_EERROR(ret);
 8001cd0:	7ffb      	ldrb	r3, [r7, #31]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d008      	beq.n	8001ce8 <dev_gpio_init+0x88>
 8001cd6:	7ffb      	ldrb	r3, [r7, #31]
 8001cd8:	f44f 728b 	mov.w	r2, #278	; 0x116
 8001cdc:	496d      	ldr	r1, [pc, #436]	; (8001e94 <dev_gpio_init+0x234>)
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff f8fc 	bl	8000edc <dev_trace_get_error>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	e0d1      	b.n	8001e8c <dev_gpio_init+0x22c>
	
		ret = dev_gpio_init_speed(&GPIO_InitStructure, init->speed);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	7eda      	ldrb	r2, [r3, #27]
 8001cec:	f107 0308 	add.w	r3, r7, #8
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff ff80 	bl	8001bf8 <dev_gpio_init_speed>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	77fb      	strb	r3, [r7, #31]
		if (ret) return TRACE_EERROR(ret);
 8001cfc:	7ffb      	ldrb	r3, [r7, #31]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d008      	beq.n	8001d14 <dev_gpio_init+0xb4>
 8001d02:	7ffb      	ldrb	r3, [r7, #31]
 8001d04:	f240 1219 	movw	r2, #281	; 0x119
 8001d08:	4962      	ldr	r1, [pc, #392]	; (8001e94 <dev_gpio_init+0x234>)
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff f8e6 	bl	8000edc <dev_trace_get_error>
 8001d10:	4603      	mov	r3, r0
 8001d12:	e0bb      	b.n	8001e8c <dev_gpio_init+0x22c>
	
	  // EXTI interrupt init
		if (init->irq_cbf)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d013      	beq.n	8001d44 <dev_gpio_init+0xe4>
		{
				switch(init->irq_mode)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	7f1b      	ldrb	r3, [r3, #28]
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d00c      	beq.n	8001d3e <dev_gpio_init+0xde>
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	dc0e      	bgt.n	8001d46 <dev_gpio_init+0xe6>
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d002      	beq.n	8001d32 <dev_gpio_init+0xd2>
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d003      	beq.n	8001d38 <dev_gpio_init+0xd8>
 8001d30:	e009      	b.n	8001d46 <dev_gpio_init+0xe6>
				{
						case GPIO_IRQ_RISING : 		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING; break;
 8001d32:	4b59      	ldr	r3, [pc, #356]	; (8001e98 <dev_gpio_init+0x238>)
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	e006      	b.n	8001d46 <dev_gpio_init+0xe6>
						case GPIO_IRQ_FALLING : 	GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING; break;
 8001d38:	4b57      	ldr	r3, [pc, #348]	; (8001e98 <dev_gpio_init+0x238>)
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	e003      	b.n	8001d46 <dev_gpio_init+0xe6>
						case GPIO_IRQ_CHANGE : 		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING; break;
 8001d3e:	4b56      	ldr	r3, [pc, #344]	; (8001e98 <dev_gpio_init+0x238>)
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	e000      	b.n	8001d46 <dev_gpio_init+0xe6>
				}
		}	
 8001d44:	bf00      	nop
	
		HAL_GPIO_Init(gpio->port, &GPIO_InitStructure);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f107 0208 	add.w	r2, r7, #8
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f001 fcad 	bl	80036b0 <HAL_GPIO_Init>

		HAL_DRIVER_DEBUG(gpio->info.status_in, debug_printf("Init Gpio %s - %d, %X\n\r", gpio->info.name, gpio->info.id, gpio->pin));		
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00e      	beq.n	8001d7c <dev_gpio_init+0x11c>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d009      	beq.n	8001d7c <dev_gpio_init+0x11c>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6959      	ldr	r1, [r3, #20]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	791b      	ldrb	r3, [r3, #4]
 8001d70:	461a      	mov	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	8b9b      	ldrh	r3, [r3, #28]
 8001d76:	4849      	ldr	r0, [pc, #292]	; (8001e9c <dev_gpio_init+0x23c>)
 8001d78:	f7ff fa7a 	bl	8001270 <debug_printf>

	  // EXTI interrupt init
		if (init->irq_cbf)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 8082 	beq.w	8001e8a <dev_gpio_init+0x22a>
		{
				int pin_id = dev_gpio_pin_id(gpio->pin);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	8b9b      	ldrh	r3, [r3, #28]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fddc 	bl	8001948 <dev_gpio_pin_id>
 8001d90:	61b8      	str	r0, [r7, #24]
			
				if (pin_id < 0) return TRACE_GERROR("Irq Line!!!");
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	da07      	bge.n	8001da8 <dev_gpio_init+0x148>
 8001d98:	f240 122f 	movw	r2, #303	; 0x12f
 8001d9c:	493d      	ldr	r1, [pc, #244]	; (8001e94 <dev_gpio_init+0x234>)
 8001d9e:	4840      	ldr	r0, [pc, #256]	; (8001ea0 <dev_gpio_init+0x240>)
 8001da0:	f7ff f8b6 	bl	8000f10 <dev_trace_generate_error>
 8001da4:	4603      	mov	r3, r0
 8001da6:	e071      	b.n	8001e8c <dev_gpio_init+0x22c>
			
				gpio_irq_cbf[pin_id] = init->irq_cbf;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	6a1a      	ldr	r2, [r3, #32]
 8001dac:	493d      	ldr	r1, [pc, #244]	; (8001ea4 <dev_gpio_init+0x244>)
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			
				switch(pin_id)
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	2b0f      	cmp	r3, #15
 8001db8:	d83e      	bhi.n	8001e38 <dev_gpio_init+0x1d8>
 8001dba:	a201      	add	r2, pc, #4	; (adr r2, 8001dc0 <dev_gpio_init+0x160>)
 8001dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc0:	08001e01 	.word	0x08001e01
 8001dc4:	08001e09 	.word	0x08001e09
 8001dc8:	08001e11 	.word	0x08001e11
 8001dcc:	08001e19 	.word	0x08001e19
 8001dd0:	08001e21 	.word	0x08001e21
 8001dd4:	08001e29 	.word	0x08001e29
 8001dd8:	08001e29 	.word	0x08001e29
 8001ddc:	08001e29 	.word	0x08001e29
 8001de0:	08001e29 	.word	0x08001e29
 8001de4:	08001e29 	.word	0x08001e29
 8001de8:	08001e31 	.word	0x08001e31
 8001dec:	08001e31 	.word	0x08001e31
 8001df0:	08001e31 	.word	0x08001e31
 8001df4:	08001e31 	.word	0x08001e31
 8001df8:	08001e31 	.word	0x08001e31
 8001dfc:	08001e31 	.word	0x08001e31
				{
						case 0 : gpio->irq_line = EXTI0_IRQn; break;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2206      	movs	r2, #6
 8001e04:	779a      	strb	r2, [r3, #30]
 8001e06:	e017      	b.n	8001e38 <dev_gpio_init+0x1d8>
						case 1 : gpio->irq_line = EXTI1_IRQn; break;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2207      	movs	r2, #7
 8001e0c:	779a      	strb	r2, [r3, #30]
 8001e0e:	e013      	b.n	8001e38 <dev_gpio_init+0x1d8>
						case 2 : gpio->irq_line = EXTI2_IRQn; break;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2208      	movs	r2, #8
 8001e14:	779a      	strb	r2, [r3, #30]
 8001e16:	e00f      	b.n	8001e38 <dev_gpio_init+0x1d8>
						case 3 : gpio->irq_line = EXTI3_IRQn; break;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2209      	movs	r2, #9
 8001e1c:	779a      	strb	r2, [r3, #30]
 8001e1e:	e00b      	b.n	8001e38 <dev_gpio_init+0x1d8>
						case 4 : gpio->irq_line = EXTI4_IRQn; break;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	220a      	movs	r2, #10
 8001e24:	779a      	strb	r2, [r3, #30]
 8001e26:	e007      	b.n	8001e38 <dev_gpio_init+0x1d8>

						case 5 : 
						case 6 : 
						case 7 : 
						case 8 : 
						case 9 : gpio->irq_line = EXTI9_5_IRQn; break;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2217      	movs	r2, #23
 8001e2c:	779a      	strb	r2, [r3, #30]
 8001e2e:	e003      	b.n	8001e38 <dev_gpio_init+0x1d8>
						case 10 : 
						case 11 : 
						case 12 : 
						case 13 : 
						case 14 : 
						case 15 : gpio->irq_line = EXTI15_10_IRQn; break;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2228      	movs	r2, #40	; 0x28
 8001e34:	779a      	strb	r2, [r3, #30]
 8001e36:	bf00      	nop
				}
			
				HAL_NVIC_SetPriority((IRQn_Type)gpio->irq_line, (init->irq_prior >> 4) & 0x0F, init->irq_prior & 0x0F);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	7f9b      	ldrb	r3, [r3, #30]
 8001e3c:	b258      	sxtb	r0, r3
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	7f5b      	ldrb	r3, [r3, #29]
 8001e42:	091b      	lsrs	r3, r3, #4
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	f003 010f 	and.w	r1, r3, #15
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	7f5b      	ldrb	r3, [r3, #29]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	461a      	mov	r2, r3
 8001e54:	f001 f953 	bl	80030fe <HAL_NVIC_SetPriority>
				HAL_NVIC_EnableIRQ((IRQn_Type)gpio->irq_line);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	7f9b      	ldrb	r3, [r3, #30]
 8001e5c:	b25b      	sxtb	r3, r3
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f001 f969 	bl	8003136 <HAL_NVIC_EnableIRQ>

			
				HAL_DRIVER_DEBUG(gpio->info.status_in, debug_printf("Init Gpio IRQ %s -, %d, %X\n\r", gpio->info.name, gpio->info.id, gpio->irq_line));		
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00e      	beq.n	8001e8a <dev_gpio_init+0x22a>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d009      	beq.n	8001e8a <dev_gpio_init+0x22a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6959      	ldr	r1, [r3, #20]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	791b      	ldrb	r3, [r3, #4]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	7f9b      	ldrb	r3, [r3, #30]
 8001e84:	4808      	ldr	r0, [pc, #32]	; (8001ea8 <dev_gpio_init+0x248>)
 8001e86:	f7ff f9f3 	bl	8001270 <debug_printf>
		}	

		return RET_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3720      	adds	r7, #32
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	080070b8 	.word	0x080070b8
 8001e98:	10110000 	.word	0x10110000
 8001e9c:	08007110 	.word	0x08007110
 8001ea0:	08007128 	.word	0x08007128
 8001ea4:	200000f0 	.word	0x200000f0
 8001ea8:	08007134 	.word	0x08007134

08001eac <dev_gpio_init_simp>:

UINT8 dev_gpio_init_simp(dev_gpio_t* gpio, UINT8 gpio_id, UINT16 gpio_pin, UINT8 gpio_mode)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08c      	sub	sp, #48	; 0x30
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	4608      	mov	r0, r1
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4603      	mov	r3, r0
 8001ebc:	70fb      	strb	r3, [r7, #3]
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	803b      	strh	r3, [r7, #0]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	70bb      	strb	r3, [r7, #2]
		dev_gpio_init_t init;
	
		init.info.id = gpio_id;
 8001ec6:	78fb      	ldrb	r3, [r7, #3]
 8001ec8:	733b      	strb	r3, [r7, #12]
		init.info.name = "";
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <dev_gpio_init_simp+0x5c>)
 8001ecc:	61fb      	str	r3, [r7, #28]
		init.info.status_in = 0; 
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
		init.info.status_out = 0; 
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]

		init.pin = gpio_pin;
 8001ed6:	883b      	ldrh	r3, [r7, #0]
 8001ed8:	84bb      	strh	r3, [r7, #36]	; 0x24
		init.mode = gpio_mode;
 8001eda:	78bb      	ldrb	r3, [r7, #2]
 8001edc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		init.speed = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		init.irq_cbf = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
		init.irq_mode = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	
		return dev_gpio_init(gpio, &init);
 8001ef0:	f107 030c 	add.w	r3, r7, #12
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff feb2 	bl	8001c60 <dev_gpio_init>
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3730      	adds	r7, #48	; 0x30
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	08007154 	.word	0x08007154

08001f0c <dev_gpio_set>:
{
		return 0; //HAL_GPIO_ReadPins(gpio->port, gpio->pin); 
}

void dev_gpio_set(dev_gpio_t* gpio, UINT8 val)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	70fb      	strb	r3, [r7, #3]
		if (val) HAL_GPIO_WritePin(gpio->port, gpio->pin, (GPIO_PinState)1); 
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d008      	beq.n	8001f30 <dev_gpio_set+0x24>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	8b9b      	ldrh	r3, [r3, #28]
 8001f26:	2201      	movs	r2, #1
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f001 fd45 	bl	80039b8 <HAL_GPIO_WritePin>
				else HAL_GPIO_WritePin(gpio->port, gpio->pin, (GPIO_PinState)0);
}
 8001f2e:	e007      	b.n	8001f40 <dev_gpio_set+0x34>
				else HAL_GPIO_WritePin(gpio->port, gpio->pin, (GPIO_PinState)0);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	8b9b      	ldrh	r3, [r3, #28]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f001 fd3c 	bl	80039b8 <HAL_GPIO_WritePin>
}
 8001f40:	bf00      	nop
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3304      	adds	r3, #4
 8001f64:	2280      	movs	r2, #128	; 0x80
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f004 f87b 	bl	8006064 <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3384      	adds	r3, #132	; 0x84
 8001f72:	2280      	movs	r2, #128	; 0x80
 8001f74:	2100      	movs	r1, #0
 8001f76:	4618      	mov	r0, r3
 8001f78:	f004 f874 	bl	8006064 <memset>
}
 8001f7c:	bf00      	nop
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	460b      	mov	r3, r1
 8001f92:	72fb      	strb	r3, [r7, #11]
 8001f94:	4613      	mov	r3, r2
 8001f96:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001f98:	893b      	ldrh	r3, [r7, #8]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f004 f843 	bl	8006028 <malloc>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	617b      	str	r3, [r7, #20]
    *payload = reg;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	7afa      	ldrb	r2, [r7, #11]
 8001faa:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d009      	beq.n	8001fc6 <max30102_write+0x42>
 8001fb2:	893b      	ldrh	r3, [r7, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d006      	beq.n	8001fc6 <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	893a      	ldrh	r2, [r7, #8]
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f004 f841 	bl	8006048 <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6818      	ldr	r0, [r3, #0]
 8001fca:	893b      	ldrh	r3, [r7, #8]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	220a      	movs	r2, #10
 8001fd2:	9200      	str	r2, [sp, #0]
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	21ae      	movs	r1, #174	; 0xae
 8001fd8:	f001 fe86 	bl	8003ce8 <HAL_I2C_Master_Transmit>
    free(payload);
 8001fdc:	6978      	ldr	r0, [r7, #20]
 8001fde:	f004 f82b 	bl	8006038 <free>
}
 8001fe2:	bf00      	nop
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b088      	sub	sp, #32
 8001fee:	af02      	add	r7, sp, #8
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	607a      	str	r2, [r7, #4]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	72fb      	strb	r3, [r7, #11]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 8001ffe:	7afb      	ldrb	r3, [r7, #11]
 8002000:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6818      	ldr	r0, [r3, #0]
 8002006:	f107 0217 	add.w	r2, r7, #23
 800200a:	230a      	movs	r3, #10
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	2301      	movs	r3, #1
 8002010:	21ae      	movs	r1, #174	; 0xae
 8002012:	f001 fe69 	bl	8003ce8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6818      	ldr	r0, [r3, #0]
 800201a:	893b      	ldrh	r3, [r7, #8]
 800201c:	220a      	movs	r2, #10
 800201e:	9200      	str	r2, [sp, #0]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	21ae      	movs	r1, #174	; 0xae
 8002024:	f001 ff5e 	bl	8003ee4 <HAL_I2C_Master_Receive>
}
 8002028:	bf00      	nop
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 8002038:	2340      	movs	r3, #64	; 0x40
 800203a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 800203c:	f107 020f 	add.w	r2, r7, #15
 8002040:	2301      	movs	r3, #1
 8002042:	2109      	movs	r1, #9
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff ff9d 	bl	8001f84 <max30102_write>
}
 800204a:	bf00      	nop
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b084      	sub	sp, #16
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	460b      	mov	r3, r1
 800205c:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8002062:	f107 020f 	add.w	r2, r7, #15
 8002066:	2301      	movs	r3, #1
 8002068:	2102      	movs	r1, #2
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff ffbd 	bl	8001fea <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002076:	b2db      	uxtb	r3, r3
 8002078:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	01db      	lsls	r3, r3, #7
 800207e:	b25a      	sxtb	r2, r3
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	b25b      	sxtb	r3, r3
 8002084:	4313      	orrs	r3, r2
 8002086:	b25b      	sxtb	r3, r3
 8002088:	b2db      	uxtb	r3, r3
 800208a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 800208c:	f107 020f 	add.w	r2, r7, #15
 8002090:	2301      	movs	r3, #1
 8002092:	2102      	movs	r1, #2
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff ff75 	bl	8001f84 <max30102_write>
}
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	460b      	mov	r3, r1
 80020ac:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 80020bc:	f107 020f 	add.w	r2, r7, #15
 80020c0:	2301      	movs	r3, #1
 80020c2:	2103      	movs	r1, #3
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ff5d 	bl	8001f84 <max30102_write>
}
 80020ca:	bf00      	nop
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b084      	sub	sp, #16
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	460b      	mov	r3, r1
 80020dc:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 80020de:	78fb      	ldrb	r3, [r7, #3]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 80020ec:	f107 020f 	add.w	r2, r7, #15
 80020f0:	2301      	movs	r3, #1
 80020f2:	2121      	movs	r1, #33	; 0x21
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff ff45 	bl	8001f84 <max30102_write>
}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <max30102_interrupt_handler>:
 * @brief Read interrupt status registers (0x00 and 0x01) and perform corresponding tasks.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_interrupt_handler(max30102_t *obj)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
	debug_printf("handler\n\r");
 8002124:	4823      	ldr	r0, [pc, #140]	; (80021b4 <max30102_interrupt_handler+0x98>)
 8002126:	f7ff f8a3 	bl	8001270 <debug_printf>
    uint8_t reg[2] = {0x00};
 800212a:	2300      	movs	r3, #0
 800212c:	81bb      	strh	r3, [r7, #12]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    max30102_read(obj, MAX30102_INTERRUPT_STATUS_1, reg, 2);
 800212e:	f107 020c 	add.w	r2, r7, #12
 8002132:	2302      	movs	r3, #2
 8002134:	2100      	movs	r1, #0
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff ff57 	bl	8001fea <max30102_read>

    if ((reg[0] >> MAX30102_INTERRUPT_A_FULL) & 0x01)
 800213c:	7b3b      	ldrb	r3, [r7, #12]
 800213e:	09db      	lsrs	r3, r3, #7
 8002140:	b2db      	uxtb	r3, r3
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d005      	beq.n	8002156 <max30102_interrupt_handler+0x3a>
    {
    	debug_printf("1\n\r");
 800214a:	481b      	ldr	r0, [pc, #108]	; (80021b8 <max30102_interrupt_handler+0x9c>)
 800214c:	f7ff f890 	bl	8001270 <debug_printf>
        // FIFO almost full
        max30102_read_fifo(obj);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f96e 	bl	8002432 <max30102_read_fifo>
    }

    if ((reg[0] >> MAX30102_INTERRUPT_PPG_RDY) & 0x01)
 8002156:	7b3b      	ldrb	r3, [r7, #12]
 8002158:	099b      	lsrs	r3, r3, #6
 800215a:	b2db      	uxtb	r3, r3
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <max30102_interrupt_handler+0x4e>
    {
    	debug_printf("2\n\r");
 8002164:	4815      	ldr	r0, [pc, #84]	; (80021bc <max30102_interrupt_handler+0xa0>)
 8002166:	f7ff f883 	bl	8001270 <debug_printf>
        // New FIFO data ready
    }

    if ((reg[0] >> MAX30102_INTERRUPT_ALC_OVF) & 0x01)
 800216a:	7b3b      	ldrb	r3, [r7, #12]
 800216c:	095b      	lsrs	r3, r3, #5
 800216e:	b2db      	uxtb	r3, r3
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <max30102_interrupt_handler+0x62>
    {
    	debug_printf("3\n\r");
 8002178:	4811      	ldr	r0, [pc, #68]	; (80021c0 <max30102_interrupt_handler+0xa4>)
 800217a:	f7ff f879 	bl	8001270 <debug_printf>
        // Ambient light overflow
    }

    if ((reg[1] >> MAX30102_INTERRUPT_DIE_TEMP_RDY) & 0x01)
 800217e:	7b7b      	ldrb	r3, [r7, #13]
 8002180:	085b      	lsrs	r3, r3, #1
 8002182:	b2db      	uxtb	r3, r3
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00a      	beq.n	80021a2 <max30102_interrupt_handler+0x86>
    {
    	debug_printf("4\n\r");
 800218c:	480d      	ldr	r0, [pc, #52]	; (80021c4 <max30102_interrupt_handler+0xa8>)
 800218e:	f7ff f86f 	bl	8001270 <debug_printf>
        // Temperature data ready
        int8_t temp_int;
        uint8_t temp_frac;
        max30102_read_temp(obj, &temp_int, &temp_frac);
 8002192:	f107 020a 	add.w	r2, r7, #10
 8002196:	f107 030b 	add.w	r3, r7, #11
 800219a:	4619      	mov	r1, r3
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f9af 	bl	8002500 <max30102_read_temp>
        // float temp = temp_int + 0.0625f * temp_frac;
    }

    // Reset interrupt flag
    obj->_interrupt_flag = 0;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	08007184 	.word	0x08007184
 80021b8:	08007190 	.word	0x08007190
 80021bc:	08007194 	.word	0x08007194
 80021c0:	08007198 	.word	0x08007198
 80021c4:	0800719c 	.word	0x0800719c

080021c8 <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 80021d4:	f107 020f 	add.w	r2, r7, #15
 80021d8:	2301      	movs	r3, #1
 80021da:	2109      	movs	r1, #9
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff ff04 	bl	8001fea <max30102_read>
    config = (config & 0xf8) | mode;
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
 80021e4:	b25b      	sxtb	r3, r3
 80021e6:	f023 0307 	bic.w	r3, r3, #7
 80021ea:	b25a      	sxtb	r2, r3
 80021ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	b25b      	sxtb	r3, r3
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 80021f8:	f107 020f 	add.w	r2, r7, #15
 80021fc:	2301      	movs	r3, #1
 80021fe:	2109      	movs	r1, #9
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff febf 	bl	8001f84 <max30102_write>
    max30102_clear_fifo(obj);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f8f4 	bl	80023f4 <max30102_clear_fifo>
}
 800220c:	bf00      	nop
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8002220:	f107 020f 	add.w	r2, r7, #15
 8002224:	2301      	movs	r3, #1
 8002226:	210a      	movs	r1, #10
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff fede 	bl	8001fea <max30102_read>
    config = (config & 0x63) << MAX30102_SPO2_SR;
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	b2db      	uxtb	r3, r3
 8002234:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002238:	b2db      	uxtb	r3, r3
 800223a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800223c:	f107 020f 	add.w	r2, r7, #15
 8002240:	2301      	movs	r3, #1
 8002242:	210a      	movs	r1, #10
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff fe9d 	bl	8001f84 <max30102_write>
}
 800224a:	bf00      	nop
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b084      	sub	sp, #16
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	460b      	mov	r3, r1
 800225c:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800225e:	f107 020f 	add.w	r2, r7, #15
 8002262:	2301      	movs	r3, #1
 8002264:	210a      	movs	r1, #10
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff febf 	bl	8001fea <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	b25b      	sxtb	r3, r3
 8002270:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8002274:	b25a      	sxtb	r2, r3
 8002276:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800227a:	4313      	orrs	r3, r2
 800227c:	b25b      	sxtb	r3, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8002282:	f107 020f 	add.w	r2, r7, #15
 8002286:	2301      	movs	r3, #1
 8002288:	210a      	movs	r1, #10
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff fe7a 	bl	8001f84 <max30102_write>
}
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80022a4:	f107 020f 	add.w	r2, r7, #15
 80022a8:	2301      	movs	r3, #1
 80022aa:	210a      	movs	r1, #10
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff fe9c 	bl	8001fea <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
 80022b4:	b25b      	sxtb	r3, r3
 80022b6:	f003 031f 	and.w	r3, r3, #31
 80022ba:	b25a      	sxtb	r2, r3
 80022bc:	78fb      	ldrb	r3, [r7, #3]
 80022be:	015b      	lsls	r3, r3, #5
 80022c0:	b25b      	sxtb	r3, r3
 80022c2:	4313      	orrs	r3, r2
 80022c4:	b25b      	sxtb	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80022ca:	f107 020f 	add.w	r2, r7, #15
 80022ce:	2301      	movs	r3, #1
 80022d0:	210a      	movs	r1, #10
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff fe56 	bl	8001f84 <max30102_write>
}
 80022d8:	bf00      	nop
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 80022ea:	6838      	ldr	r0, [r7, #0]
 80022ec:	f7fe f894 	bl	8000418 <__aeabi_f2d>
 80022f0:	a30d      	add	r3, pc, #52	; (adr r3, 8002328 <max30102_set_led_current_1+0x48>)
 80022f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f6:	f7fe fa11 	bl	800071c <__aeabi_ddiv>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	4610      	mov	r0, r2
 8002300:	4619      	mov	r1, r3
 8002302:	f7fe fbb9 	bl	8000a78 <__aeabi_d2uiz>
 8002306:	4603      	mov	r3, r0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 800230c:	f107 020f 	add.w	r2, r7, #15
 8002310:	2301      	movs	r3, #1
 8002312:	210c      	movs	r1, #12
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff fe35 	bl	8001f84 <max30102_write>
}
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	f3af 8000 	nop.w
 8002328:	9999999a 	.word	0x9999999a
 800232c:	3fc99999 	.word	0x3fc99999

08002330 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 800233a:	6838      	ldr	r0, [r7, #0]
 800233c:	f7fe f86c 	bl	8000418 <__aeabi_f2d>
 8002340:	a30d      	add	r3, pc, #52	; (adr r3, 8002378 <max30102_set_led_current_2+0x48>)
 8002342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002346:	f7fe f9e9 	bl	800071c <__aeabi_ddiv>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4610      	mov	r0, r2
 8002350:	4619      	mov	r1, r3
 8002352:	f7fe fb91 	bl	8000a78 <__aeabi_d2uiz>
 8002356:	4603      	mov	r3, r0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 800235c:	f107 020f 	add.w	r2, r7, #15
 8002360:	2301      	movs	r3, #1
 8002362:	210d      	movs	r1, #13
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff fe0d 	bl	8001f84 <max30102_write>
}
 800236a:	bf00      	nop
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	f3af 8000 	nop.w
 8002378:	9999999a 	.word	0x9999999a
 800237c:	3fc99999 	.word	0x3fc99999

08002380 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	4608      	mov	r0, r1
 800238a:	4611      	mov	r1, r2
 800238c:	461a      	mov	r2, r3
 800238e:	4603      	mov	r3, r0
 8002390:	70fb      	strb	r3, [r7, #3]
 8002392:	460b      	mov	r3, r1
 8002394:	70bb      	strb	r3, [r7, #2]
 8002396:	4613      	mov	r3, r2
 8002398:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 800239a:	2300      	movs	r3, #0
 800239c:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	015b      	lsls	r3, r3, #5
 80023a2:	b25a      	sxtb	r2, r3
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	b25b      	sxtb	r3, r3
 80023a8:	4313      	orrs	r3, r2
 80023aa:	b25b      	sxtb	r3, r3
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 80023b0:	78bb      	ldrb	r3, [r7, #2]
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	b25b      	sxtb	r3, r3
 80023b6:	f003 0310 	and.w	r3, r3, #16
 80023ba:	b25a      	sxtb	r2, r3
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	b25b      	sxtb	r3, r3
 80023c0:	4313      	orrs	r3, r2
 80023c2:	b25b      	sxtb	r3, r3
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 80023c8:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80023cc:	f003 030f 	and.w	r3, r3, #15
 80023d0:	b25a      	sxtb	r2, r3
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	b25b      	sxtb	r3, r3
 80023d6:	4313      	orrs	r3, r2
 80023d8:	b25b      	sxtb	r3, r3
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 80023de:	f107 020f 	add.w	r2, r7, #15
 80023e2:	2301      	movs	r3, #1
 80023e4:	2108      	movs	r1, #8
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff fdcc 	bl	8001f84 <max30102_write>
}
 80023ec:	bf00      	nop
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 80023fc:	2300      	movs	r3, #0
 80023fe:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 8002400:	f107 020f 	add.w	r2, r7, #15
 8002404:	2303      	movs	r3, #3
 8002406:	2104      	movs	r1, #4
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff fdbb 	bl	8001f84 <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 800240e:	f107 020f 	add.w	r2, r7, #15
 8002412:	2303      	movs	r3, #3
 8002414:	2106      	movs	r1, #6
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7ff fdb4 	bl	8001f84 <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 800241c:	f107 020f 	add.w	r2, r7, #15
 8002420:	2303      	movs	r3, #3
 8002422:	2105      	movs	r1, #5
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff fdad 	bl	8001f84 <max30102_write>
}
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b088      	sub	sp, #32
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	74fb      	strb	r3, [r7, #19]
 800243e:	2300      	movs	r3, #0
 8002440:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 8002442:	f107 0213 	add.w	r2, r7, #19
 8002446:	2301      	movs	r3, #1
 8002448:	2104      	movs	r1, #4
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff fdcd 	bl	8001fea <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 8002450:	f107 0212 	add.w	r2, r7, #18
 8002454:	2301      	movs	r3, #1
 8002456:	2106      	movs	r1, #6
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff fdc6 	bl	8001fea <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 800245e:	7cfa      	ldrb	r2, [r7, #19]
 8002460:	7cbb      	ldrb	r3, [r7, #18]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 8002468:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800246c:	2b00      	cmp	r3, #0
 800246e:	dc03      	bgt.n	8002478 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 8002470:	7ffb      	ldrb	r3, [r7, #31]
 8002472:	3320      	adds	r3, #32
 8002474:	b2db      	uxtb	r3, r3
 8002476:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 8002478:	2300      	movs	r3, #0
 800247a:	77bb      	strb	r3, [r7, #30]
 800247c:	e035      	b.n	80024ea <max30102_read_fifo+0xb8>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 800247e:	f107 020c 	add.w	r2, r7, #12
 8002482:	2306      	movs	r3, #6
 8002484:	2107      	movs	r1, #7
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff fdaf 	bl	8001fea <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 800248c:	7b3b      	ldrb	r3, [r7, #12]
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	461a      	mov	r2, r3
 8002492:	7b7b      	ldrb	r3, [r7, #13]
 8002494:	021b      	lsls	r3, r3, #8
 8002496:	4313      	orrs	r3, r2
 8002498:	7bba      	ldrb	r2, [r7, #14]
 800249a:	4313      	orrs	r3, r2
 800249c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80024a0:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	041b      	lsls	r3, r3, #16
 80024a6:	461a      	mov	r2, r3
 80024a8:	7c3b      	ldrb	r3, [r7, #16]
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	4313      	orrs	r3, r2
 80024ae:	7c7a      	ldrb	r2, [r7, #17]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80024b6:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 80024b8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 80024c6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	3320      	adds	r3, #32
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 80024d6:	6979      	ldr	r1, [r7, #20]
 80024d8:	69b8      	ldr	r0, [r7, #24]
 80024da:	f000 f827 	bl	800252c <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 80024de:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	3301      	adds	r3, #1
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	77bb      	strb	r3, [r7, #30]
 80024ea:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80024ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	dbc3      	blt.n	800247e <max30102_read_fifo+0x4c>
    }
}
 80024f6:	bf00      	nop
 80024f8:	bf00      	nop
 80024fa:	3720      	adds	r7, #32
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <max30102_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30102_read_temp(max30102_t *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
    max30102_read(obj, MAX30102_DIE_TINT, (uint8_t *)temp_int, 1);
 800250c:	2301      	movs	r3, #1
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	211f      	movs	r1, #31
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f7ff fd69 	bl	8001fea <max30102_read>
    max30102_read(obj, MAX30102_DIE_TFRAC, temp_frac, 1);
 8002518:	2301      	movs	r3, #1
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	2120      	movs	r1, #32
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f7ff fd63 	bl	8001fea <max30102_read>
}
 8002524:	bf00      	nop
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <max30102_plot>:
uint8_t tx_buffer[128];
//uint8_t data[128];

// Override plot function
void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
    // printf("ir:%u\n", ir_sample);                  // Print IR only
    // printf("r:%u\n", red_sample);                  // Print Red only
	debug_printf("ir:%d,r:%d\n", ir_sample, red_sample);    // Print IR and Red
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4803      	ldr	r0, [pc, #12]	; (8002548 <max30102_plot+0x1c>)
 800253c:	f7fe fe98 	bl	8001270 <debug_printf>
}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	080071a0 	.word	0x080071a0

0800254c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b090      	sub	sp, #64	; 0x40
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002552:	f000 fc77 	bl	8002e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002556:	f000 f8bb 	bl	80026d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800255a:	f000 f9ab 	bl	80028b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800255e:	f000 f983 	bl	8002868 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002562:	f000 f957 	bl	8002814 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002566:	f000 f8f9 	bl	800275c <MX_I2C1_Init>
  MX_I2C2_Init();
 800256a:	f000 f925 	bl	80027b8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  dev_trace_init_t trace_init;
  trace_init.mosi.port = GPIO_PA;
 800256e:	2300      	movs	r3, #0
 8002570:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  trace_init.sck. port = GPIO_PA;
 8002574:	2300      	movs	r3, #0
 8002576:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  trace_init.nss.port = GPIO_PA;
 800257a:	2300      	movs	r3, #0
 800257c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  trace_init.mosi.pin =BB(0, b00000001);
 8002580:	2301      	movs	r3, #1
 8002582:	86bb      	strh	r3, [r7, #52]	; 0x34
  trace_init.sck.pin = BB(0, b00000010);
 8002584:	2302      	movs	r3, #2
 8002586:	873b      	strh	r3, [r7, #56]	; 0x38
  trace_init.nss.pin = BB(0, b00000100);
 8002588:	2304      	movs	r3, #4
 800258a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  dev_trace_init(&trace_init);
 800258c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002590:	4618      	mov	r0, r3
 8002592:	f7fe fc19 	bl	8000dc8 <dev_trace_init>

  debug_printf("\r\n\n\n\n******HUMAN HEALTH MONITORING SENSOR******\r\n");
 8002596:	4846      	ldr	r0, [pc, #280]	; (80026b0 <main+0x164>)
 8002598:	f7fe fe6a 	bl	8001270 <debug_printf>

  uint32_t serial_id = 1717;
 800259c:	f240 63b5 	movw	r3, #1717	; 0x6b5
 80025a0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t temperature = 3755;
 80025a2:	f640 63ab 	movw	r3, #3755	; 0xeab
 80025a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pressure = 140000;
 80025a8:	4b42      	ldr	r3, [pc, #264]	; (80026b4 <main+0x168>)
 80025aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t heart_rate = 55555;
 80025ac:	f64d 1303 	movw	r3, #55555	; 0xd903
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t saturation = 7777;
 80025b2:	f641 6361 	movw	r3, #7777	; 0x1e61
 80025b6:	623b      	str	r3, [r7, #32]


  int data[] = {START_MESSAGE, serial_id, temperature, pressure, heart_rate, saturation, END_MESSAGE};
 80025b8:	23aa      	movs	r3, #170	; 0xaa
 80025ba:	607b      	str	r3, [r7, #4]
 80025bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	61bb      	str	r3, [r7, #24]
 80025d0:	2355      	movs	r3, #85	; 0x55
 80025d2:	61fb      	str	r3, [r7, #28]
  tx_buffer[0] = START_MESSAGE;
 80025d4:	4b38      	ldr	r3, [pc, #224]	; (80026b8 <main+0x16c>)
 80025d6:	22aa      	movs	r2, #170	; 0xaa
 80025d8:	701a      	strb	r2, [r3, #0]
 80025da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  memcpy(&tx_buffer[1], &serial_id, 4);
 80025dc:	4a36      	ldr	r2, [pc, #216]	; (80026b8 <main+0x16c>)
 80025de:	f8c2 3001 	str.w	r3, [r2, #1]
 80025e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  memcpy(&tx_buffer[5], &temperature, 4);
 80025e4:	4a34      	ldr	r2, [pc, #208]	; (80026b8 <main+0x16c>)
 80025e6:	f8c2 3005 	str.w	r3, [r2, #5]
 80025ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
  memcpy(&tx_buffer[9], &pressure, 4);
 80025ec:	4a32      	ldr	r2, [pc, #200]	; (80026b8 <main+0x16c>)
 80025ee:	f8c2 3009 	str.w	r3, [r2, #9]
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  memcpy(&tx_buffer[13], &heart_rate, 4);
 80025f4:	4a30      	ldr	r2, [pc, #192]	; (80026b8 <main+0x16c>)
 80025f6:	f8c2 300d 	str.w	r3, [r2, #13]
 80025fa:	6a3b      	ldr	r3, [r7, #32]
  memcpy(&tx_buffer[17], &saturation, 4);
 80025fc:	4a2e      	ldr	r2, [pc, #184]	; (80026b8 <main+0x16c>)
 80025fe:	f8c2 3011 	str.w	r3, [r2, #17]
  tx_buffer[21] = END_MESSAGE;
 8002602:	4b2d      	ldr	r3, [pc, #180]	; (80026b8 <main+0x16c>)
 8002604:	2255      	movs	r2, #85	; 0x55
 8002606:	755a      	strb	r2, [r3, #21]

  max30102_init(&max30102, &hi2c1);
 8002608:	492c      	ldr	r1, [pc, #176]	; (80026bc <main+0x170>)
 800260a:	482d      	ldr	r0, [pc, #180]	; (80026c0 <main+0x174>)
 800260c:	f7ff fc9c 	bl	8001f48 <max30102_init>
//  max30102_on_interrupt(&max30102);

  max30102_reset(&max30102);
 8002610:	482b      	ldr	r0, [pc, #172]	; (80026c0 <main+0x174>)
 8002612:	f7ff fd0d 	bl	8002030 <max30102_reset>
   max30102_clear_fifo(&max30102);
 8002616:	482a      	ldr	r0, [pc, #168]	; (80026c0 <main+0x174>)
 8002618:	f7ff feec 	bl	80023f4 <max30102_clear_fifo>


   // FIFO configurations
     max30102_set_fifo_config(&max30102, max30102_smp_ave_8, 1, 7);
 800261c:	2307      	movs	r3, #7
 800261e:	2201      	movs	r2, #1
 8002620:	2103      	movs	r1, #3
 8002622:	4827      	ldr	r0, [pc, #156]	; (80026c0 <main+0x174>)
 8002624:	f7ff feac 	bl	8002380 <max30102_set_fifo_config>
     // LED configurations
     max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 8002628:	2101      	movs	r1, #1
 800262a:	4825      	ldr	r0, [pc, #148]	; (80026c0 <main+0x174>)
 800262c:	f7ff fe11 	bl	8002252 <max30102_set_led_pulse_width>
     max30102_set_adc_resolution(&max30102, max30102_adc_2048);
 8002630:	2100      	movs	r1, #0
 8002632:	4823      	ldr	r0, [pc, #140]	; (80026c0 <main+0x174>)
 8002634:	f7ff fe30 	bl	8002298 <max30102_set_adc_resolution>
     max30102_set_sampling_rate(&max30102, max30102_sr_800);
 8002638:	2104      	movs	r1, #4
 800263a:	4821      	ldr	r0, [pc, #132]	; (80026c0 <main+0x174>)
 800263c:	f7ff fdea 	bl	8002214 <max30102_set_sampling_rate>
     max30102_set_led_current_1(&max30102, 6.2);
 8002640:	4920      	ldr	r1, [pc, #128]	; (80026c4 <main+0x178>)
 8002642:	481f      	ldr	r0, [pc, #124]	; (80026c0 <main+0x174>)
 8002644:	f7ff fe4c 	bl	80022e0 <max30102_set_led_current_1>
     max30102_set_led_current_2(&max30102, 6.2);
 8002648:	491e      	ldr	r1, [pc, #120]	; (80026c4 <main+0x178>)
 800264a:	481d      	ldr	r0, [pc, #116]	; (80026c0 <main+0x174>)
 800264c:	f7ff fe70 	bl	8002330 <max30102_set_led_current_2>

     // Enter SpO2 mode
     max30102_set_mode(&max30102, max30102_spo2);
 8002650:	2103      	movs	r1, #3
 8002652:	481b      	ldr	r0, [pc, #108]	; (80026c0 <main+0x174>)
 8002654:	f7ff fdb8 	bl	80021c8 <max30102_set_mode>

     // Enable FIFO_A_FULL interrupt
     max30102_set_a_full(&max30102, 1);
 8002658:	2101      	movs	r1, #1
 800265a:	4819      	ldr	r0, [pc, #100]	; (80026c0 <main+0x174>)
 800265c:	f7ff fcf9 	bl	8002052 <max30102_set_a_full>
     // Enable die temperature measurement
     max30102_set_die_temp_en(&max30102, 1);
 8002660:	2101      	movs	r1, #1
 8002662:	4817      	ldr	r0, [pc, #92]	; (80026c0 <main+0x174>)
 8002664:	f7ff fd35 	bl	80020d2 <max30102_set_die_temp_en>
     // Enable DIE_TEMP_RDY interrupt
     max30102_set_die_temp_rdy(&max30102, 1);
 8002668:	2101      	movs	r1, #1
 800266a:	4815      	ldr	r0, [pc, #84]	; (80026c0 <main+0x174>)
 800266c:	f7ff fd19 	bl	80020a2 <max30102_set_die_temp_rdy>

     uint8_t en_reg[2] = {0};
 8002670:	2300      	movs	r3, #0
 8002672:	803b      	strh	r3, [r7, #0]
     max30102_read(&max30102, 0x00, en_reg, 1);
 8002674:	463a      	mov	r2, r7
 8002676:	2301      	movs	r3, #1
 8002678:	2100      	movs	r1, #0
 800267a:	4811      	ldr	r0, [pc, #68]	; (80026c0 <main+0x174>)
 800267c:	f7ff fcb5 	bl	8001fea <max30102_read>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13);
 8002680:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002684:	4810      	ldr	r0, [pc, #64]	; (80026c8 <main+0x17c>)
 8002686:	f001 f9af 	bl	80039e8 <HAL_GPIO_TogglePin>
	  HAL_Delay (1000);   /* Insert delay 100 ms */
 800268a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800268e:	f000 fc3b 	bl	8002f08 <HAL_Delay>

//	  HAL_UART_Transmit_DMA(&huart1, tx_buffer, sizeof(tx_buffer));
//	  HAL_Delay(1000);


	  HAL_UART_Transmit_DMA(&huart1, tx_buffer, 22);
 8002692:	2216      	movs	r2, #22
 8002694:	4908      	ldr	r1, [pc, #32]	; (80026b8 <main+0x16c>)
 8002696:	480d      	ldr	r0, [pc, #52]	; (80026cc <main+0x180>)
 8002698:	f002 fe76 	bl	8005388 <HAL_UART_Transmit_DMA>
	  HAL_Delay(1000);
 800269c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026a0:	f000 fc32 	bl	8002f08 <HAL_Delay>

	  // If interrupt flag is active
//	  	  if (max30102_has_interrupt(&max30102))
//	  	  {
	  		// Run interrupt handler to read FIFO
	  		max30102_interrupt_handler(&max30102);
 80026a4:	4806      	ldr	r0, [pc, #24]	; (80026c0 <main+0x174>)
 80026a6:	f7ff fd39 	bl	800211c <max30102_interrupt_handler>
	  		get_temp();
 80026aa:	f000 f973 	bl	8002994 <get_temp>
	  HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13);
 80026ae:	e7e7      	b.n	8002680 <main+0x134>
 80026b0:	080071ac 	.word	0x080071ac
 80026b4:	000222e0 	.word	0x000222e0
 80026b8:	200002a8 	.word	0x200002a8
 80026bc:	20000130 	.word	0x20000130
 80026c0:	20000328 	.word	0x20000328
 80026c4:	40c66666 	.word	0x40c66666
 80026c8:	40011000 	.word	0x40011000
 80026cc:	200001d8 	.word	0x200001d8

080026d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b090      	sub	sp, #64	; 0x40
 80026d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026d6:	f107 0318 	add.w	r3, r7, #24
 80026da:	2228      	movs	r2, #40	; 0x28
 80026dc:	2100      	movs	r1, #0
 80026de:	4618      	mov	r0, r3
 80026e0:	f003 fcc0 	bl	8006064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	609a      	str	r2, [r3, #8]
 80026ee:	60da      	str	r2, [r3, #12]
 80026f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026f2:	2301      	movs	r3, #1
 80026f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80026fc:	2300      	movs	r3, #0
 80026fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002700:	2301      	movs	r3, #1
 8002702:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002704:	2302      	movs	r3, #2
 8002706:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002708:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800270c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800270e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002712:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002714:	f107 0318 	add.w	r3, r7, #24
 8002718:	4618      	mov	r0, r3
 800271a:	f002 f9d5 	bl	8004ac8 <HAL_RCC_OscConfig>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002724:	f000 f99c 	bl	8002a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002728:	230f      	movs	r3, #15
 800272a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800272c:	2302      	movs	r3, #2
 800272e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800273e:	1d3b      	adds	r3, r7, #4
 8002740:	2102      	movs	r1, #2
 8002742:	4618      	mov	r0, r3
 8002744:	f002 fc42 	bl	8004fcc <HAL_RCC_ClockConfig>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800274e:	f000 f987 	bl	8002a60 <Error_Handler>
  }
}
 8002752:	bf00      	nop
 8002754:	3740      	adds	r7, #64	; 0x40
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002760:	4b12      	ldr	r3, [pc, #72]	; (80027ac <MX_I2C1_Init+0x50>)
 8002762:	4a13      	ldr	r2, [pc, #76]	; (80027b0 <MX_I2C1_Init+0x54>)
 8002764:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002766:	4b11      	ldr	r3, [pc, #68]	; (80027ac <MX_I2C1_Init+0x50>)
 8002768:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <MX_I2C1_Init+0x58>)
 800276a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800276c:	4b0f      	ldr	r3, [pc, #60]	; (80027ac <MX_I2C1_Init+0x50>)
 800276e:	2200      	movs	r2, #0
 8002770:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002772:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <MX_I2C1_Init+0x50>)
 8002774:	2200      	movs	r2, #0
 8002776:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <MX_I2C1_Init+0x50>)
 800277a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800277e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002780:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <MX_I2C1_Init+0x50>)
 8002782:	2200      	movs	r2, #0
 8002784:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002786:	4b09      	ldr	r3, [pc, #36]	; (80027ac <MX_I2C1_Init+0x50>)
 8002788:	2200      	movs	r2, #0
 800278a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800278c:	4b07      	ldr	r3, [pc, #28]	; (80027ac <MX_I2C1_Init+0x50>)
 800278e:	2200      	movs	r2, #0
 8002790:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002792:	4b06      	ldr	r3, [pc, #24]	; (80027ac <MX_I2C1_Init+0x50>)
 8002794:	2200      	movs	r2, #0
 8002796:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002798:	4804      	ldr	r0, [pc, #16]	; (80027ac <MX_I2C1_Init+0x50>)
 800279a:	f001 f961 	bl	8003a60 <HAL_I2C_Init>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80027a4:	f000 f95c 	bl	8002a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027a8:	bf00      	nop
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20000130 	.word	0x20000130
 80027b0:	40005400 	.word	0x40005400
 80027b4:	000186a0 	.word	0x000186a0

080027b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80027bc:	4b12      	ldr	r3, [pc, #72]	; (8002808 <MX_I2C2_Init+0x50>)
 80027be:	4a13      	ldr	r2, [pc, #76]	; (800280c <MX_I2C2_Init+0x54>)
 80027c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80027c2:	4b11      	ldr	r3, [pc, #68]	; (8002808 <MX_I2C2_Init+0x50>)
 80027c4:	4a12      	ldr	r2, [pc, #72]	; (8002810 <MX_I2C2_Init+0x58>)
 80027c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027c8:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <MX_I2C2_Init+0x50>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80027ce:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <MX_I2C2_Init+0x50>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <MX_I2C2_Init+0x50>)
 80027d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027da:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027dc:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <MX_I2C2_Init+0x50>)
 80027de:	2200      	movs	r2, #0
 80027e0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80027e2:	4b09      	ldr	r3, [pc, #36]	; (8002808 <MX_I2C2_Init+0x50>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027e8:	4b07      	ldr	r3, [pc, #28]	; (8002808 <MX_I2C2_Init+0x50>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027ee:	4b06      	ldr	r3, [pc, #24]	; (8002808 <MX_I2C2_Init+0x50>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80027f4:	4804      	ldr	r0, [pc, #16]	; (8002808 <MX_I2C2_Init+0x50>)
 80027f6:	f001 f933 	bl	8003a60 <HAL_I2C_Init>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002800:	f000 f92e 	bl	8002a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002804:	bf00      	nop
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20000184 	.word	0x20000184
 800280c:	40005800 	.word	0x40005800
 8002810:	000186a0 	.word	0x000186a0

08002814 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002818:	4b11      	ldr	r3, [pc, #68]	; (8002860 <MX_USART1_UART_Init+0x4c>)
 800281a:	4a12      	ldr	r2, [pc, #72]	; (8002864 <MX_USART1_UART_Init+0x50>)
 800281c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800281e:	4b10      	ldr	r3, [pc, #64]	; (8002860 <MX_USART1_UART_Init+0x4c>)
 8002820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002824:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002826:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <MX_USART1_UART_Init+0x4c>)
 8002828:	2200      	movs	r2, #0
 800282a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800282c:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <MX_USART1_UART_Init+0x4c>)
 800282e:	2200      	movs	r2, #0
 8002830:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002832:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <MX_USART1_UART_Init+0x4c>)
 8002834:	2200      	movs	r2, #0
 8002836:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002838:	4b09      	ldr	r3, [pc, #36]	; (8002860 <MX_USART1_UART_Init+0x4c>)
 800283a:	220c      	movs	r2, #12
 800283c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800283e:	4b08      	ldr	r3, [pc, #32]	; (8002860 <MX_USART1_UART_Init+0x4c>)
 8002840:	2200      	movs	r2, #0
 8002842:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <MX_USART1_UART_Init+0x4c>)
 8002846:	2200      	movs	r2, #0
 8002848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800284a:	4805      	ldr	r0, [pc, #20]	; (8002860 <MX_USART1_UART_Init+0x4c>)
 800284c:	f002 fd4c 	bl	80052e8 <HAL_UART_Init>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002856:	f000 f903 	bl	8002a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	200001d8 	.word	0x200001d8
 8002864:	40013800 	.word	0x40013800

08002868 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800286e:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <MX_DMA_Init+0x48>)
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	4a0f      	ldr	r2, [pc, #60]	; (80028b0 <MX_DMA_Init+0x48>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	6153      	str	r3, [r2, #20]
 800287a:	4b0d      	ldr	r3, [pc, #52]	; (80028b0 <MX_DMA_Init+0x48>)
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	607b      	str	r3, [r7, #4]
 8002884:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002886:	2200      	movs	r2, #0
 8002888:	2100      	movs	r1, #0
 800288a:	200e      	movs	r0, #14
 800288c:	f000 fc37 	bl	80030fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002890:	200e      	movs	r0, #14
 8002892:	f000 fc50 	bl	8003136 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002896:	2200      	movs	r2, #0
 8002898:	2100      	movs	r1, #0
 800289a:	200f      	movs	r0, #15
 800289c:	f000 fc2f 	bl	80030fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80028a0:	200f      	movs	r0, #15
 80028a2:	f000 fc48 	bl	8003136 <HAL_NVIC_EnableIRQ>

}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000

080028b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ba:	f107 0310 	add.w	r3, r7, #16
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	605a      	str	r2, [r3, #4]
 80028c4:	609a      	str	r2, [r3, #8]
 80028c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028c8:	4b2e      	ldr	r3, [pc, #184]	; (8002984 <MX_GPIO_Init+0xd0>)
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	4a2d      	ldr	r2, [pc, #180]	; (8002984 <MX_GPIO_Init+0xd0>)
 80028ce:	f043 0310 	orr.w	r3, r3, #16
 80028d2:	6193      	str	r3, [r2, #24]
 80028d4:	4b2b      	ldr	r3, [pc, #172]	; (8002984 <MX_GPIO_Init+0xd0>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028e0:	4b28      	ldr	r3, [pc, #160]	; (8002984 <MX_GPIO_Init+0xd0>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	4a27      	ldr	r2, [pc, #156]	; (8002984 <MX_GPIO_Init+0xd0>)
 80028e6:	f043 0320 	orr.w	r3, r3, #32
 80028ea:	6193      	str	r3, [r2, #24]
 80028ec:	4b25      	ldr	r3, [pc, #148]	; (8002984 <MX_GPIO_Init+0xd0>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f8:	4b22      	ldr	r3, [pc, #136]	; (8002984 <MX_GPIO_Init+0xd0>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	4a21      	ldr	r2, [pc, #132]	; (8002984 <MX_GPIO_Init+0xd0>)
 80028fe:	f043 0308 	orr.w	r3, r3, #8
 8002902:	6193      	str	r3, [r2, #24]
 8002904:	4b1f      	ldr	r3, [pc, #124]	; (8002984 <MX_GPIO_Init+0xd0>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	f003 0308 	and.w	r3, r3, #8
 800290c:	607b      	str	r3, [r7, #4]
 800290e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002910:	4b1c      	ldr	r3, [pc, #112]	; (8002984 <MX_GPIO_Init+0xd0>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	4a1b      	ldr	r2, [pc, #108]	; (8002984 <MX_GPIO_Init+0xd0>)
 8002916:	f043 0304 	orr.w	r3, r3, #4
 800291a:	6193      	str	r3, [r2, #24]
 800291c:	4b19      	ldr	r3, [pc, #100]	; (8002984 <MX_GPIO_Init+0xd0>)
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	603b      	str	r3, [r7, #0]
 8002926:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002928:	2200      	movs	r2, #0
 800292a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800292e:	4816      	ldr	r0, [pc, #88]	; (8002988 <MX_GPIO_Init+0xd4>)
 8002930:	f001 f842 	bl	80039b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002934:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002938:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293a:	2301      	movs	r3, #1
 800293c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002942:	2302      	movs	r3, #2
 8002944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002946:	f107 0310 	add.w	r3, r7, #16
 800294a:	4619      	mov	r1, r3
 800294c:	480e      	ldr	r0, [pc, #56]	; (8002988 <MX_GPIO_Init+0xd4>)
 800294e:	f000 feaf 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002952:	2301      	movs	r3, #1
 8002954:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002956:	4b0d      	ldr	r3, [pc, #52]	; (800298c <MX_GPIO_Init+0xd8>)
 8002958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800295a:	2301      	movs	r3, #1
 800295c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800295e:	f107 0310 	add.w	r3, r7, #16
 8002962:	4619      	mov	r1, r3
 8002964:	480a      	ldr	r0, [pc, #40]	; (8002990 <MX_GPIO_Init+0xdc>)
 8002966:	f000 fea3 	bl	80036b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800296a:	2200      	movs	r2, #0
 800296c:	2100      	movs	r1, #0
 800296e:	2006      	movs	r0, #6
 8002970:	f000 fbc5 	bl	80030fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002974:	2006      	movs	r0, #6
 8002976:	f000 fbde 	bl	8003136 <HAL_NVIC_EnableIRQ>

}
 800297a:	bf00      	nop
 800297c:	3720      	adds	r7, #32
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40021000 	.word	0x40021000
 8002988:	40011000 	.word	0x40011000
 800298c:	10210000 	.word	0x10210000
 8002990:	40010c00 	.word	0x40010c00

08002994 <get_temp>:

/* USER CODE BEGIN 4 */
float get_temp(void){
 8002994:	b5b0      	push	{r4, r5, r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af02      	add	r7, sp, #8
	uint8_t temp_buff[2] = {0};
 800299a:	2300      	movs	r3, #0
 800299c:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c2, TEMP_I2C_ADDRESS, TEMP_READ_ADDRESS, 1, TEMP_TIMEOUT);
 800299e:	230a      	movs	r3, #10
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	2301      	movs	r3, #1
 80029a4:	2200      	movs	r2, #0
 80029a6:	2190      	movs	r1, #144	; 0x90
 80029a8:	482b      	ldr	r0, [pc, #172]	; (8002a58 <get_temp+0xc4>)
 80029aa:	f001 f99d 	bl	8003ce8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, TEMP_I2C_ADDRESS, temp_buff, sizeof(temp_buff), TEMP_TIMEOUT);
 80029ae:	1d3a      	adds	r2, r7, #4
 80029b0:	230a      	movs	r3, #10
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	2302      	movs	r3, #2
 80029b6:	2190      	movs	r1, #144	; 0x90
 80029b8:	4827      	ldr	r0, [pc, #156]	; (8002a58 <get_temp+0xc4>)
 80029ba:	f001 fa93 	bl	8003ee4 <HAL_I2C_Master_Receive>

	float ans = 0;
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]
	for(int q = -8; q < 0; q++){
 80029c4:	f06f 0307 	mvn.w	r3, #7
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	e02a      	b.n	8002a22 <get_temp+0x8e>
	  if(temp_buff[1] & (1 << q + 8)){
 80029cc:	797b      	ldrb	r3, [r7, #5]
 80029ce:	461a      	mov	r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	3308      	adds	r3, #8
 80029d4:	fa42 f303 	asr.w	r3, r2, r3
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d01d      	beq.n	8002a1c <get_temp+0x88>
		  ans += pow(2,q);
 80029e0:	68b8      	ldr	r0, [r7, #8]
 80029e2:	f7fd fd07 	bl	80003f4 <__aeabi_i2d>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	f04f 0000 	mov.w	r0, #0
 80029ee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80029f2:	f003 fc39 	bl	8006268 <pow>
 80029f6:	4604      	mov	r4, r0
 80029f8:	460d      	mov	r5, r1
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f7fd fd0c 	bl	8000418 <__aeabi_f2d>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4620      	mov	r0, r4
 8002a06:	4629      	mov	r1, r5
 8002a08:	f7fd fba8 	bl	800015c <__adddf3>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4610      	mov	r0, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	f7fe f850 	bl	8000ab8 <__aeabi_d2f>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	60fb      	str	r3, [r7, #12]
	for(int q = -8; q < 0; q++){
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	dbd1      	blt.n	80029cc <get_temp+0x38>
	  }
    }
	ans += temp_buff[0];
 8002a28:	793b      	ldrb	r3, [r7, #4]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fe f94e 	bl	8000ccc <__aeabi_i2f>
 8002a30:	4603      	mov	r3, r0
 8002a32:	4619      	mov	r1, r3
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f7fe f895 	bl	8000b64 <__addsf3>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	60fb      	str	r3, [r7, #12]

	debug_printf("temp %f\n\r" , ans);
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f7fd fcea 	bl	8000418 <__aeabi_f2d>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4804      	ldr	r0, [pc, #16]	; (8002a5c <get_temp+0xc8>)
 8002a4a:	f7fe fc11 	bl	8001270 <debug_printf>
}
 8002a4e:	bf00      	nop
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bdb0      	pop	{r4, r5, r7, pc}
 8002a58:	20000184 	.word	0x20000184
 8002a5c:	080071e0 	.word	0x080071e0

08002a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a64:	b672      	cpsid	i
}
 8002a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a68:	e7fe      	b.n	8002a68 <Error_Handler+0x8>
	...

08002a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <HAL_MspInit+0x40>)
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	4a0d      	ldr	r2, [pc, #52]	; (8002aac <HAL_MspInit+0x40>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6193      	str	r3, [r2, #24]
 8002a7e:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <HAL_MspInit+0x40>)
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	607b      	str	r3, [r7, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a8a:	4b08      	ldr	r3, [pc, #32]	; (8002aac <HAL_MspInit+0x40>)
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	4a07      	ldr	r2, [pc, #28]	; (8002aac <HAL_MspInit+0x40>)
 8002a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a94:	61d3      	str	r3, [r2, #28]
 8002a96:	4b05      	ldr	r3, [pc, #20]	; (8002aac <HAL_MspInit+0x40>)
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr
 8002aac:	40021000 	.word	0x40021000

08002ab0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08a      	sub	sp, #40	; 0x28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab8:	f107 0318 	add.w	r3, r7, #24
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a2b      	ldr	r2, [pc, #172]	; (8002b78 <HAL_I2C_MspInit+0xc8>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d124      	bne.n	8002b1a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad0:	4b2a      	ldr	r3, [pc, #168]	; (8002b7c <HAL_I2C_MspInit+0xcc>)
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	4a29      	ldr	r2, [pc, #164]	; (8002b7c <HAL_I2C_MspInit+0xcc>)
 8002ad6:	f043 0308 	orr.w	r3, r3, #8
 8002ada:	6193      	str	r3, [r2, #24]
 8002adc:	4b27      	ldr	r3, [pc, #156]	; (8002b7c <HAL_I2C_MspInit+0xcc>)
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ae8:	23c0      	movs	r3, #192	; 0xc0
 8002aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aec:	2312      	movs	r3, #18
 8002aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002af0:	2303      	movs	r3, #3
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af4:	f107 0318 	add.w	r3, r7, #24
 8002af8:	4619      	mov	r1, r3
 8002afa:	4821      	ldr	r0, [pc, #132]	; (8002b80 <HAL_I2C_MspInit+0xd0>)
 8002afc:	f000 fdd8 	bl	80036b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b00:	4b1e      	ldr	r3, [pc, #120]	; (8002b7c <HAL_I2C_MspInit+0xcc>)
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	4a1d      	ldr	r2, [pc, #116]	; (8002b7c <HAL_I2C_MspInit+0xcc>)
 8002b06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b0a:	61d3      	str	r3, [r2, #28]
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <HAL_I2C_MspInit+0xcc>)
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002b18:	e029      	b.n	8002b6e <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a19      	ldr	r2, [pc, #100]	; (8002b84 <HAL_I2C_MspInit+0xd4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d124      	bne.n	8002b6e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b24:	4b15      	ldr	r3, [pc, #84]	; (8002b7c <HAL_I2C_MspInit+0xcc>)
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	4a14      	ldr	r2, [pc, #80]	; (8002b7c <HAL_I2C_MspInit+0xcc>)
 8002b2a:	f043 0308 	orr.w	r3, r3, #8
 8002b2e:	6193      	str	r3, [r2, #24]
 8002b30:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <HAL_I2C_MspInit+0xcc>)
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b3c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b42:	2312      	movs	r3, #18
 8002b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b46:	2303      	movs	r3, #3
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b4a:	f107 0318 	add.w	r3, r7, #24
 8002b4e:	4619      	mov	r1, r3
 8002b50:	480b      	ldr	r0, [pc, #44]	; (8002b80 <HAL_I2C_MspInit+0xd0>)
 8002b52:	f000 fdad 	bl	80036b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b56:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <HAL_I2C_MspInit+0xcc>)
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	4a08      	ldr	r2, [pc, #32]	; (8002b7c <HAL_I2C_MspInit+0xcc>)
 8002b5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b60:	61d3      	str	r3, [r2, #28]
 8002b62:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <HAL_I2C_MspInit+0xcc>)
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
}
 8002b6e:	bf00      	nop
 8002b70:	3728      	adds	r7, #40	; 0x28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40005400 	.word	0x40005400
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40010c00 	.word	0x40010c00
 8002b84:	40005800 	.word	0x40005800

08002b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b90:	f107 0310 	add.w	r3, r7, #16
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	605a      	str	r2, [r3, #4]
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a47      	ldr	r2, [pc, #284]	; (8002cc0 <HAL_UART_MspInit+0x138>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	f040 8086 	bne.w	8002cb6 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002baa:	4b46      	ldr	r3, [pc, #280]	; (8002cc4 <HAL_UART_MspInit+0x13c>)
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	4a45      	ldr	r2, [pc, #276]	; (8002cc4 <HAL_UART_MspInit+0x13c>)
 8002bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb4:	6193      	str	r3, [r2, #24]
 8002bb6:	4b43      	ldr	r3, [pc, #268]	; (8002cc4 <HAL_UART_MspInit+0x13c>)
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc2:	4b40      	ldr	r3, [pc, #256]	; (8002cc4 <HAL_UART_MspInit+0x13c>)
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	4a3f      	ldr	r2, [pc, #252]	; (8002cc4 <HAL_UART_MspInit+0x13c>)
 8002bc8:	f043 0304 	orr.w	r3, r3, #4
 8002bcc:	6193      	str	r3, [r2, #24]
 8002bce:	4b3d      	ldr	r3, [pc, #244]	; (8002cc4 <HAL_UART_MspInit+0x13c>)
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002bda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be0:	2302      	movs	r3, #2
 8002be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002be4:	2303      	movs	r3, #3
 8002be6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be8:	f107 0310 	add.w	r3, r7, #16
 8002bec:	4619      	mov	r1, r3
 8002bee:	4836      	ldr	r0, [pc, #216]	; (8002cc8 <HAL_UART_MspInit+0x140>)
 8002bf0:	f000 fd5e 	bl	80036b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c02:	f107 0310 	add.w	r3, r7, #16
 8002c06:	4619      	mov	r1, r3
 8002c08:	482f      	ldr	r0, [pc, #188]	; (8002cc8 <HAL_UART_MspInit+0x140>)
 8002c0a:	f000 fd51 	bl	80036b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002c0e:	4b2f      	ldr	r3, [pc, #188]	; (8002ccc <HAL_UART_MspInit+0x144>)
 8002c10:	4a2f      	ldr	r2, [pc, #188]	; (8002cd0 <HAL_UART_MspInit+0x148>)
 8002c12:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c14:	4b2d      	ldr	r3, [pc, #180]	; (8002ccc <HAL_UART_MspInit+0x144>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c1a:	4b2c      	ldr	r3, [pc, #176]	; (8002ccc <HAL_UART_MspInit+0x144>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c20:	4b2a      	ldr	r3, [pc, #168]	; (8002ccc <HAL_UART_MspInit+0x144>)
 8002c22:	2280      	movs	r2, #128	; 0x80
 8002c24:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c26:	4b29      	ldr	r3, [pc, #164]	; (8002ccc <HAL_UART_MspInit+0x144>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c2c:	4b27      	ldr	r3, [pc, #156]	; (8002ccc <HAL_UART_MspInit+0x144>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002c32:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <HAL_UART_MspInit+0x144>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c38:	4b24      	ldr	r3, [pc, #144]	; (8002ccc <HAL_UART_MspInit+0x144>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002c3e:	4823      	ldr	r0, [pc, #140]	; (8002ccc <HAL_UART_MspInit+0x144>)
 8002c40:	f000 fa94 	bl	800316c <HAL_DMA_Init>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8002c4a:	f7ff ff09 	bl	8002a60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a1e      	ldr	r2, [pc, #120]	; (8002ccc <HAL_UART_MspInit+0x144>)
 8002c52:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c54:	4a1d      	ldr	r2, [pc, #116]	; (8002ccc <HAL_UART_MspInit+0x144>)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002c5a:	4b1e      	ldr	r3, [pc, #120]	; (8002cd4 <HAL_UART_MspInit+0x14c>)
 8002c5c:	4a1e      	ldr	r2, [pc, #120]	; (8002cd8 <HAL_UART_MspInit+0x150>)
 8002c5e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c60:	4b1c      	ldr	r3, [pc, #112]	; (8002cd4 <HAL_UART_MspInit+0x14c>)
 8002c62:	2210      	movs	r2, #16
 8002c64:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c66:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <HAL_UART_MspInit+0x14c>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c6c:	4b19      	ldr	r3, [pc, #100]	; (8002cd4 <HAL_UART_MspInit+0x14c>)
 8002c6e:	2280      	movs	r2, #128	; 0x80
 8002c70:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c72:	4b18      	ldr	r3, [pc, #96]	; (8002cd4 <HAL_UART_MspInit+0x14c>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c78:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <HAL_UART_MspInit+0x14c>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002c7e:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <HAL_UART_MspInit+0x14c>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c84:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <HAL_UART_MspInit+0x14c>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002c8a:	4812      	ldr	r0, [pc, #72]	; (8002cd4 <HAL_UART_MspInit+0x14c>)
 8002c8c:	f000 fa6e 	bl	800316c <HAL_DMA_Init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8002c96:	f7ff fee3 	bl	8002a60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a0d      	ldr	r2, [pc, #52]	; (8002cd4 <HAL_UART_MspInit+0x14c>)
 8002c9e:	639a      	str	r2, [r3, #56]	; 0x38
 8002ca0:	4a0c      	ldr	r2, [pc, #48]	; (8002cd4 <HAL_UART_MspInit+0x14c>)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2100      	movs	r1, #0
 8002caa:	2025      	movs	r0, #37	; 0x25
 8002cac:	f000 fa27 	bl	80030fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cb0:	2025      	movs	r0, #37	; 0x25
 8002cb2:	f000 fa40 	bl	8003136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002cb6:	bf00      	nop
 8002cb8:	3720      	adds	r7, #32
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40013800 	.word	0x40013800
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40010800 	.word	0x40010800
 8002ccc:	20000220 	.word	0x20000220
 8002cd0:	40020058 	.word	0x40020058
 8002cd4:	20000264 	.word	0x20000264
 8002cd8:	40020044 	.word	0x40020044

08002cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ce0:	e7fe      	b.n	8002ce0 <NMI_Handler+0x4>

08002ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ce6:	e7fe      	b.n	8002ce6 <HardFault_Handler+0x4>

08002ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cec:	e7fe      	b.n	8002cec <MemManage_Handler+0x4>

08002cee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cf2:	e7fe      	b.n	8002cf2 <BusFault_Handler+0x4>

08002cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cf8:	e7fe      	b.n	8002cf8 <UsageFault_Handler+0x4>

08002cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cfe:	bf00      	nop
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr

08002d06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d06:	b480      	push	{r7}
 8002d08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr

08002d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d12:	b480      	push	{r7}
 8002d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d22:	f000 f8d5 	bl	8002ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	max30102_on_interrupt(&max30102);
 8002d30:	4803      	ldr	r0, [pc, #12]	; (8002d40 <EXTI0_IRQHandler+0x14>)
 8002d32:	f7ff f9e6 	bl	8002102 <max30102_on_interrupt>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002d36:	2001      	movs	r0, #1
 8002d38:	f000 fe70 	bl	8003a1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002d3c:	bf00      	nop
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20000328 	.word	0x20000328

08002d44 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002d48:	4802      	ldr	r0, [pc, #8]	; (8002d54 <DMA1_Channel4_IRQHandler+0x10>)
 8002d4a:	f000 fb7d 	bl	8003448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000264 	.word	0x20000264

08002d58 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002d5c:	4802      	ldr	r0, [pc, #8]	; (8002d68 <DMA1_Channel5_IRQHandler+0x10>)
 8002d5e:	f000 fb73 	bl	8003448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002d62:	bf00      	nop
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000220 	.word	0x20000220

08002d6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d70:	4802      	ldr	r0, [pc, #8]	; (8002d7c <USART1_IRQHandler+0x10>)
 8002d72:	f002 fb79 	bl	8005468 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	200001d8 	.word	0x200001d8

08002d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d88:	4a14      	ldr	r2, [pc, #80]	; (8002ddc <_sbrk+0x5c>)
 8002d8a:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <_sbrk+0x60>)
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d94:	4b13      	ldr	r3, [pc, #76]	; (8002de4 <_sbrk+0x64>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d102      	bne.n	8002da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d9c:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <_sbrk+0x64>)
 8002d9e:	4a12      	ldr	r2, [pc, #72]	; (8002de8 <_sbrk+0x68>)
 8002da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002da2:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <_sbrk+0x64>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4413      	add	r3, r2
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d207      	bcs.n	8002dc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002db0:	f003 f910 	bl	8005fd4 <__errno>
 8002db4:	4603      	mov	r3, r0
 8002db6:	220c      	movs	r2, #12
 8002db8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dba:	f04f 33ff 	mov.w	r3, #4294967295
 8002dbe:	e009      	b.n	8002dd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dc0:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <_sbrk+0x64>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dc6:	4b07      	ldr	r3, [pc, #28]	; (8002de4 <_sbrk+0x64>)
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4413      	add	r3, r2
 8002dce:	4a05      	ldr	r2, [pc, #20]	; (8002de4 <_sbrk+0x64>)
 8002dd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	20005000 	.word	0x20005000
 8002de0:	00000400 	.word	0x00000400
 8002de4:	20000430 	.word	0x20000430
 8002de8:	20000448 	.word	0x20000448

08002dec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr

08002df8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002df8:	f7ff fff8 	bl	8002dec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dfc:	480b      	ldr	r0, [pc, #44]	; (8002e2c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002dfe:	490c      	ldr	r1, [pc, #48]	; (8002e30 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002e00:	4a0c      	ldr	r2, [pc, #48]	; (8002e34 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e04:	e002      	b.n	8002e0c <LoopCopyDataInit>

08002e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e0a:	3304      	adds	r3, #4

08002e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e10:	d3f9      	bcc.n	8002e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e12:	4a09      	ldr	r2, [pc, #36]	; (8002e38 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002e14:	4c09      	ldr	r4, [pc, #36]	; (8002e3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e18:	e001      	b.n	8002e1e <LoopFillZerobss>

08002e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e1c:	3204      	adds	r2, #4

08002e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e20:	d3fb      	bcc.n	8002e1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e22:	f003 f8dd 	bl	8005fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e26:	f7ff fb91 	bl	800254c <main>
  bx lr
 8002e2a:	4770      	bx	lr
  ldr r0, =_sdata
 8002e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e30:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002e34:	08007250 	.word	0x08007250
  ldr r2, =_sbss
 8002e38:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002e3c:	20000448 	.word	0x20000448

08002e40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e40:	e7fe      	b.n	8002e40 <ADC1_2_IRQHandler>
	...

08002e44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e48:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <HAL_Init+0x28>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a07      	ldr	r2, [pc, #28]	; (8002e6c <HAL_Init+0x28>)
 8002e4e:	f043 0310 	orr.w	r3, r3, #16
 8002e52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e54:	2003      	movs	r0, #3
 8002e56:	f000 f947 	bl	80030e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e5a:	200f      	movs	r0, #15
 8002e5c:	f000 f808 	bl	8002e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e60:	f7ff fe04 	bl	8002a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40022000 	.word	0x40022000

08002e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e78:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <HAL_InitTick+0x54>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <HAL_InitTick+0x58>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	4619      	mov	r1, r3
 8002e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 f95f 	bl	8003152 <HAL_SYSTICK_Config>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e00e      	b.n	8002ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b0f      	cmp	r3, #15
 8002ea2:	d80a      	bhi.n	8002eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eac:	f000 f927 	bl	80030fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002eb0:	4a06      	ldr	r2, [pc, #24]	; (8002ecc <HAL_InitTick+0x5c>)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	e000      	b.n	8002ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20000000 	.word	0x20000000
 8002ec8:	20000008 	.word	0x20000008
 8002ecc:	20000004 	.word	0x20000004

08002ed0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ed4:	4b05      	ldr	r3, [pc, #20]	; (8002eec <HAL_IncTick+0x1c>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <HAL_IncTick+0x20>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4413      	add	r3, r2
 8002ee0:	4a03      	ldr	r2, [pc, #12]	; (8002ef0 <HAL_IncTick+0x20>)
 8002ee2:	6013      	str	r3, [r2, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr
 8002eec:	20000008 	.word	0x20000008
 8002ef0:	20000434 	.word	0x20000434

08002ef4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ef8:	4b02      	ldr	r3, [pc, #8]	; (8002f04 <HAL_GetTick+0x10>)
 8002efa:	681b      	ldr	r3, [r3, #0]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr
 8002f04:	20000434 	.word	0x20000434

08002f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f10:	f7ff fff0 	bl	8002ef4 <HAL_GetTick>
 8002f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f20:	d005      	beq.n	8002f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f22:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <HAL_Delay+0x44>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	461a      	mov	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f2e:	bf00      	nop
 8002f30:	f7ff ffe0 	bl	8002ef4 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d8f7      	bhi.n	8002f30 <HAL_Delay+0x28>
  {
  }
}
 8002f40:	bf00      	nop
 8002f42:	bf00      	nop
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20000008 	.word	0x20000008

08002f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f60:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <__NVIC_SetPriorityGrouping+0x44>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f82:	4a04      	ldr	r2, [pc, #16]	; (8002f94 <__NVIC_SetPriorityGrouping+0x44>)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	60d3      	str	r3, [r2, #12]
}
 8002f88:	bf00      	nop
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	e000ed00 	.word	0xe000ed00

08002f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f9c:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	0a1b      	lsrs	r3, r3, #8
 8002fa2:	f003 0307 	and.w	r3, r3, #7
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	db0b      	blt.n	8002fde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	f003 021f 	and.w	r2, r3, #31
 8002fcc:	4906      	ldr	r1, [pc, #24]	; (8002fe8 <__NVIC_EnableIRQ+0x34>)
 8002fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8002fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr
 8002fe8:	e000e100 	.word	0xe000e100

08002fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	6039      	str	r1, [r7, #0]
 8002ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	db0a      	blt.n	8003016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	b2da      	uxtb	r2, r3
 8003004:	490c      	ldr	r1, [pc, #48]	; (8003038 <__NVIC_SetPriority+0x4c>)
 8003006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300a:	0112      	lsls	r2, r2, #4
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	440b      	add	r3, r1
 8003010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003014:	e00a      	b.n	800302c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	b2da      	uxtb	r2, r3
 800301a:	4908      	ldr	r1, [pc, #32]	; (800303c <__NVIC_SetPriority+0x50>)
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	3b04      	subs	r3, #4
 8003024:	0112      	lsls	r2, r2, #4
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	440b      	add	r3, r1
 800302a:	761a      	strb	r2, [r3, #24]
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	e000e100 	.word	0xe000e100
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003040:	b480      	push	{r7}
 8003042:	b089      	sub	sp, #36	; 0x24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f1c3 0307 	rsb	r3, r3, #7
 800305a:	2b04      	cmp	r3, #4
 800305c:	bf28      	it	cs
 800305e:	2304      	movcs	r3, #4
 8003060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	3304      	adds	r3, #4
 8003066:	2b06      	cmp	r3, #6
 8003068:	d902      	bls.n	8003070 <NVIC_EncodePriority+0x30>
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3b03      	subs	r3, #3
 800306e:	e000      	b.n	8003072 <NVIC_EncodePriority+0x32>
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003074:	f04f 32ff 	mov.w	r2, #4294967295
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43da      	mvns	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	401a      	ands	r2, r3
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003088:	f04f 31ff 	mov.w	r1, #4294967295
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	fa01 f303 	lsl.w	r3, r1, r3
 8003092:	43d9      	mvns	r1, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003098:	4313      	orrs	r3, r2
         );
}
 800309a:	4618      	mov	r0, r3
 800309c:	3724      	adds	r7, #36	; 0x24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030b4:	d301      	bcc.n	80030ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030b6:	2301      	movs	r3, #1
 80030b8:	e00f      	b.n	80030da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ba:	4a0a      	ldr	r2, [pc, #40]	; (80030e4 <SysTick_Config+0x40>)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3b01      	subs	r3, #1
 80030c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030c2:	210f      	movs	r1, #15
 80030c4:	f04f 30ff 	mov.w	r0, #4294967295
 80030c8:	f7ff ff90 	bl	8002fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <SysTick_Config+0x40>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030d2:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <SysTick_Config+0x40>)
 80030d4:	2207      	movs	r2, #7
 80030d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	e000e010 	.word	0xe000e010

080030e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff ff2d 	bl	8002f50 <__NVIC_SetPriorityGrouping>
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030fe:	b580      	push	{r7, lr}
 8003100:	b086      	sub	sp, #24
 8003102:	af00      	add	r7, sp, #0
 8003104:	4603      	mov	r3, r0
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003110:	f7ff ff42 	bl	8002f98 <__NVIC_GetPriorityGrouping>
 8003114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68b9      	ldr	r1, [r7, #8]
 800311a:	6978      	ldr	r0, [r7, #20]
 800311c:	f7ff ff90 	bl	8003040 <NVIC_EncodePriority>
 8003120:	4602      	mov	r2, r0
 8003122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003126:	4611      	mov	r1, r2
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff ff5f 	bl	8002fec <__NVIC_SetPriority>
}
 800312e:	bf00      	nop
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	4603      	mov	r3, r0
 800313e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff ff35 	bl	8002fb4 <__NVIC_EnableIRQ>
}
 800314a:	bf00      	nop
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff ffa2 	bl	80030a4 <SysTick_Config>
 8003160:	4603      	mov	r3, r0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e043      	b.n	800320a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	4b22      	ldr	r3, [pc, #136]	; (8003214 <HAL_DMA_Init+0xa8>)
 800318a:	4413      	add	r3, r2
 800318c:	4a22      	ldr	r2, [pc, #136]	; (8003218 <HAL_DMA_Init+0xac>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	091b      	lsrs	r3, r3, #4
 8003194:	009a      	lsls	r2, r3, #2
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a1f      	ldr	r2, [pc, #124]	; (800321c <HAL_DMA_Init+0xb0>)
 800319e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80031b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80031ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80031c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr
 8003214:	bffdfff8 	.word	0xbffdfff8
 8003218:	cccccccd 	.word	0xcccccccd
 800321c:	40020000 	.word	0x40020000

08003220 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
 800322c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_DMA_Start_IT+0x20>
 800323c:	2302      	movs	r3, #2
 800323e:	e04b      	b.n	80032d8 <HAL_DMA_Start_IT+0xb8>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b01      	cmp	r3, #1
 8003252:	d13a      	bne.n	80032ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0201 	bic.w	r2, r2, #1
 8003270:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	68b9      	ldr	r1, [r7, #8]
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 f9eb 	bl	8003654 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003282:	2b00      	cmp	r3, #0
 8003284:	d008      	beq.n	8003298 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f042 020e 	orr.w	r2, r2, #14
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	e00f      	b.n	80032b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0204 	bic.w	r2, r2, #4
 80032a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 020a 	orr.w	r2, r2, #10
 80032b6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0201 	orr.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	e005      	b.n	80032d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80032d2:	2302      	movs	r3, #2
 80032d4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80032d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d008      	beq.n	800330a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2204      	movs	r2, #4
 80032fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e020      	b.n	800334c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 020e 	bic.w	r2, r2, #14
 8003318:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0201 	bic.w	r2, r2, #1
 8003328:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003332:	2101      	movs	r1, #1
 8003334:	fa01 f202 	lsl.w	r2, r1, r2
 8003338:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800334a:	7bfb      	ldrb	r3, [r7, #15]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr
	...

08003358 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d005      	beq.n	800337c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2204      	movs	r2, #4
 8003374:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	73fb      	strb	r3, [r7, #15]
 800337a:	e051      	b.n	8003420 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 020e 	bic.w	r2, r2, #14
 800338a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0201 	bic.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a22      	ldr	r2, [pc, #136]	; (800342c <HAL_DMA_Abort_IT+0xd4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d029      	beq.n	80033fa <HAL_DMA_Abort_IT+0xa2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a21      	ldr	r2, [pc, #132]	; (8003430 <HAL_DMA_Abort_IT+0xd8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d022      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x9e>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a1f      	ldr	r2, [pc, #124]	; (8003434 <HAL_DMA_Abort_IT+0xdc>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d01a      	beq.n	80033f0 <HAL_DMA_Abort_IT+0x98>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a1e      	ldr	r2, [pc, #120]	; (8003438 <HAL_DMA_Abort_IT+0xe0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d012      	beq.n	80033ea <HAL_DMA_Abort_IT+0x92>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a1c      	ldr	r2, [pc, #112]	; (800343c <HAL_DMA_Abort_IT+0xe4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00a      	beq.n	80033e4 <HAL_DMA_Abort_IT+0x8c>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a1b      	ldr	r2, [pc, #108]	; (8003440 <HAL_DMA_Abort_IT+0xe8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d102      	bne.n	80033de <HAL_DMA_Abort_IT+0x86>
 80033d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033dc:	e00e      	b.n	80033fc <HAL_DMA_Abort_IT+0xa4>
 80033de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033e2:	e00b      	b.n	80033fc <HAL_DMA_Abort_IT+0xa4>
 80033e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033e8:	e008      	b.n	80033fc <HAL_DMA_Abort_IT+0xa4>
 80033ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033ee:	e005      	b.n	80033fc <HAL_DMA_Abort_IT+0xa4>
 80033f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033f4:	e002      	b.n	80033fc <HAL_DMA_Abort_IT+0xa4>
 80033f6:	2310      	movs	r3, #16
 80033f8:	e000      	b.n	80033fc <HAL_DMA_Abort_IT+0xa4>
 80033fa:	2301      	movs	r3, #1
 80033fc:	4a11      	ldr	r2, [pc, #68]	; (8003444 <HAL_DMA_Abort_IT+0xec>)
 80033fe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003414:	2b00      	cmp	r3, #0
 8003416:	d003      	beq.n	8003420 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	4798      	blx	r3
    } 
  }
  return status;
 8003420:	7bfb      	ldrb	r3, [r7, #15]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40020008 	.word	0x40020008
 8003430:	4002001c 	.word	0x4002001c
 8003434:	40020030 	.word	0x40020030
 8003438:	40020044 	.word	0x40020044
 800343c:	40020058 	.word	0x40020058
 8003440:	4002006c 	.word	0x4002006c
 8003444:	40020000 	.word	0x40020000

08003448 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	2204      	movs	r2, #4
 8003466:	409a      	lsls	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4013      	ands	r3, r2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d04f      	beq.n	8003510 <HAL_DMA_IRQHandler+0xc8>
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	2b00      	cmp	r3, #0
 8003478:	d04a      	beq.n	8003510 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0320 	and.w	r3, r3, #32
 8003484:	2b00      	cmp	r3, #0
 8003486:	d107      	bne.n	8003498 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0204 	bic.w	r2, r2, #4
 8003496:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a66      	ldr	r2, [pc, #408]	; (8003638 <HAL_DMA_IRQHandler+0x1f0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d029      	beq.n	80034f6 <HAL_DMA_IRQHandler+0xae>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a65      	ldr	r2, [pc, #404]	; (800363c <HAL_DMA_IRQHandler+0x1f4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d022      	beq.n	80034f2 <HAL_DMA_IRQHandler+0xaa>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a63      	ldr	r2, [pc, #396]	; (8003640 <HAL_DMA_IRQHandler+0x1f8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d01a      	beq.n	80034ec <HAL_DMA_IRQHandler+0xa4>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a62      	ldr	r2, [pc, #392]	; (8003644 <HAL_DMA_IRQHandler+0x1fc>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d012      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x9e>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a60      	ldr	r2, [pc, #384]	; (8003648 <HAL_DMA_IRQHandler+0x200>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00a      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x98>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a5f      	ldr	r2, [pc, #380]	; (800364c <HAL_DMA_IRQHandler+0x204>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d102      	bne.n	80034da <HAL_DMA_IRQHandler+0x92>
 80034d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034d8:	e00e      	b.n	80034f8 <HAL_DMA_IRQHandler+0xb0>
 80034da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80034de:	e00b      	b.n	80034f8 <HAL_DMA_IRQHandler+0xb0>
 80034e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80034e4:	e008      	b.n	80034f8 <HAL_DMA_IRQHandler+0xb0>
 80034e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034ea:	e005      	b.n	80034f8 <HAL_DMA_IRQHandler+0xb0>
 80034ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034f0:	e002      	b.n	80034f8 <HAL_DMA_IRQHandler+0xb0>
 80034f2:	2340      	movs	r3, #64	; 0x40
 80034f4:	e000      	b.n	80034f8 <HAL_DMA_IRQHandler+0xb0>
 80034f6:	2304      	movs	r3, #4
 80034f8:	4a55      	ldr	r2, [pc, #340]	; (8003650 <HAL_DMA_IRQHandler+0x208>)
 80034fa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 8094 	beq.w	800362e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800350e:	e08e      	b.n	800362e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	2202      	movs	r2, #2
 8003516:	409a      	lsls	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4013      	ands	r3, r2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d056      	beq.n	80035ce <HAL_DMA_IRQHandler+0x186>
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d051      	beq.n	80035ce <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10b      	bne.n	8003550 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 020a 	bic.w	r2, r2, #10
 8003546:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a38      	ldr	r2, [pc, #224]	; (8003638 <HAL_DMA_IRQHandler+0x1f0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d029      	beq.n	80035ae <HAL_DMA_IRQHandler+0x166>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a37      	ldr	r2, [pc, #220]	; (800363c <HAL_DMA_IRQHandler+0x1f4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d022      	beq.n	80035aa <HAL_DMA_IRQHandler+0x162>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a35      	ldr	r2, [pc, #212]	; (8003640 <HAL_DMA_IRQHandler+0x1f8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d01a      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x15c>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a34      	ldr	r2, [pc, #208]	; (8003644 <HAL_DMA_IRQHandler+0x1fc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d012      	beq.n	800359e <HAL_DMA_IRQHandler+0x156>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a32      	ldr	r2, [pc, #200]	; (8003648 <HAL_DMA_IRQHandler+0x200>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00a      	beq.n	8003598 <HAL_DMA_IRQHandler+0x150>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a31      	ldr	r2, [pc, #196]	; (800364c <HAL_DMA_IRQHandler+0x204>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d102      	bne.n	8003592 <HAL_DMA_IRQHandler+0x14a>
 800358c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003590:	e00e      	b.n	80035b0 <HAL_DMA_IRQHandler+0x168>
 8003592:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003596:	e00b      	b.n	80035b0 <HAL_DMA_IRQHandler+0x168>
 8003598:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800359c:	e008      	b.n	80035b0 <HAL_DMA_IRQHandler+0x168>
 800359e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035a2:	e005      	b.n	80035b0 <HAL_DMA_IRQHandler+0x168>
 80035a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035a8:	e002      	b.n	80035b0 <HAL_DMA_IRQHandler+0x168>
 80035aa:	2320      	movs	r3, #32
 80035ac:	e000      	b.n	80035b0 <HAL_DMA_IRQHandler+0x168>
 80035ae:	2302      	movs	r3, #2
 80035b0:	4a27      	ldr	r2, [pc, #156]	; (8003650 <HAL_DMA_IRQHandler+0x208>)
 80035b2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d034      	beq.n	800362e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80035cc:	e02f      	b.n	800362e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	2208      	movs	r2, #8
 80035d4:	409a      	lsls	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4013      	ands	r3, r2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d028      	beq.n	8003630 <HAL_DMA_IRQHandler+0x1e8>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f003 0308 	and.w	r3, r3, #8
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d023      	beq.n	8003630 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 020e 	bic.w	r2, r2, #14
 80035f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003600:	2101      	movs	r1, #1
 8003602:	fa01 f202 	lsl.w	r2, r1, r2
 8003606:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	2b00      	cmp	r3, #0
 8003624:	d004      	beq.n	8003630 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	4798      	blx	r3
    }
  }
  return;
 800362e:	bf00      	nop
 8003630:	bf00      	nop
}
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40020008 	.word	0x40020008
 800363c:	4002001c 	.word	0x4002001c
 8003640:	40020030 	.word	0x40020030
 8003644:	40020044 	.word	0x40020044
 8003648:	40020058 	.word	0x40020058
 800364c:	4002006c 	.word	0x4002006c
 8003650:	40020000 	.word	0x40020000

08003654 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
 8003660:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366a:	2101      	movs	r1, #1
 800366c:	fa01 f202 	lsl.w	r2, r1, r2
 8003670:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b10      	cmp	r3, #16
 8003680:	d108      	bne.n	8003694 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003692:	e007      	b.n	80036a4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	60da      	str	r2, [r3, #12]
}
 80036a4:	bf00      	nop
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr
	...

080036b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b08b      	sub	sp, #44	; 0x2c
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036ba:	2300      	movs	r3, #0
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80036be:	2300      	movs	r3, #0
 80036c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036c2:	e169      	b.n	8003998 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80036c4:	2201      	movs	r2, #1
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	4013      	ands	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	429a      	cmp	r2, r3
 80036de:	f040 8158 	bne.w	8003992 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	4a9a      	ldr	r2, [pc, #616]	; (8003950 <HAL_GPIO_Init+0x2a0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d05e      	beq.n	80037aa <HAL_GPIO_Init+0xfa>
 80036ec:	4a98      	ldr	r2, [pc, #608]	; (8003950 <HAL_GPIO_Init+0x2a0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d875      	bhi.n	80037de <HAL_GPIO_Init+0x12e>
 80036f2:	4a98      	ldr	r2, [pc, #608]	; (8003954 <HAL_GPIO_Init+0x2a4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d058      	beq.n	80037aa <HAL_GPIO_Init+0xfa>
 80036f8:	4a96      	ldr	r2, [pc, #600]	; (8003954 <HAL_GPIO_Init+0x2a4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d86f      	bhi.n	80037de <HAL_GPIO_Init+0x12e>
 80036fe:	4a96      	ldr	r2, [pc, #600]	; (8003958 <HAL_GPIO_Init+0x2a8>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d052      	beq.n	80037aa <HAL_GPIO_Init+0xfa>
 8003704:	4a94      	ldr	r2, [pc, #592]	; (8003958 <HAL_GPIO_Init+0x2a8>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d869      	bhi.n	80037de <HAL_GPIO_Init+0x12e>
 800370a:	4a94      	ldr	r2, [pc, #592]	; (800395c <HAL_GPIO_Init+0x2ac>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d04c      	beq.n	80037aa <HAL_GPIO_Init+0xfa>
 8003710:	4a92      	ldr	r2, [pc, #584]	; (800395c <HAL_GPIO_Init+0x2ac>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d863      	bhi.n	80037de <HAL_GPIO_Init+0x12e>
 8003716:	4a92      	ldr	r2, [pc, #584]	; (8003960 <HAL_GPIO_Init+0x2b0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d046      	beq.n	80037aa <HAL_GPIO_Init+0xfa>
 800371c:	4a90      	ldr	r2, [pc, #576]	; (8003960 <HAL_GPIO_Init+0x2b0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d85d      	bhi.n	80037de <HAL_GPIO_Init+0x12e>
 8003722:	2b12      	cmp	r3, #18
 8003724:	d82a      	bhi.n	800377c <HAL_GPIO_Init+0xcc>
 8003726:	2b12      	cmp	r3, #18
 8003728:	d859      	bhi.n	80037de <HAL_GPIO_Init+0x12e>
 800372a:	a201      	add	r2, pc, #4	; (adr r2, 8003730 <HAL_GPIO_Init+0x80>)
 800372c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003730:	080037ab 	.word	0x080037ab
 8003734:	08003785 	.word	0x08003785
 8003738:	08003797 	.word	0x08003797
 800373c:	080037d9 	.word	0x080037d9
 8003740:	080037df 	.word	0x080037df
 8003744:	080037df 	.word	0x080037df
 8003748:	080037df 	.word	0x080037df
 800374c:	080037df 	.word	0x080037df
 8003750:	080037df 	.word	0x080037df
 8003754:	080037df 	.word	0x080037df
 8003758:	080037df 	.word	0x080037df
 800375c:	080037df 	.word	0x080037df
 8003760:	080037df 	.word	0x080037df
 8003764:	080037df 	.word	0x080037df
 8003768:	080037df 	.word	0x080037df
 800376c:	080037df 	.word	0x080037df
 8003770:	080037df 	.word	0x080037df
 8003774:	0800378d 	.word	0x0800378d
 8003778:	080037a1 	.word	0x080037a1
 800377c:	4a79      	ldr	r2, [pc, #484]	; (8003964 <HAL_GPIO_Init+0x2b4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d013      	beq.n	80037aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003782:	e02c      	b.n	80037de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	623b      	str	r3, [r7, #32]
          break;
 800378a:	e029      	b.n	80037e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	3304      	adds	r3, #4
 8003792:	623b      	str	r3, [r7, #32]
          break;
 8003794:	e024      	b.n	80037e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	3308      	adds	r3, #8
 800379c:	623b      	str	r3, [r7, #32]
          break;
 800379e:	e01f      	b.n	80037e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	330c      	adds	r3, #12
 80037a6:	623b      	str	r3, [r7, #32]
          break;
 80037a8:	e01a      	b.n	80037e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d102      	bne.n	80037b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80037b2:	2304      	movs	r3, #4
 80037b4:	623b      	str	r3, [r7, #32]
          break;
 80037b6:	e013      	b.n	80037e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d105      	bne.n	80037cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037c0:	2308      	movs	r3, #8
 80037c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69fa      	ldr	r2, [r7, #28]
 80037c8:	611a      	str	r2, [r3, #16]
          break;
 80037ca:	e009      	b.n	80037e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037cc:	2308      	movs	r3, #8
 80037ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69fa      	ldr	r2, [r7, #28]
 80037d4:	615a      	str	r2, [r3, #20]
          break;
 80037d6:	e003      	b.n	80037e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80037d8:	2300      	movs	r3, #0
 80037da:	623b      	str	r3, [r7, #32]
          break;
 80037dc:	e000      	b.n	80037e0 <HAL_GPIO_Init+0x130>
          break;
 80037de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	2bff      	cmp	r3, #255	; 0xff
 80037e4:	d801      	bhi.n	80037ea <HAL_GPIO_Init+0x13a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	e001      	b.n	80037ee <HAL_GPIO_Init+0x13e>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3304      	adds	r3, #4
 80037ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	2bff      	cmp	r3, #255	; 0xff
 80037f4:	d802      	bhi.n	80037fc <HAL_GPIO_Init+0x14c>
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	e002      	b.n	8003802 <HAL_GPIO_Init+0x152>
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	3b08      	subs	r3, #8
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	210f      	movs	r1, #15
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	fa01 f303 	lsl.w	r3, r1, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	401a      	ands	r2, r3
 8003814:	6a39      	ldr	r1, [r7, #32]
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	fa01 f303 	lsl.w	r3, r1, r3
 800381c:	431a      	orrs	r2, r3
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 80b1 	beq.w	8003992 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003830:	4b4d      	ldr	r3, [pc, #308]	; (8003968 <HAL_GPIO_Init+0x2b8>)
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	4a4c      	ldr	r2, [pc, #304]	; (8003968 <HAL_GPIO_Init+0x2b8>)
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	6193      	str	r3, [r2, #24]
 800383c:	4b4a      	ldr	r3, [pc, #296]	; (8003968 <HAL_GPIO_Init+0x2b8>)
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003848:	4a48      	ldr	r2, [pc, #288]	; (800396c <HAL_GPIO_Init+0x2bc>)
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	089b      	lsrs	r3, r3, #2
 800384e:	3302      	adds	r3, #2
 8003850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003854:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	220f      	movs	r2, #15
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4013      	ands	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a40      	ldr	r2, [pc, #256]	; (8003970 <HAL_GPIO_Init+0x2c0>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d013      	beq.n	800389c <HAL_GPIO_Init+0x1ec>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a3f      	ldr	r2, [pc, #252]	; (8003974 <HAL_GPIO_Init+0x2c4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d00d      	beq.n	8003898 <HAL_GPIO_Init+0x1e8>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a3e      	ldr	r2, [pc, #248]	; (8003978 <HAL_GPIO_Init+0x2c8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d007      	beq.n	8003894 <HAL_GPIO_Init+0x1e4>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a3d      	ldr	r2, [pc, #244]	; (800397c <HAL_GPIO_Init+0x2cc>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d101      	bne.n	8003890 <HAL_GPIO_Init+0x1e0>
 800388c:	2303      	movs	r3, #3
 800388e:	e006      	b.n	800389e <HAL_GPIO_Init+0x1ee>
 8003890:	2304      	movs	r3, #4
 8003892:	e004      	b.n	800389e <HAL_GPIO_Init+0x1ee>
 8003894:	2302      	movs	r3, #2
 8003896:	e002      	b.n	800389e <HAL_GPIO_Init+0x1ee>
 8003898:	2301      	movs	r3, #1
 800389a:	e000      	b.n	800389e <HAL_GPIO_Init+0x1ee>
 800389c:	2300      	movs	r3, #0
 800389e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a0:	f002 0203 	and.w	r2, r2, #3
 80038a4:	0092      	lsls	r2, r2, #2
 80038a6:	4093      	lsls	r3, r2
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80038ae:	492f      	ldr	r1, [pc, #188]	; (800396c <HAL_GPIO_Init+0x2bc>)
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	089b      	lsrs	r3, r3, #2
 80038b4:	3302      	adds	r3, #2
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d006      	beq.n	80038d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80038c8:	4b2d      	ldr	r3, [pc, #180]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	492c      	ldr	r1, [pc, #176]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	608b      	str	r3, [r1, #8]
 80038d4:	e006      	b.n	80038e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80038d6:	4b2a      	ldr	r3, [pc, #168]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	43db      	mvns	r3, r3
 80038de:	4928      	ldr	r1, [pc, #160]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d006      	beq.n	80038fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80038f0:	4b23      	ldr	r3, [pc, #140]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	4922      	ldr	r1, [pc, #136]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60cb      	str	r3, [r1, #12]
 80038fc:	e006      	b.n	800390c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80038fe:	4b20      	ldr	r3, [pc, #128]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	43db      	mvns	r3, r3
 8003906:	491e      	ldr	r1, [pc, #120]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 8003908:	4013      	ands	r3, r2
 800390a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d006      	beq.n	8003926 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003918:	4b19      	ldr	r3, [pc, #100]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	4918      	ldr	r1, [pc, #96]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	4313      	orrs	r3, r2
 8003922:	604b      	str	r3, [r1, #4]
 8003924:	e006      	b.n	8003934 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003926:	4b16      	ldr	r3, [pc, #88]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	43db      	mvns	r3, r3
 800392e:	4914      	ldr	r1, [pc, #80]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 8003930:	4013      	ands	r3, r2
 8003932:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d021      	beq.n	8003984 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003940:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	490e      	ldr	r1, [pc, #56]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	4313      	orrs	r3, r2
 800394a:	600b      	str	r3, [r1, #0]
 800394c:	e021      	b.n	8003992 <HAL_GPIO_Init+0x2e2>
 800394e:	bf00      	nop
 8003950:	10320000 	.word	0x10320000
 8003954:	10310000 	.word	0x10310000
 8003958:	10220000 	.word	0x10220000
 800395c:	10210000 	.word	0x10210000
 8003960:	10120000 	.word	0x10120000
 8003964:	10110000 	.word	0x10110000
 8003968:	40021000 	.word	0x40021000
 800396c:	40010000 	.word	0x40010000
 8003970:	40010800 	.word	0x40010800
 8003974:	40010c00 	.word	0x40010c00
 8003978:	40011000 	.word	0x40011000
 800397c:	40011400 	.word	0x40011400
 8003980:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003984:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_GPIO_Init+0x304>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	43db      	mvns	r3, r3
 800398c:	4909      	ldr	r1, [pc, #36]	; (80039b4 <HAL_GPIO_Init+0x304>)
 800398e:	4013      	ands	r3, r2
 8003990:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	3301      	adds	r3, #1
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	fa22 f303 	lsr.w	r3, r2, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f47f ae8e 	bne.w	80036c4 <HAL_GPIO_Init+0x14>
  }
}
 80039a8:	bf00      	nop
 80039aa:	bf00      	nop
 80039ac:	372c      	adds	r7, #44	; 0x2c
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr
 80039b4:	40010400 	.word	0x40010400

080039b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	807b      	strh	r3, [r7, #2]
 80039c4:	4613      	mov	r3, r2
 80039c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039c8:	787b      	ldrb	r3, [r7, #1]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039ce:	887a      	ldrh	r2, [r7, #2]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80039d4:	e003      	b.n	80039de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039d6:	887b      	ldrh	r3, [r7, #2]
 80039d8:	041a      	lsls	r2, r3, #16
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	611a      	str	r2, [r3, #16]
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr

080039e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039fa:	887a      	ldrh	r2, [r7, #2]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4013      	ands	r3, r2
 8003a00:	041a      	lsls	r2, r3, #16
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	43d9      	mvns	r1, r3
 8003a06:	887b      	ldrh	r3, [r7, #2]
 8003a08:	400b      	ands	r3, r1
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	611a      	str	r2, [r3, #16]
}
 8003a10:	bf00      	nop
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr
	...

08003a1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	4603      	mov	r3, r0
 8003a24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a26:	4b08      	ldr	r3, [pc, #32]	; (8003a48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a28:	695a      	ldr	r2, [r3, #20]
 8003a2a:	88fb      	ldrh	r3, [r7, #6]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d006      	beq.n	8003a40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a32:	4a05      	ldr	r2, [pc, #20]	; (8003a48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a38:	88fb      	ldrh	r3, [r7, #6]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 f806 	bl	8003a4c <HAL_GPIO_EXTI_Callback>
  }
}
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40010400 	.word	0x40010400

08003a4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr

08003a60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e12b      	b.n	8003cca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d106      	bne.n	8003a8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff f812 	bl	8002ab0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2224      	movs	r2, #36	; 0x24
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0201 	bic.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ab2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ac2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ac4:	f001 fbca 	bl	800525c <HAL_RCC_GetPCLK1Freq>
 8003ac8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	4a81      	ldr	r2, [pc, #516]	; (8003cd4 <HAL_I2C_Init+0x274>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d807      	bhi.n	8003ae4 <HAL_I2C_Init+0x84>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4a80      	ldr	r2, [pc, #512]	; (8003cd8 <HAL_I2C_Init+0x278>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	bf94      	ite	ls
 8003adc:	2301      	movls	r3, #1
 8003ade:	2300      	movhi	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	e006      	b.n	8003af2 <HAL_I2C_Init+0x92>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4a7d      	ldr	r2, [pc, #500]	; (8003cdc <HAL_I2C_Init+0x27c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	bf94      	ite	ls
 8003aec:	2301      	movls	r3, #1
 8003aee:	2300      	movhi	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e0e7      	b.n	8003cca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4a78      	ldr	r2, [pc, #480]	; (8003ce0 <HAL_I2C_Init+0x280>)
 8003afe:	fba2 2303 	umull	r2, r3, r2, r3
 8003b02:	0c9b      	lsrs	r3, r3, #18
 8003b04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	4a6a      	ldr	r2, [pc, #424]	; (8003cd4 <HAL_I2C_Init+0x274>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d802      	bhi.n	8003b34 <HAL_I2C_Init+0xd4>
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	3301      	adds	r3, #1
 8003b32:	e009      	b.n	8003b48 <HAL_I2C_Init+0xe8>
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b3a:	fb02 f303 	mul.w	r3, r2, r3
 8003b3e:	4a69      	ldr	r2, [pc, #420]	; (8003ce4 <HAL_I2C_Init+0x284>)
 8003b40:	fba2 2303 	umull	r2, r3, r2, r3
 8003b44:	099b      	lsrs	r3, r3, #6
 8003b46:	3301      	adds	r3, #1
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6812      	ldr	r2, [r2, #0]
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	495c      	ldr	r1, [pc, #368]	; (8003cd4 <HAL_I2C_Init+0x274>)
 8003b64:	428b      	cmp	r3, r1
 8003b66:	d819      	bhi.n	8003b9c <HAL_I2C_Init+0x13c>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	1e59      	subs	r1, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b76:	1c59      	adds	r1, r3, #1
 8003b78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b7c:	400b      	ands	r3, r1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <HAL_I2C_Init+0x138>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	1e59      	subs	r1, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b90:	3301      	adds	r3, #1
 8003b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b96:	e051      	b.n	8003c3c <HAL_I2C_Init+0x1dc>
 8003b98:	2304      	movs	r3, #4
 8003b9a:	e04f      	b.n	8003c3c <HAL_I2C_Init+0x1dc>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d111      	bne.n	8003bc8 <HAL_I2C_Init+0x168>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	1e58      	subs	r0, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6859      	ldr	r1, [r3, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	440b      	add	r3, r1
 8003bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	bf0c      	ite	eq
 8003bc0:	2301      	moveq	r3, #1
 8003bc2:	2300      	movne	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	e012      	b.n	8003bee <HAL_I2C_Init+0x18e>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	1e58      	subs	r0, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6859      	ldr	r1, [r3, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	0099      	lsls	r1, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bde:	3301      	adds	r3, #1
 8003be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	bf0c      	ite	eq
 8003be8:	2301      	moveq	r3, #1
 8003bea:	2300      	movne	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_I2C_Init+0x196>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e022      	b.n	8003c3c <HAL_I2C_Init+0x1dc>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10e      	bne.n	8003c1c <HAL_I2C_Init+0x1bc>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	1e58      	subs	r0, r3, #1
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6859      	ldr	r1, [r3, #4]
 8003c06:	460b      	mov	r3, r1
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	440b      	add	r3, r1
 8003c0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c10:	3301      	adds	r3, #1
 8003c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c1a:	e00f      	b.n	8003c3c <HAL_I2C_Init+0x1dc>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	1e58      	subs	r0, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6859      	ldr	r1, [r3, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	440b      	add	r3, r1
 8003c2a:	0099      	lsls	r1, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c32:	3301      	adds	r3, #1
 8003c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	6809      	ldr	r1, [r1, #0]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69da      	ldr	r2, [r3, #28]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6911      	ldr	r1, [r2, #16]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	68d2      	ldr	r2, [r2, #12]
 8003c76:	4311      	orrs	r1, r2
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6812      	ldr	r2, [r2, #0]
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695a      	ldr	r2, [r3, #20]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0201 	orr.w	r2, r2, #1
 8003caa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	000186a0 	.word	0x000186a0
 8003cd8:	001e847f 	.word	0x001e847f
 8003cdc:	003d08ff 	.word	0x003d08ff
 8003ce0:	431bde83 	.word	0x431bde83
 8003ce4:	10624dd3 	.word	0x10624dd3

08003ce8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b088      	sub	sp, #32
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	607a      	str	r2, [r7, #4]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	817b      	strh	r3, [r7, #10]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cfc:	f7ff f8fa 	bl	8002ef4 <HAL_GetTick>
 8003d00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	f040 80e0 	bne.w	8003ed0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	2319      	movs	r3, #25
 8003d16:	2201      	movs	r2, #1
 8003d18:	4970      	ldr	r1, [pc, #448]	; (8003edc <HAL_I2C_Master_Transmit+0x1f4>)
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 fc9e 	bl	800465c <I2C_WaitOnFlagUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d26:	2302      	movs	r3, #2
 8003d28:	e0d3      	b.n	8003ed2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <HAL_I2C_Master_Transmit+0x50>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e0cc      	b.n	8003ed2 <HAL_I2C_Master_Transmit+0x1ea>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d007      	beq.n	8003d5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f042 0201 	orr.w	r2, r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2221      	movs	r2, #33	; 0x21
 8003d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2210      	movs	r2, #16
 8003d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	893a      	ldrh	r2, [r7, #8]
 8003d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4a50      	ldr	r2, [pc, #320]	; (8003ee0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003d9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003da0:	8979      	ldrh	r1, [r7, #10]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	6a3a      	ldr	r2, [r7, #32]
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 fb08 	bl	80043bc <I2C_MasterRequestWrite>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e08d      	b.n	8003ed2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db6:	2300      	movs	r3, #0
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003dcc:	e066      	b.n	8003e9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	6a39      	ldr	r1, [r7, #32]
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 fd5c 	bl	8004890 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00d      	beq.n	8003dfa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d107      	bne.n	8003df6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e06b      	b.n	8003ed2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	781a      	ldrb	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d11b      	bne.n	8003e70 <HAL_I2C_Master_Transmit+0x188>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d017      	beq.n	8003e70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	781a      	ldrb	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	6a39      	ldr	r1, [r7, #32]
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 fd53 	bl	8004920 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00d      	beq.n	8003e9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d107      	bne.n	8003e98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e01a      	b.n	8003ed2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d194      	bne.n	8003dce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	e000      	b.n	8003ed2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ed0:	2302      	movs	r3, #2
  }
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	00100002 	.word	0x00100002
 8003ee0:	ffff0000 	.word	0xffff0000

08003ee4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08c      	sub	sp, #48	; 0x30
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	607a      	str	r2, [r7, #4]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	817b      	strh	r3, [r7, #10]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003efc:	f7fe fffa 	bl	8002ef4 <HAL_GetTick>
 8003f00:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b20      	cmp	r3, #32
 8003f0c:	f040 824b 	bne.w	80043a6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	2319      	movs	r3, #25
 8003f16:	2201      	movs	r2, #1
 8003f18:	497f      	ldr	r1, [pc, #508]	; (8004118 <HAL_I2C_Master_Receive+0x234>)
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 fb9e 	bl	800465c <I2C_WaitOnFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003f26:	2302      	movs	r3, #2
 8003f28:	e23e      	b.n	80043a8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_I2C_Master_Receive+0x54>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e237      	b.n	80043a8 <HAL_I2C_Master_Receive+0x4c4>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d007      	beq.n	8003f5e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f042 0201 	orr.w	r2, r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2222      	movs	r2, #34	; 0x22
 8003f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2210      	movs	r2, #16
 8003f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	893a      	ldrh	r2, [r7, #8]
 8003f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4a5f      	ldr	r2, [pc, #380]	; (800411c <HAL_I2C_Master_Receive+0x238>)
 8003f9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003fa0:	8979      	ldrh	r1, [r7, #10]
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 fa8a 	bl	80044c0 <I2C_MasterRequestRead>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e1f8      	b.n	80043a8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d113      	bne.n	8003fe6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61fb      	str	r3, [r7, #28]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	61fb      	str	r3, [r7, #28]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	61fb      	str	r3, [r7, #28]
 8003fd2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	e1cc      	b.n	8004380 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d11e      	bne.n	800402c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ffc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ffe:	b672      	cpsid	i
}
 8004000:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004002:	2300      	movs	r3, #0
 8004004:	61bb      	str	r3, [r7, #24]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	61bb      	str	r3, [r7, #24]
 8004016:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004026:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004028:	b662      	cpsie	i
}
 800402a:	e035      	b.n	8004098 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004030:	2b02      	cmp	r3, #2
 8004032:	d11e      	bne.n	8004072 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004042:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004044:	b672      	cpsid	i
}
 8004046:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004048:	2300      	movs	r3, #0
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800406c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800406e:	b662      	cpsie	i
}
 8004070:	e012      	b.n	8004098 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004080:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004082:	2300      	movs	r3, #0
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	613b      	str	r3, [r7, #16]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	613b      	str	r3, [r7, #16]
 8004096:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004098:	e172      	b.n	8004380 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409e:	2b03      	cmp	r3, #3
 80040a0:	f200 811f 	bhi.w	80042e2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d123      	bne.n	80040f4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 fc7d 	bl	80049b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e173      	b.n	80043a8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	691a      	ldr	r2, [r3, #16]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040f2:	e145      	b.n	8004380 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d152      	bne.n	80041a2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004102:	2200      	movs	r2, #0
 8004104:	4906      	ldr	r1, [pc, #24]	; (8004120 <HAL_I2C_Master_Receive+0x23c>)
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 faa8 	bl	800465c <I2C_WaitOnFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e148      	b.n	80043a8 <HAL_I2C_Master_Receive+0x4c4>
 8004116:	bf00      	nop
 8004118:	00100002 	.word	0x00100002
 800411c:	ffff0000 	.word	0xffff0000
 8004120:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004124:	b672      	cpsid	i
}
 8004126:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004136:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691a      	ldr	r2, [r3, #16]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	1c5a      	adds	r2, r3, #1
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004160:	b29b      	uxth	r3, r3
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800416a:	b662      	cpsie	i
}
 800416c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	691a      	ldr	r2, [r3, #16]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418a:	3b01      	subs	r3, #1
 800418c:	b29a      	uxth	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041a0:	e0ee      	b.n	8004380 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	2200      	movs	r2, #0
 80041aa:	4981      	ldr	r1, [pc, #516]	; (80043b0 <HAL_I2C_Master_Receive+0x4cc>)
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 fa55 	bl	800465c <I2C_WaitOnFlagUntilTimeout>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0f5      	b.n	80043a8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80041cc:	b672      	cpsid	i
}
 80041ce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691a      	ldr	r2, [r3, #16]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	3b01      	subs	r3, #1
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004202:	4b6c      	ldr	r3, [pc, #432]	; (80043b4 <HAL_I2C_Master_Receive+0x4d0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	08db      	lsrs	r3, r3, #3
 8004208:	4a6b      	ldr	r2, [pc, #428]	; (80043b8 <HAL_I2C_Master_Receive+0x4d4>)
 800420a:	fba2 2303 	umull	r2, r3, r2, r3
 800420e:	0a1a      	lsrs	r2, r3, #8
 8004210:	4613      	mov	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	00da      	lsls	r2, r3, #3
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	3b01      	subs	r3, #1
 8004220:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d118      	bne.n	800425a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f043 0220 	orr.w	r2, r3, #32
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800424a:	b662      	cpsie	i
}
 800424c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e0a6      	b.n	80043a8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b04      	cmp	r3, #4
 8004266:	d1d9      	bne.n	800421c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004276:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691a      	ldr	r2, [r3, #16]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80042aa:	b662      	cpsie	i
}
 80042ac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	b2d2      	uxtb	r2, r2
 80042ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	1c5a      	adds	r2, r3, #1
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042e0:	e04e      	b.n	8004380 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 fb62 	bl	80049b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e058      	b.n	80043a8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431e:	b29b      	uxth	r3, r3
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b04      	cmp	r3, #4
 8004334:	d124      	bne.n	8004380 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433a:	2b03      	cmp	r3, #3
 800433c:	d107      	bne.n	800434e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800434c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436a:	3b01      	subs	r3, #1
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004376:	b29b      	uxth	r3, r3
 8004378:	3b01      	subs	r3, #1
 800437a:	b29a      	uxth	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004384:	2b00      	cmp	r3, #0
 8004386:	f47f ae88 	bne.w	800409a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2220      	movs	r2, #32
 800438e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	e000      	b.n	80043a8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80043a6:	2302      	movs	r3, #2
  }
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3728      	adds	r7, #40	; 0x28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	00010004 	.word	0x00010004
 80043b4:	20000000 	.word	0x20000000
 80043b8:	14f8b589 	.word	0x14f8b589

080043bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	607a      	str	r2, [r7, #4]
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	460b      	mov	r3, r1
 80043ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d006      	beq.n	80043e6 <I2C_MasterRequestWrite+0x2a>
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d003      	beq.n	80043e6 <I2C_MasterRequestWrite+0x2a>
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043e4:	d108      	bne.n	80043f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	e00b      	b.n	8004410 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fc:	2b12      	cmp	r3, #18
 80043fe:	d107      	bne.n	8004410 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800440e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 f91d 	bl	800465c <I2C_WaitOnFlagUntilTimeout>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00d      	beq.n	8004444 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004436:	d103      	bne.n	8004440 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800443e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e035      	b.n	80044b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800444c:	d108      	bne.n	8004460 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800444e:	897b      	ldrh	r3, [r7, #10]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	461a      	mov	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800445c:	611a      	str	r2, [r3, #16]
 800445e:	e01b      	b.n	8004498 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004460:	897b      	ldrh	r3, [r7, #10]
 8004462:	11db      	asrs	r3, r3, #7
 8004464:	b2db      	uxtb	r3, r3
 8004466:	f003 0306 	and.w	r3, r3, #6
 800446a:	b2db      	uxtb	r3, r3
 800446c:	f063 030f 	orn	r3, r3, #15
 8004470:	b2da      	uxtb	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	490e      	ldr	r1, [pc, #56]	; (80044b8 <I2C_MasterRequestWrite+0xfc>)
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 f966 	bl	8004750 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e010      	b.n	80044b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800448e:	897b      	ldrh	r3, [r7, #10]
 8004490:	b2da      	uxtb	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	4907      	ldr	r1, [pc, #28]	; (80044bc <I2C_MasterRequestWrite+0x100>)
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 f956 	bl	8004750 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	00010008 	.word	0x00010008
 80044bc:	00010002 	.word	0x00010002

080044c0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af02      	add	r7, sp, #8
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	607a      	str	r2, [r7, #4]
 80044ca:	603b      	str	r3, [r7, #0]
 80044cc:	460b      	mov	r3, r1
 80044ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044e4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d006      	beq.n	80044fa <I2C_MasterRequestRead+0x3a>
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d003      	beq.n	80044fa <I2C_MasterRequestRead+0x3a>
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044f8:	d108      	bne.n	800450c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	e00b      	b.n	8004524 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	2b11      	cmp	r3, #17
 8004512:	d107      	bne.n	8004524 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004522:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 f893 	bl	800465c <I2C_WaitOnFlagUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00d      	beq.n	8004558 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800454a:	d103      	bne.n	8004554 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004552:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e079      	b.n	800464c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004560:	d108      	bne.n	8004574 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004562:	897b      	ldrh	r3, [r7, #10]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	f043 0301 	orr.w	r3, r3, #1
 800456a:	b2da      	uxtb	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	611a      	str	r2, [r3, #16]
 8004572:	e05f      	b.n	8004634 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004574:	897b      	ldrh	r3, [r7, #10]
 8004576:	11db      	asrs	r3, r3, #7
 8004578:	b2db      	uxtb	r3, r3
 800457a:	f003 0306 	and.w	r3, r3, #6
 800457e:	b2db      	uxtb	r3, r3
 8004580:	f063 030f 	orn	r3, r3, #15
 8004584:	b2da      	uxtb	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	4930      	ldr	r1, [pc, #192]	; (8004654 <I2C_MasterRequestRead+0x194>)
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 f8dc 	bl	8004750 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e054      	b.n	800464c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045a2:	897b      	ldrh	r3, [r7, #10]
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	4929      	ldr	r1, [pc, #164]	; (8004658 <I2C_MasterRequestRead+0x198>)
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 f8cc 	bl	8004750 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e044      	b.n	800464c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045c2:	2300      	movs	r3, #0
 80045c4:	613b      	str	r3, [r7, #16]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	613b      	str	r3, [r7, #16]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	613b      	str	r3, [r7, #16]
 80045d6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045e6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 f831 	bl	800465c <I2C_WaitOnFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00d      	beq.n	800461c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800460e:	d103      	bne.n	8004618 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004616:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e017      	b.n	800464c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800461c:	897b      	ldrh	r3, [r7, #10]
 800461e:	11db      	asrs	r3, r3, #7
 8004620:	b2db      	uxtb	r3, r3
 8004622:	f003 0306 	and.w	r3, r3, #6
 8004626:	b2db      	uxtb	r3, r3
 8004628:	f063 030e 	orn	r3, r3, #14
 800462c:	b2da      	uxtb	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	4907      	ldr	r1, [pc, #28]	; (8004658 <I2C_MasterRequestRead+0x198>)
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 f888 	bl	8004750 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	00010008 	.word	0x00010008
 8004658:	00010002 	.word	0x00010002

0800465c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	4613      	mov	r3, r2
 800466a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800466c:	e048      	b.n	8004700 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004674:	d044      	beq.n	8004700 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004676:	f7fe fc3d 	bl	8002ef4 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	429a      	cmp	r2, r3
 8004684:	d302      	bcc.n	800468c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d139      	bne.n	8004700 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	0c1b      	lsrs	r3, r3, #16
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b01      	cmp	r3, #1
 8004694:	d10d      	bne.n	80046b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	43da      	mvns	r2, r3
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	4013      	ands	r3, r2
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	bf0c      	ite	eq
 80046a8:	2301      	moveq	r3, #1
 80046aa:	2300      	movne	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	461a      	mov	r2, r3
 80046b0:	e00c      	b.n	80046cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	43da      	mvns	r2, r3
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	4013      	ands	r3, r2
 80046be:	b29b      	uxth	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	bf0c      	ite	eq
 80046c4:	2301      	moveq	r3, #1
 80046c6:	2300      	movne	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	461a      	mov	r2, r3
 80046cc:	79fb      	ldrb	r3, [r7, #7]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d116      	bne.n	8004700 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ec:	f043 0220 	orr.w	r2, r3, #32
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e023      	b.n	8004748 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	0c1b      	lsrs	r3, r3, #16
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b01      	cmp	r3, #1
 8004708:	d10d      	bne.n	8004726 <I2C_WaitOnFlagUntilTimeout+0xca>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	43da      	mvns	r2, r3
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	4013      	ands	r3, r2
 8004716:	b29b      	uxth	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	bf0c      	ite	eq
 800471c:	2301      	moveq	r3, #1
 800471e:	2300      	movne	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	461a      	mov	r2, r3
 8004724:	e00c      	b.n	8004740 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	43da      	mvns	r2, r3
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	4013      	ands	r3, r2
 8004732:	b29b      	uxth	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	bf0c      	ite	eq
 8004738:	2301      	moveq	r3, #1
 800473a:	2300      	movne	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	461a      	mov	r2, r3
 8004740:	79fb      	ldrb	r3, [r7, #7]
 8004742:	429a      	cmp	r2, r3
 8004744:	d093      	beq.n	800466e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
 800475c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800475e:	e071      	b.n	8004844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800476a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800476e:	d123      	bne.n	80047b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800477e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004788:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2220      	movs	r2, #32
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	f043 0204 	orr.w	r2, r3, #4
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e067      	b.n	8004888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047be:	d041      	beq.n	8004844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c0:	f7fe fb98 	bl	8002ef4 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d302      	bcc.n	80047d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d136      	bne.n	8004844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	0c1b      	lsrs	r3, r3, #16
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d10c      	bne.n	80047fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	43da      	mvns	r2, r3
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4013      	ands	r3, r2
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	bf14      	ite	ne
 80047f2:	2301      	movne	r3, #1
 80047f4:	2300      	moveq	r3, #0
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	e00b      	b.n	8004812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	43da      	mvns	r2, r3
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	4013      	ands	r3, r2
 8004806:	b29b      	uxth	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	bf14      	ite	ne
 800480c:	2301      	movne	r3, #1
 800480e:	2300      	moveq	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d016      	beq.n	8004844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004830:	f043 0220 	orr.w	r2, r3, #32
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e021      	b.n	8004888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	0c1b      	lsrs	r3, r3, #16
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b01      	cmp	r3, #1
 800484c:	d10c      	bne.n	8004868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	43da      	mvns	r2, r3
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	4013      	ands	r3, r2
 800485a:	b29b      	uxth	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	bf14      	ite	ne
 8004860:	2301      	movne	r3, #1
 8004862:	2300      	moveq	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	e00b      	b.n	8004880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	43da      	mvns	r2, r3
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4013      	ands	r3, r2
 8004874:	b29b      	uxth	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	bf14      	ite	ne
 800487a:	2301      	movne	r3, #1
 800487c:	2300      	moveq	r3, #0
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	f47f af6d 	bne.w	8004760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800489c:	e034      	b.n	8004908 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 f8e3 	bl	8004a6a <I2C_IsAcknowledgeFailed>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e034      	b.n	8004918 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b4:	d028      	beq.n	8004908 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048b6:	f7fe fb1d 	bl	8002ef4 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d302      	bcc.n	80048cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d11d      	bne.n	8004908 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d6:	2b80      	cmp	r3, #128	; 0x80
 80048d8:	d016      	beq.n	8004908 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	f043 0220 	orr.w	r2, r3, #32
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e007      	b.n	8004918 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004912:	2b80      	cmp	r3, #128	; 0x80
 8004914:	d1c3      	bne.n	800489e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800492c:	e034      	b.n	8004998 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 f89b 	bl	8004a6a <I2C_IsAcknowledgeFailed>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e034      	b.n	80049a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004944:	d028      	beq.n	8004998 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004946:	f7fe fad5 	bl	8002ef4 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	429a      	cmp	r2, r3
 8004954:	d302      	bcc.n	800495c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d11d      	bne.n	8004998 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	2b04      	cmp	r3, #4
 8004968:	d016      	beq.n	8004998 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	f043 0220 	orr.w	r2, r3, #32
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e007      	b.n	80049a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	f003 0304 	and.w	r3, r3, #4
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d1c3      	bne.n	800492e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049bc:	e049      	b.n	8004a52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	f003 0310 	and.w	r3, r3, #16
 80049c8:	2b10      	cmp	r3, #16
 80049ca:	d119      	bne.n	8004a00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0210 	mvn.w	r2, #16
 80049d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e030      	b.n	8004a62 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a00:	f7fe fa78 	bl	8002ef4 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d302      	bcc.n	8004a16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d11d      	bne.n	8004a52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a20:	2b40      	cmp	r3, #64	; 0x40
 8004a22:	d016      	beq.n	8004a52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	f043 0220 	orr.w	r2, r3, #32
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e007      	b.n	8004a62 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5c:	2b40      	cmp	r3, #64	; 0x40
 8004a5e:	d1ae      	bne.n	80049be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a80:	d11b      	bne.n	8004aba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a8a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	f043 0204 	orr.w	r2, r3, #4
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e000      	b.n	8004abc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bc80      	pop	{r7}
 8004ac4:	4770      	bx	lr
	...

08004ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e272      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 8087 	beq.w	8004bf6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ae8:	4b92      	ldr	r3, [pc, #584]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f003 030c 	and.w	r3, r3, #12
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d00c      	beq.n	8004b0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004af4:	4b8f      	ldr	r3, [pc, #572]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f003 030c 	and.w	r3, r3, #12
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d112      	bne.n	8004b26 <HAL_RCC_OscConfig+0x5e>
 8004b00:	4b8c      	ldr	r3, [pc, #560]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b0c:	d10b      	bne.n	8004b26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b0e:	4b89      	ldr	r3, [pc, #548]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d06c      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x12c>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d168      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e24c      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b2e:	d106      	bne.n	8004b3e <HAL_RCC_OscConfig+0x76>
 8004b30:	4b80      	ldr	r3, [pc, #512]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a7f      	ldr	r2, [pc, #508]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	e02e      	b.n	8004b9c <HAL_RCC_OscConfig+0xd4>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10c      	bne.n	8004b60 <HAL_RCC_OscConfig+0x98>
 8004b46:	4b7b      	ldr	r3, [pc, #492]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a7a      	ldr	r2, [pc, #488]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	4b78      	ldr	r3, [pc, #480]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a77      	ldr	r2, [pc, #476]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004b58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	e01d      	b.n	8004b9c <HAL_RCC_OscConfig+0xd4>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b68:	d10c      	bne.n	8004b84 <HAL_RCC_OscConfig+0xbc>
 8004b6a:	4b72      	ldr	r3, [pc, #456]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a71      	ldr	r2, [pc, #452]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	4b6f      	ldr	r3, [pc, #444]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a6e      	ldr	r2, [pc, #440]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b80:	6013      	str	r3, [r2, #0]
 8004b82:	e00b      	b.n	8004b9c <HAL_RCC_OscConfig+0xd4>
 8004b84:	4b6b      	ldr	r3, [pc, #428]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a6a      	ldr	r2, [pc, #424]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b8e:	6013      	str	r3, [r2, #0]
 8004b90:	4b68      	ldr	r3, [pc, #416]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a67      	ldr	r2, [pc, #412]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d013      	beq.n	8004bcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba4:	f7fe f9a6 	bl	8002ef4 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bac:	f7fe f9a2 	bl	8002ef4 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b64      	cmp	r3, #100	; 0x64
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e200      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bbe:	4b5d      	ldr	r3, [pc, #372]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0f0      	beq.n	8004bac <HAL_RCC_OscConfig+0xe4>
 8004bca:	e014      	b.n	8004bf6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bcc:	f7fe f992 	bl	8002ef4 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bd4:	f7fe f98e 	bl	8002ef4 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b64      	cmp	r3, #100	; 0x64
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e1ec      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004be6:	4b53      	ldr	r3, [pc, #332]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f0      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x10c>
 8004bf2:	e000      	b.n	8004bf6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d063      	beq.n	8004cca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c02:	4b4c      	ldr	r3, [pc, #304]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f003 030c 	and.w	r3, r3, #12
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00b      	beq.n	8004c26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c0e:	4b49      	ldr	r3, [pc, #292]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f003 030c 	and.w	r3, r3, #12
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d11c      	bne.n	8004c54 <HAL_RCC_OscConfig+0x18c>
 8004c1a:	4b46      	ldr	r3, [pc, #280]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d116      	bne.n	8004c54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c26:	4b43      	ldr	r3, [pc, #268]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d005      	beq.n	8004c3e <HAL_RCC_OscConfig+0x176>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d001      	beq.n	8004c3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e1c0      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c3e:	4b3d      	ldr	r3, [pc, #244]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	4939      	ldr	r1, [pc, #228]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c52:	e03a      	b.n	8004cca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d020      	beq.n	8004c9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c5c:	4b36      	ldr	r3, [pc, #216]	; (8004d38 <HAL_RCC_OscConfig+0x270>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c62:	f7fe f947 	bl	8002ef4 <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c68:	e008      	b.n	8004c7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c6a:	f7fe f943 	bl	8002ef4 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e1a1      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c7c:	4b2d      	ldr	r3, [pc, #180]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0f0      	beq.n	8004c6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c88:	4b2a      	ldr	r3, [pc, #168]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	4927      	ldr	r1, [pc, #156]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	600b      	str	r3, [r1, #0]
 8004c9c:	e015      	b.n	8004cca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c9e:	4b26      	ldr	r3, [pc, #152]	; (8004d38 <HAL_RCC_OscConfig+0x270>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca4:	f7fe f926 	bl	8002ef4 <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cac:	f7fe f922 	bl	8002ef4 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e180      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cbe:	4b1d      	ldr	r3, [pc, #116]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1f0      	bne.n	8004cac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d03a      	beq.n	8004d4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d019      	beq.n	8004d12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cde:	4b17      	ldr	r3, [pc, #92]	; (8004d3c <HAL_RCC_OscConfig+0x274>)
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ce4:	f7fe f906 	bl	8002ef4 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cec:	f7fe f902 	bl	8002ef4 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e160      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cfe:	4b0d      	ldr	r3, [pc, #52]	; (8004d34 <HAL_RCC_OscConfig+0x26c>)
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0f0      	beq.n	8004cec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d0a:	2001      	movs	r0, #1
 8004d0c:	f000 face 	bl	80052ac <RCC_Delay>
 8004d10:	e01c      	b.n	8004d4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d12:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <HAL_RCC_OscConfig+0x274>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d18:	f7fe f8ec 	bl	8002ef4 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d1e:	e00f      	b.n	8004d40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d20:	f7fe f8e8 	bl	8002ef4 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d908      	bls.n	8004d40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e146      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4f8>
 8004d32:	bf00      	nop
 8004d34:	40021000 	.word	0x40021000
 8004d38:	42420000 	.word	0x42420000
 8004d3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d40:	4b92      	ldr	r3, [pc, #584]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1e9      	bne.n	8004d20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 80a6 	beq.w	8004ea6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d5e:	4b8b      	ldr	r3, [pc, #556]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10d      	bne.n	8004d86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d6a:	4b88      	ldr	r3, [pc, #544]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	4a87      	ldr	r2, [pc, #540]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d74:	61d3      	str	r3, [r2, #28]
 8004d76:	4b85      	ldr	r3, [pc, #532]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d7e:	60bb      	str	r3, [r7, #8]
 8004d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d82:	2301      	movs	r3, #1
 8004d84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d86:	4b82      	ldr	r3, [pc, #520]	; (8004f90 <HAL_RCC_OscConfig+0x4c8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d118      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d92:	4b7f      	ldr	r3, [pc, #508]	; (8004f90 <HAL_RCC_OscConfig+0x4c8>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a7e      	ldr	r2, [pc, #504]	; (8004f90 <HAL_RCC_OscConfig+0x4c8>)
 8004d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d9e:	f7fe f8a9 	bl	8002ef4 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da4:	e008      	b.n	8004db8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004da6:	f7fe f8a5 	bl	8002ef4 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b64      	cmp	r3, #100	; 0x64
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e103      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db8:	4b75      	ldr	r3, [pc, #468]	; (8004f90 <HAL_RCC_OscConfig+0x4c8>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0f0      	beq.n	8004da6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d106      	bne.n	8004dda <HAL_RCC_OscConfig+0x312>
 8004dcc:	4b6f      	ldr	r3, [pc, #444]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	4a6e      	ldr	r2, [pc, #440]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004dd2:	f043 0301 	orr.w	r3, r3, #1
 8004dd6:	6213      	str	r3, [r2, #32]
 8004dd8:	e02d      	b.n	8004e36 <HAL_RCC_OscConfig+0x36e>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10c      	bne.n	8004dfc <HAL_RCC_OscConfig+0x334>
 8004de2:	4b6a      	ldr	r3, [pc, #424]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	4a69      	ldr	r2, [pc, #420]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004de8:	f023 0301 	bic.w	r3, r3, #1
 8004dec:	6213      	str	r3, [r2, #32]
 8004dee:	4b67      	ldr	r3, [pc, #412]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	4a66      	ldr	r2, [pc, #408]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004df4:	f023 0304 	bic.w	r3, r3, #4
 8004df8:	6213      	str	r3, [r2, #32]
 8004dfa:	e01c      	b.n	8004e36 <HAL_RCC_OscConfig+0x36e>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	2b05      	cmp	r3, #5
 8004e02:	d10c      	bne.n	8004e1e <HAL_RCC_OscConfig+0x356>
 8004e04:	4b61      	ldr	r3, [pc, #388]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	4a60      	ldr	r2, [pc, #384]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004e0a:	f043 0304 	orr.w	r3, r3, #4
 8004e0e:	6213      	str	r3, [r2, #32]
 8004e10:	4b5e      	ldr	r3, [pc, #376]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	4a5d      	ldr	r2, [pc, #372]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004e16:	f043 0301 	orr.w	r3, r3, #1
 8004e1a:	6213      	str	r3, [r2, #32]
 8004e1c:	e00b      	b.n	8004e36 <HAL_RCC_OscConfig+0x36e>
 8004e1e:	4b5b      	ldr	r3, [pc, #364]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	4a5a      	ldr	r2, [pc, #360]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004e24:	f023 0301 	bic.w	r3, r3, #1
 8004e28:	6213      	str	r3, [r2, #32]
 8004e2a:	4b58      	ldr	r3, [pc, #352]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	4a57      	ldr	r2, [pc, #348]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004e30:	f023 0304 	bic.w	r3, r3, #4
 8004e34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d015      	beq.n	8004e6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e3e:	f7fe f859 	bl	8002ef4 <HAL_GetTick>
 8004e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e44:	e00a      	b.n	8004e5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e46:	f7fe f855 	bl	8002ef4 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e0b1      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e5c:	4b4b      	ldr	r3, [pc, #300]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0ee      	beq.n	8004e46 <HAL_RCC_OscConfig+0x37e>
 8004e68:	e014      	b.n	8004e94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e6a:	f7fe f843 	bl	8002ef4 <HAL_GetTick>
 8004e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e70:	e00a      	b.n	8004e88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e72:	f7fe f83f 	bl	8002ef4 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e09b      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e88:	4b40      	ldr	r3, [pc, #256]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1ee      	bne.n	8004e72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e94:	7dfb      	ldrb	r3, [r7, #23]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d105      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e9a:	4b3c      	ldr	r3, [pc, #240]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	4a3b      	ldr	r2, [pc, #236]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ea4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 8087 	beq.w	8004fbe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004eb0:	4b36      	ldr	r3, [pc, #216]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f003 030c 	and.w	r3, r3, #12
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d061      	beq.n	8004f80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	69db      	ldr	r3, [r3, #28]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d146      	bne.n	8004f52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ec4:	4b33      	ldr	r3, [pc, #204]	; (8004f94 <HAL_RCC_OscConfig+0x4cc>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eca:	f7fe f813 	bl	8002ef4 <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ed2:	f7fe f80f 	bl	8002ef4 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e06d      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ee4:	4b29      	ldr	r3, [pc, #164]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1f0      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef8:	d108      	bne.n	8004f0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004efa:	4b24      	ldr	r3, [pc, #144]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	4921      	ldr	r1, [pc, #132]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f0c:	4b1f      	ldr	r3, [pc, #124]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a19      	ldr	r1, [r3, #32]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	491b      	ldr	r1, [pc, #108]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f24:	4b1b      	ldr	r3, [pc, #108]	; (8004f94 <HAL_RCC_OscConfig+0x4cc>)
 8004f26:	2201      	movs	r2, #1
 8004f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2a:	f7fd ffe3 	bl	8002ef4 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f32:	f7fd ffdf 	bl	8002ef4 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e03d      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f44:	4b11      	ldr	r3, [pc, #68]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0f0      	beq.n	8004f32 <HAL_RCC_OscConfig+0x46a>
 8004f50:	e035      	b.n	8004fbe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f52:	4b10      	ldr	r3, [pc, #64]	; (8004f94 <HAL_RCC_OscConfig+0x4cc>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f58:	f7fd ffcc 	bl	8002ef4 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f60:	f7fd ffc8 	bl	8002ef4 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e026      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f72:	4b06      	ldr	r3, [pc, #24]	; (8004f8c <HAL_RCC_OscConfig+0x4c4>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1f0      	bne.n	8004f60 <HAL_RCC_OscConfig+0x498>
 8004f7e:	e01e      	b.n	8004fbe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d107      	bne.n	8004f98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e019      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4f8>
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	40007000 	.word	0x40007000
 8004f94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f98:	4b0b      	ldr	r3, [pc, #44]	; (8004fc8 <HAL_RCC_OscConfig+0x500>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d106      	bne.n	8004fba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d001      	beq.n	8004fbe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e000      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40021000 	.word	0x40021000

08004fcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e0d0      	b.n	8005182 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fe0:	4b6a      	ldr	r3, [pc, #424]	; (800518c <HAL_RCC_ClockConfig+0x1c0>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d910      	bls.n	8005010 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fee:	4b67      	ldr	r3, [pc, #412]	; (800518c <HAL_RCC_ClockConfig+0x1c0>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f023 0207 	bic.w	r2, r3, #7
 8004ff6:	4965      	ldr	r1, [pc, #404]	; (800518c <HAL_RCC_ClockConfig+0x1c0>)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffe:	4b63      	ldr	r3, [pc, #396]	; (800518c <HAL_RCC_ClockConfig+0x1c0>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d001      	beq.n	8005010 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e0b8      	b.n	8005182 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d020      	beq.n	800505e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005028:	4b59      	ldr	r3, [pc, #356]	; (8005190 <HAL_RCC_ClockConfig+0x1c4>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	4a58      	ldr	r2, [pc, #352]	; (8005190 <HAL_RCC_ClockConfig+0x1c4>)
 800502e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005032:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005040:	4b53      	ldr	r3, [pc, #332]	; (8005190 <HAL_RCC_ClockConfig+0x1c4>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	4a52      	ldr	r2, [pc, #328]	; (8005190 <HAL_RCC_ClockConfig+0x1c4>)
 8005046:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800504a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800504c:	4b50      	ldr	r3, [pc, #320]	; (8005190 <HAL_RCC_ClockConfig+0x1c4>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	494d      	ldr	r1, [pc, #308]	; (8005190 <HAL_RCC_ClockConfig+0x1c4>)
 800505a:	4313      	orrs	r3, r2
 800505c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d040      	beq.n	80050ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d107      	bne.n	8005082 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005072:	4b47      	ldr	r3, [pc, #284]	; (8005190 <HAL_RCC_ClockConfig+0x1c4>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d115      	bne.n	80050aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e07f      	b.n	8005182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b02      	cmp	r3, #2
 8005088:	d107      	bne.n	800509a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800508a:	4b41      	ldr	r3, [pc, #260]	; (8005190 <HAL_RCC_ClockConfig+0x1c4>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d109      	bne.n	80050aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e073      	b.n	8005182 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800509a:	4b3d      	ldr	r3, [pc, #244]	; (8005190 <HAL_RCC_ClockConfig+0x1c4>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e06b      	b.n	8005182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050aa:	4b39      	ldr	r3, [pc, #228]	; (8005190 <HAL_RCC_ClockConfig+0x1c4>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f023 0203 	bic.w	r2, r3, #3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	4936      	ldr	r1, [pc, #216]	; (8005190 <HAL_RCC_ClockConfig+0x1c4>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050bc:	f7fd ff1a 	bl	8002ef4 <HAL_GetTick>
 80050c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c2:	e00a      	b.n	80050da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c4:	f7fd ff16 	bl	8002ef4 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e053      	b.n	8005182 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050da:	4b2d      	ldr	r3, [pc, #180]	; (8005190 <HAL_RCC_ClockConfig+0x1c4>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f003 020c 	and.w	r2, r3, #12
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d1eb      	bne.n	80050c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050ec:	4b27      	ldr	r3, [pc, #156]	; (800518c <HAL_RCC_ClockConfig+0x1c0>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0307 	and.w	r3, r3, #7
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d210      	bcs.n	800511c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fa:	4b24      	ldr	r3, [pc, #144]	; (800518c <HAL_RCC_ClockConfig+0x1c0>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f023 0207 	bic.w	r2, r3, #7
 8005102:	4922      	ldr	r1, [pc, #136]	; (800518c <HAL_RCC_ClockConfig+0x1c0>)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	4313      	orrs	r3, r2
 8005108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800510a:	4b20      	ldr	r3, [pc, #128]	; (800518c <HAL_RCC_ClockConfig+0x1c0>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	429a      	cmp	r2, r3
 8005116:	d001      	beq.n	800511c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e032      	b.n	8005182 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d008      	beq.n	800513a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005128:	4b19      	ldr	r3, [pc, #100]	; (8005190 <HAL_RCC_ClockConfig+0x1c4>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	4916      	ldr	r1, [pc, #88]	; (8005190 <HAL_RCC_ClockConfig+0x1c4>)
 8005136:	4313      	orrs	r3, r2
 8005138:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0308 	and.w	r3, r3, #8
 8005142:	2b00      	cmp	r3, #0
 8005144:	d009      	beq.n	800515a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005146:	4b12      	ldr	r3, [pc, #72]	; (8005190 <HAL_RCC_ClockConfig+0x1c4>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	490e      	ldr	r1, [pc, #56]	; (8005190 <HAL_RCC_ClockConfig+0x1c4>)
 8005156:	4313      	orrs	r3, r2
 8005158:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800515a:	f000 f821 	bl	80051a0 <HAL_RCC_GetSysClockFreq>
 800515e:	4602      	mov	r2, r0
 8005160:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <HAL_RCC_ClockConfig+0x1c4>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	091b      	lsrs	r3, r3, #4
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	490a      	ldr	r1, [pc, #40]	; (8005194 <HAL_RCC_ClockConfig+0x1c8>)
 800516c:	5ccb      	ldrb	r3, [r1, r3]
 800516e:	fa22 f303 	lsr.w	r3, r2, r3
 8005172:	4a09      	ldr	r2, [pc, #36]	; (8005198 <HAL_RCC_ClockConfig+0x1cc>)
 8005174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005176:	4b09      	ldr	r3, [pc, #36]	; (800519c <HAL_RCC_ClockConfig+0x1d0>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4618      	mov	r0, r3
 800517c:	f7fd fe78 	bl	8002e70 <HAL_InitTick>

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40022000 	.word	0x40022000
 8005190:	40021000 	.word	0x40021000
 8005194:	080071ec 	.word	0x080071ec
 8005198:	20000000 	.word	0x20000000
 800519c:	20000004 	.word	0x20000004

080051a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60fb      	str	r3, [r7, #12]
 80051aa:	2300      	movs	r3, #0
 80051ac:	60bb      	str	r3, [r7, #8]
 80051ae:	2300      	movs	r3, #0
 80051b0:	617b      	str	r3, [r7, #20]
 80051b2:	2300      	movs	r3, #0
 80051b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80051b6:	2300      	movs	r3, #0
 80051b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80051ba:	4b1e      	ldr	r3, [pc, #120]	; (8005234 <HAL_RCC_GetSysClockFreq+0x94>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f003 030c 	and.w	r3, r3, #12
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d002      	beq.n	80051d0 <HAL_RCC_GetSysClockFreq+0x30>
 80051ca:	2b08      	cmp	r3, #8
 80051cc:	d003      	beq.n	80051d6 <HAL_RCC_GetSysClockFreq+0x36>
 80051ce:	e027      	b.n	8005220 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80051d0:	4b19      	ldr	r3, [pc, #100]	; (8005238 <HAL_RCC_GetSysClockFreq+0x98>)
 80051d2:	613b      	str	r3, [r7, #16]
      break;
 80051d4:	e027      	b.n	8005226 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	0c9b      	lsrs	r3, r3, #18
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	4a17      	ldr	r2, [pc, #92]	; (800523c <HAL_RCC_GetSysClockFreq+0x9c>)
 80051e0:	5cd3      	ldrb	r3, [r2, r3]
 80051e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d010      	beq.n	8005210 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80051ee:	4b11      	ldr	r3, [pc, #68]	; (8005234 <HAL_RCC_GetSysClockFreq+0x94>)
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	0c5b      	lsrs	r3, r3, #17
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	4a11      	ldr	r2, [pc, #68]	; (8005240 <HAL_RCC_GetSysClockFreq+0xa0>)
 80051fa:	5cd3      	ldrb	r3, [r2, r3]
 80051fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a0d      	ldr	r2, [pc, #52]	; (8005238 <HAL_RCC_GetSysClockFreq+0x98>)
 8005202:	fb03 f202 	mul.w	r2, r3, r2
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	fbb2 f3f3 	udiv	r3, r2, r3
 800520c:	617b      	str	r3, [r7, #20]
 800520e:	e004      	b.n	800521a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a0c      	ldr	r2, [pc, #48]	; (8005244 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005214:	fb02 f303 	mul.w	r3, r2, r3
 8005218:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	613b      	str	r3, [r7, #16]
      break;
 800521e:	e002      	b.n	8005226 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005220:	4b05      	ldr	r3, [pc, #20]	; (8005238 <HAL_RCC_GetSysClockFreq+0x98>)
 8005222:	613b      	str	r3, [r7, #16]
      break;
 8005224:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005226:	693b      	ldr	r3, [r7, #16]
}
 8005228:	4618      	mov	r0, r3
 800522a:	371c      	adds	r7, #28
 800522c:	46bd      	mov	sp, r7
 800522e:	bc80      	pop	{r7}
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	40021000 	.word	0x40021000
 8005238:	007a1200 	.word	0x007a1200
 800523c:	08007204 	.word	0x08007204
 8005240:	08007214 	.word	0x08007214
 8005244:	003d0900 	.word	0x003d0900

08005248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800524c:	4b02      	ldr	r3, [pc, #8]	; (8005258 <HAL_RCC_GetHCLKFreq+0x10>)
 800524e:	681b      	ldr	r3, [r3, #0]
}
 8005250:	4618      	mov	r0, r3
 8005252:	46bd      	mov	sp, r7
 8005254:	bc80      	pop	{r7}
 8005256:	4770      	bx	lr
 8005258:	20000000 	.word	0x20000000

0800525c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005260:	f7ff fff2 	bl	8005248 <HAL_RCC_GetHCLKFreq>
 8005264:	4602      	mov	r2, r0
 8005266:	4b05      	ldr	r3, [pc, #20]	; (800527c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	0a1b      	lsrs	r3, r3, #8
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	4903      	ldr	r1, [pc, #12]	; (8005280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005272:	5ccb      	ldrb	r3, [r1, r3]
 8005274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005278:	4618      	mov	r0, r3
 800527a:	bd80      	pop	{r7, pc}
 800527c:	40021000 	.word	0x40021000
 8005280:	080071fc 	.word	0x080071fc

08005284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005288:	f7ff ffde 	bl	8005248 <HAL_RCC_GetHCLKFreq>
 800528c:	4602      	mov	r2, r0
 800528e:	4b05      	ldr	r3, [pc, #20]	; (80052a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	0adb      	lsrs	r3, r3, #11
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	4903      	ldr	r1, [pc, #12]	; (80052a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800529a:	5ccb      	ldrb	r3, [r1, r3]
 800529c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	40021000 	.word	0x40021000
 80052a8:	080071fc 	.word	0x080071fc

080052ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80052b4:	4b0a      	ldr	r3, [pc, #40]	; (80052e0 <RCC_Delay+0x34>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a0a      	ldr	r2, [pc, #40]	; (80052e4 <RCC_Delay+0x38>)
 80052ba:	fba2 2303 	umull	r2, r3, r2, r3
 80052be:	0a5b      	lsrs	r3, r3, #9
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	fb02 f303 	mul.w	r3, r2, r3
 80052c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80052c8:	bf00      	nop
  }
  while (Delay --);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	1e5a      	subs	r2, r3, #1
 80052ce:	60fa      	str	r2, [r7, #12]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1f9      	bne.n	80052c8 <RCC_Delay+0x1c>
}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	bc80      	pop	{r7}
 80052de:	4770      	bx	lr
 80052e0:	20000000 	.word	0x20000000
 80052e4:	10624dd3 	.word	0x10624dd3

080052e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e042      	b.n	8005380 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d106      	bne.n	8005314 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7fd fc3a 	bl	8002b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2224      	movs	r2, #36	; 0x24
 8005318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68da      	ldr	r2, [r3, #12]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800532a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 fdc3 	bl	8005eb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	691a      	ldr	r2, [r3, #16]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005340:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695a      	ldr	r2, [r3, #20]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005350:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68da      	ldr	r2, [r3, #12]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005360:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2220      	movs	r2, #32
 8005374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08c      	sub	sp, #48	; 0x30
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	4613      	mov	r3, r2
 8005394:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b20      	cmp	r3, #32
 80053a0:	d156      	bne.n	8005450 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <HAL_UART_Transmit_DMA+0x26>
 80053a8:	88fb      	ldrh	r3, [r7, #6]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e04f      	b.n	8005452 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	88fa      	ldrh	r2, [r7, #6]
 80053bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	88fa      	ldrh	r2, [r7, #6]
 80053c2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2221      	movs	r2, #33	; 0x21
 80053ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d6:	4a21      	ldr	r2, [pc, #132]	; (800545c <HAL_UART_Transmit_DMA+0xd4>)
 80053d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	4a20      	ldr	r2, [pc, #128]	; (8005460 <HAL_UART_Transmit_DMA+0xd8>)
 80053e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e6:	4a1f      	ldr	r2, [pc, #124]	; (8005464 <HAL_UART_Transmit_DMA+0xdc>)
 80053e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ee:	2200      	movs	r2, #0
 80053f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80053f2:	f107 0308 	add.w	r3, r7, #8
 80053f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80053fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fe:	6819      	ldr	r1, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3304      	adds	r3, #4
 8005406:	461a      	mov	r2, r3
 8005408:	88fb      	ldrh	r3, [r7, #6]
 800540a:	f7fd ff09 	bl	8003220 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005416:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3314      	adds	r3, #20
 800541e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	e853 3f00 	ldrex	r3, [r3]
 8005426:	617b      	str	r3, [r7, #20]
   return(result);
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800542e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3314      	adds	r3, #20
 8005436:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005438:	627a      	str	r2, [r7, #36]	; 0x24
 800543a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543c:	6a39      	ldr	r1, [r7, #32]
 800543e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005440:	e841 2300 	strex	r3, r2, [r1]
 8005444:	61fb      	str	r3, [r7, #28]
   return(result);
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1e5      	bne.n	8005418 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800544c:	2300      	movs	r3, #0
 800544e:	e000      	b.n	8005452 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005450:	2302      	movs	r3, #2
  }
}
 8005452:	4618      	mov	r0, r3
 8005454:	3730      	adds	r7, #48	; 0x30
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	080059eb 	.word	0x080059eb
 8005460:	08005a85 	.word	0x08005a85
 8005464:	08005aa1 	.word	0x08005aa1

08005468 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b0ba      	sub	sp, #232	; 0xe8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800548e:	2300      	movs	r3, #0
 8005490:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005494:	2300      	movs	r3, #0
 8005496:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800549a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800549e:	f003 030f 	and.w	r3, r3, #15
 80054a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80054a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10f      	bne.n	80054ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054b2:	f003 0320 	and.w	r3, r3, #32
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d009      	beq.n	80054ce <HAL_UART_IRQHandler+0x66>
 80054ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054be:	f003 0320 	and.w	r3, r3, #32
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fc38 	bl	8005d3c <UART_Receive_IT>
      return;
 80054cc:	e25b      	b.n	8005986 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80054ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 80de 	beq.w	8005694 <HAL_UART_IRQHandler+0x22c>
 80054d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d106      	bne.n	80054f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 80d1 	beq.w	8005694 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00b      	beq.n	8005516 <HAL_UART_IRQHandler+0xae>
 80054fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005506:	2b00      	cmp	r3, #0
 8005508:	d005      	beq.n	8005516 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550e:	f043 0201 	orr.w	r2, r3, #1
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800551a:	f003 0304 	and.w	r3, r3, #4
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00b      	beq.n	800553a <HAL_UART_IRQHandler+0xd2>
 8005522:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d005      	beq.n	800553a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005532:	f043 0202 	orr.w	r2, r3, #2
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800553a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00b      	beq.n	800555e <HAL_UART_IRQHandler+0xf6>
 8005546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d005      	beq.n	800555e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005556:	f043 0204 	orr.w	r2, r3, #4
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800555e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005562:	f003 0308 	and.w	r3, r3, #8
 8005566:	2b00      	cmp	r3, #0
 8005568:	d011      	beq.n	800558e <HAL_UART_IRQHandler+0x126>
 800556a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800556e:	f003 0320 	and.w	r3, r3, #32
 8005572:	2b00      	cmp	r3, #0
 8005574:	d105      	bne.n	8005582 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d005      	beq.n	800558e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005586:	f043 0208 	orr.w	r2, r3, #8
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 81f2 	beq.w	800597c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800559c:	f003 0320 	and.w	r3, r3, #32
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d008      	beq.n	80055b6 <HAL_UART_IRQHandler+0x14e>
 80055a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055a8:	f003 0320 	and.w	r3, r3, #32
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 fbc3 	bl	8005d3c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	bf14      	ite	ne
 80055c4:	2301      	movne	r3, #1
 80055c6:	2300      	moveq	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d103      	bne.n	80055e2 <HAL_UART_IRQHandler+0x17a>
 80055da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d04f      	beq.n	8005682 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 facd 	bl	8005b82 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d041      	beq.n	800567a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3314      	adds	r3, #20
 80055fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005600:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005604:	e853 3f00 	ldrex	r3, [r3]
 8005608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800560c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005614:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	3314      	adds	r3, #20
 800561e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005622:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005626:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800562e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005632:	e841 2300 	strex	r3, r2, [r1]
 8005636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800563a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1d9      	bne.n	80055f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005646:	2b00      	cmp	r3, #0
 8005648:	d013      	beq.n	8005672 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800564e:	4a7e      	ldr	r2, [pc, #504]	; (8005848 <HAL_UART_IRQHandler+0x3e0>)
 8005650:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005656:	4618      	mov	r0, r3
 8005658:	f7fd fe7e 	bl	8003358 <HAL_DMA_Abort_IT>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d016      	beq.n	8005690 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800566c:	4610      	mov	r0, r2
 800566e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005670:	e00e      	b.n	8005690 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f9a5 	bl	80059c2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005678:	e00a      	b.n	8005690 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f9a1 	bl	80059c2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005680:	e006      	b.n	8005690 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f99d 	bl	80059c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800568e:	e175      	b.n	800597c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005690:	bf00      	nop
    return;
 8005692:	e173      	b.n	800597c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005698:	2b01      	cmp	r3, #1
 800569a:	f040 814f 	bne.w	800593c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800569e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056a2:	f003 0310 	and.w	r3, r3, #16
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 8148 	beq.w	800593c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80056ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056b0:	f003 0310 	and.w	r3, r3, #16
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 8141 	beq.w	800593c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056ba:	2300      	movs	r3, #0
 80056bc:	60bb      	str	r3, [r7, #8]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	60bb      	str	r3, [r7, #8]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	60bb      	str	r3, [r7, #8]
 80056ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 80b6 	beq.w	800584c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 8145 	beq.w	8005980 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056fe:	429a      	cmp	r2, r3
 8005700:	f080 813e 	bcs.w	8005980 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800570a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	2b20      	cmp	r3, #32
 8005714:	f000 8088 	beq.w	8005828 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	330c      	adds	r3, #12
 800571e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005726:	e853 3f00 	ldrex	r3, [r3]
 800572a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800572e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005732:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005736:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	330c      	adds	r3, #12
 8005740:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005744:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005748:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005750:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005754:	e841 2300 	strex	r3, r2, [r1]
 8005758:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800575c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1d9      	bne.n	8005718 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3314      	adds	r3, #20
 800576a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800576e:	e853 3f00 	ldrex	r3, [r3]
 8005772:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005774:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005776:	f023 0301 	bic.w	r3, r3, #1
 800577a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3314      	adds	r3, #20
 8005784:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005788:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800578c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005790:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005794:	e841 2300 	strex	r3, r2, [r1]
 8005798:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800579a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1e1      	bne.n	8005764 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	3314      	adds	r3, #20
 80057a6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057aa:	e853 3f00 	ldrex	r3, [r3]
 80057ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80057b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	3314      	adds	r3, #20
 80057c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80057c4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80057c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80057ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057cc:	e841 2300 	strex	r3, r2, [r1]
 80057d0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80057d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e3      	bne.n	80057a0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2220      	movs	r2, #32
 80057dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	330c      	adds	r3, #12
 80057ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f0:	e853 3f00 	ldrex	r3, [r3]
 80057f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057f8:	f023 0310 	bic.w	r3, r3, #16
 80057fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	330c      	adds	r3, #12
 8005806:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800580a:	65ba      	str	r2, [r7, #88]	; 0x58
 800580c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005810:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005812:	e841 2300 	strex	r3, r2, [r1]
 8005816:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1e3      	bne.n	80057e6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005822:	4618      	mov	r0, r3
 8005824:	f7fd fd5c 	bl	80032e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005836:	b29b      	uxth	r3, r3
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	b29b      	uxth	r3, r3
 800583c:	4619      	mov	r1, r3
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f8c8 	bl	80059d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005844:	e09c      	b.n	8005980 <HAL_UART_IRQHandler+0x518>
 8005846:	bf00      	nop
 8005848:	08005c47 	.word	0x08005c47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005854:	b29b      	uxth	r3, r3
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005860:	b29b      	uxth	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 808e 	beq.w	8005984 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005868:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 8089 	beq.w	8005984 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	330c      	adds	r3, #12
 8005878:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005884:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005888:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	330c      	adds	r3, #12
 8005892:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005896:	647a      	str	r2, [r7, #68]	; 0x44
 8005898:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800589c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800589e:	e841 2300 	strex	r3, r2, [r1]
 80058a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1e3      	bne.n	8005872 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	3314      	adds	r3, #20
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	e853 3f00 	ldrex	r3, [r3]
 80058b8:	623b      	str	r3, [r7, #32]
   return(result);
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	f023 0301 	bic.w	r3, r3, #1
 80058c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3314      	adds	r3, #20
 80058ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80058ce:	633a      	str	r2, [r7, #48]	; 0x30
 80058d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058d6:	e841 2300 	strex	r3, r2, [r1]
 80058da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1e3      	bne.n	80058aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2220      	movs	r2, #32
 80058e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	330c      	adds	r3, #12
 80058f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	e853 3f00 	ldrex	r3, [r3]
 80058fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 0310 	bic.w	r3, r3, #16
 8005906:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	330c      	adds	r3, #12
 8005910:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005914:	61fa      	str	r2, [r7, #28]
 8005916:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005918:	69b9      	ldr	r1, [r7, #24]
 800591a:	69fa      	ldr	r2, [r7, #28]
 800591c:	e841 2300 	strex	r3, r2, [r1]
 8005920:	617b      	str	r3, [r7, #20]
   return(result);
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1e3      	bne.n	80058f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800592e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005932:	4619      	mov	r1, r3
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f84d 	bl	80059d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800593a:	e023      	b.n	8005984 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800593c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005944:	2b00      	cmp	r3, #0
 8005946:	d009      	beq.n	800595c <HAL_UART_IRQHandler+0x4f4>
 8005948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800594c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f98a 	bl	8005c6e <UART_Transmit_IT>
    return;
 800595a:	e014      	b.n	8005986 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800595c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00e      	beq.n	8005986 <HAL_UART_IRQHandler+0x51e>
 8005968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800596c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005970:	2b00      	cmp	r3, #0
 8005972:	d008      	beq.n	8005986 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f9c9 	bl	8005d0c <UART_EndTransmit_IT>
    return;
 800597a:	e004      	b.n	8005986 <HAL_UART_IRQHandler+0x51e>
    return;
 800597c:	bf00      	nop
 800597e:	e002      	b.n	8005986 <HAL_UART_IRQHandler+0x51e>
      return;
 8005980:	bf00      	nop
 8005982:	e000      	b.n	8005986 <HAL_UART_IRQHandler+0x51e>
      return;
 8005984:	bf00      	nop
  }
}
 8005986:	37e8      	adds	r7, #232	; 0xe8
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	bc80      	pop	{r7}
 800599c:	4770      	bx	lr

0800599e <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bc80      	pop	{r7}
 80059ae:	4770      	bx	lr

080059b0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	bc80      	pop	{r7}
 80059c0:	4770      	bx	lr

080059c2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr

080059d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	460b      	mov	r3, r1
 80059de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bc80      	pop	{r7}
 80059e8:	4770      	bx	lr

080059ea <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b090      	sub	sp, #64	; 0x40
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0320 	and.w	r3, r3, #32
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d137      	bne.n	8005a76 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a08:	2200      	movs	r2, #0
 8005a0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3314      	adds	r3, #20
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	e853 3f00 	ldrex	r3, [r3]
 8005a1a:	623b      	str	r3, [r7, #32]
   return(result);
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a22:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3314      	adds	r3, #20
 8005a2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a2c:	633a      	str	r2, [r7, #48]	; 0x30
 8005a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a34:	e841 2300 	strex	r3, r2, [r1]
 8005a38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e5      	bne.n	8005a0c <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	330c      	adds	r3, #12
 8005a46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	e853 3f00 	ldrex	r3, [r3]
 8005a4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a56:	637b      	str	r3, [r7, #52]	; 0x34
 8005a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	330c      	adds	r3, #12
 8005a5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a60:	61fa      	str	r2, [r7, #28]
 8005a62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a64:	69b9      	ldr	r1, [r7, #24]
 8005a66:	69fa      	ldr	r2, [r7, #28]
 8005a68:	e841 2300 	strex	r3, r2, [r1]
 8005a6c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e5      	bne.n	8005a40 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a74:	e002      	b.n	8005a7c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005a76:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005a78:	f7ff ff88 	bl	800598c <HAL_UART_TxCpltCallback>
}
 8005a7c:	bf00      	nop
 8005a7e:	3740      	adds	r7, #64	; 0x40
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a90:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f7ff ff83 	bl	800599e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a98:	bf00      	nop
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	bf14      	ite	ne
 8005ac0:	2301      	movne	r3, #1
 8005ac2:	2300      	moveq	r3, #0
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b21      	cmp	r3, #33	; 0x21
 8005ad2:	d108      	bne.n	8005ae6 <UART_DMAError+0x46>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d005      	beq.n	8005ae6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2200      	movs	r2, #0
 8005ade:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005ae0:	68b8      	ldr	r0, [r7, #8]
 8005ae2:	f000 f827 	bl	8005b34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	bf14      	ite	ne
 8005af4:	2301      	movne	r3, #1
 8005af6:	2300      	moveq	r3, #0
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b22      	cmp	r3, #34	; 0x22
 8005b06:	d108      	bne.n	8005b1a <UART_DMAError+0x7a>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d005      	beq.n	8005b1a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	2200      	movs	r2, #0
 8005b12:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005b14:	68b8      	ldr	r0, [r7, #8]
 8005b16:	f000 f834 	bl	8005b82 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1e:	f043 0210 	orr.w	r2, r3, #16
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b26:	68b8      	ldr	r0, [r7, #8]
 8005b28:	f7ff ff4b 	bl	80059c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b2c:	bf00      	nop
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b089      	sub	sp, #36	; 0x24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	330c      	adds	r3, #12
 8005b42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005b52:	61fb      	str	r3, [r7, #28]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	330c      	adds	r3, #12
 8005b5a:	69fa      	ldr	r2, [r7, #28]
 8005b5c:	61ba      	str	r2, [r7, #24]
 8005b5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	6979      	ldr	r1, [r7, #20]
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	e841 2300 	strex	r3, r2, [r1]
 8005b68:	613b      	str	r3, [r7, #16]
   return(result);
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e5      	bne.n	8005b3c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005b78:	bf00      	nop
 8005b7a:	3724      	adds	r7, #36	; 0x24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bc80      	pop	{r7}
 8005b80:	4770      	bx	lr

08005b82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b095      	sub	sp, #84	; 0x54
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	330c      	adds	r3, #12
 8005b90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b94:	e853 3f00 	ldrex	r3, [r3]
 8005b98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	330c      	adds	r3, #12
 8005ba8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005baa:	643a      	str	r2, [r7, #64]	; 0x40
 8005bac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bb2:	e841 2300 	strex	r3, r2, [r1]
 8005bb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1e5      	bne.n	8005b8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	3314      	adds	r3, #20
 8005bc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	e853 3f00 	ldrex	r3, [r3]
 8005bcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	f023 0301 	bic.w	r3, r3, #1
 8005bd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	3314      	adds	r3, #20
 8005bdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005be0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005be6:	e841 2300 	strex	r3, r2, [r1]
 8005bea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1e5      	bne.n	8005bbe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d119      	bne.n	8005c2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	330c      	adds	r3, #12
 8005c00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	e853 3f00 	ldrex	r3, [r3]
 8005c08:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f023 0310 	bic.w	r3, r3, #16
 8005c10:	647b      	str	r3, [r7, #68]	; 0x44
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	330c      	adds	r3, #12
 8005c18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c1a:	61ba      	str	r2, [r7, #24]
 8005c1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1e:	6979      	ldr	r1, [r7, #20]
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	e841 2300 	strex	r3, r2, [r1]
 8005c26:	613b      	str	r3, [r7, #16]
   return(result);
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1e5      	bne.n	8005bfa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005c3c:	bf00      	nop
 8005c3e:	3754      	adds	r7, #84	; 0x54
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bc80      	pop	{r7}
 8005c44:	4770      	bx	lr

08005c46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b084      	sub	sp, #16
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f7ff feae 	bl	80059c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c66:	bf00      	nop
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b085      	sub	sp, #20
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b21      	cmp	r3, #33	; 0x21
 8005c80:	d13e      	bne.n	8005d00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c8a:	d114      	bne.n	8005cb6 <UART_Transmit_IT+0x48>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d110      	bne.n	8005cb6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ca8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	1c9a      	adds	r2, r3, #2
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	621a      	str	r2, [r3, #32]
 8005cb4:	e008      	b.n	8005cc8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	1c59      	adds	r1, r3, #1
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	6211      	str	r1, [r2, #32]
 8005cc0:	781a      	ldrb	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10f      	bne.n	8005cfc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68da      	ldr	r2, [r3, #12]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68da      	ldr	r2, [r3, #12]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cfa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	e000      	b.n	8005d02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d00:	2302      	movs	r3, #2
  }
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bc80      	pop	{r7}
 8005d0a:	4770      	bx	lr

08005d0c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d22:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2220      	movs	r2, #32
 8005d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7ff fe2d 	bl	800598c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3708      	adds	r7, #8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b08c      	sub	sp, #48	; 0x30
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b22      	cmp	r3, #34	; 0x22
 8005d4e:	f040 80ae 	bne.w	8005eae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d5a:	d117      	bne.n	8005d8c <UART_Receive_IT+0x50>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d113      	bne.n	8005d8c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d64:	2300      	movs	r3, #0
 8005d66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d84:	1c9a      	adds	r2, r3, #2
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	629a      	str	r2, [r3, #40]	; 0x28
 8005d8a:	e026      	b.n	8005dda <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d90:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005d92:	2300      	movs	r3, #0
 8005d94:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d9e:	d007      	beq.n	8005db0 <UART_Receive_IT+0x74>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10a      	bne.n	8005dbe <UART_Receive_IT+0x82>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d106      	bne.n	8005dbe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dba:	701a      	strb	r2, [r3, #0]
 8005dbc:	e008      	b.n	8005dd0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dca:	b2da      	uxtb	r2, r3
 8005dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd4:	1c5a      	adds	r2, r3, #1
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	3b01      	subs	r3, #1
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	4619      	mov	r1, r3
 8005de8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d15d      	bne.n	8005eaa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0220 	bic.w	r2, r2, #32
 8005dfc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68da      	ldr	r2, [r3, #12]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	695a      	ldr	r2, [r3, #20]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0201 	bic.w	r2, r2, #1
 8005e1c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2220      	movs	r2, #32
 8005e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d135      	bne.n	8005ea0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	330c      	adds	r3, #12
 8005e40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	e853 3f00 	ldrex	r3, [r3]
 8005e48:	613b      	str	r3, [r7, #16]
   return(result);
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	f023 0310 	bic.w	r3, r3, #16
 8005e50:	627b      	str	r3, [r7, #36]	; 0x24
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	330c      	adds	r3, #12
 8005e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e5a:	623a      	str	r2, [r7, #32]
 8005e5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5e:	69f9      	ldr	r1, [r7, #28]
 8005e60:	6a3a      	ldr	r2, [r7, #32]
 8005e62:	e841 2300 	strex	r3, r2, [r1]
 8005e66:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1e5      	bne.n	8005e3a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0310 	and.w	r3, r3, #16
 8005e78:	2b10      	cmp	r3, #16
 8005e7a:	d10a      	bne.n	8005e92 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e96:	4619      	mov	r1, r3
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f7ff fd9b 	bl	80059d4 <HAL_UARTEx_RxEventCallback>
 8005e9e:	e002      	b.n	8005ea6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff fd85 	bl	80059b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	e002      	b.n	8005eb0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	e000      	b.n	8005eb0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005eae:	2302      	movs	r3, #2
  }
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3730      	adds	r7, #48	; 0x30
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	689a      	ldr	r2, [r3, #8]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005ef2:	f023 030c 	bic.w	r3, r3, #12
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	6812      	ldr	r2, [r2, #0]
 8005efa:	68b9      	ldr	r1, [r7, #8]
 8005efc:	430b      	orrs	r3, r1
 8005efe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	699a      	ldr	r2, [r3, #24]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a2c      	ldr	r2, [pc, #176]	; (8005fcc <UART_SetConfig+0x114>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d103      	bne.n	8005f28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f20:	f7ff f9b0 	bl	8005284 <HAL_RCC_GetPCLK2Freq>
 8005f24:	60f8      	str	r0, [r7, #12]
 8005f26:	e002      	b.n	8005f2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f28:	f7ff f998 	bl	800525c <HAL_RCC_GetPCLK1Freq>
 8005f2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4613      	mov	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	009a      	lsls	r2, r3, #2
 8005f38:	441a      	add	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f44:	4a22      	ldr	r2, [pc, #136]	; (8005fd0 <UART_SetConfig+0x118>)
 8005f46:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4a:	095b      	lsrs	r3, r3, #5
 8005f4c:	0119      	lsls	r1, r3, #4
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	4613      	mov	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	009a      	lsls	r2, r3, #2
 8005f58:	441a      	add	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f64:	4b1a      	ldr	r3, [pc, #104]	; (8005fd0 <UART_SetConfig+0x118>)
 8005f66:	fba3 0302 	umull	r0, r3, r3, r2
 8005f6a:	095b      	lsrs	r3, r3, #5
 8005f6c:	2064      	movs	r0, #100	; 0x64
 8005f6e:	fb00 f303 	mul.w	r3, r0, r3
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	011b      	lsls	r3, r3, #4
 8005f76:	3332      	adds	r3, #50	; 0x32
 8005f78:	4a15      	ldr	r2, [pc, #84]	; (8005fd0 <UART_SetConfig+0x118>)
 8005f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7e:	095b      	lsrs	r3, r3, #5
 8005f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f84:	4419      	add	r1, r3
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	009a      	lsls	r2, r3, #2
 8005f90:	441a      	add	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f9c:	4b0c      	ldr	r3, [pc, #48]	; (8005fd0 <UART_SetConfig+0x118>)
 8005f9e:	fba3 0302 	umull	r0, r3, r3, r2
 8005fa2:	095b      	lsrs	r3, r3, #5
 8005fa4:	2064      	movs	r0, #100	; 0x64
 8005fa6:	fb00 f303 	mul.w	r3, r0, r3
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	011b      	lsls	r3, r3, #4
 8005fae:	3332      	adds	r3, #50	; 0x32
 8005fb0:	4a07      	ldr	r2, [pc, #28]	; (8005fd0 <UART_SetConfig+0x118>)
 8005fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb6:	095b      	lsrs	r3, r3, #5
 8005fb8:	f003 020f 	and.w	r2, r3, #15
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	440a      	add	r2, r1
 8005fc2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005fc4:	bf00      	nop
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	40013800 	.word	0x40013800
 8005fd0:	51eb851f 	.word	0x51eb851f

08005fd4 <__errno>:
 8005fd4:	4b01      	ldr	r3, [pc, #4]	; (8005fdc <__errno+0x8>)
 8005fd6:	6818      	ldr	r0, [r3, #0]
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	2000000c 	.word	0x2000000c

08005fe0 <__libc_init_array>:
 8005fe0:	b570      	push	{r4, r5, r6, lr}
 8005fe2:	2600      	movs	r6, #0
 8005fe4:	4d0c      	ldr	r5, [pc, #48]	; (8006018 <__libc_init_array+0x38>)
 8005fe6:	4c0d      	ldr	r4, [pc, #52]	; (800601c <__libc_init_array+0x3c>)
 8005fe8:	1b64      	subs	r4, r4, r5
 8005fea:	10a4      	asrs	r4, r4, #2
 8005fec:	42a6      	cmp	r6, r4
 8005fee:	d109      	bne.n	8006004 <__libc_init_array+0x24>
 8005ff0:	f001 f81c 	bl	800702c <_init>
 8005ff4:	2600      	movs	r6, #0
 8005ff6:	4d0a      	ldr	r5, [pc, #40]	; (8006020 <__libc_init_array+0x40>)
 8005ff8:	4c0a      	ldr	r4, [pc, #40]	; (8006024 <__libc_init_array+0x44>)
 8005ffa:	1b64      	subs	r4, r4, r5
 8005ffc:	10a4      	asrs	r4, r4, #2
 8005ffe:	42a6      	cmp	r6, r4
 8006000:	d105      	bne.n	800600e <__libc_init_array+0x2e>
 8006002:	bd70      	pop	{r4, r5, r6, pc}
 8006004:	f855 3b04 	ldr.w	r3, [r5], #4
 8006008:	4798      	blx	r3
 800600a:	3601      	adds	r6, #1
 800600c:	e7ee      	b.n	8005fec <__libc_init_array+0xc>
 800600e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006012:	4798      	blx	r3
 8006014:	3601      	adds	r6, #1
 8006016:	e7f2      	b.n	8005ffe <__libc_init_array+0x1e>
 8006018:	08007248 	.word	0x08007248
 800601c:	08007248 	.word	0x08007248
 8006020:	08007248 	.word	0x08007248
 8006024:	0800724c 	.word	0x0800724c

08006028 <malloc>:
 8006028:	4b02      	ldr	r3, [pc, #8]	; (8006034 <malloc+0xc>)
 800602a:	4601      	mov	r1, r0
 800602c:	6818      	ldr	r0, [r3, #0]
 800602e:	f000 b889 	b.w	8006144 <_malloc_r>
 8006032:	bf00      	nop
 8006034:	2000000c 	.word	0x2000000c

08006038 <free>:
 8006038:	4b02      	ldr	r3, [pc, #8]	; (8006044 <free+0xc>)
 800603a:	4601      	mov	r1, r0
 800603c:	6818      	ldr	r0, [r3, #0]
 800603e:	f000 b819 	b.w	8006074 <_free_r>
 8006042:	bf00      	nop
 8006044:	2000000c 	.word	0x2000000c

08006048 <memcpy>:
 8006048:	440a      	add	r2, r1
 800604a:	4291      	cmp	r1, r2
 800604c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006050:	d100      	bne.n	8006054 <memcpy+0xc>
 8006052:	4770      	bx	lr
 8006054:	b510      	push	{r4, lr}
 8006056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800605a:	4291      	cmp	r1, r2
 800605c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006060:	d1f9      	bne.n	8006056 <memcpy+0xe>
 8006062:	bd10      	pop	{r4, pc}

08006064 <memset>:
 8006064:	4603      	mov	r3, r0
 8006066:	4402      	add	r2, r0
 8006068:	4293      	cmp	r3, r2
 800606a:	d100      	bne.n	800606e <memset+0xa>
 800606c:	4770      	bx	lr
 800606e:	f803 1b01 	strb.w	r1, [r3], #1
 8006072:	e7f9      	b.n	8006068 <memset+0x4>

08006074 <_free_r>:
 8006074:	b538      	push	{r3, r4, r5, lr}
 8006076:	4605      	mov	r5, r0
 8006078:	2900      	cmp	r1, #0
 800607a:	d040      	beq.n	80060fe <_free_r+0x8a>
 800607c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006080:	1f0c      	subs	r4, r1, #4
 8006082:	2b00      	cmp	r3, #0
 8006084:	bfb8      	it	lt
 8006086:	18e4      	addlt	r4, r4, r3
 8006088:	f000 f8e0 	bl	800624c <__malloc_lock>
 800608c:	4a1c      	ldr	r2, [pc, #112]	; (8006100 <_free_r+0x8c>)
 800608e:	6813      	ldr	r3, [r2, #0]
 8006090:	b933      	cbnz	r3, 80060a0 <_free_r+0x2c>
 8006092:	6063      	str	r3, [r4, #4]
 8006094:	6014      	str	r4, [r2, #0]
 8006096:	4628      	mov	r0, r5
 8006098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800609c:	f000 b8dc 	b.w	8006258 <__malloc_unlock>
 80060a0:	42a3      	cmp	r3, r4
 80060a2:	d908      	bls.n	80060b6 <_free_r+0x42>
 80060a4:	6820      	ldr	r0, [r4, #0]
 80060a6:	1821      	adds	r1, r4, r0
 80060a8:	428b      	cmp	r3, r1
 80060aa:	bf01      	itttt	eq
 80060ac:	6819      	ldreq	r1, [r3, #0]
 80060ae:	685b      	ldreq	r3, [r3, #4]
 80060b0:	1809      	addeq	r1, r1, r0
 80060b2:	6021      	streq	r1, [r4, #0]
 80060b4:	e7ed      	b.n	8006092 <_free_r+0x1e>
 80060b6:	461a      	mov	r2, r3
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	b10b      	cbz	r3, 80060c0 <_free_r+0x4c>
 80060bc:	42a3      	cmp	r3, r4
 80060be:	d9fa      	bls.n	80060b6 <_free_r+0x42>
 80060c0:	6811      	ldr	r1, [r2, #0]
 80060c2:	1850      	adds	r0, r2, r1
 80060c4:	42a0      	cmp	r0, r4
 80060c6:	d10b      	bne.n	80060e0 <_free_r+0x6c>
 80060c8:	6820      	ldr	r0, [r4, #0]
 80060ca:	4401      	add	r1, r0
 80060cc:	1850      	adds	r0, r2, r1
 80060ce:	4283      	cmp	r3, r0
 80060d0:	6011      	str	r1, [r2, #0]
 80060d2:	d1e0      	bne.n	8006096 <_free_r+0x22>
 80060d4:	6818      	ldr	r0, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	4401      	add	r1, r0
 80060da:	6011      	str	r1, [r2, #0]
 80060dc:	6053      	str	r3, [r2, #4]
 80060de:	e7da      	b.n	8006096 <_free_r+0x22>
 80060e0:	d902      	bls.n	80060e8 <_free_r+0x74>
 80060e2:	230c      	movs	r3, #12
 80060e4:	602b      	str	r3, [r5, #0]
 80060e6:	e7d6      	b.n	8006096 <_free_r+0x22>
 80060e8:	6820      	ldr	r0, [r4, #0]
 80060ea:	1821      	adds	r1, r4, r0
 80060ec:	428b      	cmp	r3, r1
 80060ee:	bf01      	itttt	eq
 80060f0:	6819      	ldreq	r1, [r3, #0]
 80060f2:	685b      	ldreq	r3, [r3, #4]
 80060f4:	1809      	addeq	r1, r1, r0
 80060f6:	6021      	streq	r1, [r4, #0]
 80060f8:	6063      	str	r3, [r4, #4]
 80060fa:	6054      	str	r4, [r2, #4]
 80060fc:	e7cb      	b.n	8006096 <_free_r+0x22>
 80060fe:	bd38      	pop	{r3, r4, r5, pc}
 8006100:	20000438 	.word	0x20000438

08006104 <sbrk_aligned>:
 8006104:	b570      	push	{r4, r5, r6, lr}
 8006106:	4e0e      	ldr	r6, [pc, #56]	; (8006140 <sbrk_aligned+0x3c>)
 8006108:	460c      	mov	r4, r1
 800610a:	6831      	ldr	r1, [r6, #0]
 800610c:	4605      	mov	r5, r0
 800610e:	b911      	cbnz	r1, 8006116 <sbrk_aligned+0x12>
 8006110:	f000 f88c 	bl	800622c <_sbrk_r>
 8006114:	6030      	str	r0, [r6, #0]
 8006116:	4621      	mov	r1, r4
 8006118:	4628      	mov	r0, r5
 800611a:	f000 f887 	bl	800622c <_sbrk_r>
 800611e:	1c43      	adds	r3, r0, #1
 8006120:	d00a      	beq.n	8006138 <sbrk_aligned+0x34>
 8006122:	1cc4      	adds	r4, r0, #3
 8006124:	f024 0403 	bic.w	r4, r4, #3
 8006128:	42a0      	cmp	r0, r4
 800612a:	d007      	beq.n	800613c <sbrk_aligned+0x38>
 800612c:	1a21      	subs	r1, r4, r0
 800612e:	4628      	mov	r0, r5
 8006130:	f000 f87c 	bl	800622c <_sbrk_r>
 8006134:	3001      	adds	r0, #1
 8006136:	d101      	bne.n	800613c <sbrk_aligned+0x38>
 8006138:	f04f 34ff 	mov.w	r4, #4294967295
 800613c:	4620      	mov	r0, r4
 800613e:	bd70      	pop	{r4, r5, r6, pc}
 8006140:	2000043c 	.word	0x2000043c

08006144 <_malloc_r>:
 8006144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006148:	1ccd      	adds	r5, r1, #3
 800614a:	f025 0503 	bic.w	r5, r5, #3
 800614e:	3508      	adds	r5, #8
 8006150:	2d0c      	cmp	r5, #12
 8006152:	bf38      	it	cc
 8006154:	250c      	movcc	r5, #12
 8006156:	2d00      	cmp	r5, #0
 8006158:	4607      	mov	r7, r0
 800615a:	db01      	blt.n	8006160 <_malloc_r+0x1c>
 800615c:	42a9      	cmp	r1, r5
 800615e:	d905      	bls.n	800616c <_malloc_r+0x28>
 8006160:	230c      	movs	r3, #12
 8006162:	2600      	movs	r6, #0
 8006164:	603b      	str	r3, [r7, #0]
 8006166:	4630      	mov	r0, r6
 8006168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800616c:	4e2e      	ldr	r6, [pc, #184]	; (8006228 <_malloc_r+0xe4>)
 800616e:	f000 f86d 	bl	800624c <__malloc_lock>
 8006172:	6833      	ldr	r3, [r6, #0]
 8006174:	461c      	mov	r4, r3
 8006176:	bb34      	cbnz	r4, 80061c6 <_malloc_r+0x82>
 8006178:	4629      	mov	r1, r5
 800617a:	4638      	mov	r0, r7
 800617c:	f7ff ffc2 	bl	8006104 <sbrk_aligned>
 8006180:	1c43      	adds	r3, r0, #1
 8006182:	4604      	mov	r4, r0
 8006184:	d14d      	bne.n	8006222 <_malloc_r+0xde>
 8006186:	6834      	ldr	r4, [r6, #0]
 8006188:	4626      	mov	r6, r4
 800618a:	2e00      	cmp	r6, #0
 800618c:	d140      	bne.n	8006210 <_malloc_r+0xcc>
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	4631      	mov	r1, r6
 8006192:	4638      	mov	r0, r7
 8006194:	eb04 0803 	add.w	r8, r4, r3
 8006198:	f000 f848 	bl	800622c <_sbrk_r>
 800619c:	4580      	cmp	r8, r0
 800619e:	d13a      	bne.n	8006216 <_malloc_r+0xd2>
 80061a0:	6821      	ldr	r1, [r4, #0]
 80061a2:	3503      	adds	r5, #3
 80061a4:	1a6d      	subs	r5, r5, r1
 80061a6:	f025 0503 	bic.w	r5, r5, #3
 80061aa:	3508      	adds	r5, #8
 80061ac:	2d0c      	cmp	r5, #12
 80061ae:	bf38      	it	cc
 80061b0:	250c      	movcc	r5, #12
 80061b2:	4638      	mov	r0, r7
 80061b4:	4629      	mov	r1, r5
 80061b6:	f7ff ffa5 	bl	8006104 <sbrk_aligned>
 80061ba:	3001      	adds	r0, #1
 80061bc:	d02b      	beq.n	8006216 <_malloc_r+0xd2>
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	442b      	add	r3, r5
 80061c2:	6023      	str	r3, [r4, #0]
 80061c4:	e00e      	b.n	80061e4 <_malloc_r+0xa0>
 80061c6:	6822      	ldr	r2, [r4, #0]
 80061c8:	1b52      	subs	r2, r2, r5
 80061ca:	d41e      	bmi.n	800620a <_malloc_r+0xc6>
 80061cc:	2a0b      	cmp	r2, #11
 80061ce:	d916      	bls.n	80061fe <_malloc_r+0xba>
 80061d0:	1961      	adds	r1, r4, r5
 80061d2:	42a3      	cmp	r3, r4
 80061d4:	6025      	str	r5, [r4, #0]
 80061d6:	bf18      	it	ne
 80061d8:	6059      	strne	r1, [r3, #4]
 80061da:	6863      	ldr	r3, [r4, #4]
 80061dc:	bf08      	it	eq
 80061de:	6031      	streq	r1, [r6, #0]
 80061e0:	5162      	str	r2, [r4, r5]
 80061e2:	604b      	str	r3, [r1, #4]
 80061e4:	4638      	mov	r0, r7
 80061e6:	f104 060b 	add.w	r6, r4, #11
 80061ea:	f000 f835 	bl	8006258 <__malloc_unlock>
 80061ee:	f026 0607 	bic.w	r6, r6, #7
 80061f2:	1d23      	adds	r3, r4, #4
 80061f4:	1af2      	subs	r2, r6, r3
 80061f6:	d0b6      	beq.n	8006166 <_malloc_r+0x22>
 80061f8:	1b9b      	subs	r3, r3, r6
 80061fa:	50a3      	str	r3, [r4, r2]
 80061fc:	e7b3      	b.n	8006166 <_malloc_r+0x22>
 80061fe:	6862      	ldr	r2, [r4, #4]
 8006200:	42a3      	cmp	r3, r4
 8006202:	bf0c      	ite	eq
 8006204:	6032      	streq	r2, [r6, #0]
 8006206:	605a      	strne	r2, [r3, #4]
 8006208:	e7ec      	b.n	80061e4 <_malloc_r+0xa0>
 800620a:	4623      	mov	r3, r4
 800620c:	6864      	ldr	r4, [r4, #4]
 800620e:	e7b2      	b.n	8006176 <_malloc_r+0x32>
 8006210:	4634      	mov	r4, r6
 8006212:	6876      	ldr	r6, [r6, #4]
 8006214:	e7b9      	b.n	800618a <_malloc_r+0x46>
 8006216:	230c      	movs	r3, #12
 8006218:	4638      	mov	r0, r7
 800621a:	603b      	str	r3, [r7, #0]
 800621c:	f000 f81c 	bl	8006258 <__malloc_unlock>
 8006220:	e7a1      	b.n	8006166 <_malloc_r+0x22>
 8006222:	6025      	str	r5, [r4, #0]
 8006224:	e7de      	b.n	80061e4 <_malloc_r+0xa0>
 8006226:	bf00      	nop
 8006228:	20000438 	.word	0x20000438

0800622c <_sbrk_r>:
 800622c:	b538      	push	{r3, r4, r5, lr}
 800622e:	2300      	movs	r3, #0
 8006230:	4d05      	ldr	r5, [pc, #20]	; (8006248 <_sbrk_r+0x1c>)
 8006232:	4604      	mov	r4, r0
 8006234:	4608      	mov	r0, r1
 8006236:	602b      	str	r3, [r5, #0]
 8006238:	f7fc fda2 	bl	8002d80 <_sbrk>
 800623c:	1c43      	adds	r3, r0, #1
 800623e:	d102      	bne.n	8006246 <_sbrk_r+0x1a>
 8006240:	682b      	ldr	r3, [r5, #0]
 8006242:	b103      	cbz	r3, 8006246 <_sbrk_r+0x1a>
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	bd38      	pop	{r3, r4, r5, pc}
 8006248:	20000440 	.word	0x20000440

0800624c <__malloc_lock>:
 800624c:	4801      	ldr	r0, [pc, #4]	; (8006254 <__malloc_lock+0x8>)
 800624e:	f000 b809 	b.w	8006264 <__retarget_lock_acquire_recursive>
 8006252:	bf00      	nop
 8006254:	20000444 	.word	0x20000444

08006258 <__malloc_unlock>:
 8006258:	4801      	ldr	r0, [pc, #4]	; (8006260 <__malloc_unlock+0x8>)
 800625a:	f000 b804 	b.w	8006266 <__retarget_lock_release_recursive>
 800625e:	bf00      	nop
 8006260:	20000444 	.word	0x20000444

08006264 <__retarget_lock_acquire_recursive>:
 8006264:	4770      	bx	lr

08006266 <__retarget_lock_release_recursive>:
 8006266:	4770      	bx	lr

08006268 <pow>:
 8006268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800626c:	4614      	mov	r4, r2
 800626e:	461d      	mov	r5, r3
 8006270:	4680      	mov	r8, r0
 8006272:	4689      	mov	r9, r1
 8006274:	f000 f860 	bl	8006338 <__ieee754_pow>
 8006278:	4622      	mov	r2, r4
 800627a:	4606      	mov	r6, r0
 800627c:	460f      	mov	r7, r1
 800627e:	462b      	mov	r3, r5
 8006280:	4620      	mov	r0, r4
 8006282:	4629      	mov	r1, r5
 8006284:	f7fa fbba 	bl	80009fc <__aeabi_dcmpun>
 8006288:	bbc8      	cbnz	r0, 80062fe <pow+0x96>
 800628a:	2200      	movs	r2, #0
 800628c:	2300      	movs	r3, #0
 800628e:	4640      	mov	r0, r8
 8006290:	4649      	mov	r1, r9
 8006292:	f7fa fb81 	bl	8000998 <__aeabi_dcmpeq>
 8006296:	b1b8      	cbz	r0, 80062c8 <pow+0x60>
 8006298:	2200      	movs	r2, #0
 800629a:	2300      	movs	r3, #0
 800629c:	4620      	mov	r0, r4
 800629e:	4629      	mov	r1, r5
 80062a0:	f7fa fb7a 	bl	8000998 <__aeabi_dcmpeq>
 80062a4:	2800      	cmp	r0, #0
 80062a6:	d141      	bne.n	800632c <pow+0xc4>
 80062a8:	4620      	mov	r0, r4
 80062aa:	4629      	mov	r1, r5
 80062ac:	f000 fe39 	bl	8006f22 <finite>
 80062b0:	b328      	cbz	r0, 80062fe <pow+0x96>
 80062b2:	2200      	movs	r2, #0
 80062b4:	2300      	movs	r3, #0
 80062b6:	4620      	mov	r0, r4
 80062b8:	4629      	mov	r1, r5
 80062ba:	f7fa fb77 	bl	80009ac <__aeabi_dcmplt>
 80062be:	b1f0      	cbz	r0, 80062fe <pow+0x96>
 80062c0:	f7ff fe88 	bl	8005fd4 <__errno>
 80062c4:	2322      	movs	r3, #34	; 0x22
 80062c6:	e019      	b.n	80062fc <pow+0x94>
 80062c8:	4630      	mov	r0, r6
 80062ca:	4639      	mov	r1, r7
 80062cc:	f000 fe29 	bl	8006f22 <finite>
 80062d0:	b9c8      	cbnz	r0, 8006306 <pow+0x9e>
 80062d2:	4640      	mov	r0, r8
 80062d4:	4649      	mov	r1, r9
 80062d6:	f000 fe24 	bl	8006f22 <finite>
 80062da:	b1a0      	cbz	r0, 8006306 <pow+0x9e>
 80062dc:	4620      	mov	r0, r4
 80062de:	4629      	mov	r1, r5
 80062e0:	f000 fe1f 	bl	8006f22 <finite>
 80062e4:	b178      	cbz	r0, 8006306 <pow+0x9e>
 80062e6:	4632      	mov	r2, r6
 80062e8:	463b      	mov	r3, r7
 80062ea:	4630      	mov	r0, r6
 80062ec:	4639      	mov	r1, r7
 80062ee:	f7fa fb85 	bl	80009fc <__aeabi_dcmpun>
 80062f2:	2800      	cmp	r0, #0
 80062f4:	d0e4      	beq.n	80062c0 <pow+0x58>
 80062f6:	f7ff fe6d 	bl	8005fd4 <__errno>
 80062fa:	2321      	movs	r3, #33	; 0x21
 80062fc:	6003      	str	r3, [r0, #0]
 80062fe:	4630      	mov	r0, r6
 8006300:	4639      	mov	r1, r7
 8006302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006306:	2200      	movs	r2, #0
 8006308:	2300      	movs	r3, #0
 800630a:	4630      	mov	r0, r6
 800630c:	4639      	mov	r1, r7
 800630e:	f7fa fb43 	bl	8000998 <__aeabi_dcmpeq>
 8006312:	2800      	cmp	r0, #0
 8006314:	d0f3      	beq.n	80062fe <pow+0x96>
 8006316:	4640      	mov	r0, r8
 8006318:	4649      	mov	r1, r9
 800631a:	f000 fe02 	bl	8006f22 <finite>
 800631e:	2800      	cmp	r0, #0
 8006320:	d0ed      	beq.n	80062fe <pow+0x96>
 8006322:	4620      	mov	r0, r4
 8006324:	4629      	mov	r1, r5
 8006326:	f000 fdfc 	bl	8006f22 <finite>
 800632a:	e7c8      	b.n	80062be <pow+0x56>
 800632c:	2600      	movs	r6, #0
 800632e:	4f01      	ldr	r7, [pc, #4]	; (8006334 <pow+0xcc>)
 8006330:	e7e5      	b.n	80062fe <pow+0x96>
 8006332:	bf00      	nop
 8006334:	3ff00000 	.word	0x3ff00000

08006338 <__ieee754_pow>:
 8006338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800633c:	b093      	sub	sp, #76	; 0x4c
 800633e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006342:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8006346:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800634a:	4689      	mov	r9, r1
 800634c:	ea56 0102 	orrs.w	r1, r6, r2
 8006350:	4680      	mov	r8, r0
 8006352:	d111      	bne.n	8006378 <__ieee754_pow+0x40>
 8006354:	1803      	adds	r3, r0, r0
 8006356:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800635a:	4152      	adcs	r2, r2
 800635c:	4299      	cmp	r1, r3
 800635e:	4b82      	ldr	r3, [pc, #520]	; (8006568 <__ieee754_pow+0x230>)
 8006360:	4193      	sbcs	r3, r2
 8006362:	f080 84b9 	bcs.w	8006cd8 <__ieee754_pow+0x9a0>
 8006366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800636a:	4640      	mov	r0, r8
 800636c:	4649      	mov	r1, r9
 800636e:	f7f9 fef5 	bl	800015c <__adddf3>
 8006372:	4683      	mov	fp, r0
 8006374:	468c      	mov	ip, r1
 8006376:	e06f      	b.n	8006458 <__ieee754_pow+0x120>
 8006378:	4b7c      	ldr	r3, [pc, #496]	; (800656c <__ieee754_pow+0x234>)
 800637a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800637e:	429c      	cmp	r4, r3
 8006380:	464d      	mov	r5, r9
 8006382:	4682      	mov	sl, r0
 8006384:	dc06      	bgt.n	8006394 <__ieee754_pow+0x5c>
 8006386:	d101      	bne.n	800638c <__ieee754_pow+0x54>
 8006388:	2800      	cmp	r0, #0
 800638a:	d1ec      	bne.n	8006366 <__ieee754_pow+0x2e>
 800638c:	429e      	cmp	r6, r3
 800638e:	dc01      	bgt.n	8006394 <__ieee754_pow+0x5c>
 8006390:	d10f      	bne.n	80063b2 <__ieee754_pow+0x7a>
 8006392:	b172      	cbz	r2, 80063b2 <__ieee754_pow+0x7a>
 8006394:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006398:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800639c:	ea55 050a 	orrs.w	r5, r5, sl
 80063a0:	d1e1      	bne.n	8006366 <__ieee754_pow+0x2e>
 80063a2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80063a6:	18db      	adds	r3, r3, r3
 80063a8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80063ac:	4152      	adcs	r2, r2
 80063ae:	429d      	cmp	r5, r3
 80063b0:	e7d5      	b.n	800635e <__ieee754_pow+0x26>
 80063b2:	2d00      	cmp	r5, #0
 80063b4:	da39      	bge.n	800642a <__ieee754_pow+0xf2>
 80063b6:	4b6e      	ldr	r3, [pc, #440]	; (8006570 <__ieee754_pow+0x238>)
 80063b8:	429e      	cmp	r6, r3
 80063ba:	dc52      	bgt.n	8006462 <__ieee754_pow+0x12a>
 80063bc:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80063c0:	429e      	cmp	r6, r3
 80063c2:	f340 849c 	ble.w	8006cfe <__ieee754_pow+0x9c6>
 80063c6:	1533      	asrs	r3, r6, #20
 80063c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80063cc:	2b14      	cmp	r3, #20
 80063ce:	dd0f      	ble.n	80063f0 <__ieee754_pow+0xb8>
 80063d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80063d4:	fa22 f103 	lsr.w	r1, r2, r3
 80063d8:	fa01 f303 	lsl.w	r3, r1, r3
 80063dc:	4293      	cmp	r3, r2
 80063de:	f040 848e 	bne.w	8006cfe <__ieee754_pow+0x9c6>
 80063e2:	f001 0101 	and.w	r1, r1, #1
 80063e6:	f1c1 0302 	rsb	r3, r1, #2
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	b182      	cbz	r2, 8006410 <__ieee754_pow+0xd8>
 80063ee:	e05d      	b.n	80064ac <__ieee754_pow+0x174>
 80063f0:	2a00      	cmp	r2, #0
 80063f2:	d159      	bne.n	80064a8 <__ieee754_pow+0x170>
 80063f4:	f1c3 0314 	rsb	r3, r3, #20
 80063f8:	fa46 f103 	asr.w	r1, r6, r3
 80063fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006400:	42b3      	cmp	r3, r6
 8006402:	f040 8479 	bne.w	8006cf8 <__ieee754_pow+0x9c0>
 8006406:	f001 0101 	and.w	r1, r1, #1
 800640a:	f1c1 0302 	rsb	r3, r1, #2
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	4b58      	ldr	r3, [pc, #352]	; (8006574 <__ieee754_pow+0x23c>)
 8006412:	429e      	cmp	r6, r3
 8006414:	d132      	bne.n	800647c <__ieee754_pow+0x144>
 8006416:	2f00      	cmp	r7, #0
 8006418:	f280 846a 	bge.w	8006cf0 <__ieee754_pow+0x9b8>
 800641c:	4642      	mov	r2, r8
 800641e:	464b      	mov	r3, r9
 8006420:	2000      	movs	r0, #0
 8006422:	4954      	ldr	r1, [pc, #336]	; (8006574 <__ieee754_pow+0x23c>)
 8006424:	f7fa f97a 	bl	800071c <__aeabi_ddiv>
 8006428:	e7a3      	b.n	8006372 <__ieee754_pow+0x3a>
 800642a:	2300      	movs	r3, #0
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	2a00      	cmp	r2, #0
 8006430:	d13c      	bne.n	80064ac <__ieee754_pow+0x174>
 8006432:	4b4e      	ldr	r3, [pc, #312]	; (800656c <__ieee754_pow+0x234>)
 8006434:	429e      	cmp	r6, r3
 8006436:	d1eb      	bne.n	8006410 <__ieee754_pow+0xd8>
 8006438:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800643c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006440:	ea53 030a 	orrs.w	r3, r3, sl
 8006444:	f000 8448 	beq.w	8006cd8 <__ieee754_pow+0x9a0>
 8006448:	4b4b      	ldr	r3, [pc, #300]	; (8006578 <__ieee754_pow+0x240>)
 800644a:	429c      	cmp	r4, r3
 800644c:	dd0b      	ble.n	8006466 <__ieee754_pow+0x12e>
 800644e:	2f00      	cmp	r7, #0
 8006450:	f2c0 8448 	blt.w	8006ce4 <__ieee754_pow+0x9ac>
 8006454:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8006458:	4658      	mov	r0, fp
 800645a:	4661      	mov	r1, ip
 800645c:	b013      	add	sp, #76	; 0x4c
 800645e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006462:	2302      	movs	r3, #2
 8006464:	e7e2      	b.n	800642c <__ieee754_pow+0xf4>
 8006466:	2f00      	cmp	r7, #0
 8006468:	f04f 0b00 	mov.w	fp, #0
 800646c:	f04f 0c00 	mov.w	ip, #0
 8006470:	daf2      	bge.n	8006458 <__ieee754_pow+0x120>
 8006472:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8006476:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800647a:	e7ed      	b.n	8006458 <__ieee754_pow+0x120>
 800647c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8006480:	d106      	bne.n	8006490 <__ieee754_pow+0x158>
 8006482:	4642      	mov	r2, r8
 8006484:	464b      	mov	r3, r9
 8006486:	4640      	mov	r0, r8
 8006488:	4649      	mov	r1, r9
 800648a:	f7fa f81d 	bl	80004c8 <__aeabi_dmul>
 800648e:	e770      	b.n	8006372 <__ieee754_pow+0x3a>
 8006490:	4b3a      	ldr	r3, [pc, #232]	; (800657c <__ieee754_pow+0x244>)
 8006492:	429f      	cmp	r7, r3
 8006494:	d10a      	bne.n	80064ac <__ieee754_pow+0x174>
 8006496:	2d00      	cmp	r5, #0
 8006498:	db08      	blt.n	80064ac <__ieee754_pow+0x174>
 800649a:	4640      	mov	r0, r8
 800649c:	4649      	mov	r1, r9
 800649e:	b013      	add	sp, #76	; 0x4c
 80064a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a4:	f000 bc5e 	b.w	8006d64 <__ieee754_sqrt>
 80064a8:	2300      	movs	r3, #0
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	4640      	mov	r0, r8
 80064ae:	4649      	mov	r1, r9
 80064b0:	f000 fd34 	bl	8006f1c <fabs>
 80064b4:	4683      	mov	fp, r0
 80064b6:	468c      	mov	ip, r1
 80064b8:	f1ba 0f00 	cmp.w	sl, #0
 80064bc:	d128      	bne.n	8006510 <__ieee754_pow+0x1d8>
 80064be:	b124      	cbz	r4, 80064ca <__ieee754_pow+0x192>
 80064c0:	4b2c      	ldr	r3, [pc, #176]	; (8006574 <__ieee754_pow+0x23c>)
 80064c2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d122      	bne.n	8006510 <__ieee754_pow+0x1d8>
 80064ca:	2f00      	cmp	r7, #0
 80064cc:	da07      	bge.n	80064de <__ieee754_pow+0x1a6>
 80064ce:	465a      	mov	r2, fp
 80064d0:	4663      	mov	r3, ip
 80064d2:	2000      	movs	r0, #0
 80064d4:	4927      	ldr	r1, [pc, #156]	; (8006574 <__ieee754_pow+0x23c>)
 80064d6:	f7fa f921 	bl	800071c <__aeabi_ddiv>
 80064da:	4683      	mov	fp, r0
 80064dc:	468c      	mov	ip, r1
 80064de:	2d00      	cmp	r5, #0
 80064e0:	daba      	bge.n	8006458 <__ieee754_pow+0x120>
 80064e2:	9b00      	ldr	r3, [sp, #0]
 80064e4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80064e8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80064ec:	4323      	orrs	r3, r4
 80064ee:	d108      	bne.n	8006502 <__ieee754_pow+0x1ca>
 80064f0:	465a      	mov	r2, fp
 80064f2:	4663      	mov	r3, ip
 80064f4:	4658      	mov	r0, fp
 80064f6:	4661      	mov	r1, ip
 80064f8:	f7f9 fe2e 	bl	8000158 <__aeabi_dsub>
 80064fc:	4602      	mov	r2, r0
 80064fe:	460b      	mov	r3, r1
 8006500:	e790      	b.n	8006424 <__ieee754_pow+0xec>
 8006502:	9b00      	ldr	r3, [sp, #0]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d1a7      	bne.n	8006458 <__ieee754_pow+0x120>
 8006508:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800650c:	469c      	mov	ip, r3
 800650e:	e7a3      	b.n	8006458 <__ieee754_pow+0x120>
 8006510:	0feb      	lsrs	r3, r5, #31
 8006512:	3b01      	subs	r3, #1
 8006514:	930c      	str	r3, [sp, #48]	; 0x30
 8006516:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006518:	9b00      	ldr	r3, [sp, #0]
 800651a:	4313      	orrs	r3, r2
 800651c:	d104      	bne.n	8006528 <__ieee754_pow+0x1f0>
 800651e:	4642      	mov	r2, r8
 8006520:	464b      	mov	r3, r9
 8006522:	4640      	mov	r0, r8
 8006524:	4649      	mov	r1, r9
 8006526:	e7e7      	b.n	80064f8 <__ieee754_pow+0x1c0>
 8006528:	4b15      	ldr	r3, [pc, #84]	; (8006580 <__ieee754_pow+0x248>)
 800652a:	429e      	cmp	r6, r3
 800652c:	f340 80f6 	ble.w	800671c <__ieee754_pow+0x3e4>
 8006530:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006534:	429e      	cmp	r6, r3
 8006536:	4b10      	ldr	r3, [pc, #64]	; (8006578 <__ieee754_pow+0x240>)
 8006538:	dd09      	ble.n	800654e <__ieee754_pow+0x216>
 800653a:	429c      	cmp	r4, r3
 800653c:	dc0c      	bgt.n	8006558 <__ieee754_pow+0x220>
 800653e:	2f00      	cmp	r7, #0
 8006540:	da0c      	bge.n	800655c <__ieee754_pow+0x224>
 8006542:	2000      	movs	r0, #0
 8006544:	b013      	add	sp, #76	; 0x4c
 8006546:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800654a:	f000 bce2 	b.w	8006f12 <__math_oflow>
 800654e:	429c      	cmp	r4, r3
 8006550:	dbf5      	blt.n	800653e <__ieee754_pow+0x206>
 8006552:	4b08      	ldr	r3, [pc, #32]	; (8006574 <__ieee754_pow+0x23c>)
 8006554:	429c      	cmp	r4, r3
 8006556:	dd15      	ble.n	8006584 <__ieee754_pow+0x24c>
 8006558:	2f00      	cmp	r7, #0
 800655a:	dcf2      	bgt.n	8006542 <__ieee754_pow+0x20a>
 800655c:	2000      	movs	r0, #0
 800655e:	b013      	add	sp, #76	; 0x4c
 8006560:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006564:	f000 bcd0 	b.w	8006f08 <__math_uflow>
 8006568:	fff00000 	.word	0xfff00000
 800656c:	7ff00000 	.word	0x7ff00000
 8006570:	433fffff 	.word	0x433fffff
 8006574:	3ff00000 	.word	0x3ff00000
 8006578:	3fefffff 	.word	0x3fefffff
 800657c:	3fe00000 	.word	0x3fe00000
 8006580:	41e00000 	.word	0x41e00000
 8006584:	4661      	mov	r1, ip
 8006586:	2200      	movs	r2, #0
 8006588:	4658      	mov	r0, fp
 800658a:	4b5f      	ldr	r3, [pc, #380]	; (8006708 <__ieee754_pow+0x3d0>)
 800658c:	f7f9 fde4 	bl	8000158 <__aeabi_dsub>
 8006590:	a355      	add	r3, pc, #340	; (adr r3, 80066e8 <__ieee754_pow+0x3b0>)
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	4604      	mov	r4, r0
 8006598:	460d      	mov	r5, r1
 800659a:	f7f9 ff95 	bl	80004c8 <__aeabi_dmul>
 800659e:	a354      	add	r3, pc, #336	; (adr r3, 80066f0 <__ieee754_pow+0x3b8>)
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	4606      	mov	r6, r0
 80065a6:	460f      	mov	r7, r1
 80065a8:	4620      	mov	r0, r4
 80065aa:	4629      	mov	r1, r5
 80065ac:	f7f9 ff8c 	bl	80004c8 <__aeabi_dmul>
 80065b0:	2200      	movs	r2, #0
 80065b2:	4682      	mov	sl, r0
 80065b4:	468b      	mov	fp, r1
 80065b6:	4620      	mov	r0, r4
 80065b8:	4629      	mov	r1, r5
 80065ba:	4b54      	ldr	r3, [pc, #336]	; (800670c <__ieee754_pow+0x3d4>)
 80065bc:	f7f9 ff84 	bl	80004c8 <__aeabi_dmul>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	a14c      	add	r1, pc, #304	; (adr r1, 80066f8 <__ieee754_pow+0x3c0>)
 80065c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065ca:	f7f9 fdc5 	bl	8000158 <__aeabi_dsub>
 80065ce:	4622      	mov	r2, r4
 80065d0:	462b      	mov	r3, r5
 80065d2:	f7f9 ff79 	bl	80004c8 <__aeabi_dmul>
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	2000      	movs	r0, #0
 80065dc:	494c      	ldr	r1, [pc, #304]	; (8006710 <__ieee754_pow+0x3d8>)
 80065de:	f7f9 fdbb 	bl	8000158 <__aeabi_dsub>
 80065e2:	4622      	mov	r2, r4
 80065e4:	462b      	mov	r3, r5
 80065e6:	4680      	mov	r8, r0
 80065e8:	4689      	mov	r9, r1
 80065ea:	4620      	mov	r0, r4
 80065ec:	4629      	mov	r1, r5
 80065ee:	f7f9 ff6b 	bl	80004c8 <__aeabi_dmul>
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	4640      	mov	r0, r8
 80065f8:	4649      	mov	r1, r9
 80065fa:	f7f9 ff65 	bl	80004c8 <__aeabi_dmul>
 80065fe:	a340      	add	r3, pc, #256	; (adr r3, 8006700 <__ieee754_pow+0x3c8>)
 8006600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006604:	f7f9 ff60 	bl	80004c8 <__aeabi_dmul>
 8006608:	4602      	mov	r2, r0
 800660a:	460b      	mov	r3, r1
 800660c:	4650      	mov	r0, sl
 800660e:	4659      	mov	r1, fp
 8006610:	f7f9 fda2 	bl	8000158 <__aeabi_dsub>
 8006614:	f04f 0a00 	mov.w	sl, #0
 8006618:	4602      	mov	r2, r0
 800661a:	460b      	mov	r3, r1
 800661c:	4604      	mov	r4, r0
 800661e:	460d      	mov	r5, r1
 8006620:	4630      	mov	r0, r6
 8006622:	4639      	mov	r1, r7
 8006624:	f7f9 fd9a 	bl	800015c <__adddf3>
 8006628:	4632      	mov	r2, r6
 800662a:	463b      	mov	r3, r7
 800662c:	4650      	mov	r0, sl
 800662e:	468b      	mov	fp, r1
 8006630:	f7f9 fd92 	bl	8000158 <__aeabi_dsub>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	4620      	mov	r0, r4
 800663a:	4629      	mov	r1, r5
 800663c:	f7f9 fd8c 	bl	8000158 <__aeabi_dsub>
 8006640:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006644:	9b00      	ldr	r3, [sp, #0]
 8006646:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006648:	3b01      	subs	r3, #1
 800664a:	4313      	orrs	r3, r2
 800664c:	f04f 0600 	mov.w	r6, #0
 8006650:	f04f 0200 	mov.w	r2, #0
 8006654:	bf0c      	ite	eq
 8006656:	4b2f      	ldreq	r3, [pc, #188]	; (8006714 <__ieee754_pow+0x3dc>)
 8006658:	4b2b      	ldrne	r3, [pc, #172]	; (8006708 <__ieee754_pow+0x3d0>)
 800665a:	4604      	mov	r4, r0
 800665c:	460d      	mov	r5, r1
 800665e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006662:	e9cd 2300 	strd	r2, r3, [sp]
 8006666:	4632      	mov	r2, r6
 8006668:	463b      	mov	r3, r7
 800666a:	f7f9 fd75 	bl	8000158 <__aeabi_dsub>
 800666e:	4652      	mov	r2, sl
 8006670:	465b      	mov	r3, fp
 8006672:	f7f9 ff29 	bl	80004c8 <__aeabi_dmul>
 8006676:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800667a:	4680      	mov	r8, r0
 800667c:	4689      	mov	r9, r1
 800667e:	4620      	mov	r0, r4
 8006680:	4629      	mov	r1, r5
 8006682:	f7f9 ff21 	bl	80004c8 <__aeabi_dmul>
 8006686:	4602      	mov	r2, r0
 8006688:	460b      	mov	r3, r1
 800668a:	4640      	mov	r0, r8
 800668c:	4649      	mov	r1, r9
 800668e:	f7f9 fd65 	bl	800015c <__adddf3>
 8006692:	4632      	mov	r2, r6
 8006694:	463b      	mov	r3, r7
 8006696:	4680      	mov	r8, r0
 8006698:	4689      	mov	r9, r1
 800669a:	4650      	mov	r0, sl
 800669c:	4659      	mov	r1, fp
 800669e:	f7f9 ff13 	bl	80004c8 <__aeabi_dmul>
 80066a2:	4604      	mov	r4, r0
 80066a4:	460d      	mov	r5, r1
 80066a6:	460b      	mov	r3, r1
 80066a8:	4602      	mov	r2, r0
 80066aa:	4649      	mov	r1, r9
 80066ac:	4640      	mov	r0, r8
 80066ae:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80066b2:	f7f9 fd53 	bl	800015c <__adddf3>
 80066b6:	4b18      	ldr	r3, [pc, #96]	; (8006718 <__ieee754_pow+0x3e0>)
 80066b8:	4682      	mov	sl, r0
 80066ba:	4299      	cmp	r1, r3
 80066bc:	460f      	mov	r7, r1
 80066be:	460e      	mov	r6, r1
 80066c0:	f340 82e5 	ble.w	8006c8e <__ieee754_pow+0x956>
 80066c4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80066c8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80066cc:	4303      	orrs	r3, r0
 80066ce:	f000 81df 	beq.w	8006a90 <__ieee754_pow+0x758>
 80066d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066d6:	2200      	movs	r2, #0
 80066d8:	2300      	movs	r3, #0
 80066da:	f7fa f967 	bl	80009ac <__aeabi_dcmplt>
 80066de:	3800      	subs	r0, #0
 80066e0:	bf18      	it	ne
 80066e2:	2001      	movne	r0, #1
 80066e4:	e72e      	b.n	8006544 <__ieee754_pow+0x20c>
 80066e6:	bf00      	nop
 80066e8:	60000000 	.word	0x60000000
 80066ec:	3ff71547 	.word	0x3ff71547
 80066f0:	f85ddf44 	.word	0xf85ddf44
 80066f4:	3e54ae0b 	.word	0x3e54ae0b
 80066f8:	55555555 	.word	0x55555555
 80066fc:	3fd55555 	.word	0x3fd55555
 8006700:	652b82fe 	.word	0x652b82fe
 8006704:	3ff71547 	.word	0x3ff71547
 8006708:	3ff00000 	.word	0x3ff00000
 800670c:	3fd00000 	.word	0x3fd00000
 8006710:	3fe00000 	.word	0x3fe00000
 8006714:	bff00000 	.word	0xbff00000
 8006718:	408fffff 	.word	0x408fffff
 800671c:	4bd2      	ldr	r3, [pc, #840]	; (8006a68 <__ieee754_pow+0x730>)
 800671e:	2200      	movs	r2, #0
 8006720:	402b      	ands	r3, r5
 8006722:	b943      	cbnz	r3, 8006736 <__ieee754_pow+0x3fe>
 8006724:	4658      	mov	r0, fp
 8006726:	4661      	mov	r1, ip
 8006728:	4bd0      	ldr	r3, [pc, #832]	; (8006a6c <__ieee754_pow+0x734>)
 800672a:	f7f9 fecd 	bl	80004c8 <__aeabi_dmul>
 800672e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006732:	4683      	mov	fp, r0
 8006734:	460c      	mov	r4, r1
 8006736:	1523      	asrs	r3, r4, #20
 8006738:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800673c:	4413      	add	r3, r2
 800673e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006740:	4bcb      	ldr	r3, [pc, #812]	; (8006a70 <__ieee754_pow+0x738>)
 8006742:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006746:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800674a:	429c      	cmp	r4, r3
 800674c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006750:	dd08      	ble.n	8006764 <__ieee754_pow+0x42c>
 8006752:	4bc8      	ldr	r3, [pc, #800]	; (8006a74 <__ieee754_pow+0x73c>)
 8006754:	429c      	cmp	r4, r3
 8006756:	f340 8199 	ble.w	8006a8c <__ieee754_pow+0x754>
 800675a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800675c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006760:	3301      	adds	r3, #1
 8006762:	930b      	str	r3, [sp, #44]	; 0x2c
 8006764:	2600      	movs	r6, #0
 8006766:	00f3      	lsls	r3, r6, #3
 8006768:	930d      	str	r3, [sp, #52]	; 0x34
 800676a:	4bc3      	ldr	r3, [pc, #780]	; (8006a78 <__ieee754_pow+0x740>)
 800676c:	4658      	mov	r0, fp
 800676e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006772:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006776:	4629      	mov	r1, r5
 8006778:	461a      	mov	r2, r3
 800677a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800677e:	4623      	mov	r3, r4
 8006780:	f7f9 fcea 	bl	8000158 <__aeabi_dsub>
 8006784:	46da      	mov	sl, fp
 8006786:	462b      	mov	r3, r5
 8006788:	4652      	mov	r2, sl
 800678a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800678e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006792:	f7f9 fce3 	bl	800015c <__adddf3>
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
 800679a:	2000      	movs	r0, #0
 800679c:	49b7      	ldr	r1, [pc, #732]	; (8006a7c <__ieee754_pow+0x744>)
 800679e:	f7f9 ffbd 	bl	800071c <__aeabi_ddiv>
 80067a2:	4602      	mov	r2, r0
 80067a4:	460b      	mov	r3, r1
 80067a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067aa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80067ae:	f7f9 fe8b 	bl	80004c8 <__aeabi_dmul>
 80067b2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80067b6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80067ba:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80067be:	2300      	movs	r3, #0
 80067c0:	2200      	movs	r2, #0
 80067c2:	46ab      	mov	fp, r5
 80067c4:	106d      	asrs	r5, r5, #1
 80067c6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80067ca:	9304      	str	r3, [sp, #16]
 80067cc:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80067d0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80067d4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80067d8:	4640      	mov	r0, r8
 80067da:	4649      	mov	r1, r9
 80067dc:	4614      	mov	r4, r2
 80067de:	461d      	mov	r5, r3
 80067e0:	f7f9 fe72 	bl	80004c8 <__aeabi_dmul>
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80067ec:	f7f9 fcb4 	bl	8000158 <__aeabi_dsub>
 80067f0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80067f4:	4606      	mov	r6, r0
 80067f6:	460f      	mov	r7, r1
 80067f8:	4620      	mov	r0, r4
 80067fa:	4629      	mov	r1, r5
 80067fc:	f7f9 fcac 	bl	8000158 <__aeabi_dsub>
 8006800:	4602      	mov	r2, r0
 8006802:	460b      	mov	r3, r1
 8006804:	4650      	mov	r0, sl
 8006806:	4659      	mov	r1, fp
 8006808:	f7f9 fca6 	bl	8000158 <__aeabi_dsub>
 800680c:	4642      	mov	r2, r8
 800680e:	464b      	mov	r3, r9
 8006810:	f7f9 fe5a 	bl	80004c8 <__aeabi_dmul>
 8006814:	4602      	mov	r2, r0
 8006816:	460b      	mov	r3, r1
 8006818:	4630      	mov	r0, r6
 800681a:	4639      	mov	r1, r7
 800681c:	f7f9 fc9c 	bl	8000158 <__aeabi_dsub>
 8006820:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006824:	f7f9 fe50 	bl	80004c8 <__aeabi_dmul>
 8006828:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800682c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006830:	4610      	mov	r0, r2
 8006832:	4619      	mov	r1, r3
 8006834:	f7f9 fe48 	bl	80004c8 <__aeabi_dmul>
 8006838:	a379      	add	r3, pc, #484	; (adr r3, 8006a20 <__ieee754_pow+0x6e8>)
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	4604      	mov	r4, r0
 8006840:	460d      	mov	r5, r1
 8006842:	f7f9 fe41 	bl	80004c8 <__aeabi_dmul>
 8006846:	a378      	add	r3, pc, #480	; (adr r3, 8006a28 <__ieee754_pow+0x6f0>)
 8006848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684c:	f7f9 fc86 	bl	800015c <__adddf3>
 8006850:	4622      	mov	r2, r4
 8006852:	462b      	mov	r3, r5
 8006854:	f7f9 fe38 	bl	80004c8 <__aeabi_dmul>
 8006858:	a375      	add	r3, pc, #468	; (adr r3, 8006a30 <__ieee754_pow+0x6f8>)
 800685a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685e:	f7f9 fc7d 	bl	800015c <__adddf3>
 8006862:	4622      	mov	r2, r4
 8006864:	462b      	mov	r3, r5
 8006866:	f7f9 fe2f 	bl	80004c8 <__aeabi_dmul>
 800686a:	a373      	add	r3, pc, #460	; (adr r3, 8006a38 <__ieee754_pow+0x700>)
 800686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006870:	f7f9 fc74 	bl	800015c <__adddf3>
 8006874:	4622      	mov	r2, r4
 8006876:	462b      	mov	r3, r5
 8006878:	f7f9 fe26 	bl	80004c8 <__aeabi_dmul>
 800687c:	a370      	add	r3, pc, #448	; (adr r3, 8006a40 <__ieee754_pow+0x708>)
 800687e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006882:	f7f9 fc6b 	bl	800015c <__adddf3>
 8006886:	4622      	mov	r2, r4
 8006888:	462b      	mov	r3, r5
 800688a:	f7f9 fe1d 	bl	80004c8 <__aeabi_dmul>
 800688e:	a36e      	add	r3, pc, #440	; (adr r3, 8006a48 <__ieee754_pow+0x710>)
 8006890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006894:	f7f9 fc62 	bl	800015c <__adddf3>
 8006898:	4622      	mov	r2, r4
 800689a:	4606      	mov	r6, r0
 800689c:	460f      	mov	r7, r1
 800689e:	462b      	mov	r3, r5
 80068a0:	4620      	mov	r0, r4
 80068a2:	4629      	mov	r1, r5
 80068a4:	f7f9 fe10 	bl	80004c8 <__aeabi_dmul>
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	4630      	mov	r0, r6
 80068ae:	4639      	mov	r1, r7
 80068b0:	f7f9 fe0a 	bl	80004c8 <__aeabi_dmul>
 80068b4:	4604      	mov	r4, r0
 80068b6:	460d      	mov	r5, r1
 80068b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068bc:	4642      	mov	r2, r8
 80068be:	464b      	mov	r3, r9
 80068c0:	f7f9 fc4c 	bl	800015c <__adddf3>
 80068c4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80068c8:	f7f9 fdfe 	bl	80004c8 <__aeabi_dmul>
 80068cc:	4622      	mov	r2, r4
 80068ce:	462b      	mov	r3, r5
 80068d0:	f7f9 fc44 	bl	800015c <__adddf3>
 80068d4:	4642      	mov	r2, r8
 80068d6:	4606      	mov	r6, r0
 80068d8:	460f      	mov	r7, r1
 80068da:	464b      	mov	r3, r9
 80068dc:	4640      	mov	r0, r8
 80068de:	4649      	mov	r1, r9
 80068e0:	f7f9 fdf2 	bl	80004c8 <__aeabi_dmul>
 80068e4:	2200      	movs	r2, #0
 80068e6:	4b66      	ldr	r3, [pc, #408]	; (8006a80 <__ieee754_pow+0x748>)
 80068e8:	4682      	mov	sl, r0
 80068ea:	468b      	mov	fp, r1
 80068ec:	f7f9 fc36 	bl	800015c <__adddf3>
 80068f0:	4632      	mov	r2, r6
 80068f2:	463b      	mov	r3, r7
 80068f4:	f7f9 fc32 	bl	800015c <__adddf3>
 80068f8:	2400      	movs	r4, #0
 80068fa:	460d      	mov	r5, r1
 80068fc:	4622      	mov	r2, r4
 80068fe:	460b      	mov	r3, r1
 8006900:	4640      	mov	r0, r8
 8006902:	4649      	mov	r1, r9
 8006904:	f7f9 fde0 	bl	80004c8 <__aeabi_dmul>
 8006908:	2200      	movs	r2, #0
 800690a:	4680      	mov	r8, r0
 800690c:	4689      	mov	r9, r1
 800690e:	4620      	mov	r0, r4
 8006910:	4629      	mov	r1, r5
 8006912:	4b5b      	ldr	r3, [pc, #364]	; (8006a80 <__ieee754_pow+0x748>)
 8006914:	f7f9 fc20 	bl	8000158 <__aeabi_dsub>
 8006918:	4652      	mov	r2, sl
 800691a:	465b      	mov	r3, fp
 800691c:	f7f9 fc1c 	bl	8000158 <__aeabi_dsub>
 8006920:	4602      	mov	r2, r0
 8006922:	460b      	mov	r3, r1
 8006924:	4630      	mov	r0, r6
 8006926:	4639      	mov	r1, r7
 8006928:	f7f9 fc16 	bl	8000158 <__aeabi_dsub>
 800692c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006930:	f7f9 fdca 	bl	80004c8 <__aeabi_dmul>
 8006934:	4622      	mov	r2, r4
 8006936:	4606      	mov	r6, r0
 8006938:	460f      	mov	r7, r1
 800693a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800693e:	462b      	mov	r3, r5
 8006940:	f7f9 fdc2 	bl	80004c8 <__aeabi_dmul>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	4630      	mov	r0, r6
 800694a:	4639      	mov	r1, r7
 800694c:	f7f9 fc06 	bl	800015c <__adddf3>
 8006950:	2400      	movs	r4, #0
 8006952:	4606      	mov	r6, r0
 8006954:	460f      	mov	r7, r1
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	4640      	mov	r0, r8
 800695c:	4649      	mov	r1, r9
 800695e:	f7f9 fbfd 	bl	800015c <__adddf3>
 8006962:	a33b      	add	r3, pc, #236	; (adr r3, 8006a50 <__ieee754_pow+0x718>)
 8006964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006968:	4620      	mov	r0, r4
 800696a:	460d      	mov	r5, r1
 800696c:	f7f9 fdac 	bl	80004c8 <__aeabi_dmul>
 8006970:	4642      	mov	r2, r8
 8006972:	464b      	mov	r3, r9
 8006974:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006978:	4620      	mov	r0, r4
 800697a:	4629      	mov	r1, r5
 800697c:	f7f9 fbec 	bl	8000158 <__aeabi_dsub>
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	4630      	mov	r0, r6
 8006986:	4639      	mov	r1, r7
 8006988:	f7f9 fbe6 	bl	8000158 <__aeabi_dsub>
 800698c:	a332      	add	r3, pc, #200	; (adr r3, 8006a58 <__ieee754_pow+0x720>)
 800698e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006992:	f7f9 fd99 	bl	80004c8 <__aeabi_dmul>
 8006996:	a332      	add	r3, pc, #200	; (adr r3, 8006a60 <__ieee754_pow+0x728>)
 8006998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699c:	4606      	mov	r6, r0
 800699e:	460f      	mov	r7, r1
 80069a0:	4620      	mov	r0, r4
 80069a2:	4629      	mov	r1, r5
 80069a4:	f7f9 fd90 	bl	80004c8 <__aeabi_dmul>
 80069a8:	4602      	mov	r2, r0
 80069aa:	460b      	mov	r3, r1
 80069ac:	4630      	mov	r0, r6
 80069ae:	4639      	mov	r1, r7
 80069b0:	f7f9 fbd4 	bl	800015c <__adddf3>
 80069b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069b6:	4b33      	ldr	r3, [pc, #204]	; (8006a84 <__ieee754_pow+0x74c>)
 80069b8:	f04f 0a00 	mov.w	sl, #0
 80069bc:	4413      	add	r3, r2
 80069be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c2:	f7f9 fbcb 	bl	800015c <__adddf3>
 80069c6:	4680      	mov	r8, r0
 80069c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80069ca:	4689      	mov	r9, r1
 80069cc:	f7f9 fd12 	bl	80003f4 <__aeabi_i2d>
 80069d0:	4604      	mov	r4, r0
 80069d2:	460d      	mov	r5, r1
 80069d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069d6:	4b2c      	ldr	r3, [pc, #176]	; (8006a88 <__ieee754_pow+0x750>)
 80069d8:	4413      	add	r3, r2
 80069da:	e9d3 6700 	ldrd	r6, r7, [r3]
 80069de:	4642      	mov	r2, r8
 80069e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069e4:	464b      	mov	r3, r9
 80069e6:	f7f9 fbb9 	bl	800015c <__adddf3>
 80069ea:	4632      	mov	r2, r6
 80069ec:	463b      	mov	r3, r7
 80069ee:	f7f9 fbb5 	bl	800015c <__adddf3>
 80069f2:	4622      	mov	r2, r4
 80069f4:	462b      	mov	r3, r5
 80069f6:	f7f9 fbb1 	bl	800015c <__adddf3>
 80069fa:	4622      	mov	r2, r4
 80069fc:	462b      	mov	r3, r5
 80069fe:	4650      	mov	r0, sl
 8006a00:	468b      	mov	fp, r1
 8006a02:	f7f9 fba9 	bl	8000158 <__aeabi_dsub>
 8006a06:	4632      	mov	r2, r6
 8006a08:	463b      	mov	r3, r7
 8006a0a:	f7f9 fba5 	bl	8000158 <__aeabi_dsub>
 8006a0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a12:	f7f9 fba1 	bl	8000158 <__aeabi_dsub>
 8006a16:	4602      	mov	r2, r0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4640      	mov	r0, r8
 8006a1c:	4649      	mov	r1, r9
 8006a1e:	e60d      	b.n	800663c <__ieee754_pow+0x304>
 8006a20:	4a454eef 	.word	0x4a454eef
 8006a24:	3fca7e28 	.word	0x3fca7e28
 8006a28:	93c9db65 	.word	0x93c9db65
 8006a2c:	3fcd864a 	.word	0x3fcd864a
 8006a30:	a91d4101 	.word	0xa91d4101
 8006a34:	3fd17460 	.word	0x3fd17460
 8006a38:	518f264d 	.word	0x518f264d
 8006a3c:	3fd55555 	.word	0x3fd55555
 8006a40:	db6fabff 	.word	0xdb6fabff
 8006a44:	3fdb6db6 	.word	0x3fdb6db6
 8006a48:	33333303 	.word	0x33333303
 8006a4c:	3fe33333 	.word	0x3fe33333
 8006a50:	e0000000 	.word	0xe0000000
 8006a54:	3feec709 	.word	0x3feec709
 8006a58:	dc3a03fd 	.word	0xdc3a03fd
 8006a5c:	3feec709 	.word	0x3feec709
 8006a60:	145b01f5 	.word	0x145b01f5
 8006a64:	be3e2fe0 	.word	0xbe3e2fe0
 8006a68:	7ff00000 	.word	0x7ff00000
 8006a6c:	43400000 	.word	0x43400000
 8006a70:	0003988e 	.word	0x0003988e
 8006a74:	000bb679 	.word	0x000bb679
 8006a78:	08007218 	.word	0x08007218
 8006a7c:	3ff00000 	.word	0x3ff00000
 8006a80:	40080000 	.word	0x40080000
 8006a84:	08007238 	.word	0x08007238
 8006a88:	08007228 	.word	0x08007228
 8006a8c:	2601      	movs	r6, #1
 8006a8e:	e66a      	b.n	8006766 <__ieee754_pow+0x42e>
 8006a90:	a39d      	add	r3, pc, #628	; (adr r3, 8006d08 <__ieee754_pow+0x9d0>)
 8006a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a96:	4640      	mov	r0, r8
 8006a98:	4649      	mov	r1, r9
 8006a9a:	f7f9 fb5f 	bl	800015c <__adddf3>
 8006a9e:	4622      	mov	r2, r4
 8006aa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006aa4:	462b      	mov	r3, r5
 8006aa6:	4650      	mov	r0, sl
 8006aa8:	4639      	mov	r1, r7
 8006aaa:	f7f9 fb55 	bl	8000158 <__aeabi_dsub>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ab6:	f7f9 ff97 	bl	80009e8 <__aeabi_dcmpgt>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	f47f ae09 	bne.w	80066d2 <__ieee754_pow+0x39a>
 8006ac0:	4aa3      	ldr	r2, [pc, #652]	; (8006d50 <__ieee754_pow+0xa18>)
 8006ac2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	f340 8101 	ble.w	8006cce <__ieee754_pow+0x996>
 8006acc:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006ad0:	2000      	movs	r0, #0
 8006ad2:	151b      	asrs	r3, r3, #20
 8006ad4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006ad8:	fa4a f303 	asr.w	r3, sl, r3
 8006adc:	4433      	add	r3, r6
 8006ade:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006ae2:	4f9c      	ldr	r7, [pc, #624]	; (8006d54 <__ieee754_pow+0xa1c>)
 8006ae4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006ae8:	4117      	asrs	r7, r2
 8006aea:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006aee:	ea23 0107 	bic.w	r1, r3, r7
 8006af2:	f1c2 0214 	rsb	r2, r2, #20
 8006af6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006afa:	460b      	mov	r3, r1
 8006afc:	fa4a fa02 	asr.w	sl, sl, r2
 8006b00:	2e00      	cmp	r6, #0
 8006b02:	4602      	mov	r2, r0
 8006b04:	4629      	mov	r1, r5
 8006b06:	4620      	mov	r0, r4
 8006b08:	bfb8      	it	lt
 8006b0a:	f1ca 0a00 	rsblt	sl, sl, #0
 8006b0e:	f7f9 fb23 	bl	8000158 <__aeabi_dsub>
 8006b12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b1a:	2400      	movs	r4, #0
 8006b1c:	4642      	mov	r2, r8
 8006b1e:	464b      	mov	r3, r9
 8006b20:	f7f9 fb1c 	bl	800015c <__adddf3>
 8006b24:	a37a      	add	r3, pc, #488	; (adr r3, 8006d10 <__ieee754_pow+0x9d8>)
 8006b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	460d      	mov	r5, r1
 8006b2e:	f7f9 fccb 	bl	80004c8 <__aeabi_dmul>
 8006b32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b36:	4606      	mov	r6, r0
 8006b38:	460f      	mov	r7, r1
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	f7f9 fb0b 	bl	8000158 <__aeabi_dsub>
 8006b42:	4602      	mov	r2, r0
 8006b44:	460b      	mov	r3, r1
 8006b46:	4640      	mov	r0, r8
 8006b48:	4649      	mov	r1, r9
 8006b4a:	f7f9 fb05 	bl	8000158 <__aeabi_dsub>
 8006b4e:	a372      	add	r3, pc, #456	; (adr r3, 8006d18 <__ieee754_pow+0x9e0>)
 8006b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b54:	f7f9 fcb8 	bl	80004c8 <__aeabi_dmul>
 8006b58:	a371      	add	r3, pc, #452	; (adr r3, 8006d20 <__ieee754_pow+0x9e8>)
 8006b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5e:	4680      	mov	r8, r0
 8006b60:	4689      	mov	r9, r1
 8006b62:	4620      	mov	r0, r4
 8006b64:	4629      	mov	r1, r5
 8006b66:	f7f9 fcaf 	bl	80004c8 <__aeabi_dmul>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4640      	mov	r0, r8
 8006b70:	4649      	mov	r1, r9
 8006b72:	f7f9 faf3 	bl	800015c <__adddf3>
 8006b76:	4604      	mov	r4, r0
 8006b78:	460d      	mov	r5, r1
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	4630      	mov	r0, r6
 8006b80:	4639      	mov	r1, r7
 8006b82:	f7f9 faeb 	bl	800015c <__adddf3>
 8006b86:	4632      	mov	r2, r6
 8006b88:	463b      	mov	r3, r7
 8006b8a:	4680      	mov	r8, r0
 8006b8c:	4689      	mov	r9, r1
 8006b8e:	f7f9 fae3 	bl	8000158 <__aeabi_dsub>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	4620      	mov	r0, r4
 8006b98:	4629      	mov	r1, r5
 8006b9a:	f7f9 fadd 	bl	8000158 <__aeabi_dsub>
 8006b9e:	4642      	mov	r2, r8
 8006ba0:	4606      	mov	r6, r0
 8006ba2:	460f      	mov	r7, r1
 8006ba4:	464b      	mov	r3, r9
 8006ba6:	4640      	mov	r0, r8
 8006ba8:	4649      	mov	r1, r9
 8006baa:	f7f9 fc8d 	bl	80004c8 <__aeabi_dmul>
 8006bae:	a35e      	add	r3, pc, #376	; (adr r3, 8006d28 <__ieee754_pow+0x9f0>)
 8006bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	460d      	mov	r5, r1
 8006bb8:	f7f9 fc86 	bl	80004c8 <__aeabi_dmul>
 8006bbc:	a35c      	add	r3, pc, #368	; (adr r3, 8006d30 <__ieee754_pow+0x9f8>)
 8006bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc2:	f7f9 fac9 	bl	8000158 <__aeabi_dsub>
 8006bc6:	4622      	mov	r2, r4
 8006bc8:	462b      	mov	r3, r5
 8006bca:	f7f9 fc7d 	bl	80004c8 <__aeabi_dmul>
 8006bce:	a35a      	add	r3, pc, #360	; (adr r3, 8006d38 <__ieee754_pow+0xa00>)
 8006bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd4:	f7f9 fac2 	bl	800015c <__adddf3>
 8006bd8:	4622      	mov	r2, r4
 8006bda:	462b      	mov	r3, r5
 8006bdc:	f7f9 fc74 	bl	80004c8 <__aeabi_dmul>
 8006be0:	a357      	add	r3, pc, #348	; (adr r3, 8006d40 <__ieee754_pow+0xa08>)
 8006be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be6:	f7f9 fab7 	bl	8000158 <__aeabi_dsub>
 8006bea:	4622      	mov	r2, r4
 8006bec:	462b      	mov	r3, r5
 8006bee:	f7f9 fc6b 	bl	80004c8 <__aeabi_dmul>
 8006bf2:	a355      	add	r3, pc, #340	; (adr r3, 8006d48 <__ieee754_pow+0xa10>)
 8006bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf8:	f7f9 fab0 	bl	800015c <__adddf3>
 8006bfc:	4622      	mov	r2, r4
 8006bfe:	462b      	mov	r3, r5
 8006c00:	f7f9 fc62 	bl	80004c8 <__aeabi_dmul>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4640      	mov	r0, r8
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	f7f9 faa4 	bl	8000158 <__aeabi_dsub>
 8006c10:	4604      	mov	r4, r0
 8006c12:	460d      	mov	r5, r1
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	4640      	mov	r0, r8
 8006c1a:	4649      	mov	r1, r9
 8006c1c:	f7f9 fc54 	bl	80004c8 <__aeabi_dmul>
 8006c20:	2200      	movs	r2, #0
 8006c22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	4629      	mov	r1, r5
 8006c2e:	f7f9 fa93 	bl	8000158 <__aeabi_dsub>
 8006c32:	4602      	mov	r2, r0
 8006c34:	460b      	mov	r3, r1
 8006c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c3a:	f7f9 fd6f 	bl	800071c <__aeabi_ddiv>
 8006c3e:	4632      	mov	r2, r6
 8006c40:	4604      	mov	r4, r0
 8006c42:	460d      	mov	r5, r1
 8006c44:	463b      	mov	r3, r7
 8006c46:	4640      	mov	r0, r8
 8006c48:	4649      	mov	r1, r9
 8006c4a:	f7f9 fc3d 	bl	80004c8 <__aeabi_dmul>
 8006c4e:	4632      	mov	r2, r6
 8006c50:	463b      	mov	r3, r7
 8006c52:	f7f9 fa83 	bl	800015c <__adddf3>
 8006c56:	4602      	mov	r2, r0
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	4629      	mov	r1, r5
 8006c5e:	f7f9 fa7b 	bl	8000158 <__aeabi_dsub>
 8006c62:	4642      	mov	r2, r8
 8006c64:	464b      	mov	r3, r9
 8006c66:	f7f9 fa77 	bl	8000158 <__aeabi_dsub>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	2000      	movs	r0, #0
 8006c70:	4939      	ldr	r1, [pc, #228]	; (8006d58 <__ieee754_pow+0xa20>)
 8006c72:	f7f9 fa71 	bl	8000158 <__aeabi_dsub>
 8006c76:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006c7a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006c7e:	da29      	bge.n	8006cd4 <__ieee754_pow+0x99c>
 8006c80:	4652      	mov	r2, sl
 8006c82:	f000 f955 	bl	8006f30 <scalbn>
 8006c86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c8a:	f7ff bbfe 	b.w	800648a <__ieee754_pow+0x152>
 8006c8e:	4b33      	ldr	r3, [pc, #204]	; (8006d5c <__ieee754_pow+0xa24>)
 8006c90:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006c94:	429f      	cmp	r7, r3
 8006c96:	f77f af13 	ble.w	8006ac0 <__ieee754_pow+0x788>
 8006c9a:	4b31      	ldr	r3, [pc, #196]	; (8006d60 <__ieee754_pow+0xa28>)
 8006c9c:	440b      	add	r3, r1
 8006c9e:	4303      	orrs	r3, r0
 8006ca0:	d009      	beq.n	8006cb6 <__ieee754_pow+0x97e>
 8006ca2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	2300      	movs	r3, #0
 8006caa:	f7f9 fe7f 	bl	80009ac <__aeabi_dcmplt>
 8006cae:	3800      	subs	r0, #0
 8006cb0:	bf18      	it	ne
 8006cb2:	2001      	movne	r0, #1
 8006cb4:	e453      	b.n	800655e <__ieee754_pow+0x226>
 8006cb6:	4622      	mov	r2, r4
 8006cb8:	462b      	mov	r3, r5
 8006cba:	f7f9 fa4d 	bl	8000158 <__aeabi_dsub>
 8006cbe:	4642      	mov	r2, r8
 8006cc0:	464b      	mov	r3, r9
 8006cc2:	f7f9 fe87 	bl	80009d4 <__aeabi_dcmpge>
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	f43f aefa 	beq.w	8006ac0 <__ieee754_pow+0x788>
 8006ccc:	e7e9      	b.n	8006ca2 <__ieee754_pow+0x96a>
 8006cce:	f04f 0a00 	mov.w	sl, #0
 8006cd2:	e720      	b.n	8006b16 <__ieee754_pow+0x7de>
 8006cd4:	4621      	mov	r1, r4
 8006cd6:	e7d6      	b.n	8006c86 <__ieee754_pow+0x94e>
 8006cd8:	f04f 0b00 	mov.w	fp, #0
 8006cdc:	f8df c078 	ldr.w	ip, [pc, #120]	; 8006d58 <__ieee754_pow+0xa20>
 8006ce0:	f7ff bbba 	b.w	8006458 <__ieee754_pow+0x120>
 8006ce4:	f04f 0b00 	mov.w	fp, #0
 8006ce8:	f04f 0c00 	mov.w	ip, #0
 8006cec:	f7ff bbb4 	b.w	8006458 <__ieee754_pow+0x120>
 8006cf0:	4640      	mov	r0, r8
 8006cf2:	4649      	mov	r1, r9
 8006cf4:	f7ff bb3d 	b.w	8006372 <__ieee754_pow+0x3a>
 8006cf8:	9200      	str	r2, [sp, #0]
 8006cfa:	f7ff bb89 	b.w	8006410 <__ieee754_pow+0xd8>
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f7ff bb73 	b.w	80063ea <__ieee754_pow+0xb2>
 8006d04:	f3af 8000 	nop.w
 8006d08:	652b82fe 	.word	0x652b82fe
 8006d0c:	3c971547 	.word	0x3c971547
 8006d10:	00000000 	.word	0x00000000
 8006d14:	3fe62e43 	.word	0x3fe62e43
 8006d18:	fefa39ef 	.word	0xfefa39ef
 8006d1c:	3fe62e42 	.word	0x3fe62e42
 8006d20:	0ca86c39 	.word	0x0ca86c39
 8006d24:	be205c61 	.word	0xbe205c61
 8006d28:	72bea4d0 	.word	0x72bea4d0
 8006d2c:	3e663769 	.word	0x3e663769
 8006d30:	c5d26bf1 	.word	0xc5d26bf1
 8006d34:	3ebbbd41 	.word	0x3ebbbd41
 8006d38:	af25de2c 	.word	0xaf25de2c
 8006d3c:	3f11566a 	.word	0x3f11566a
 8006d40:	16bebd93 	.word	0x16bebd93
 8006d44:	3f66c16c 	.word	0x3f66c16c
 8006d48:	5555553e 	.word	0x5555553e
 8006d4c:	3fc55555 	.word	0x3fc55555
 8006d50:	3fe00000 	.word	0x3fe00000
 8006d54:	000fffff 	.word	0x000fffff
 8006d58:	3ff00000 	.word	0x3ff00000
 8006d5c:	4090cbff 	.word	0x4090cbff
 8006d60:	3f6f3400 	.word	0x3f6f3400

08006d64 <__ieee754_sqrt>:
 8006d64:	f8df c158 	ldr.w	ip, [pc, #344]	; 8006ec0 <__ieee754_sqrt+0x15c>
 8006d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d6c:	ea3c 0c01 	bics.w	ip, ip, r1
 8006d70:	4606      	mov	r6, r0
 8006d72:	460d      	mov	r5, r1
 8006d74:	460c      	mov	r4, r1
 8006d76:	460a      	mov	r2, r1
 8006d78:	4607      	mov	r7, r0
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	d10f      	bne.n	8006d9e <__ieee754_sqrt+0x3a>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	460b      	mov	r3, r1
 8006d82:	f7f9 fba1 	bl	80004c8 <__aeabi_dmul>
 8006d86:	4602      	mov	r2, r0
 8006d88:	460b      	mov	r3, r1
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	4629      	mov	r1, r5
 8006d8e:	f7f9 f9e5 	bl	800015c <__adddf3>
 8006d92:	4606      	mov	r6, r0
 8006d94:	460d      	mov	r5, r1
 8006d96:	4630      	mov	r0, r6
 8006d98:	4629      	mov	r1, r5
 8006d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d9e:	2900      	cmp	r1, #0
 8006da0:	dc0e      	bgt.n	8006dc0 <__ieee754_sqrt+0x5c>
 8006da2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006da6:	ea5c 0707 	orrs.w	r7, ip, r7
 8006daa:	d0f4      	beq.n	8006d96 <__ieee754_sqrt+0x32>
 8006dac:	b141      	cbz	r1, 8006dc0 <__ieee754_sqrt+0x5c>
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	f7f9 f9d1 	bl	8000158 <__aeabi_dsub>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	f7f9 fcaf 	bl	800071c <__aeabi_ddiv>
 8006dbe:	e7e8      	b.n	8006d92 <__ieee754_sqrt+0x2e>
 8006dc0:	1521      	asrs	r1, r4, #20
 8006dc2:	d075      	beq.n	8006eb0 <__ieee754_sqrt+0x14c>
 8006dc4:	07cc      	lsls	r4, r1, #31
 8006dc6:	f04f 0400 	mov.w	r4, #0
 8006dca:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006dce:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8006dd2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006dd6:	bf5e      	ittt	pl
 8006dd8:	0fd9      	lsrpl	r1, r3, #31
 8006dda:	005b      	lslpl	r3, r3, #1
 8006ddc:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8006de0:	0fd9      	lsrs	r1, r3, #31
 8006de2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8006de6:	2516      	movs	r5, #22
 8006de8:	4620      	mov	r0, r4
 8006dea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006dee:	107f      	asrs	r7, r7, #1
 8006df0:	005b      	lsls	r3, r3, #1
 8006df2:	1846      	adds	r6, r0, r1
 8006df4:	4296      	cmp	r6, r2
 8006df6:	bfde      	ittt	le
 8006df8:	1b92      	suble	r2, r2, r6
 8006dfa:	1870      	addle	r0, r6, r1
 8006dfc:	1864      	addle	r4, r4, r1
 8006dfe:	0052      	lsls	r2, r2, #1
 8006e00:	3d01      	subs	r5, #1
 8006e02:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006e06:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006e0a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006e0e:	d1f0      	bne.n	8006df2 <__ieee754_sqrt+0x8e>
 8006e10:	4629      	mov	r1, r5
 8006e12:	f04f 0e20 	mov.w	lr, #32
 8006e16:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006e1a:	4282      	cmp	r2, r0
 8006e1c:	eb06 0c05 	add.w	ip, r6, r5
 8006e20:	dc02      	bgt.n	8006e28 <__ieee754_sqrt+0xc4>
 8006e22:	d113      	bne.n	8006e4c <__ieee754_sqrt+0xe8>
 8006e24:	459c      	cmp	ip, r3
 8006e26:	d811      	bhi.n	8006e4c <__ieee754_sqrt+0xe8>
 8006e28:	f1bc 0f00 	cmp.w	ip, #0
 8006e2c:	eb0c 0506 	add.w	r5, ip, r6
 8006e30:	da43      	bge.n	8006eba <__ieee754_sqrt+0x156>
 8006e32:	2d00      	cmp	r5, #0
 8006e34:	db41      	blt.n	8006eba <__ieee754_sqrt+0x156>
 8006e36:	f100 0801 	add.w	r8, r0, #1
 8006e3a:	1a12      	subs	r2, r2, r0
 8006e3c:	4640      	mov	r0, r8
 8006e3e:	459c      	cmp	ip, r3
 8006e40:	bf88      	it	hi
 8006e42:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006e46:	eba3 030c 	sub.w	r3, r3, ip
 8006e4a:	4431      	add	r1, r6
 8006e4c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006e50:	f1be 0e01 	subs.w	lr, lr, #1
 8006e54:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8006e58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006e5c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006e60:	d1db      	bne.n	8006e1a <__ieee754_sqrt+0xb6>
 8006e62:	4313      	orrs	r3, r2
 8006e64:	d006      	beq.n	8006e74 <__ieee754_sqrt+0x110>
 8006e66:	1c48      	adds	r0, r1, #1
 8006e68:	bf0b      	itete	eq
 8006e6a:	4671      	moveq	r1, lr
 8006e6c:	3101      	addne	r1, #1
 8006e6e:	3401      	addeq	r4, #1
 8006e70:	f021 0101 	bicne.w	r1, r1, #1
 8006e74:	1063      	asrs	r3, r4, #1
 8006e76:	0849      	lsrs	r1, r1, #1
 8006e78:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006e7c:	07e2      	lsls	r2, r4, #31
 8006e7e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006e82:	bf48      	it	mi
 8006e84:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006e88:	460e      	mov	r6, r1
 8006e8a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006e8e:	e782      	b.n	8006d96 <__ieee754_sqrt+0x32>
 8006e90:	0ada      	lsrs	r2, r3, #11
 8006e92:	3815      	subs	r0, #21
 8006e94:	055b      	lsls	r3, r3, #21
 8006e96:	2a00      	cmp	r2, #0
 8006e98:	d0fa      	beq.n	8006e90 <__ieee754_sqrt+0x12c>
 8006e9a:	02d5      	lsls	r5, r2, #11
 8006e9c:	d50a      	bpl.n	8006eb4 <__ieee754_sqrt+0x150>
 8006e9e:	f1c1 0420 	rsb	r4, r1, #32
 8006ea2:	fa23 f404 	lsr.w	r4, r3, r4
 8006ea6:	1e4d      	subs	r5, r1, #1
 8006ea8:	408b      	lsls	r3, r1
 8006eaa:	4322      	orrs	r2, r4
 8006eac:	1b41      	subs	r1, r0, r5
 8006eae:	e789      	b.n	8006dc4 <__ieee754_sqrt+0x60>
 8006eb0:	4608      	mov	r0, r1
 8006eb2:	e7f0      	b.n	8006e96 <__ieee754_sqrt+0x132>
 8006eb4:	0052      	lsls	r2, r2, #1
 8006eb6:	3101      	adds	r1, #1
 8006eb8:	e7ef      	b.n	8006e9a <__ieee754_sqrt+0x136>
 8006eba:	4680      	mov	r8, r0
 8006ebc:	e7bd      	b.n	8006e3a <__ieee754_sqrt+0xd6>
 8006ebe:	bf00      	nop
 8006ec0:	7ff00000 	.word	0x7ff00000

08006ec4 <with_errno>:
 8006ec4:	b570      	push	{r4, r5, r6, lr}
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	460d      	mov	r5, r1
 8006eca:	4616      	mov	r6, r2
 8006ecc:	f7ff f882 	bl	8005fd4 <__errno>
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	6006      	str	r6, [r0, #0]
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	bd70      	pop	{r4, r5, r6, pc}

08006ed8 <xflow>:
 8006ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006eda:	4615      	mov	r5, r2
 8006edc:	461c      	mov	r4, r3
 8006ede:	b180      	cbz	r0, 8006f02 <xflow+0x2a>
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006ee6:	e9cd 0100 	strd	r0, r1, [sp]
 8006eea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006eee:	4628      	mov	r0, r5
 8006ef0:	4621      	mov	r1, r4
 8006ef2:	f7f9 fae9 	bl	80004c8 <__aeabi_dmul>
 8006ef6:	2222      	movs	r2, #34	; 0x22
 8006ef8:	b003      	add	sp, #12
 8006efa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006efe:	f7ff bfe1 	b.w	8006ec4 <with_errno>
 8006f02:	4610      	mov	r0, r2
 8006f04:	4619      	mov	r1, r3
 8006f06:	e7ee      	b.n	8006ee6 <xflow+0xe>

08006f08 <__math_uflow>:
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f0e:	f7ff bfe3 	b.w	8006ed8 <xflow>

08006f12 <__math_oflow>:
 8006f12:	2200      	movs	r2, #0
 8006f14:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006f18:	f7ff bfde 	b.w	8006ed8 <xflow>

08006f1c <fabs>:
 8006f1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006f20:	4770      	bx	lr

08006f22 <finite>:
 8006f22:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8006f26:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006f2a:	0fc0      	lsrs	r0, r0, #31
 8006f2c:	4770      	bx	lr
	...

08006f30 <scalbn>:
 8006f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f32:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8006f36:	4604      	mov	r4, r0
 8006f38:	460d      	mov	r5, r1
 8006f3a:	4617      	mov	r7, r2
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	b996      	cbnz	r6, 8006f66 <scalbn+0x36>
 8006f40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006f44:	4303      	orrs	r3, r0
 8006f46:	d039      	beq.n	8006fbc <scalbn+0x8c>
 8006f48:	4b33      	ldr	r3, [pc, #204]	; (8007018 <scalbn+0xe8>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f7f9 fabc 	bl	80004c8 <__aeabi_dmul>
 8006f50:	4b32      	ldr	r3, [pc, #200]	; (800701c <scalbn+0xec>)
 8006f52:	4604      	mov	r4, r0
 8006f54:	429f      	cmp	r7, r3
 8006f56:	460d      	mov	r5, r1
 8006f58:	da0f      	bge.n	8006f7a <scalbn+0x4a>
 8006f5a:	a32b      	add	r3, pc, #172	; (adr r3, 8007008 <scalbn+0xd8>)
 8006f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f60:	f7f9 fab2 	bl	80004c8 <__aeabi_dmul>
 8006f64:	e006      	b.n	8006f74 <scalbn+0x44>
 8006f66:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006f6a:	4296      	cmp	r6, r2
 8006f6c:	d10a      	bne.n	8006f84 <scalbn+0x54>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	f7f9 f8f4 	bl	800015c <__adddf3>
 8006f74:	4604      	mov	r4, r0
 8006f76:	460d      	mov	r5, r1
 8006f78:	e020      	b.n	8006fbc <scalbn+0x8c>
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006f80:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8006f84:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006f88:	19b9      	adds	r1, r7, r6
 8006f8a:	4291      	cmp	r1, r2
 8006f8c:	dd0e      	ble.n	8006fac <scalbn+0x7c>
 8006f8e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006f92:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006f96:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8006f9a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006f9e:	4820      	ldr	r0, [pc, #128]	; (8007020 <scalbn+0xf0>)
 8006fa0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006fa4:	a31a      	add	r3, pc, #104	; (adr r3, 8007010 <scalbn+0xe0>)
 8006fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006faa:	e7d9      	b.n	8006f60 <scalbn+0x30>
 8006fac:	2900      	cmp	r1, #0
 8006fae:	dd08      	ble.n	8006fc2 <scalbn+0x92>
 8006fb0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006fb4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006fb8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	4629      	mov	r1, r5
 8006fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fc2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8006fc6:	da12      	bge.n	8006fee <scalbn+0xbe>
 8006fc8:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006fcc:	429f      	cmp	r7, r3
 8006fce:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8006fd2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8006fd6:	dcdc      	bgt.n	8006f92 <scalbn+0x62>
 8006fd8:	a30b      	add	r3, pc, #44	; (adr r3, 8007008 <scalbn+0xd8>)
 8006fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fde:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8006fe2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8006fe6:	480f      	ldr	r0, [pc, #60]	; (8007024 <scalbn+0xf4>)
 8006fe8:	f041 011f 	orr.w	r1, r1, #31
 8006fec:	e7b8      	b.n	8006f60 <scalbn+0x30>
 8006fee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006ff2:	3136      	adds	r1, #54	; 0x36
 8006ff4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ff8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	4629      	mov	r1, r5
 8007000:	2200      	movs	r2, #0
 8007002:	4b09      	ldr	r3, [pc, #36]	; (8007028 <scalbn+0xf8>)
 8007004:	e7ac      	b.n	8006f60 <scalbn+0x30>
 8007006:	bf00      	nop
 8007008:	c2f8f359 	.word	0xc2f8f359
 800700c:	01a56e1f 	.word	0x01a56e1f
 8007010:	8800759c 	.word	0x8800759c
 8007014:	7e37e43c 	.word	0x7e37e43c
 8007018:	43500000 	.word	0x43500000
 800701c:	ffff3cb0 	.word	0xffff3cb0
 8007020:	8800759c 	.word	0x8800759c
 8007024:	c2f8f359 	.word	0xc2f8f359
 8007028:	3c900000 	.word	0x3c900000

0800702c <_init>:
 800702c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702e:	bf00      	nop
 8007030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007032:	bc08      	pop	{r3}
 8007034:	469e      	mov	lr, r3
 8007036:	4770      	bx	lr

08007038 <_fini>:
 8007038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800703a:	bf00      	nop
 800703c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800703e:	bc08      	pop	{r3}
 8007040:	469e      	mov	lr, r3
 8007042:	4770      	bx	lr
