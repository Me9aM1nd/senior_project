
Senior_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000707c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08007190  08007190  00017190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007388  08007388  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08007388  08007388  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007388  08007388  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007388  08007388  00017388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800738c  0800738c  0001738c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  20000070  08007400  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  08007400  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcc0  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000226c  00000000  00000000  0002dd59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0002ffc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b60  00000000  00000000  00030be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193b7  00000000  00000000  00031748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f5f0  00000000  00000000  0004aaff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000878b6  00000000  00000000  0005a0ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e19a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038b4  00000000  00000000  000e19f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08007174 	.word	0x08007174

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08007174 	.word	0x08007174

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2iz>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d215      	bcs.n	8000bc6 <__aeabi_d2iz+0x36>
 8000b9a:	d511      	bpl.n	8000bc0 <__aeabi_d2iz+0x30>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d912      	bls.n	8000bcc <__aeabi_d2iz+0x3c>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	bf18      	it	ne
 8000bbc:	4240      	negne	r0, r0
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d105      	bne.n	8000bd8 <__aeabi_d2iz+0x48>
 8000bcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_d2uiz>:
 8000be0:	004a      	lsls	r2, r1, #1
 8000be2:	d211      	bcs.n	8000c08 <__aeabi_d2uiz+0x28>
 8000be4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be8:	d211      	bcs.n	8000c0e <__aeabi_d2uiz+0x2e>
 8000bea:	d50d      	bpl.n	8000c08 <__aeabi_d2uiz+0x28>
 8000bec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf4:	d40e      	bmi.n	8000c14 <__aeabi_d2uiz+0x34>
 8000bf6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bfe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c02:	fa23 f002 	lsr.w	r0, r3, r2
 8000c06:	4770      	bx	lr
 8000c08:	f04f 0000 	mov.w	r0, #0
 8000c0c:	4770      	bx	lr
 8000c0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c12:	d102      	bne.n	8000c1a <__aeabi_d2uiz+0x3a>
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	4770      	bx	lr
 8000c1a:	f04f 0000 	mov.w	r0, #0
 8000c1e:	4770      	bx	lr

08000c20 <__aeabi_d2f>:
 8000c20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c28:	bf24      	itt	cs
 8000c2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c32:	d90d      	bls.n	8000c50 <__aeabi_d2f+0x30>
 8000c34:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c48:	bf08      	it	eq
 8000c4a:	f020 0001 	biceq.w	r0, r0, #1
 8000c4e:	4770      	bx	lr
 8000c50:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c54:	d121      	bne.n	8000c9a <__aeabi_d2f+0x7a>
 8000c56:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c5a:	bfbc      	itt	lt
 8000c5c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	4770      	bxlt	lr
 8000c62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c66:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c6a:	f1c2 0218 	rsb	r2, r2, #24
 8000c6e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c72:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c76:	fa20 f002 	lsr.w	r0, r0, r2
 8000c7a:	bf18      	it	ne
 8000c7c:	f040 0001 	orrne.w	r0, r0, #1
 8000c80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c88:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c8c:	ea40 000c 	orr.w	r0, r0, ip
 8000c90:	fa23 f302 	lsr.w	r3, r3, r2
 8000c94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c98:	e7cc      	b.n	8000c34 <__aeabi_d2f+0x14>
 8000c9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c9e:	d107      	bne.n	8000cb0 <__aeabi_d2f+0x90>
 8000ca0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ca4:	bf1e      	ittt	ne
 8000ca6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000caa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cae:	4770      	bxne	lr
 8000cb0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_frsub>:
 8000cc0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	e002      	b.n	8000ccc <__addsf3>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_fsub>:
 8000cc8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ccc <__addsf3>:
 8000ccc:	0042      	lsls	r2, r0, #1
 8000cce:	bf1f      	itttt	ne
 8000cd0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cd4:	ea92 0f03 	teqne	r2, r3
 8000cd8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cdc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce0:	d06a      	beq.n	8000db8 <__addsf3+0xec>
 8000ce2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ce6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cea:	bfc1      	itttt	gt
 8000cec:	18d2      	addgt	r2, r2, r3
 8000cee:	4041      	eorgt	r1, r0
 8000cf0:	4048      	eorgt	r0, r1
 8000cf2:	4041      	eorgt	r1, r0
 8000cf4:	bfb8      	it	lt
 8000cf6:	425b      	neglt	r3, r3
 8000cf8:	2b19      	cmp	r3, #25
 8000cfa:	bf88      	it	hi
 8000cfc:	4770      	bxhi	lr
 8000cfe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d06:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d0a:	bf18      	it	ne
 8000d0c:	4240      	negne	r0, r0
 8000d0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d12:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d16:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4249      	negne	r1, r1
 8000d1e:	ea92 0f03 	teq	r2, r3
 8000d22:	d03f      	beq.n	8000da4 <__addsf3+0xd8>
 8000d24:	f1a2 0201 	sub.w	r2, r2, #1
 8000d28:	fa41 fc03 	asr.w	ip, r1, r3
 8000d2c:	eb10 000c 	adds.w	r0, r0, ip
 8000d30:	f1c3 0320 	rsb	r3, r3, #32
 8000d34:	fa01 f103 	lsl.w	r1, r1, r3
 8000d38:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__addsf3+0x78>
 8000d3e:	4249      	negs	r1, r1
 8000d40:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d44:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d48:	d313      	bcc.n	8000d72 <__addsf3+0xa6>
 8000d4a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d4e:	d306      	bcc.n	8000d5e <__addsf3+0x92>
 8000d50:	0840      	lsrs	r0, r0, #1
 8000d52:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d56:	f102 0201 	add.w	r2, r2, #1
 8000d5a:	2afe      	cmp	r2, #254	; 0xfe
 8000d5c:	d251      	bcs.n	8000e02 <__addsf3+0x136>
 8000d5e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	ea40 0003 	orr.w	r0, r0, r3
 8000d70:	4770      	bx	lr
 8000d72:	0049      	lsls	r1, r1, #1
 8000d74:	eb40 0000 	adc.w	r0, r0, r0
 8000d78:	3a01      	subs	r2, #1
 8000d7a:	bf28      	it	cs
 8000d7c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d80:	d2ed      	bcs.n	8000d5e <__addsf3+0x92>
 8000d82:	fab0 fc80 	clz	ip, r0
 8000d86:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d8a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d8e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d92:	bfaa      	itet	ge
 8000d94:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d98:	4252      	neglt	r2, r2
 8000d9a:	4318      	orrge	r0, r3
 8000d9c:	bfbc      	itt	lt
 8000d9e:	40d0      	lsrlt	r0, r2
 8000da0:	4318      	orrlt	r0, r3
 8000da2:	4770      	bx	lr
 8000da4:	f092 0f00 	teq	r2, #0
 8000da8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dac:	bf06      	itte	eq
 8000dae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000db2:	3201      	addeq	r2, #1
 8000db4:	3b01      	subne	r3, #1
 8000db6:	e7b5      	b.n	8000d24 <__addsf3+0x58>
 8000db8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dbc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc0:	bf18      	it	ne
 8000dc2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dc6:	d021      	beq.n	8000e0c <__addsf3+0x140>
 8000dc8:	ea92 0f03 	teq	r2, r3
 8000dcc:	d004      	beq.n	8000dd8 <__addsf3+0x10c>
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	bf08      	it	eq
 8000dd4:	4608      	moveq	r0, r1
 8000dd6:	4770      	bx	lr
 8000dd8:	ea90 0f01 	teq	r0, r1
 8000ddc:	bf1c      	itt	ne
 8000dde:	2000      	movne	r0, #0
 8000de0:	4770      	bxne	lr
 8000de2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000de6:	d104      	bne.n	8000df2 <__addsf3+0x126>
 8000de8:	0040      	lsls	r0, r0, #1
 8000dea:	bf28      	it	cs
 8000dec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000df0:	4770      	bx	lr
 8000df2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000df6:	bf3c      	itt	cc
 8000df8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dfc:	4770      	bxcc	lr
 8000dfe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e02:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0a:	4770      	bx	lr
 8000e0c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e10:	bf16      	itet	ne
 8000e12:	4608      	movne	r0, r1
 8000e14:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e18:	4601      	movne	r1, r0
 8000e1a:	0242      	lsls	r2, r0, #9
 8000e1c:	bf06      	itte	eq
 8000e1e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e22:	ea90 0f01 	teqeq	r0, r1
 8000e26:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e2a:	4770      	bx	lr

08000e2c <__aeabi_ui2f>:
 8000e2c:	f04f 0300 	mov.w	r3, #0
 8000e30:	e004      	b.n	8000e3c <__aeabi_i2f+0x8>
 8000e32:	bf00      	nop

08000e34 <__aeabi_i2f>:
 8000e34:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e38:	bf48      	it	mi
 8000e3a:	4240      	negmi	r0, r0
 8000e3c:	ea5f 0c00 	movs.w	ip, r0
 8000e40:	bf08      	it	eq
 8000e42:	4770      	bxeq	lr
 8000e44:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e48:	4601      	mov	r1, r0
 8000e4a:	f04f 0000 	mov.w	r0, #0
 8000e4e:	e01c      	b.n	8000e8a <__aeabi_l2f+0x2a>

08000e50 <__aeabi_ul2f>:
 8000e50:	ea50 0201 	orrs.w	r2, r0, r1
 8000e54:	bf08      	it	eq
 8000e56:	4770      	bxeq	lr
 8000e58:	f04f 0300 	mov.w	r3, #0
 8000e5c:	e00a      	b.n	8000e74 <__aeabi_l2f+0x14>
 8000e5e:	bf00      	nop

08000e60 <__aeabi_l2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e6c:	d502      	bpl.n	8000e74 <__aeabi_l2f+0x14>
 8000e6e:	4240      	negs	r0, r0
 8000e70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e74:	ea5f 0c01 	movs.w	ip, r1
 8000e78:	bf02      	ittt	eq
 8000e7a:	4684      	moveq	ip, r0
 8000e7c:	4601      	moveq	r1, r0
 8000e7e:	2000      	moveq	r0, #0
 8000e80:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e84:	bf08      	it	eq
 8000e86:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e8e:	fabc f28c 	clz	r2, ip
 8000e92:	3a08      	subs	r2, #8
 8000e94:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e98:	db10      	blt.n	8000ebc <__aeabi_l2f+0x5c>
 8000e9a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ea4:	f1c2 0220 	rsb	r2, r2, #32
 8000ea8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000eac:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb0:	eb43 0002 	adc.w	r0, r3, r2
 8000eb4:	bf08      	it	eq
 8000eb6:	f020 0001 	biceq.w	r0, r0, #1
 8000eba:	4770      	bx	lr
 8000ebc:	f102 0220 	add.w	r2, r2, #32
 8000ec0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ec4:	f1c2 0220 	rsb	r2, r2, #32
 8000ec8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ecc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed0:	eb43 0002 	adc.w	r0, r3, r2
 8000ed4:	bf08      	it	eq
 8000ed6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eda:	4770      	bx	lr

08000edc <dev_trace_send_byte_int>:

//------------------------------------------------------------------------------
//         Local functions
//------------------------------------------------------------------------------
void dev_trace_send_byte_int(UINT8 b)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
		UINT8 i; 

		for (i=0; i<8; i++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	73fb      	strb	r3, [r7, #15]
 8000eea:	e015      	b.n	8000f18 <dev_trace_send_byte_int+0x3c>
		{
				dev_gpio_set(&trace_spi[TRACE_SPI_MOSI], b & 0x80); 
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	480c      	ldr	r0, [pc, #48]	; (8000f28 <dev_trace_send_byte_int+0x4c>)
 8000ef8:	f001 f8bc 	bl	8002074 <dev_gpio_set>
//				dev_gpio_set(&trace_spi[TRACE_SPI_MOSI], b & 0x80); 
				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 1); 
 8000efc:	2101      	movs	r1, #1
 8000efe:	480b      	ldr	r0, [pc, #44]	; (8000f2c <dev_trace_send_byte_int+0x50>)
 8000f00:	f001 f8b8 	bl	8002074 <dev_gpio_set>
//				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 1); 
				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 0); 
 8000f04:	2100      	movs	r1, #0
 8000f06:	4809      	ldr	r0, [pc, #36]	; (8000f2c <dev_trace_send_byte_int+0x50>)
 8000f08:	f001 f8b4 	bl	8002074 <dev_gpio_set>
//				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 0); 
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_SCK].port, trace_spi[TRACE_SPI_SCK].pin, b & 0x80);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 1);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
			
				b = b << 1;
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	71fb      	strb	r3, [r7, #7]
		for (i=0; i<8; i++)
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	3301      	adds	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	2b07      	cmp	r3, #7
 8000f1c:	d9e6      	bls.n	8000eec <dev_trace_send_byte_int+0x10>
		}
}
 8000f1e:	bf00      	nop
 8000f20:	bf00      	nop
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000090 	.word	0x20000090
 8000f2c:	200000b0 	.word	0x200000b0

08000f30 <dev_trace_init>:

//------------------------------------------------------------------------------
//         Global functions
//------------------------------------------------------------------------------
UINT8 dev_trace_init(dev_trace_init_t* init)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
		UINT8 ret;


		ret = dev_gpio_init_simp(&trace_spi[TRACE_SPI_MOSI], init->mosi.port, init->mosi.pin, GPIO_MODE_OUTPUT_PP);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	7899      	ldrb	r1, [r3, #2]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	881a      	ldrh	r2, [r3, #0]
 8000f40:	2301      	movs	r3, #1
 8000f42:	4827      	ldr	r0, [pc, #156]	; (8000fe0 <dev_trace_init+0xb0>)
 8000f44:	f001 f866 	bl	8002014 <dev_gpio_init_simp>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	73fb      	strb	r3, [r7, #15]
		if (ret) return TRACE_EERROR(ret);
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d007      	beq.n	8000f62 <dev_trace_init+0x32>
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	224e      	movs	r2, #78	; 0x4e
 8000f56:	4923      	ldr	r1, [pc, #140]	; (8000fe4 <dev_trace_init+0xb4>)
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 f873 	bl	8001044 <dev_trace_get_error>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	e039      	b.n	8000fd6 <dev_trace_init+0xa6>
		ret = dev_gpio_init_simp(&trace_spi[TRACE_SPI_SCK], init->sck.port, init->sck.pin, GPIO_MODE_OUTPUT_PP);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	7999      	ldrb	r1, [r3, #6]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	889a      	ldrh	r2, [r3, #4]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	481e      	ldr	r0, [pc, #120]	; (8000fe8 <dev_trace_init+0xb8>)
 8000f6e:	f001 f851 	bl	8002014 <dev_gpio_init_simp>
 8000f72:	4603      	mov	r3, r0
 8000f74:	73fb      	strb	r3, [r7, #15]
		if (ret) return TRACE_EERROR(ret);
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d007      	beq.n	8000f8c <dev_trace_init+0x5c>
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	2250      	movs	r2, #80	; 0x50
 8000f80:	4918      	ldr	r1, [pc, #96]	; (8000fe4 <dev_trace_init+0xb4>)
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f85e 	bl	8001044 <dev_trace_get_error>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	e024      	b.n	8000fd6 <dev_trace_init+0xa6>
		ret = dev_gpio_init_simp(&trace_spi[TRACE_SPI_NSS], init->nss.port, init->nss.pin, GPIO_MODE_OUTPUT_PP);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7a99      	ldrb	r1, [r3, #10]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	891a      	ldrh	r2, [r3, #8]
 8000f94:	2301      	movs	r3, #1
 8000f96:	4815      	ldr	r0, [pc, #84]	; (8000fec <dev_trace_init+0xbc>)
 8000f98:	f001 f83c 	bl	8002014 <dev_gpio_init_simp>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	73fb      	strb	r3, [r7, #15]
		if (ret) return TRACE_EERROR(ret);
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d007      	beq.n	8000fb6 <dev_trace_init+0x86>
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	2252      	movs	r2, #82	; 0x52
 8000faa:	490e      	ldr	r1, [pc, #56]	; (8000fe4 <dev_trace_init+0xb4>)
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 f849 	bl	8001044 <dev_trace_get_error>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	e00f      	b.n	8000fd6 <dev_trace_init+0xa6>
//  HAL_GPIO_Init(trace_spi[TRACE_SPI_NSS].port, &GPIO_InitStruct);	
	
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_NSS].port, trace_spi[TRACE_SPI_NSS].pin, 1);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_SCK].port, trace_spi[TRACE_SPI_SCK].pin, 0);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
		dev_gpio_set(&trace_spi[TRACE_SPI_NSS], 1);
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	480c      	ldr	r0, [pc, #48]	; (8000fec <dev_trace_init+0xbc>)
 8000fba:	f001 f85b 	bl	8002074 <dev_gpio_set>
		dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 0);
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4809      	ldr	r0, [pc, #36]	; (8000fe8 <dev_trace_init+0xb8>)
 8000fc2:	f001 f857 	bl	8002074 <dev_gpio_set>
		dev_gpio_set(&trace_spi[TRACE_SPI_MOSI], 0);
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <dev_trace_init+0xb0>)
 8000fca:	f001 f853 	bl	8002074 <dev_gpio_set>

		trace_ready = 1;	
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <dev_trace_init+0xc0>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]

		return RET_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000090 	.word	0x20000090
 8000fe4:	08007190 	.word	0x08007190
 8000fe8:	200000b0 	.word	0x200000b0
 8000fec:	200000d0 	.word	0x200000d0
 8000ff0:	2000008c 	.word	0x2000008c

08000ff4 <dev_trace_send_byte>:

// Send one Byte 
void dev_trace_send_byte(UINT8 b)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	if (trace_ready == 0) return;
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	; (800103c <dev_trace_send_byte+0x48>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d016      	beq.n	8001034 <dev_trace_send_byte+0x40>

//		dev_gpio_set(&trace_spi[TRACE_SPI_NSS], 0);
		HAL_GPIO_WritePin(trace_spi[TRACE_SPI_NSS].port, trace_spi[TRACE_SPI_NSS].pin, 0);
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <dev_trace_send_byte+0x4c>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	4a0d      	ldr	r2, [pc, #52]	; (8001040 <dev_trace_send_byte+0x4c>)
 800100c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 8001010:	2200      	movs	r2, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f002 fd72 	bl	8003afc <HAL_GPIO_WritePin>
		dev_trace_send_byte_int(b);
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff5e 	bl	8000edc <dev_trace_send_byte_int>
//		dev_gpio_set(&trace_spi[TRACE_SPI_NSS], 1);
	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_NSS].port, trace_spi[TRACE_SPI_NSS].pin, 1);
 8001020:	4b07      	ldr	r3, [pc, #28]	; (8001040 <dev_trace_send_byte+0x4c>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <dev_trace_send_byte+0x4c>)
 8001026:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 800102a:	2201      	movs	r2, #1
 800102c:	4618      	mov	r0, r3
 800102e:	f002 fd65 	bl	8003afc <HAL_GPIO_WritePin>
 8001032:	e000      	b.n	8001036 <dev_trace_send_byte+0x42>
	if (trace_ready == 0) return;
 8001034:	bf00      	nop
//		HAL_GPIO_WritePin(trace_spi[TRACE_SPI_SCK].port, trace_spi[TRACE_SPI_SCK].pin, 0);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
}
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	2000008c 	.word	0x2000008c
 8001040:	20000090 	.word	0x20000090

08001044 <dev_trace_get_error>:
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
}

// Get Trace error
uint8_t dev_trace_get_error(uint8_t error_value, char* file_name, uint32_t file_line)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	73fb      	strb	r3, [r7, #15]
		if (error_value == RET_OK) return RET_OK;
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <dev_trace_get_error+0x18>
 8001058:	2300      	movs	r3, #0
 800105a:	e006      	b.n	800106a <dev_trace_get_error+0x26>
	
		debug_printf("EE> %d at %s:%d\n\r", error_value, file_name, file_line); 
 800105c:	7bf9      	ldrb	r1, [r7, #15]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68ba      	ldr	r2, [r7, #8]
 8001062:	4804      	ldr	r0, [pc, #16]	; (8001074 <dev_trace_get_error+0x30>)
 8001064:	f000 f9b8 	bl	80013d8 <debug_printf>

		return error_value;
 8001068:	7bfb      	ldrb	r3, [r7, #15]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	080071a8 	.word	0x080071a8

08001078 <dev_trace_generate_error>:

// Generate Trace error
uint8_t dev_trace_generate_error(char* error_name, char* file_name, uint32_t file_line)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af02      	add	r7, sp, #8
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
		trace_error_id++;
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <dev_trace_generate_error+0x54>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	b2da      	uxtb	r2, r3
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <dev_trace_generate_error+0x54>)
 800108e:	701a      	strb	r2, [r3, #0]
		if (trace_error_id < 100) trace_error_id = 100;
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <dev_trace_generate_error+0x54>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b63      	cmp	r3, #99	; 0x63
 8001096:	d802      	bhi.n	800109e <dev_trace_generate_error+0x26>
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <dev_trace_generate_error+0x54>)
 800109a:	2264      	movs	r2, #100	; 0x64
 800109c:	701a      	strb	r2, [r3, #0]
		if (trace_error_id >= 200) trace_error_id = 100;
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <dev_trace_generate_error+0x54>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2bc7      	cmp	r3, #199	; 0xc7
 80010a4:	d902      	bls.n	80010ac <dev_trace_generate_error+0x34>
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <dev_trace_generate_error+0x54>)
 80010a8:	2264      	movs	r2, #100	; 0x64
 80010aa:	701a      	strb	r2, [r3, #0]

		debug_printf("GE> %d %s at %s:%d\n\r", trace_error_id, error_name, file_name, file_line);
 80010ac:	4b07      	ldr	r3, [pc, #28]	; (80010cc <dev_trace_generate_error+0x54>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <dev_trace_generate_error+0x58>)
 80010bc:	f000 f98c 	bl	80013d8 <debug_printf>

		return trace_error_id;
 80010c0:	4b02      	ldr	r3, [pc, #8]	; (80010cc <dev_trace_generate_error+0x54>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	2000008d 	.word	0x2000008d
 80010d0:	080071bc 	.word	0x080071bc

080010d4 <debug_printf_char>:
}

// Custom Printf function
//////////////////////////////////////////////////////////////////////////
void debug_printf_char(UINT8 c)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
    if (c < ' ') 
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b1f      	cmp	r3, #31
 80010e2:	d82a      	bhi.n	800113a <debug_printf_char+0x66>
    {    
        dev_trace_send_byte('~');
 80010e4:	207e      	movs	r0, #126	; 0x7e
 80010e6:	f7ff ff85 	bl	8000ff4 <dev_trace_send_byte>
        dev_trace_send_byte(HB2HEX(c / 0x10));
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b9f      	cmp	r3, #159	; 0x9f
 80010ee:	d905      	bls.n	80010fc <debug_printf_char+0x28>
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	091b      	lsrs	r3, r3, #4
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	3337      	adds	r3, #55	; 0x37
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	e004      	b.n	8001106 <debug_printf_char+0x32>
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	091b      	lsrs	r3, r3, #4
 8001100:	b2db      	uxtb	r3, r3
 8001102:	3330      	adds	r3, #48	; 0x30
 8001104:	b2db      	uxtb	r3, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ff74 	bl	8000ff4 <dev_trace_send_byte>
        dev_trace_send_byte(HB2HEX(c % 0x10));
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b09      	cmp	r3, #9
 8001116:	d906      	bls.n	8001126 <debug_printf_char+0x52>
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	b2db      	uxtb	r3, r3
 8001120:	3337      	adds	r3, #55	; 0x37
 8001122:	b2db      	uxtb	r3, r3
 8001124:	e005      	b.n	8001132 <debug_printf_char+0x5e>
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	f003 030f 	and.w	r3, r3, #15
 800112c:	b2db      	uxtb	r3, r3
 800112e:	3330      	adds	r3, #48	; 0x30
 8001130:	b2db      	uxtb	r3, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff5e 	bl	8000ff4 <dev_trace_send_byte>
    }
    else dev_trace_send_byte(c);
}
 8001138:	e003      	b.n	8001142 <debug_printf_char+0x6e>
    else dev_trace_send_byte(c);
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff59 	bl	8000ff4 <dev_trace_send_byte>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <debug_printf_text>:

void debug_printf_text(char* text)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b084      	sub	sp, #16
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
   int i = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]

   while(text[i] != 0)
 8001156:	e009      	b.n	800116c <debug_printf_text+0x22>
   {   
      dev_trace_send_byte(text[i]);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff47 	bl	8000ff4 <dev_trace_send_byte>
      i++;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	3301      	adds	r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
   while(text[i] != 0)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1ef      	bne.n	8001158 <debug_printf_text+0xe>
   }   
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <debug_printf_ulong>:

void debug_printf_ulong(unsigned long d)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
   UINT8 buf[10], len = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	75fb      	strb	r3, [r7, #23]

   if (d == 0) 
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d11c      	bne.n	80011d0 <debug_printf_ulong+0x4c>
   {
      dev_trace_send_byte('0');
 8001196:	2030      	movs	r0, #48	; 0x30
 8001198:	f7ff ff2c 	bl	8000ff4 <dev_trace_send_byte>
 800119c:	e02d      	b.n	80011fa <debug_printf_ulong+0x76>
      return;
   }   
   
   while (d > 0)
   {   
      buf[len] = d % 10;
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <debug_printf_ulong+0x7c>)
 80011a2:	fba3 2301 	umull	r2, r3, r3, r1
 80011a6:	08da      	lsrs	r2, r3, #3
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	1aca      	subs	r2, r1, r3
 80011b2:	7dfb      	ldrb	r3, [r7, #23]
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	3318      	adds	r3, #24
 80011b8:	443b      	add	r3, r7
 80011ba:	f803 2c0c 	strb.w	r2, [r3, #-12]
      d = d / 10;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a0f      	ldr	r2, [pc, #60]	; (8001200 <debug_printf_ulong+0x7c>)
 80011c2:	fba2 2303 	umull	r2, r3, r2, r3
 80011c6:	08db      	lsrs	r3, r3, #3
 80011c8:	607b      	str	r3, [r7, #4]
      len++;
 80011ca:	7dfb      	ldrb	r3, [r7, #23]
 80011cc:	3301      	adds	r3, #1
 80011ce:	75fb      	strb	r3, [r7, #23]
   while (d > 0)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1e3      	bne.n	800119e <debug_printf_ulong+0x1a>
   }   

   while (len > 0)
 80011d6:	e00d      	b.n	80011f4 <debug_printf_ulong+0x70>
   {   
      dev_trace_send_byte(buf[len - 1] + 0x30);
 80011d8:	7dfb      	ldrb	r3, [r7, #23]
 80011da:	3b01      	subs	r3, #1
 80011dc:	3318      	adds	r3, #24
 80011de:	443b      	add	r3, r7
 80011e0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80011e4:	3330      	adds	r3, #48	; 0x30
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff03 	bl	8000ff4 <dev_trace_send_byte>
      len--;
 80011ee:	7dfb      	ldrb	r3, [r7, #23]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	75fb      	strb	r3, [r7, #23]
   while (len > 0)
 80011f4:	7dfb      	ldrb	r3, [r7, #23]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1ee      	bne.n	80011d8 <debug_printf_ulong+0x54>
   }   
}
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	cccccccd 	.word	0xcccccccd

08001204 <debug_printf_long>:

   debug_printf_ulong(d);
}

void debug_printf_long(unsigned long d, UINT8 mode)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	70fb      	strb	r3, [r7, #3]
   UINT8 buf[10], len = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	75fb      	strb	r3, [r7, #23]

   if (d == 0) 
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d103      	bne.n	8001222 <debug_printf_long+0x1e>
   {
      dev_trace_send_byte('0');
 800121a:	2030      	movs	r0, #48	; 0x30
 800121c:	f7ff feea 	bl	8000ff4 <dev_trace_send_byte>
 8001220:	e03a      	b.n	8001298 <debug_printf_long+0x94>
      return;
   }   
   
   if (mode == 'd') 
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	2b64      	cmp	r3, #100	; 0x64
 8001226:	d122      	bne.n	800126e <debug_printf_long+0x6a>
   if ((signed long)d < 0) 
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	da1f      	bge.n	800126e <debug_printf_long+0x6a>
   {
      dev_trace_send_byte('-');
 800122e:	202d      	movs	r0, #45	; 0x2d
 8001230:	f7ff fee0 	bl	8000ff4 <dev_trace_send_byte>
      d = -((signed long)d);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	425b      	negs	r3, r3
 8001238:	607b      	str	r3, [r7, #4]
   }   

   while (d > 0)
 800123a:	e018      	b.n	800126e <debug_printf_long+0x6a>
   {   
      buf[len] = d % 10;
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <debug_printf_long+0x9c>)
 8001240:	fba3 2301 	umull	r2, r3, r3, r1
 8001244:	08da      	lsrs	r2, r3, #3
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	1aca      	subs	r2, r1, r3
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	3318      	adds	r3, #24
 8001256:	443b      	add	r3, r7
 8001258:	f803 2c0c 	strb.w	r2, [r3, #-12]
      d = d / 10;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a10      	ldr	r2, [pc, #64]	; (80012a0 <debug_printf_long+0x9c>)
 8001260:	fba2 2303 	umull	r2, r3, r2, r3
 8001264:	08db      	lsrs	r3, r3, #3
 8001266:	607b      	str	r3, [r7, #4]
      len++;
 8001268:	7dfb      	ldrb	r3, [r7, #23]
 800126a:	3301      	adds	r3, #1
 800126c:	75fb      	strb	r3, [r7, #23]
   while (d > 0)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1e3      	bne.n	800123c <debug_printf_long+0x38>
   }   

   while (len > 0)
 8001274:	e00d      	b.n	8001292 <debug_printf_long+0x8e>
   {   
      dev_trace_send_byte(buf[len - 1] + 0x30);
 8001276:	7dfb      	ldrb	r3, [r7, #23]
 8001278:	3b01      	subs	r3, #1
 800127a:	3318      	adds	r3, #24
 800127c:	443b      	add	r3, r7
 800127e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001282:	3330      	adds	r3, #48	; 0x30
 8001284:	b2db      	uxtb	r3, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff feb4 	bl	8000ff4 <dev_trace_send_byte>
      len--;
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	3b01      	subs	r3, #1
 8001290:	75fb      	strb	r3, [r7, #23]
   while (len > 0)
 8001292:	7dfb      	ldrb	r3, [r7, #23]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1ee      	bne.n	8001276 <debug_printf_long+0x72>
   }   
}
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	cccccccd 	.word	0xcccccccd

080012a4 <debug_printf_hex>:

void debug_printf_hex(UINT32 d, UINT8 mode)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	70fb      	strb	r3, [r7, #3]
   UINT32 buf = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
   UINT8 b, len = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	72fb      	strb	r3, [r7, #11]

   if (d == 0) 
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d112      	bne.n	80012e4 <debug_printf_hex+0x40>
   {
      dev_trace_send_byte('0');
 80012be:	2030      	movs	r0, #48	; 0x30
 80012c0:	f7ff fe98 	bl	8000ff4 <dev_trace_send_byte>
      return;
 80012c4:	e03a      	b.n	800133c <debug_printf_hex+0x98>
   }   

   while (d > 0)
   {  
      buf = buf << 4;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	011b      	lsls	r3, r3, #4
 80012ca:	60fb      	str	r3, [r7, #12]
      buf = buf + d % 0x10;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	4413      	add	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]
      d = d >> 4;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	607b      	str	r3, [r7, #4]
      len++;
 80012de:	7afb      	ldrb	r3, [r7, #11]
 80012e0:	3301      	adds	r3, #1
 80012e2:	72fb      	strb	r3, [r7, #11]
   while (d > 0)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1ed      	bne.n	80012c6 <debug_printf_hex+0x22>
   }   

   while (len > 0)
 80012ea:	e024      	b.n	8001336 <debug_printf_hex+0x92>
   {   
      b = buf % 0x10;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	f003 030f 	and.w	r3, r3, #15
 80012f4:	72bb      	strb	r3, [r7, #10]
   
      if (b < 0xA) dev_trace_send_byte(b + 0x30);
 80012f6:	7abb      	ldrb	r3, [r7, #10]
 80012f8:	2b09      	cmp	r3, #9
 80012fa:	d806      	bhi.n	800130a <debug_printf_hex+0x66>
 80012fc:	7abb      	ldrb	r3, [r7, #10]
 80012fe:	3330      	adds	r3, #48	; 0x30
 8001300:	b2db      	uxtb	r3, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fe76 	bl	8000ff4 <dev_trace_send_byte>
 8001308:	e00f      	b.n	800132a <debug_printf_hex+0x86>
      else  
      {      
         if (mode == 'X') dev_trace_send_byte(b + 0x41 - 0xA);
 800130a:	78fb      	ldrb	r3, [r7, #3]
 800130c:	2b58      	cmp	r3, #88	; 0x58
 800130e:	d106      	bne.n	800131e <debug_printf_hex+0x7a>
 8001310:	7abb      	ldrb	r3, [r7, #10]
 8001312:	3337      	adds	r3, #55	; 0x37
 8001314:	b2db      	uxtb	r3, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fe6c 	bl	8000ff4 <dev_trace_send_byte>
 800131c:	e005      	b.n	800132a <debug_printf_hex+0x86>
                  else  dev_trace_send_byte(b + 0x61 - 0xA);
 800131e:	7abb      	ldrb	r3, [r7, #10]
 8001320:	3357      	adds	r3, #87	; 0x57
 8001322:	b2db      	uxtb	r3, r3
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fe65 	bl	8000ff4 <dev_trace_send_byte>
      }

      buf = buf >> 4;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	60fb      	str	r3, [r7, #12]
      len--;
 8001330:	7afb      	ldrb	r3, [r7, #11]
 8001332:	3b01      	subs	r3, #1
 8001334:	72fb      	strb	r3, [r7, #11]
   while (len > 0)
 8001336:	7afb      	ldrb	r3, [r7, #11]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1d7      	bne.n	80012ec <debug_printf_hex+0x48>
   }   
}
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <debug_printf_bin>:

void debug_printf_bin(UINT32 d, UINT8 mode)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b084      	sub	sp, #16
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	460b      	mov	r3, r1
 800134c:	70fb      	strb	r3, [r7, #3]
   UINT32 buf = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
   UINT8 i, len = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	72bb      	strb	r3, [r7, #10]

   if (mode == 'B') len = 32;
 8001356:	78fb      	ldrb	r3, [r7, #3]
 8001358:	2b42      	cmp	r3, #66	; 0x42
 800135a:	d102      	bne.n	8001362 <debug_printf_bin+0x20>
 800135c:	2320      	movs	r3, #32
 800135e:	72bb      	strb	r3, [r7, #10]
 8001360:	e001      	b.n	8001366 <debug_printf_bin+0x24>
                else len = 8;
 8001362:	2308      	movs	r3, #8
 8001364:	72bb      	strb	r3, [r7, #10]

   for(i=0; i<len; i++)
 8001366:	2300      	movs	r3, #0
 8001368:	72fb      	strb	r3, [r7, #11]
 800136a:	e010      	b.n	800138e <debug_printf_bin+0x4c>
   {
      buf = buf << 1;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	60fb      	str	r3, [r7, #12]
      if (d % 2) buf++;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <debug_printf_bin+0x40>
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	3301      	adds	r3, #1
 8001380:	60fb      	str	r3, [r7, #12]
      d = d >> 1;      
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	085b      	lsrs	r3, r3, #1
 8001386:	607b      	str	r3, [r7, #4]
   for(i=0; i<len; i++)
 8001388:	7afb      	ldrb	r3, [r7, #11]
 800138a:	3301      	adds	r3, #1
 800138c:	72fb      	strb	r3, [r7, #11]
 800138e:	7afa      	ldrb	r2, [r7, #11]
 8001390:	7abb      	ldrb	r3, [r7, #10]
 8001392:	429a      	cmp	r2, r3
 8001394:	d3ea      	bcc.n	800136c <debug_printf_bin+0x2a>
   }   
                
   for(i=0; i<len; i++)
 8001396:	2300      	movs	r3, #0
 8001398:	72fb      	strb	r3, [r7, #11]
 800139a:	e011      	b.n	80013c0 <debug_printf_bin+0x7e>
   {
      if (buf % 2) dev_trace_send_byte('1');
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <debug_printf_bin+0x6c>
 80013a6:	2031      	movs	r0, #49	; 0x31
 80013a8:	f7ff fe24 	bl	8000ff4 <dev_trace_send_byte>
 80013ac:	e002      	b.n	80013b4 <debug_printf_bin+0x72>
            else dev_trace_send_byte('0');
 80013ae:	2030      	movs	r0, #48	; 0x30
 80013b0:	f7ff fe20 	bl	8000ff4 <dev_trace_send_byte>
               
      buf = buf >> 1;      
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	085b      	lsrs	r3, r3, #1
 80013b8:	60fb      	str	r3, [r7, #12]
   for(i=0; i<len; i++)
 80013ba:	7afb      	ldrb	r3, [r7, #11]
 80013bc:	3301      	adds	r3, #1
 80013be:	72fb      	strb	r3, [r7, #11]
 80013c0:	7afa      	ldrb	r2, [r7, #11]
 80013c2:	7abb      	ldrb	r3, [r7, #10]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d3e9      	bcc.n	800139c <debug_printf_bin+0x5a>
   }   
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	0000      	movs	r0, r0
 80013d4:	0000      	movs	r0, r0
	...

080013d8 <debug_printf>:

void debug_printf(char* text, ...)
{
 80013d8:	b40f      	push	{r0, r1, r2, r3}
 80013da:	b5b0      	push	{r4, r5, r7, lr}
 80013dc:	b098      	sub	sp, #96	; 0x60
 80013de:	af00      	add	r7, sp, #0
   va_list tag;
   int i = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	65fb      	str	r3, [r7, #92]	; 0x5c

   va_start(tag, text);
 80013e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013e8:	60bb      	str	r3, [r7, #8]
   
   while(text[i] != 0)
 80013ea:	e225      	b.n	8001838 <debug_printf+0x460>
   {
      if (text[i] != '%') 
 80013ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80013f0:	4413      	add	r3, r2
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b25      	cmp	r3, #37	; 0x25
 80013f6:	d00a      	beq.n	800140e <debug_printf+0x36>
      {
         dev_trace_send_byte(text[i]);
 80013f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013fa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80013fc:	4413      	add	r3, r2
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fdf7 	bl	8000ff4 <dev_trace_send_byte>
         i++;
 8001406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001408:	3301      	adds	r3, #1
 800140a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800140c:	e214      	b.n	8001838 <debug_printf+0x460>
//         continue;
      }   
      else if (text[i + 1] != 0)
 800140e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001410:	3301      	adds	r3, #1
 8001412:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001414:	4413      	add	r3, r2
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 820d 	beq.w	8001838 <debug_printf+0x460>
      {   
         switch(text[i + 1])   
 800141e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001420:	3301      	adds	r3, #1
 8001422:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001424:	4413      	add	r3, r2
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	3b42      	subs	r3, #66	; 0x42
 800142a:	2b36      	cmp	r3, #54	; 0x36
 800142c:	f200 8201 	bhi.w	8001832 <debug_printf+0x45a>
 8001430:	a201      	add	r2, pc, #4	; (adr r2, 8001438 <debug_printf+0x60>)
 8001432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001436:	bf00      	nop
 8001438:	080016e9 	.word	0x080016e9
 800143c:	08001833 	.word	0x08001833
 8001440:	08001833 	.word	0x08001833
 8001444:	08001833 	.word	0x08001833
 8001448:	08001833 	.word	0x08001833
 800144c:	08001833 	.word	0x08001833
 8001450:	08001833 	.word	0x08001833
 8001454:	08001833 	.word	0x08001833
 8001458:	08001833 	.word	0x08001833
 800145c:	08001833 	.word	0x08001833
 8001460:	08001833 	.word	0x08001833
 8001464:	0800179f 	.word	0x0800179f
 8001468:	08001833 	.word	0x08001833
 800146c:	08001833 	.word	0x08001833
 8001470:	08001833 	.word	0x08001833
 8001474:	08001833 	.word	0x08001833
 8001478:	08001833 	.word	0x08001833
 800147c:	08001833 	.word	0x08001833
 8001480:	08001833 	.word	0x08001833
 8001484:	08001833 	.word	0x08001833
 8001488:	08001833 	.word	0x08001833
 800148c:	08001833 	.word	0x08001833
 8001490:	080016c1 	.word	0x080016c1
 8001494:	08001833 	.word	0x08001833
 8001498:	08001833 	.word	0x08001833
 800149c:	08001833 	.word	0x08001833
 80014a0:	08001833 	.word	0x08001833
 80014a4:	08001833 	.word	0x08001833
 80014a8:	08001833 	.word	0x08001833
 80014ac:	08001833 	.word	0x08001833
 80014b0:	08001833 	.word	0x08001833
 80014b4:	08001833 	.word	0x08001833
 80014b8:	080016d5 	.word	0x080016d5
 80014bc:	08001695 	.word	0x08001695
 80014c0:	08001515 	.word	0x08001515
 80014c4:	08001833 	.word	0x08001833
 80014c8:	0800153f 	.word	0x0800153f
 80014cc:	08001833 	.word	0x08001833
 80014d0:	08001833 	.word	0x08001833
 80014d4:	08001833 	.word	0x08001833
 80014d8:	08001833 	.word	0x08001833
 80014dc:	08001833 	.word	0x08001833
 80014e0:	08001833 	.word	0x08001833
 80014e4:	080016fd 	.word	0x080016fd
 80014e8:	08001833 	.word	0x08001833
 80014ec:	08001833 	.word	0x08001833
 80014f0:	080017df 	.word	0x080017df
 80014f4:	08001833 	.word	0x08001833
 80014f8:	08001833 	.word	0x08001833
 80014fc:	08001683 	.word	0x08001683
 8001500:	08001833 	.word	0x08001833
 8001504:	0800152b 	.word	0x0800152b
 8001508:	08001833 	.word	0x08001833
 800150c:	08001833 	.word	0x08001833
 8001510:	080016ad 	.word	0x080016ad
         {
            case 'd' : 
               {
                  signed long d = va_arg(tag, signed long);
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	1d1a      	adds	r2, r3, #4
 8001518:	60ba      	str	r2, [r7, #8]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
                  debug_printf_long(d, 'd');
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	2164      	movs	r1, #100	; 0x64
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fe6e 	bl	8001204 <debug_printf_long>
               } break;
 8001528:	e183      	b.n	8001832 <debug_printf+0x45a>

            case 'u' : 
               {
                  unsigned long d = va_arg(tag, unsigned long);
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	1d1a      	adds	r2, r3, #4
 800152e:	60ba      	str	r2, [r7, #8]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	63bb      	str	r3, [r7, #56]	; 0x38
                  debug_printf_long(d, 'u');
 8001534:	2175      	movs	r1, #117	; 0x75
 8001536:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001538:	f7ff fe64 	bl	8001204 <debug_printf_long>
               } break;
 800153c:	e179      	b.n	8001832 <debug_printf+0x45a>

            case 'f' :
               {
                  signed long l;
                  unsigned char i, m[8];
                  double d = va_arg(tag, double);
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	3307      	adds	r3, #7
 8001542:	f023 0307 	bic.w	r3, r3, #7
 8001546:	f103 0208 	add.w	r2, r3, #8
 800154a:	60ba      	str	r2, [r7, #8]
 800154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001550:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

                  if (d < 0)
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001560:	f7ff fad8 	bl	8000b14 <__aeabi_dcmplt>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d008      	beq.n	800157c <debug_printf+0x1a4>
                  {
                    d = -d;
 800156a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800156c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800156e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001572:	e9c7 4512 	strd	r4, r5, [r7, #72]	; 0x48
                    dev_trace_send_byte('-');
 8001576:	202d      	movs	r0, #45	; 0x2d
 8001578:	f7ff fd3c 	bl	8000ff4 <dev_trace_send_byte>
                  }

                  debug_printf_ulong(d);
 800157c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001580:	f7ff fb2e 	bl	8000be0 <__aeabi_d2uiz>
 8001584:	4603      	mov	r3, r0
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fdfc 	bl	8001184 <debug_printf_ulong>
                  dev_trace_send_byte('.');
 800158c:	202e      	movs	r0, #46	; 0x2e
 800158e:	f7ff fd31 	bl	8000ff4 <dev_trace_send_byte>

                  d =  d - (signed long)d;
 8001592:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001596:	f7ff fafb 	bl	8000b90 <__aeabi_d2iz>
 800159a:	4603      	mov	r3, r0
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ffdd 	bl	800055c <__aeabi_i2d>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80015aa:	f7fe fe89 	bl	80002c0 <__aeabi_dsub>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
                  l = d * 1000000000;
 80015b6:	a3a8      	add	r3, pc, #672	; (adr r3, 8001858 <debug_printf+0x480>)
 80015b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015bc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80015c0:	f7ff f836 	bl	8000630 <__aeabi_dmul>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	f7ff fae0 	bl	8000b90 <__aeabi_d2iz>
 80015d0:	4603      	mov	r3, r0
 80015d2:	65bb      	str	r3, [r7, #88]	; 0x58

                  if ((l % 1000) > 500) l = l / 1000 + 1;
 80015d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80015d6:	4ba2      	ldr	r3, [pc, #648]	; (8001860 <debug_printf+0x488>)
 80015d8:	fb83 1302 	smull	r1, r3, r3, r2
 80015dc:	1199      	asrs	r1, r3, #6
 80015de:	17d3      	asrs	r3, r2, #31
 80015e0:	1acb      	subs	r3, r1, r3
 80015e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015e6:	fb01 f303 	mul.w	r3, r1, r3
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015f0:	dd09      	ble.n	8001606 <debug_printf+0x22e>
 80015f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015f4:	4a9a      	ldr	r2, [pc, #616]	; (8001860 <debug_printf+0x488>)
 80015f6:	fb82 1203 	smull	r1, r2, r2, r3
 80015fa:	1192      	asrs	r2, r2, #6
 80015fc:	17db      	asrs	r3, r3, #31
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	3301      	adds	r3, #1
 8001602:	65bb      	str	r3, [r7, #88]	; 0x58
 8001604:	e007      	b.n	8001616 <debug_printf+0x23e>
                                  else  l = l / 1000;
 8001606:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001608:	4a95      	ldr	r2, [pc, #596]	; (8001860 <debug_printf+0x488>)
 800160a:	fb82 1203 	smull	r1, r2, r2, r3
 800160e:	1192      	asrs	r2, r2, #6
 8001610:	17db      	asrs	r3, r3, #31
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	65bb      	str	r3, [r7, #88]	; 0x58
      //                m[1] = 0;
        //              debug_printf_text(m);
          //            break;
            //      }

                  i = 6; //sizeof(m);
 8001616:	2306      	movs	r3, #6
 8001618:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  //                {
    //                 l = l / 10;
      //               i--;
        //          }

                  m[i] = 0;
 800161c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001620:	3360      	adds	r3, #96	; 0x60
 8001622:	443b      	add	r3, r7
 8001624:	2200      	movs	r2, #0
 8001626:	f803 2c60 	strb.w	r2, [r3, #-96]
                  while (i)
 800162a:	e021      	b.n	8001670 <debug_printf+0x298>
                  {
                     i--;
 800162c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001630:	3b01      	subs	r3, #1
 8001632:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                     m[i] = 0x30 + (l % 10);
 8001636:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001638:	4b8a      	ldr	r3, [pc, #552]	; (8001864 <debug_printf+0x48c>)
 800163a:	fb83 1302 	smull	r1, r3, r3, r2
 800163e:	1099      	asrs	r1, r3, #2
 8001640:	17d3      	asrs	r3, r2, #31
 8001642:	1ac9      	subs	r1, r1, r3
 8001644:	460b      	mov	r3, r1
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	1ad1      	subs	r1, r2, r3
 800164e:	b2ca      	uxtb	r2, r1
 8001650:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001654:	3230      	adds	r2, #48	; 0x30
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	3360      	adds	r3, #96	; 0x60
 800165a:	443b      	add	r3, r7
 800165c:	f803 2c60 	strb.w	r2, [r3, #-96]
                     l = l / 10;
 8001660:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001662:	4a80      	ldr	r2, [pc, #512]	; (8001864 <debug_printf+0x48c>)
 8001664:	fb82 1203 	smull	r1, r2, r2, r3
 8001668:	1092      	asrs	r2, r2, #2
 800166a:	17db      	asrs	r3, r3, #31
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	65bb      	str	r3, [r7, #88]	; 0x58
                  while (i)
 8001670:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1d9      	bne.n	800162c <debug_printf+0x254>
                  }

                  debug_printf_text((char*)m);
 8001678:	463b      	mov	r3, r7
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fd65 	bl	800114a <debug_printf_text>

               } break;
 8001680:	e0d7      	b.n	8001832 <debug_printf+0x45a>
           
            case 's' : 
               {
                  char* s = va_arg(tag, char*);
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	1d1a      	adds	r2, r3, #4
 8001686:	60ba      	str	r2, [r7, #8]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	637b      	str	r3, [r7, #52]	; 0x34
                  debug_printf_text(s);
 800168c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800168e:	f7ff fd5c 	bl	800114a <debug_printf_text>
               } break;
 8001692:	e0ce      	b.n	8001832 <debug_printf+0x45a>

            case 'c' : 
               {
                  UINT8 b = va_arg(tag, unsigned long);
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	1d1a      	adds	r2, r3, #4
 8001698:	60ba      	str	r2, [r7, #8]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                  debug_printf_char(b);
 80016a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fd15 	bl	80010d4 <debug_printf_char>
               } break;
 80016aa:	e0c2      	b.n	8001832 <debug_printf+0x45a>
           
            case 'x' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	1d1a      	adds	r2, r3, #4
 80016b0:	60ba      	str	r2, [r7, #8]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	63fb      	str	r3, [r7, #60]	; 0x3c
                  debug_printf_hex(d, 'x');
 80016b6:	2178      	movs	r1, #120	; 0x78
 80016b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80016ba:	f7ff fdf3 	bl	80012a4 <debug_printf_hex>
               } break;
 80016be:	e0b8      	b.n	8001832 <debug_printf+0x45a>
            
            case 'X' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	1d1a      	adds	r2, r3, #4
 80016c4:	60ba      	str	r2, [r7, #8]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	61bb      	str	r3, [r7, #24]
                  debug_printf_hex(d, 'X');
 80016ca:	2158      	movs	r1, #88	; 0x58
 80016cc:	69b8      	ldr	r0, [r7, #24]
 80016ce:	f7ff fde9 	bl	80012a4 <debug_printf_hex>
               } break;
 80016d2:	e0ae      	b.n	8001832 <debug_printf+0x45a>
            
            case 'b' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	1d1a      	adds	r2, r3, #4
 80016d8:	60ba      	str	r2, [r7, #8]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	61fb      	str	r3, [r7, #28]
                  debug_printf_bin(d, 'b');
 80016de:	2162      	movs	r1, #98	; 0x62
 80016e0:	69f8      	ldr	r0, [r7, #28]
 80016e2:	f7ff fe2e 	bl	8001342 <debug_printf_bin>
               } break;
 80016e6:	e0a4      	b.n	8001832 <debug_printf+0x45a>
            
            case 'B' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	1d1a      	adds	r2, r3, #4
 80016ec:	60ba      	str	r2, [r7, #8]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	60fb      	str	r3, [r7, #12]
                  debug_printf_bin(d, 'B');
 80016f2:	2142      	movs	r1, #66	; 0x42
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f7ff fe24 	bl	8001342 <debug_printf_bin>
               } break;
 80016fa:	e09a      	b.n	8001832 <debug_printf+0x45a>
            
            case 'm' : 
               {
                  UINT8* mm = va_arg(tag, UINT8*);
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	1d1a      	adds	r2, r3, #4
 8001700:	60ba      	str	r2, [r7, #8]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c
                  UINT16 size = va_arg(tag, int);
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	1d1a      	adds	r2, r3, #4
 800170a:	60ba      	str	r2, [r7, #8]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	857b      	strh	r3, [r7, #42]	; 0x2a
                  int ii;

                  for(ii=0; ii<size; ii++) 
 8001710:	2300      	movs	r3, #0
 8001712:	647b      	str	r3, [r7, #68]	; 0x44
 8001714:	e03e      	b.n	8001794 <debug_printf+0x3bc>
                  {   
                     dev_trace_send_byte(HB2HEX(mm[ii] / 0x10));
 8001716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800171a:	4413      	add	r3, r2
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b9f      	cmp	r3, #159	; 0x9f
 8001720:	d908      	bls.n	8001734 <debug_printf+0x35c>
 8001722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001726:	4413      	add	r3, r2
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	091b      	lsrs	r3, r3, #4
 800172c:	b2db      	uxtb	r3, r3
 800172e:	3337      	adds	r3, #55	; 0x37
 8001730:	b2db      	uxtb	r3, r3
 8001732:	e007      	b.n	8001744 <debug_printf+0x36c>
 8001734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001738:	4413      	add	r3, r2
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	091b      	lsrs	r3, r3, #4
 800173e:	b2db      	uxtb	r3, r3
 8001740:	3330      	adds	r3, #48	; 0x30
 8001742:	b2db      	uxtb	r3, r3
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fc55 	bl	8000ff4 <dev_trace_send_byte>
                     dev_trace_send_byte(HB2HEX(mm[ii] % 0x10));
 800174a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800174c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800174e:	4413      	add	r3, r2
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b09      	cmp	r3, #9
 800175a:	d909      	bls.n	8001770 <debug_printf+0x398>
 800175c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800175e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001760:	4413      	add	r3, r2
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	f003 030f 	and.w	r3, r3, #15
 8001768:	b2db      	uxtb	r3, r3
 800176a:	3337      	adds	r3, #55	; 0x37
 800176c:	b2db      	uxtb	r3, r3
 800176e:	e008      	b.n	8001782 <debug_printf+0x3aa>
 8001770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001774:	4413      	add	r3, r2
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	f003 030f 	and.w	r3, r3, #15
 800177c:	b2db      	uxtb	r3, r3
 800177e:	3330      	adds	r3, #48	; 0x30
 8001780:	b2db      	uxtb	r3, r3
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fc36 	bl	8000ff4 <dev_trace_send_byte>
                     dev_trace_send_byte(' ');
 8001788:	2020      	movs	r0, #32
 800178a:	f7ff fc33 	bl	8000ff4 <dev_trace_send_byte>
                  for(ii=0; ii<size; ii++) 
 800178e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001790:	3301      	adds	r3, #1
 8001792:	647b      	str	r3, [r7, #68]	; 0x44
 8001794:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001798:	429a      	cmp	r2, r3
 800179a:	dbbc      	blt.n	8001716 <debug_printf+0x33e>
                  }
               
               } break;
 800179c:	e049      	b.n	8001832 <debug_printf+0x45a>

            case 'M' : 
               {
                  UINT8* mm = va_arg(tag, UINT8*);
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1d1a      	adds	r2, r3, #4
 80017a2:	60ba      	str	r2, [r7, #8]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	617b      	str	r3, [r7, #20]
                  UINT16 size = va_arg(tag, int);
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	1d1a      	adds	r2, r3, #4
 80017ac:	60ba      	str	r2, [r7, #8]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	827b      	strh	r3, [r7, #18]
                  int ii;

                  for(ii=0; ii<size; ii++) 
 80017b2:	2300      	movs	r3, #0
 80017b4:	643b      	str	r3, [r7, #64]	; 0x40
 80017b6:	e00d      	b.n	80017d4 <debug_printf+0x3fc>
                  {   
                     debug_printf_long(mm[ii], 'u');
 80017b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	4413      	add	r3, r2
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2175      	movs	r1, #117	; 0x75
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fd1e 	bl	8001204 <debug_printf_long>
                     dev_trace_send_byte(' ');
 80017c8:	2020      	movs	r0, #32
 80017ca:	f7ff fc13 	bl	8000ff4 <dev_trace_send_byte>
                  for(ii=0; ii<size; ii++) 
 80017ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017d0:	3301      	adds	r3, #1
 80017d2:	643b      	str	r3, [r7, #64]	; 0x40
 80017d4:	8a7b      	ldrh	r3, [r7, #18]
 80017d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017d8:	429a      	cmp	r2, r3
 80017da:	dbed      	blt.n	80017b8 <debug_printf+0x3e0>
                  }
               
               } break;
 80017dc:	e029      	b.n	8001832 <debug_printf+0x45a>

            case 'p' : 
               {
                  UINT8* mm = va_arg(tag, UINT8*);
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	1d1a      	adds	r2, r3, #4
 80017e2:	60ba      	str	r2, [r7, #8]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	633b      	str	r3, [r7, #48]	; 0x30
               
                  debug_printf_long(mm[0], 'u');
 80017e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2175      	movs	r1, #117	; 0x75
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fd08 	bl	8001204 <debug_printf_long>
                  dev_trace_send_byte('.');
 80017f4:	202e      	movs	r0, #46	; 0x2e
 80017f6:	f7ff fbfd 	bl	8000ff4 <dev_trace_send_byte>
                  debug_printf_long(mm[1], 'u');
 80017fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017fc:	3301      	adds	r3, #1
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2175      	movs	r1, #117	; 0x75
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fcfe 	bl	8001204 <debug_printf_long>
                  dev_trace_send_byte('.');
 8001808:	202e      	movs	r0, #46	; 0x2e
 800180a:	f7ff fbf3 	bl	8000ff4 <dev_trace_send_byte>
                  debug_printf_long(mm[2], 'u');
 800180e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001810:	3302      	adds	r3, #2
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2175      	movs	r1, #117	; 0x75
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fcf4 	bl	8001204 <debug_printf_long>
                  dev_trace_send_byte('.');
 800181c:	202e      	movs	r0, #46	; 0x2e
 800181e:	f7ff fbe9 	bl	8000ff4 <dev_trace_send_byte>
                  debug_printf_long(mm[3], 'u');
 8001822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001824:	3303      	adds	r3, #3
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2175      	movs	r1, #117	; 0x75
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fcea 	bl	8001204 <debug_printf_long>
               
               } break;
 8001830:	bf00      	nop
           
         }
      
         i += 2;
 8001832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001834:	3302      	adds	r3, #2
 8001836:	65fb      	str	r3, [r7, #92]	; 0x5c
   while(text[i] != 0)
 8001838:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800183a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800183c:	4413      	add	r3, r2
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	f47f add3 	bne.w	80013ec <debug_printf+0x14>
      }
   }   

}
 8001846:	bf00      	nop
 8001848:	bf00      	nop
 800184a:	3760      	adds	r7, #96	; 0x60
 800184c:	46bd      	mov	sp, r7
 800184e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001852:	b004      	add	sp, #16
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	00000000 	.word	0x00000000
 800185c:	41cdcd65 	.word	0x41cdcd65
 8001860:	10624dd3 	.word	0x10624dd3
 8001864:	66666667 	.word	0x66666667

08001868 <hal_driver_set_info>:
static void* dma_2_irq_data[16];



void hal_driver_set_info(dev_info_t* info_1, dev_info_t* info_2)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
		info_2->id = info_1->id;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	781a      	ldrb	r2, [r3, #0]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	701a      	strb	r2, [r3, #0]
		info_2->status_in = info_1->status_in;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	605a      	str	r2, [r3, #4]
		info_2->status_out = info_1->status_out;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	609a      	str	r2, [r3, #8]
		info_2->name = info_1->name;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691a      	ldr	r2, [r3, #16]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	611a      	str	r2, [r3, #16]
	
		info_2->rx_mode = HAL_DEFAULT_MODE_SYNC;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	2200      	movs	r2, #0
 8001896:	731a      	strb	r2, [r3, #12]
		info_2->tx_mode = HAL_DEFAULT_MODE_SYNC;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	2200      	movs	r2, #0
 800189c:	735a      	strb	r2, [r3, #13]
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <EXTI1_IRQHandler>:
//------------------------------------------------------------------------------
//         internal Functions
//------------------------------------------------------------------------------

//void EXTI0_IRQHandler(void){ (*gpio_irq_cbf[0])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);}
void EXTI1_IRQHandler(void){ (*gpio_irq_cbf[1])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);}
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <EXTI1_IRQHandler+0x14>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	4798      	blx	r3
 80018b2:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <EXTI1_IRQHandler+0x18>)
 80018b4:	2202      	movs	r2, #2
 80018b6:	615a      	str	r2, [r3, #20]
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200000f0 	.word	0x200000f0
 80018c0:	40010400 	.word	0x40010400

080018c4 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){ (*gpio_irq_cbf[2])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2);}
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <EXTI2_IRQHandler+0x14>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	4798      	blx	r3
 80018ce:	4b03      	ldr	r3, [pc, #12]	; (80018dc <EXTI2_IRQHandler+0x18>)
 80018d0:	2204      	movs	r2, #4
 80018d2:	615a      	str	r2, [r3, #20]
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200000f0 	.word	0x200000f0
 80018dc:	40010400 	.word	0x40010400

080018e0 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){ (*gpio_irq_cbf[3])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);}
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <EXTI3_IRQHandler+0x14>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	4798      	blx	r3
 80018ea:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <EXTI3_IRQHandler+0x18>)
 80018ec:	2208      	movs	r2, #8
 80018ee:	615a      	str	r2, [r3, #20]
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	200000f0 	.word	0x200000f0
 80018f8:	40010400 	.word	0x40010400

080018fc <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){ (*gpio_irq_cbf[4])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);}
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <EXTI4_IRQHandler+0x14>)
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	4798      	blx	r3
 8001906:	4b03      	ldr	r3, [pc, #12]	; (8001914 <EXTI4_IRQHandler+0x18>)
 8001908:	2210      	movs	r2, #16
 800190a:	615a      	str	r2, [r3, #20]
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	200000f0 	.word	0x200000f0
 8001914:	40010400 	.word	0x40010400

08001918 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{ 
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_5) != RESET) { (*gpio_irq_cbf[5])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5); }
 800191c:	4b1f      	ldr	r3, [pc, #124]	; (800199c <EXTI9_5_IRQHandler+0x84>)
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	f003 0320 	and.w	r3, r3, #32
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <EXTI9_5_IRQHandler+0x1c>
 8001928:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <EXTI9_5_IRQHandler+0x88>)
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	4798      	blx	r3
 800192e:	4b1b      	ldr	r3, [pc, #108]	; (800199c <EXTI9_5_IRQHandler+0x84>)
 8001930:	2220      	movs	r2, #32
 8001932:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET) { (*gpio_irq_cbf[6])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6); }
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <EXTI9_5_IRQHandler+0x84>)
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <EXTI9_5_IRQHandler+0x34>
 8001940:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <EXTI9_5_IRQHandler+0x88>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	4798      	blx	r3
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <EXTI9_5_IRQHandler+0x84>)
 8001948:	2240      	movs	r2, #64	; 0x40
 800194a:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET) { (*gpio_irq_cbf[7])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7); }
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <EXTI9_5_IRQHandler+0x84>)
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <EXTI9_5_IRQHandler+0x4c>
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <EXTI9_5_IRQHandler+0x88>)
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	4798      	blx	r3
 800195e:	4b0f      	ldr	r3, [pc, #60]	; (800199c <EXTI9_5_IRQHandler+0x84>)
 8001960:	2280      	movs	r2, #128	; 0x80
 8001962:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET) { (*gpio_irq_cbf[8])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8); }
 8001964:	4b0d      	ldr	r3, [pc, #52]	; (800199c <EXTI9_5_IRQHandler+0x84>)
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196c:	2b00      	cmp	r3, #0
 800196e:	d006      	beq.n	800197e <EXTI9_5_IRQHandler+0x66>
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <EXTI9_5_IRQHandler+0x88>)
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	4798      	blx	r3
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <EXTI9_5_IRQHandler+0x84>)
 8001978:	f44f 7280 	mov.w	r2, #256	; 0x100
 800197c:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET) { (*gpio_irq_cbf[9])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9); }
 800197e:	4b07      	ldr	r3, [pc, #28]	; (800199c <EXTI9_5_IRQHandler+0x84>)
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001986:	2b00      	cmp	r3, #0
 8001988:	d006      	beq.n	8001998 <EXTI9_5_IRQHandler+0x80>
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <EXTI9_5_IRQHandler+0x88>)
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	4798      	blx	r3
 8001990:	4b02      	ldr	r3, [pc, #8]	; (800199c <EXTI9_5_IRQHandler+0x84>)
 8001992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001996:	615a      	str	r2, [r3, #20]
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40010400 	.word	0x40010400
 80019a0:	200000f0 	.word	0x200000f0

080019a4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{ 
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_10) != RESET) { (*gpio_irq_cbf[10])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10); }
 80019a8:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <EXTI15_10_IRQHandler+0xa4>)
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d006      	beq.n	80019c2 <EXTI15_10_IRQHandler+0x1e>
 80019b4:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <EXTI15_10_IRQHandler+0xa8>)
 80019b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b8:	4798      	blx	r3
 80019ba:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <EXTI15_10_IRQHandler+0xa4>)
 80019bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019c0:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_11) != RESET) { (*gpio_irq_cbf[11])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11); }
 80019c2:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <EXTI15_10_IRQHandler+0xa4>)
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d006      	beq.n	80019dc <EXTI15_10_IRQHandler+0x38>
 80019ce:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <EXTI15_10_IRQHandler+0xa8>)
 80019d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d2:	4798      	blx	r3
 80019d4:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <EXTI15_10_IRQHandler+0xa4>)
 80019d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019da:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_12) != RESET) { (*gpio_irq_cbf[12])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12); }
 80019dc:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <EXTI15_10_IRQHandler+0xa4>)
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d006      	beq.n	80019f6 <EXTI15_10_IRQHandler+0x52>
 80019e8:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <EXTI15_10_IRQHandler+0xa8>)
 80019ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ec:	4798      	blx	r3
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <EXTI15_10_IRQHandler+0xa4>)
 80019f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019f4:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET) { (*gpio_irq_cbf[13])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13); }
 80019f6:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <EXTI15_10_IRQHandler+0xa4>)
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d006      	beq.n	8001a10 <EXTI15_10_IRQHandler+0x6c>
 8001a02:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <EXTI15_10_IRQHandler+0xa8>)
 8001a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a06:	4798      	blx	r3
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <EXTI15_10_IRQHandler+0xa4>)
 8001a0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a0e:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_14) != RESET) { (*gpio_irq_cbf[14])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14); }
 8001a10:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <EXTI15_10_IRQHandler+0xa4>)
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d006      	beq.n	8001a2a <EXTI15_10_IRQHandler+0x86>
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <EXTI15_10_IRQHandler+0xa8>)
 8001a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a20:	4798      	blx	r3
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <EXTI15_10_IRQHandler+0xa4>)
 8001a24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a28:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_15) != RESET) { (*gpio_irq_cbf[15])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_15); }
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <EXTI15_10_IRQHandler+0xa4>)
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d006      	beq.n	8001a44 <EXTI15_10_IRQHandler+0xa0>
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <EXTI15_10_IRQHandler+0xa8>)
 8001a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3a:	4798      	blx	r3
 8001a3c:	4b02      	ldr	r3, [pc, #8]	; (8001a48 <EXTI15_10_IRQHandler+0xa4>)
 8001a3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a42:	615a      	str	r2, [r3, #20]
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40010400 	.word	0x40010400
 8001a4c:	200000f0 	.word	0x200000f0

08001a50 <dev_gpio_id_port>:

//------------------------------------------------------------------------------
//         GPIO Local Functions
//------------------------------------------------------------------------------
GPIO_TypeDef* dev_gpio_id_port(UINT8 gpio_id)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
		switch(gpio_id)
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d817      	bhi.n	8001a90 <dev_gpio_id_port+0x40>
 8001a60:	a201      	add	r2, pc, #4	; (adr r2, 8001a68 <dev_gpio_id_port+0x18>)
 8001a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a66:	bf00      	nop
 8001a68:	08001a7d 	.word	0x08001a7d
 8001a6c:	08001a81 	.word	0x08001a81
 8001a70:	08001a85 	.word	0x08001a85
 8001a74:	08001a89 	.word	0x08001a89
 8001a78:	08001a8d 	.word	0x08001a8d
		{
				case GPIO_PA : return GPIOA;
 8001a7c:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <dev_gpio_id_port+0x4c>)
 8001a7e:	e008      	b.n	8001a92 <dev_gpio_id_port+0x42>
				case GPIO_PB : return GPIOB;
 8001a80:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <dev_gpio_id_port+0x50>)
 8001a82:	e006      	b.n	8001a92 <dev_gpio_id_port+0x42>
				case GPIO_PC : return GPIOC;
 8001a84:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <dev_gpio_id_port+0x54>)
 8001a86:	e004      	b.n	8001a92 <dev_gpio_id_port+0x42>
				case GPIO_PD : return GPIOD;
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <dev_gpio_id_port+0x58>)
 8001a8a:	e002      	b.n	8001a92 <dev_gpio_id_port+0x42>
				case GPIO_PE : return GPIOE;
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <dev_gpio_id_port+0x5c>)
 8001a8e:	e000      	b.n	8001a92 <dev_gpio_id_port+0x42>
				case GPIO_PI : return GPIOI;
#endif

		}

		return (GPIO_TypeDef*)0;	
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	40010800 	.word	0x40010800
 8001aa0:	40010c00 	.word	0x40010c00
 8001aa4:	40011000 	.word	0x40011000
 8001aa8:	40011400 	.word	0x40011400
 8001aac:	40011800 	.word	0x40011800

08001ab0 <dev_gpio_pin_id>:

		return 0;	
}

int dev_gpio_pin_id(UINT16 pin)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	80fb      	strh	r3, [r7, #6]
		if (pin & 0x0001) return 0;
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <dev_gpio_pin_id+0x18>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	e069      	b.n	8001b9c <dev_gpio_pin_id+0xec>
		if (pin & 0x0002) return 1;
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <dev_gpio_pin_id+0x26>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e062      	b.n	8001b9c <dev_gpio_pin_id+0xec>
		if (pin & 0x0004) return 2;
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <dev_gpio_pin_id+0x34>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e05b      	b.n	8001b9c <dev_gpio_pin_id+0xec>
		if (pin & 0x0008) return 3;
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <dev_gpio_pin_id+0x42>
 8001aee:	2303      	movs	r3, #3
 8001af0:	e054      	b.n	8001b9c <dev_gpio_pin_id+0xec>
		if (pin & 0x0010) return 4;
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	f003 0310 	and.w	r3, r3, #16
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <dev_gpio_pin_id+0x50>
 8001afc:	2304      	movs	r3, #4
 8001afe:	e04d      	b.n	8001b9c <dev_gpio_pin_id+0xec>
		if (pin & 0x0020) return 5;
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	f003 0320 	and.w	r3, r3, #32
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <dev_gpio_pin_id+0x5e>
 8001b0a:	2305      	movs	r3, #5
 8001b0c:	e046      	b.n	8001b9c <dev_gpio_pin_id+0xec>
		if (pin & 0x0040) return 6;
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <dev_gpio_pin_id+0x6c>
 8001b18:	2306      	movs	r3, #6
 8001b1a:	e03f      	b.n	8001b9c <dev_gpio_pin_id+0xec>
		if (pin & 0x0080) return 7;
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <dev_gpio_pin_id+0x7a>
 8001b26:	2307      	movs	r3, #7
 8001b28:	e038      	b.n	8001b9c <dev_gpio_pin_id+0xec>
	
		if (pin & 0x0100) return 8;
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <dev_gpio_pin_id+0x88>
 8001b34:	2308      	movs	r3, #8
 8001b36:	e031      	b.n	8001b9c <dev_gpio_pin_id+0xec>
		if (pin & 0x0200) return 9;
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <dev_gpio_pin_id+0x96>
 8001b42:	2309      	movs	r3, #9
 8001b44:	e02a      	b.n	8001b9c <dev_gpio_pin_id+0xec>
		if (pin & 0x0400) return 10;
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <dev_gpio_pin_id+0xa4>
 8001b50:	230a      	movs	r3, #10
 8001b52:	e023      	b.n	8001b9c <dev_gpio_pin_id+0xec>
		if (pin & 0x0800) return 11;
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <dev_gpio_pin_id+0xb2>
 8001b5e:	230b      	movs	r3, #11
 8001b60:	e01c      	b.n	8001b9c <dev_gpio_pin_id+0xec>
		if (pin & 0x1000) return 12;
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <dev_gpio_pin_id+0xc0>
 8001b6c:	230c      	movs	r3, #12
 8001b6e:	e015      	b.n	8001b9c <dev_gpio_pin_id+0xec>
		if (pin & 0x2000) return 13;
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <dev_gpio_pin_id+0xce>
 8001b7a:	230d      	movs	r3, #13
 8001b7c:	e00e      	b.n	8001b9c <dev_gpio_pin_id+0xec>
		if (pin & 0x4000) return 14;
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <dev_gpio_pin_id+0xdc>
 8001b88:	230e      	movs	r3, #14
 8001b8a:	e007      	b.n	8001b9c <dev_gpio_pin_id+0xec>
		if (pin & 0x8000) return 15;
 8001b8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	da01      	bge.n	8001b98 <dev_gpio_pin_id+0xe8>
 8001b94:	230f      	movs	r3, #15
 8001b96:	e001      	b.n	8001b9c <dev_gpio_pin_id+0xec>

		return -1;	
 8001b98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
	...

08001ba8 <dev_gpio_init_rcc>:

//------------------------------------------------------------------------------
//         GPIO Init Functions
//------------------------------------------------------------------------------
UINT8 dev_gpio_init_rcc(UINT8 gpio_id)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
		switch(gpio_id)
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d84e      	bhi.n	8001c56 <dev_gpio_init_rcc+0xae>
 8001bb8:	a201      	add	r2, pc, #4	; (adr r2, 8001bc0 <dev_gpio_init_rcc+0x18>)
 8001bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbe:	bf00      	nop
 8001bc0:	08001bd5 	.word	0x08001bd5
 8001bc4:	08001bef 	.word	0x08001bef
 8001bc8:	08001c09 	.word	0x08001c09
 8001bcc:	08001c23 	.word	0x08001c23
 8001bd0:	08001c3d 	.word	0x08001c3d
		{
				case GPIO_PA : __HAL_RCC_GPIOA_CLK_ENABLE(); break;
 8001bd4:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <dev_gpio_init_rcc+0xc4>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	4a24      	ldr	r2, [pc, #144]	; (8001c6c <dev_gpio_init_rcc+0xc4>)
 8001bda:	f043 0304 	orr.w	r3, r3, #4
 8001bde:	6193      	str	r3, [r2, #24]
 8001be0:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <dev_gpio_init_rcc+0xc4>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	61fb      	str	r3, [r7, #28]
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	e038      	b.n	8001c60 <dev_gpio_init_rcc+0xb8>
				case GPIO_PB : __HAL_RCC_GPIOB_CLK_ENABLE(); break;
 8001bee:	4b1f      	ldr	r3, [pc, #124]	; (8001c6c <dev_gpio_init_rcc+0xc4>)
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	4a1e      	ldr	r2, [pc, #120]	; (8001c6c <dev_gpio_init_rcc+0xc4>)
 8001bf4:	f043 0308 	orr.w	r3, r3, #8
 8001bf8:	6193      	str	r3, [r2, #24]
 8001bfa:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <dev_gpio_init_rcc+0xc4>)
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	61bb      	str	r3, [r7, #24]
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	e02b      	b.n	8001c60 <dev_gpio_init_rcc+0xb8>
				case GPIO_PC : __HAL_RCC_GPIOC_CLK_ENABLE(); break;
 8001c08:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <dev_gpio_init_rcc+0xc4>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	4a17      	ldr	r2, [pc, #92]	; (8001c6c <dev_gpio_init_rcc+0xc4>)
 8001c0e:	f043 0310 	orr.w	r3, r3, #16
 8001c12:	6193      	str	r3, [r2, #24]
 8001c14:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <dev_gpio_init_rcc+0xc4>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f003 0310 	and.w	r3, r3, #16
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	e01e      	b.n	8001c60 <dev_gpio_init_rcc+0xb8>
				case GPIO_PD : __HAL_RCC_GPIOD_CLK_ENABLE(); break;
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <dev_gpio_init_rcc+0xc4>)
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	4a11      	ldr	r2, [pc, #68]	; (8001c6c <dev_gpio_init_rcc+0xc4>)
 8001c28:	f043 0320 	orr.w	r3, r3, #32
 8001c2c:	6193      	str	r3, [r2, #24]
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <dev_gpio_init_rcc+0xc4>)
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	f003 0320 	and.w	r3, r3, #32
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	e011      	b.n	8001c60 <dev_gpio_init_rcc+0xb8>
				case GPIO_PE : __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <dev_gpio_init_rcc+0xc4>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <dev_gpio_init_rcc+0xc4>)
 8001c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c46:	6193      	str	r3, [r2, #24]
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <dev_gpio_init_rcc+0xc4>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	e004      	b.n	8001c60 <dev_gpio_init_rcc+0xb8>
			
#ifdef	GPIOI			
				case GPIO_PI : __HAL_RCC_GPIOI_CLK_ENABLE(); break;
#endif
			
				default : TRACE_GERROR("Unknow GPIO !!!");
 8001c56:	22a4      	movs	r2, #164	; 0xa4
 8001c58:	4905      	ldr	r1, [pc, #20]	; (8001c70 <dev_gpio_init_rcc+0xc8>)
 8001c5a:	4806      	ldr	r0, [pc, #24]	; (8001c74 <dev_gpio_init_rcc+0xcc>)
 8001c5c:	f7ff fa0c 	bl	8001078 <dev_trace_generate_error>
		}
		
		return RET_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3720      	adds	r7, #32
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	08007200 	.word	0x08007200
 8001c74:	08007218 	.word	0x08007218

08001c78 <dev_gpio_init_mode>:
			
		return RET_OK;
}

UINT8 dev_gpio_init_mode(GPIO_InitTypeDef* init, UINT8 gpio_mode)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	70fb      	strb	r3, [r7, #3]
	
		switch(gpio_mode)
 8001c84:	78fb      	ldrb	r3, [r7, #3]
 8001c86:	2b0b      	cmp	r3, #11
 8001c88:	d859      	bhi.n	8001d3e <dev_gpio_init_mode+0xc6>
 8001c8a:	a201      	add	r2, pc, #4	; (adr r2, 8001c90 <dev_gpio_init_mode+0x18>)
 8001c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c90:	08001cc1 	.word	0x08001cc1
 8001c94:	08001ceb 	.word	0x08001ceb
 8001c98:	08001cc1 	.word	0x08001cc1
 8001c9c:	08001cdd 	.word	0x08001cdd
 8001ca0:	08001ccf 	.word	0x08001ccf
 8001ca4:	08001ceb 	.word	0x08001ceb
 8001ca8:	08001cf9 	.word	0x08001cf9
 8001cac:	08001d07 	.word	0x08001d07
 8001cb0:	08001d15 	.word	0x08001d15
 8001cb4:	08001d23 	.word	0x08001d23
 8001cb8:	08001d07 	.word	0x08001d07
 8001cbc:	08001d31 	.word	0x08001d31
		{
				case GPIO_MODE_IN : 
				case GPIO_MODE_IN_FLOAT : 	init->Mode = GPIO_MODE_INPUT;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	605a      	str	r2, [r3, #4]
																		init->Pull = GPIO_NOPULL; break;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	e03e      	b.n	8001d4c <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_IN_UP : 			init->Mode = GPIO_MODE_INPUT;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	605a      	str	r2, [r3, #4]
																		init->Pull = GPIO_PULLUP; break;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	e037      	b.n	8001d4c <dev_gpio_init_mode+0xd4>
				
				case GPIO_MODE_IN_DOWN : 		init->Mode = GPIO_MODE_INPUT;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	605a      	str	r2, [r3, #4]
																		init->Pull = GPIO_PULLDOWN; break;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	e030      	b.n	8001d4c <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_OUT : 
				case GPIO_MODE_OUT_PP : 		init->Mode 	= GPIO_MODE_OUTPUT_PP;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	e029      	b.n	8001d4c <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_OUT_OD : 		init->Mode 	= GPIO_MODE_OUTPUT_OD;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2211      	movs	r2, #17
 8001cfc:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	e022      	b.n	8001d4c <dev_gpio_init_mode+0xd4>
#ifdef GPIO_MODE_AF_INPUT				
				case GPIO_MODE_ALF : 
				case GPIO_MODE_ALF_IN : 		init->Mode 	= GPIO_MODE_AF_INPUT;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
 8001d12:	e01b      	b.n	8001d4c <dev_gpio_init_mode+0xd4>
#endif				
				
				case GPIO_MODE_ALF_PP : 		init->Mode 	= GPIO_MODE_AF_PP;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2202      	movs	r2, #2
 8001d18:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	e014      	b.n	8001d4c <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_ALF_OD : 		init->Mode 	= GPIO_MODE_AF_OD;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2212      	movs	r2, #18
 8001d26:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	e00d      	b.n	8001d4c <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_AN : 				init->Mode 	= GPIO_MODE_ANALOG;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2203      	movs	r2, #3
 8001d34:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	e006      	b.n	8001d4c <dev_gpio_init_mode+0xd4>

				default : 									return TRACE_GERROR("Unknow GPIO Mode !!!");
 8001d3e:	22e9      	movs	r2, #233	; 0xe9
 8001d40:	4905      	ldr	r1, [pc, #20]	; (8001d58 <dev_gpio_init_mode+0xe0>)
 8001d42:	4806      	ldr	r0, [pc, #24]	; (8001d5c <dev_gpio_init_mode+0xe4>)
 8001d44:	f7ff f998 	bl	8001078 <dev_trace_generate_error>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	e000      	b.n	8001d4e <dev_gpio_init_mode+0xd6>
				
		};
		
		return RET_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	08007200 	.word	0x08007200
 8001d5c:	08007228 	.word	0x08007228

08001d60 <dev_gpio_init_speed>:

UINT8 dev_gpio_init_speed(GPIO_InitTypeDef* init, UINT8 gpio_speed)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	70fb      	strb	r3, [r7, #3]
		switch(gpio_speed)
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d81a      	bhi.n	8001da8 <dev_gpio_init_speed+0x48>
 8001d72:	a201      	add	r2, pc, #4	; (adr r2, 8001d78 <dev_gpio_init_speed+0x18>)
 8001d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d78:	08001d89 	.word	0x08001d89
 8001d7c:	08001d91 	.word	0x08001d91
 8001d80:	08001d99 	.word	0x08001d99
 8001d84:	08001da1 	.word	0x08001da1
		{
				case GPIO_PIN_SPEED_VHIGH : 			init->Speed = GPIO_SPEED_FREQ_HIGH; break;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	e012      	b.n	8001db6 <dev_gpio_init_speed+0x56>
				case GPIO_PIN_SPEED_HIGH : 				init->Speed = GPIO_SPEED_FREQ_HIGH; break;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2203      	movs	r2, #3
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	e00e      	b.n	8001db6 <dev_gpio_init_speed+0x56>
				case GPIO_PIN_SPEED_MED : 				init->Speed = GPIO_SPEED_FREQ_MEDIUM; break;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	e00a      	b.n	8001db6 <dev_gpio_init_speed+0x56>
				case GPIO_PIN_SPEED_LOW : 				init->Speed = GPIO_SPEED_FREQ_LOW; break;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	e006      	b.n	8001db6 <dev_gpio_init_speed+0x56>
			
				default : 									return TRACE_GERROR("Unknow GPIO Speed !!!");
 8001da8:	22f9      	movs	r2, #249	; 0xf9
 8001daa:	4905      	ldr	r1, [pc, #20]	; (8001dc0 <dev_gpio_init_speed+0x60>)
 8001dac:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <dev_gpio_init_speed+0x64>)
 8001dae:	f7ff f963 	bl	8001078 <dev_trace_generate_error>
 8001db2:	4603      	mov	r3, r0
 8001db4:	e000      	b.n	8001db8 <dev_gpio_init_speed+0x58>
		};

		return RET_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	08007200 	.word	0x08007200
 8001dc4:	08007240 	.word	0x08007240

08001dc8 <dev_gpio_init>:
	
		return RET_OK;
}

UINT8 dev_gpio_init(dev_gpio_t* gpio, dev_gpio_init_t* init)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
		UINT8 ret;
		GPIO_InitTypeDef GPIO_InitStructure;

		hal_driver_set_info(&init->info, &gpio->info);
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4610      	mov	r0, r2
 8001ddc:	f7ff fd44 	bl	8001868 <hal_driver_set_info>
	
		gpio->port = dev_gpio_id_port(gpio->info.id);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	791b      	ldrb	r3, [r3, #4]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fe33 	bl	8001a50 <dev_gpio_id_port>
 8001dea:	4602      	mov	r2, r0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	601a      	str	r2, [r3, #0]
		gpio->pin = init->pin;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	8b1a      	ldrh	r2, [r3, #24]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	839a      	strh	r2, [r3, #28]
	
		GPIO_InitStructure.Pin = gpio->pin; 
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	8b9b      	ldrh	r3, [r3, #28]
 8001dfc:	60bb      	str	r3, [r7, #8]
	
		ret = dev_gpio_init_rcc(gpio->info.id);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	791b      	ldrb	r3, [r3, #4]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fed0 	bl	8001ba8 <dev_gpio_init_rcc>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	77fb      	strb	r3, [r7, #31]
		if (ret) return TRACE_EERROR(ret);
 8001e0c:	7ffb      	ldrb	r3, [r7, #31]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d008      	beq.n	8001e24 <dev_gpio_init+0x5c>
 8001e12:	7ffb      	ldrb	r3, [r7, #31]
 8001e14:	f240 1213 	movw	r2, #275	; 0x113
 8001e18:	4978      	ldr	r1, [pc, #480]	; (8001ffc <dev_gpio_init+0x234>)
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff f912 	bl	8001044 <dev_trace_get_error>
 8001e20:	4603      	mov	r3, r0
 8001e22:	e0e7      	b.n	8001ff4 <dev_gpio_init+0x22c>
	
		ret = dev_gpio_init_mode(&GPIO_InitStructure, init->mode);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	7e9a      	ldrb	r2, [r3, #26]
 8001e28:	f107 0308 	add.w	r3, r7, #8
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff22 	bl	8001c78 <dev_gpio_init_mode>
 8001e34:	4603      	mov	r3, r0
 8001e36:	77fb      	strb	r3, [r7, #31]
		if (ret) return TRACE_EERROR(ret);
 8001e38:	7ffb      	ldrb	r3, [r7, #31]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d008      	beq.n	8001e50 <dev_gpio_init+0x88>
 8001e3e:	7ffb      	ldrb	r3, [r7, #31]
 8001e40:	f44f 728b 	mov.w	r2, #278	; 0x116
 8001e44:	496d      	ldr	r1, [pc, #436]	; (8001ffc <dev_gpio_init+0x234>)
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff f8fc 	bl	8001044 <dev_trace_get_error>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	e0d1      	b.n	8001ff4 <dev_gpio_init+0x22c>
	
		ret = dev_gpio_init_speed(&GPIO_InitStructure, init->speed);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	7eda      	ldrb	r2, [r3, #27]
 8001e54:	f107 0308 	add.w	r3, r7, #8
 8001e58:	4611      	mov	r1, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff ff80 	bl	8001d60 <dev_gpio_init_speed>
 8001e60:	4603      	mov	r3, r0
 8001e62:	77fb      	strb	r3, [r7, #31]
		if (ret) return TRACE_EERROR(ret);
 8001e64:	7ffb      	ldrb	r3, [r7, #31]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d008      	beq.n	8001e7c <dev_gpio_init+0xb4>
 8001e6a:	7ffb      	ldrb	r3, [r7, #31]
 8001e6c:	f240 1219 	movw	r2, #281	; 0x119
 8001e70:	4962      	ldr	r1, [pc, #392]	; (8001ffc <dev_gpio_init+0x234>)
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff f8e6 	bl	8001044 <dev_trace_get_error>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	e0bb      	b.n	8001ff4 <dev_gpio_init+0x22c>
	
	  // EXTI interrupt init
		if (init->irq_cbf)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d013      	beq.n	8001eac <dev_gpio_init+0xe4>
		{
				switch(init->irq_mode)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	7f1b      	ldrb	r3, [r3, #28]
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d00c      	beq.n	8001ea6 <dev_gpio_init+0xde>
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	dc0e      	bgt.n	8001eae <dev_gpio_init+0xe6>
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d002      	beq.n	8001e9a <dev_gpio_init+0xd2>
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d003      	beq.n	8001ea0 <dev_gpio_init+0xd8>
 8001e98:	e009      	b.n	8001eae <dev_gpio_init+0xe6>
				{
						case GPIO_IRQ_RISING : 		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING; break;
 8001e9a:	4b59      	ldr	r3, [pc, #356]	; (8002000 <dev_gpio_init+0x238>)
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	e006      	b.n	8001eae <dev_gpio_init+0xe6>
						case GPIO_IRQ_FALLING : 	GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING; break;
 8001ea0:	4b57      	ldr	r3, [pc, #348]	; (8002000 <dev_gpio_init+0x238>)
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	e003      	b.n	8001eae <dev_gpio_init+0xe6>
						case GPIO_IRQ_CHANGE : 		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING; break;
 8001ea6:	4b56      	ldr	r3, [pc, #344]	; (8002000 <dev_gpio_init+0x238>)
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	e000      	b.n	8001eae <dev_gpio_init+0xe6>
				}
		}	
 8001eac:	bf00      	nop
	
		HAL_GPIO_Init(gpio->port, &GPIO_InitStructure);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f107 0208 	add.w	r2, r7, #8
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f001 fc9b 	bl	80037f4 <HAL_GPIO_Init>

		HAL_DRIVER_DEBUG(gpio->info.status_in, debug_printf("Init Gpio %s - %d, %X\n\r", gpio->info.name, gpio->info.id, gpio->pin));		
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00e      	beq.n	8001ee4 <dev_gpio_init+0x11c>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d009      	beq.n	8001ee4 <dev_gpio_init+0x11c>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6959      	ldr	r1, [r3, #20]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	791b      	ldrb	r3, [r3, #4]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	8b9b      	ldrh	r3, [r3, #28]
 8001ede:	4849      	ldr	r0, [pc, #292]	; (8002004 <dev_gpio_init+0x23c>)
 8001ee0:	f7ff fa7a 	bl	80013d8 <debug_printf>

	  // EXTI interrupt init
		if (init->irq_cbf)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 8082 	beq.w	8001ff2 <dev_gpio_init+0x22a>
		{
				int pin_id = dev_gpio_pin_id(gpio->pin);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	8b9b      	ldrh	r3, [r3, #28]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fddc 	bl	8001ab0 <dev_gpio_pin_id>
 8001ef8:	61b8      	str	r0, [r7, #24]
			
				if (pin_id < 0) return TRACE_GERROR("Irq Line!!!");
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	da07      	bge.n	8001f10 <dev_gpio_init+0x148>
 8001f00:	f240 122f 	movw	r2, #303	; 0x12f
 8001f04:	493d      	ldr	r1, [pc, #244]	; (8001ffc <dev_gpio_init+0x234>)
 8001f06:	4840      	ldr	r0, [pc, #256]	; (8002008 <dev_gpio_init+0x240>)
 8001f08:	f7ff f8b6 	bl	8001078 <dev_trace_generate_error>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	e071      	b.n	8001ff4 <dev_gpio_init+0x22c>
			
				gpio_irq_cbf[pin_id] = init->irq_cbf;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	6a1a      	ldr	r2, [r3, #32]
 8001f14:	493d      	ldr	r1, [pc, #244]	; (800200c <dev_gpio_init+0x244>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			
				switch(pin_id)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	2b0f      	cmp	r3, #15
 8001f20:	d83e      	bhi.n	8001fa0 <dev_gpio_init+0x1d8>
 8001f22:	a201      	add	r2, pc, #4	; (adr r2, 8001f28 <dev_gpio_init+0x160>)
 8001f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f28:	08001f69 	.word	0x08001f69
 8001f2c:	08001f71 	.word	0x08001f71
 8001f30:	08001f79 	.word	0x08001f79
 8001f34:	08001f81 	.word	0x08001f81
 8001f38:	08001f89 	.word	0x08001f89
 8001f3c:	08001f91 	.word	0x08001f91
 8001f40:	08001f91 	.word	0x08001f91
 8001f44:	08001f91 	.word	0x08001f91
 8001f48:	08001f91 	.word	0x08001f91
 8001f4c:	08001f91 	.word	0x08001f91
 8001f50:	08001f99 	.word	0x08001f99
 8001f54:	08001f99 	.word	0x08001f99
 8001f58:	08001f99 	.word	0x08001f99
 8001f5c:	08001f99 	.word	0x08001f99
 8001f60:	08001f99 	.word	0x08001f99
 8001f64:	08001f99 	.word	0x08001f99
				{
						case 0 : gpio->irq_line = EXTI0_IRQn; break;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2206      	movs	r2, #6
 8001f6c:	779a      	strb	r2, [r3, #30]
 8001f6e:	e017      	b.n	8001fa0 <dev_gpio_init+0x1d8>
						case 1 : gpio->irq_line = EXTI1_IRQn; break;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2207      	movs	r2, #7
 8001f74:	779a      	strb	r2, [r3, #30]
 8001f76:	e013      	b.n	8001fa0 <dev_gpio_init+0x1d8>
						case 2 : gpio->irq_line = EXTI2_IRQn; break;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2208      	movs	r2, #8
 8001f7c:	779a      	strb	r2, [r3, #30]
 8001f7e:	e00f      	b.n	8001fa0 <dev_gpio_init+0x1d8>
						case 3 : gpio->irq_line = EXTI3_IRQn; break;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2209      	movs	r2, #9
 8001f84:	779a      	strb	r2, [r3, #30]
 8001f86:	e00b      	b.n	8001fa0 <dev_gpio_init+0x1d8>
						case 4 : gpio->irq_line = EXTI4_IRQn; break;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	220a      	movs	r2, #10
 8001f8c:	779a      	strb	r2, [r3, #30]
 8001f8e:	e007      	b.n	8001fa0 <dev_gpio_init+0x1d8>

						case 5 : 
						case 6 : 
						case 7 : 
						case 8 : 
						case 9 : gpio->irq_line = EXTI9_5_IRQn; break;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2217      	movs	r2, #23
 8001f94:	779a      	strb	r2, [r3, #30]
 8001f96:	e003      	b.n	8001fa0 <dev_gpio_init+0x1d8>
						case 10 : 
						case 11 : 
						case 12 : 
						case 13 : 
						case 14 : 
						case 15 : gpio->irq_line = EXTI15_10_IRQn; break;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2228      	movs	r2, #40	; 0x28
 8001f9c:	779a      	strb	r2, [r3, #30]
 8001f9e:	bf00      	nop
				}
			
				HAL_NVIC_SetPriority((IRQn_Type)gpio->irq_line, (init->irq_prior >> 4) & 0x0F, init->irq_prior & 0x0F);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	7f9b      	ldrb	r3, [r3, #30]
 8001fa4:	b258      	sxtb	r0, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	7f5b      	ldrb	r3, [r3, #29]
 8001faa:	091b      	lsrs	r3, r3, #4
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	f003 010f 	and.w	r1, r3, #15
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	7f5b      	ldrb	r3, [r3, #29]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f001 f941 	bl	8003242 <HAL_NVIC_SetPriority>
				HAL_NVIC_EnableIRQ((IRQn_Type)gpio->irq_line);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7f9b      	ldrb	r3, [r3, #30]
 8001fc4:	b25b      	sxtb	r3, r3
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f001 f957 	bl	800327a <HAL_NVIC_EnableIRQ>

			
				HAL_DRIVER_DEBUG(gpio->info.status_in, debug_printf("Init Gpio IRQ %s -, %d, %X\n\r", gpio->info.name, gpio->info.id, gpio->irq_line));		
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00e      	beq.n	8001ff2 <dev_gpio_init+0x22a>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d009      	beq.n	8001ff2 <dev_gpio_init+0x22a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6959      	ldr	r1, [r3, #20]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	791b      	ldrb	r3, [r3, #4]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	7f9b      	ldrb	r3, [r3, #30]
 8001fec:	4808      	ldr	r0, [pc, #32]	; (8002010 <dev_gpio_init+0x248>)
 8001fee:	f7ff f9f3 	bl	80013d8 <debug_printf>
		}	

		return RET_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3720      	adds	r7, #32
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	08007200 	.word	0x08007200
 8002000:	10110000 	.word	0x10110000
 8002004:	08007258 	.word	0x08007258
 8002008:	08007270 	.word	0x08007270
 800200c:	200000f0 	.word	0x200000f0
 8002010:	0800727c 	.word	0x0800727c

08002014 <dev_gpio_init_simp>:

UINT8 dev_gpio_init_simp(dev_gpio_t* gpio, UINT8 gpio_id, UINT16 gpio_pin, UINT8 gpio_mode)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08c      	sub	sp, #48	; 0x30
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	4608      	mov	r0, r1
 800201e:	4611      	mov	r1, r2
 8002020:	461a      	mov	r2, r3
 8002022:	4603      	mov	r3, r0
 8002024:	70fb      	strb	r3, [r7, #3]
 8002026:	460b      	mov	r3, r1
 8002028:	803b      	strh	r3, [r7, #0]
 800202a:	4613      	mov	r3, r2
 800202c:	70bb      	strb	r3, [r7, #2]
		dev_gpio_init_t init;
	
		init.info.id = gpio_id;
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	733b      	strb	r3, [r7, #12]
		init.info.name = "";
 8002032:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <dev_gpio_init_simp+0x5c>)
 8002034:	61fb      	str	r3, [r7, #28]
		init.info.status_in = 0; 
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
		init.info.status_out = 0; 
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]

		init.pin = gpio_pin;
 800203e:	883b      	ldrh	r3, [r7, #0]
 8002040:	84bb      	strh	r3, [r7, #36]	; 0x24
		init.mode = gpio_mode;
 8002042:	78bb      	ldrb	r3, [r7, #2]
 8002044:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		init.speed = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		init.irq_cbf = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	62fb      	str	r3, [r7, #44]	; 0x2c
		init.irq_mode = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	
		return dev_gpio_init(gpio, &init);
 8002058:	f107 030c 	add.w	r3, r7, #12
 800205c:	4619      	mov	r1, r3
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff feb2 	bl	8001dc8 <dev_gpio_init>
 8002064:	4603      	mov	r3, r0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3730      	adds	r7, #48	; 0x30
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	0800729c 	.word	0x0800729c

08002074 <dev_gpio_set>:
{
		return 0; //HAL_GPIO_ReadPins(gpio->port, gpio->pin); 
}

void dev_gpio_set(dev_gpio_t* gpio, UINT8 val)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	70fb      	strb	r3, [r7, #3]
		if (val) HAL_GPIO_WritePin(gpio->port, gpio->pin, (GPIO_PinState)1); 
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d008      	beq.n	8002098 <dev_gpio_set+0x24>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	8b9b      	ldrh	r3, [r3, #28]
 800208e:	2201      	movs	r2, #1
 8002090:	4619      	mov	r1, r3
 8002092:	f001 fd33 	bl	8003afc <HAL_GPIO_WritePin>
				else HAL_GPIO_WritePin(gpio->port, gpio->pin, (GPIO_PinState)0);
}
 8002096:	e007      	b.n	80020a8 <dev_gpio_set+0x34>
				else HAL_GPIO_WritePin(gpio->port, gpio->pin, (GPIO_PinState)0);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	8b9b      	ldrh	r3, [r3, #28]
 80020a0:	2200      	movs	r2, #0
 80020a2:	4619      	mov	r1, r3
 80020a4:	f001 fd2a 	bl	8003afc <HAL_GPIO_WritePin>
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3304      	adds	r3, #4
 80020cc:	2280      	movs	r2, #128	; 0x80
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f004 f869 	bl	80061a8 <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3384      	adds	r3, #132	; 0x84
 80020da:	2280      	movs	r2, #128	; 0x80
 80020dc:	2100      	movs	r1, #0
 80020de:	4618      	mov	r0, r3
 80020e0:	f004 f862 	bl	80061a8 <memset>
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af02      	add	r7, sp, #8
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	461a      	mov	r2, r3
 80020f8:	460b      	mov	r3, r1
 80020fa:	72fb      	strb	r3, [r7, #11]
 80020fc:	4613      	mov	r3, r2
 80020fe:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8002100:	893b      	ldrh	r3, [r7, #8]
 8002102:	3301      	adds	r3, #1
 8002104:	4618      	mov	r0, r3
 8002106:	f004 f831 	bl	800616c <malloc>
 800210a:	4603      	mov	r3, r0
 800210c:	617b      	str	r3, [r7, #20]
    *payload = reg;
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	7afa      	ldrb	r2, [r7, #11]
 8002112:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d009      	beq.n	800212e <max30102_write+0x42>
 800211a:	893b      	ldrh	r3, [r7, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d006      	beq.n	800212e <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	3301      	adds	r3, #1
 8002124:	893a      	ldrh	r2, [r7, #8]
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	4618      	mov	r0, r3
 800212a:	f004 f82f 	bl	800618c <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	893b      	ldrh	r3, [r7, #8]
 8002134:	3301      	adds	r3, #1
 8002136:	b29b      	uxth	r3, r3
 8002138:	220a      	movs	r2, #10
 800213a:	9200      	str	r2, [sp, #0]
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	21ae      	movs	r1, #174	; 0xae
 8002140:	f001 fe74 	bl	8003e2c <HAL_I2C_Master_Transmit>
    free(payload);
 8002144:	6978      	ldr	r0, [r7, #20]
 8002146:	f004 f819 	bl	800617c <free>
}
 800214a:	bf00      	nop
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b088      	sub	sp, #32
 8002156:	af02      	add	r7, sp, #8
 8002158:	60f8      	str	r0, [r7, #12]
 800215a:	607a      	str	r2, [r7, #4]
 800215c:	461a      	mov	r2, r3
 800215e:	460b      	mov	r3, r1
 8002160:	72fb      	strb	r3, [r7, #11]
 8002162:	4613      	mov	r3, r2
 8002164:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 8002166:	7afb      	ldrb	r3, [r7, #11]
 8002168:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	f107 0217 	add.w	r2, r7, #23
 8002172:	230a      	movs	r3, #10
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	2301      	movs	r3, #1
 8002178:	21ae      	movs	r1, #174	; 0xae
 800217a:	f001 fe57 	bl	8003e2c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR + 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	893b      	ldrh	r3, [r7, #8]
 8002184:	220a      	movs	r2, #10
 8002186:	9200      	str	r2, [sp, #0]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	21af      	movs	r1, #175	; 0xaf
 800218c:	f001 ff4c 	bl	8004028 <HAL_I2C_Master_Receive>
}
 8002190:	bf00      	nop
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 80021a0:	2340      	movs	r3, #64	; 0x40
 80021a2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 80021a4:	f107 020f 	add.w	r2, r7, #15
 80021a8:	2301      	movs	r3, #1
 80021aa:	2109      	movs	r1, #9
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff ff9d 	bl	80020ec <max30102_write>
}
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	460b      	mov	r3, r1
 80021c4:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 80021ca:	f107 020f 	add.w	r2, r7, #15
 80021ce:	2301      	movs	r3, #1
 80021d0:	2102      	movs	r1, #2
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff ffbd 	bl	8002152 <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	01db      	lsls	r3, r3, #7
 80021e6:	b25a      	sxtb	r2, r3
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	b25b      	sxtb	r3, r3
 80021ec:	4313      	orrs	r3, r2
 80021ee:	b25b      	sxtb	r3, r3
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 80021f4:	f107 020f 	add.w	r2, r7, #15
 80021f8:	2301      	movs	r3, #1
 80021fa:	2102      	movs	r1, #2
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff ff75 	bl	80020ec <max30102_write>
}
 8002202:	bf00      	nop
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b084      	sub	sp, #16
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	460b      	mov	r3, r1
 8002214:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	b2db      	uxtb	r3, r3
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	b2db      	uxtb	r3, r3
 8002222:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 8002224:	f107 020f 	add.w	r2, r7, #15
 8002228:	2301      	movs	r3, #1
 800222a:	2103      	movs	r1, #3
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff ff5d 	bl	80020ec <max30102_write>
}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b084      	sub	sp, #16
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	460b      	mov	r3, r1
 8002244:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 8002246:	78fb      	ldrb	r3, [r7, #3]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	b2db      	uxtb	r3, r3
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	b2db      	uxtb	r3, r3
 8002252:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 8002254:	f107 020f 	add.w	r2, r7, #15
 8002258:	2301      	movs	r3, #1
 800225a:	2121      	movs	r1, #33	; 0x21
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff ff45 	bl	80020ec <max30102_write>
}
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <max30102_interrupt_handler>:
 * @brief Read interrupt status registers (0x00 and 0x01) and perform corresponding tasks.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_interrupt_handler(max30102_t *obj)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]

    uint8_t reg[2] = {0x00};
 800228c:	2300      	movs	r3, #0
 800228e:	81bb      	strh	r3, [r7, #12]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    max30102_read(obj, MAX30102_INTERRUPT_STATUS_1, reg, 2);
 8002290:	f107 020c 	add.w	r2, r7, #12
 8002294:	2302      	movs	r3, #2
 8002296:	2100      	movs	r1, #0
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ff5a 	bl	8002152 <max30102_read>

    if ((reg[0] >> MAX30102_INTERRUPT_A_FULL) & 0x01)
 800229e:	7b3b      	ldrb	r3, [r7, #12]
 80022a0:	09db      	lsrs	r3, r3, #7
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <max30102_interrupt_handler+0x34>
    {
    	debug_printf("1\n\r");
 80022ac:	4819      	ldr	r0, [pc, #100]	; (8002314 <max30102_interrupt_handler+0x90>)
 80022ae:	f7ff f893 	bl	80013d8 <debug_printf>
        // FIFO almost full
        max30102_read_fifo(obj);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f96d 	bl	8002592 <max30102_read_fifo>
    }

    if ((reg[0] >> MAX30102_INTERRUPT_PPG_RDY) & 0x01)
 80022b8:	7b3b      	ldrb	r3, [r7, #12]
 80022ba:	099b      	lsrs	r3, r3, #6
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d002      	beq.n	80022cc <max30102_interrupt_handler+0x48>
    {
    	debug_printf("2\n\r");
 80022c6:	4814      	ldr	r0, [pc, #80]	; (8002318 <max30102_interrupt_handler+0x94>)
 80022c8:	f7ff f886 	bl	80013d8 <debug_printf>
        // New FIFO data ready
    }

    if ((reg[0] >> MAX30102_INTERRUPT_ALC_OVF) & 0x01)
 80022cc:	7b3b      	ldrb	r3, [r7, #12]
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <max30102_interrupt_handler+0x5c>
    {
    	debug_printf("3\n\r");
 80022da:	4810      	ldr	r0, [pc, #64]	; (800231c <max30102_interrupt_handler+0x98>)
 80022dc:	f7ff f87c 	bl	80013d8 <debug_printf>
        // Ambient light overflow
    }

    if ((reg[1] >> MAX30102_INTERRUPT_DIE_TEMP_RDY) & 0x01)
 80022e0:	7b7b      	ldrb	r3, [r7, #13]
 80022e2:	085b      	lsrs	r3, r3, #1
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00a      	beq.n	8002304 <max30102_interrupt_handler+0x80>
    {
    	debug_printf("4\n\r");
 80022ee:	480c      	ldr	r0, [pc, #48]	; (8002320 <max30102_interrupt_handler+0x9c>)
 80022f0:	f7ff f872 	bl	80013d8 <debug_printf>
        // Temperature data ready
        int8_t temp_int;
        uint8_t temp_frac;
        max30102_read_temp(obj, &temp_int, &temp_frac);
 80022f4:	f107 020a 	add.w	r2, r7, #10
 80022f8:	f107 030b 	add.w	r3, r7, #11
 80022fc:	4619      	mov	r1, r3
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f9ae 	bl	8002660 <max30102_read_temp>
        // float temp = temp_int + 0.0625f * temp_frac;
    }

    // Reset interrupt flag
    obj->_interrupt_flag = 0;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
}
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	080072cc 	.word	0x080072cc
 8002318:	080072d0 	.word	0x080072d0
 800231c:	080072d4 	.word	0x080072d4
 8002320:	080072d8 	.word	0x080072d8

08002324 <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 8002330:	f107 020f 	add.w	r2, r7, #15
 8002334:	2301      	movs	r3, #1
 8002336:	2109      	movs	r1, #9
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff ff0a 	bl	8002152 <max30102_read>
    config = (config & 0xf8) | mode;
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	b25b      	sxtb	r3, r3
 8002342:	f023 0307 	bic.w	r3, r3, #7
 8002346:	b25a      	sxtb	r2, r3
 8002348:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800234c:	4313      	orrs	r3, r2
 800234e:	b25b      	sxtb	r3, r3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 8002354:	f107 020f 	add.w	r2, r7, #15
 8002358:	2301      	movs	r3, #1
 800235a:	2109      	movs	r1, #9
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff fec5 	bl	80020ec <max30102_write>
    max30102_clear_fifo(obj);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f8f6 	bl	8002554 <max30102_clear_fifo>
}
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800237c:	f107 020f 	add.w	r2, r7, #15
 8002380:	2301      	movs	r3, #1
 8002382:	210a      	movs	r1, #10
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff fee4 	bl	8002152 <max30102_read>
    config = (config & 0x63) << MAX30102_SPO2_SR;
 800238a:	7bfb      	ldrb	r3, [r7, #15]
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	b2db      	uxtb	r3, r3
 8002390:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002394:	b2db      	uxtb	r3, r3
 8002396:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8002398:	f107 020f 	add.w	r2, r7, #15
 800239c:	2301      	movs	r3, #1
 800239e:	210a      	movs	r1, #10
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff fea3 	bl	80020ec <max30102_write>
}
 80023a6:	bf00      	nop
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b084      	sub	sp, #16
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	460b      	mov	r3, r1
 80023b8:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80023ba:	f107 020f 	add.w	r2, r7, #15
 80023be:	2301      	movs	r3, #1
 80023c0:	210a      	movs	r1, #10
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff fec5 	bl	8002152 <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	b25b      	sxtb	r3, r3
 80023cc:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80023d0:	b25a      	sxtb	r2, r3
 80023d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	b25b      	sxtb	r3, r3
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80023de:	f107 020f 	add.w	r2, r7, #15
 80023e2:	2301      	movs	r3, #1
 80023e4:	210a      	movs	r1, #10
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff fe80 	bl	80020ec <max30102_write>
}
 80023ec:	bf00      	nop
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8002400:	f107 020f 	add.w	r2, r7, #15
 8002404:	2301      	movs	r3, #1
 8002406:	210a      	movs	r1, #10
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff fea2 	bl	8002152 <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 800240e:	7bfb      	ldrb	r3, [r7, #15]
 8002410:	b25b      	sxtb	r3, r3
 8002412:	f003 031f 	and.w	r3, r3, #31
 8002416:	b25a      	sxtb	r2, r3
 8002418:	78fb      	ldrb	r3, [r7, #3]
 800241a:	015b      	lsls	r3, r3, #5
 800241c:	b25b      	sxtb	r3, r3
 800241e:	4313      	orrs	r3, r2
 8002420:	b25b      	sxtb	r3, r3
 8002422:	b2db      	uxtb	r3, r3
 8002424:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8002426:	f107 020f 	add.w	r2, r7, #15
 800242a:	2301      	movs	r3, #1
 800242c:	210a      	movs	r1, #10
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff fe5c 	bl	80020ec <max30102_write>
}
 8002434:	bf00      	nop
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	0000      	movs	r0, r0
	...

08002440 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 800244a:	6838      	ldr	r0, [r7, #0]
 800244c:	f7fe f898 	bl	8000580 <__aeabi_f2d>
 8002450:	a30d      	add	r3, pc, #52	; (adr r3, 8002488 <max30102_set_led_current_1+0x48>)
 8002452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002456:	f7fe fa15 	bl	8000884 <__aeabi_ddiv>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4610      	mov	r0, r2
 8002460:	4619      	mov	r1, r3
 8002462:	f7fe fbbd 	bl	8000be0 <__aeabi_d2uiz>
 8002466:	4603      	mov	r3, r0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 800246c:	f107 020f 	add.w	r2, r7, #15
 8002470:	2301      	movs	r3, #1
 8002472:	210c      	movs	r1, #12
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff fe39 	bl	80020ec <max30102_write>
}
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	f3af 8000 	nop.w
 8002488:	9999999a 	.word	0x9999999a
 800248c:	3fc99999 	.word	0x3fc99999

08002490 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 800249a:	6838      	ldr	r0, [r7, #0]
 800249c:	f7fe f870 	bl	8000580 <__aeabi_f2d>
 80024a0:	a30d      	add	r3, pc, #52	; (adr r3, 80024d8 <max30102_set_led_current_2+0x48>)
 80024a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a6:	f7fe f9ed 	bl	8000884 <__aeabi_ddiv>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	f7fe fb95 	bl	8000be0 <__aeabi_d2uiz>
 80024b6:	4603      	mov	r3, r0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 80024bc:	f107 020f 	add.w	r2, r7, #15
 80024c0:	2301      	movs	r3, #1
 80024c2:	210d      	movs	r1, #13
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff fe11 	bl	80020ec <max30102_write>
}
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	f3af 8000 	nop.w
 80024d8:	9999999a 	.word	0x9999999a
 80024dc:	3fc99999 	.word	0x3fc99999

080024e0 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	4608      	mov	r0, r1
 80024ea:	4611      	mov	r1, r2
 80024ec:	461a      	mov	r2, r3
 80024ee:	4603      	mov	r3, r0
 80024f0:	70fb      	strb	r3, [r7, #3]
 80024f2:	460b      	mov	r3, r1
 80024f4:	70bb      	strb	r3, [r7, #2]
 80024f6:	4613      	mov	r3, r2
 80024f8:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 80024fa:	2300      	movs	r3, #0
 80024fc:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 80024fe:	78fb      	ldrb	r3, [r7, #3]
 8002500:	015b      	lsls	r3, r3, #5
 8002502:	b25a      	sxtb	r2, r3
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	b25b      	sxtb	r3, r3
 8002508:	4313      	orrs	r3, r2
 800250a:	b25b      	sxtb	r3, r3
 800250c:	b2db      	uxtb	r3, r3
 800250e:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 8002510:	78bb      	ldrb	r3, [r7, #2]
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	b25b      	sxtb	r3, r3
 8002516:	f003 0310 	and.w	r3, r3, #16
 800251a:	b25a      	sxtb	r2, r3
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	b25b      	sxtb	r3, r3
 8002520:	4313      	orrs	r3, r2
 8002522:	b25b      	sxtb	r3, r3
 8002524:	b2db      	uxtb	r3, r3
 8002526:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 8002528:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	b25a      	sxtb	r2, r3
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	b25b      	sxtb	r3, r3
 8002536:	4313      	orrs	r3, r2
 8002538:	b25b      	sxtb	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 800253e:	f107 020f 	add.w	r2, r7, #15
 8002542:	2301      	movs	r3, #1
 8002544:	2108      	movs	r1, #8
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff fdd0 	bl	80020ec <max30102_write>
}
 800254c:	bf00      	nop
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 800255c:	2300      	movs	r3, #0
 800255e:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 8002560:	f107 020f 	add.w	r2, r7, #15
 8002564:	2303      	movs	r3, #3
 8002566:	2104      	movs	r1, #4
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff fdbf 	bl	80020ec <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 800256e:	f107 020f 	add.w	r2, r7, #15
 8002572:	2303      	movs	r3, #3
 8002574:	2106      	movs	r1, #6
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff fdb8 	bl	80020ec <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 800257c:	f107 020f 	add.w	r2, r7, #15
 8002580:	2303      	movs	r3, #3
 8002582:	2105      	movs	r1, #5
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff fdb1 	bl	80020ec <max30102_write>
}
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b088      	sub	sp, #32
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	74fb      	strb	r3, [r7, #19]
 800259e:	2300      	movs	r3, #0
 80025a0:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 80025a2:	f107 0213 	add.w	r2, r7, #19
 80025a6:	2301      	movs	r3, #1
 80025a8:	2104      	movs	r1, #4
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff fdd1 	bl	8002152 <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 80025b0:	f107 0212 	add.w	r2, r7, #18
 80025b4:	2301      	movs	r3, #1
 80025b6:	2106      	movs	r1, #6
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7ff fdca 	bl	8002152 <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 80025be:	7cfa      	ldrb	r2, [r7, #19]
 80025c0:	7cbb      	ldrb	r3, [r7, #18]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 80025c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	dc03      	bgt.n	80025d8 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 80025d0:	7ffb      	ldrb	r3, [r7, #31]
 80025d2:	3320      	adds	r3, #32
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 80025d8:	2300      	movs	r3, #0
 80025da:	77bb      	strb	r3, [r7, #30]
 80025dc:	e035      	b.n	800264a <max30102_read_fifo+0xb8>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 80025de:	f107 020c 	add.w	r2, r7, #12
 80025e2:	2306      	movs	r3, #6
 80025e4:	2107      	movs	r1, #7
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff fdb3 	bl	8002152 <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 80025ec:	7b3b      	ldrb	r3, [r7, #12]
 80025ee:	041b      	lsls	r3, r3, #16
 80025f0:	461a      	mov	r2, r3
 80025f2:	7b7b      	ldrb	r3, [r7, #13]
 80025f4:	021b      	lsls	r3, r3, #8
 80025f6:	4313      	orrs	r3, r2
 80025f8:	7bba      	ldrb	r2, [r7, #14]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002600:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	041b      	lsls	r3, r3, #16
 8002606:	461a      	mov	r2, r3
 8002608:	7c3b      	ldrb	r3, [r7, #16]
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	4313      	orrs	r3, r2
 800260e:	7c7a      	ldrb	r2, [r7, #17]
 8002610:	4313      	orrs	r3, r2
 8002612:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002616:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 8002618:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 8002626:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	3320      	adds	r3, #32
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 8002636:	6979      	ldr	r1, [r7, #20]
 8002638:	69b8      	ldr	r0, [r7, #24]
 800263a:	f000 f827 	bl	800268c <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 800263e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	3301      	adds	r3, #1
 8002646:	b2db      	uxtb	r3, r3
 8002648:	77bb      	strb	r3, [r7, #30]
 800264a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800264e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002652:	429a      	cmp	r2, r3
 8002654:	dbc3      	blt.n	80025de <max30102_read_fifo+0x4c>
    }
}
 8002656:	bf00      	nop
 8002658:	bf00      	nop
 800265a:	3720      	adds	r7, #32
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <max30102_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30102_read_temp(max30102_t *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
    max30102_read(obj, MAX30102_DIE_TINT, (uint8_t *)temp_int, 1);
 800266c:	2301      	movs	r3, #1
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	211f      	movs	r1, #31
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f7ff fd6d 	bl	8002152 <max30102_read>
    max30102_read(obj, MAX30102_DIE_TFRAC, temp_frac, 1);
 8002678:	2301      	movs	r3, #1
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	2120      	movs	r1, #32
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f7ff fd67 	bl	8002152 <max30102_read>
}
 8002684:	bf00      	nop
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <max30102_plot>:
uint32_t samples_buf[2];
//uint8_t data[128];

// Override plot function
void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
    // printf("ir:%u\n", ir_sample);                  // Print IR only
    // printf("r:%u\n", red_sample);                  // Print Red only
	debug_printf("ir:%d,r:%d\n\r", ir_sample, red_sample);    // Print IR and Red
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	4809      	ldr	r0, [pc, #36]	; (80026c0 <max30102_plot+0x34>)
 800269c:	f7fe fe9c 	bl	80013d8 <debug_printf>
	samples_buf[0] = ir_sample;
 80026a0:	4a08      	ldr	r2, [pc, #32]	; (80026c4 <max30102_plot+0x38>)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6013      	str	r3, [r2, #0]
	samples_buf[1] = red_sample;
 80026a6:	4a07      	ldr	r2, [pc, #28]	; (80026c4 <max30102_plot+0x38>)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	6053      	str	r3, [r2, #4]
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)samples_buf, 8);
 80026ac:	2208      	movs	r2, #8
 80026ae:	4905      	ldr	r1, [pc, #20]	; (80026c4 <max30102_plot+0x38>)
 80026b0:	4805      	ldr	r0, [pc, #20]	; (80026c8 <max30102_plot+0x3c>)
 80026b2:	f002 ff0b 	bl	80054cc <HAL_UART_Transmit_DMA>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	080072dc 	.word	0x080072dc
 80026c4:	20000328 	.word	0x20000328
 80026c8:	200001d8 	.word	0x200001d8

080026cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026d2:	f000 fc7d 	bl	8002fd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026d6:	f000 f8ad 	bl	8002834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026da:	f000 f99d 	bl	8002a18 <MX_GPIO_Init>
  MX_DMA_Init();
 80026de:	f000 f975 	bl	80029cc <MX_DMA_Init>
  MX_USART1_UART_Init();
 80026e2:	f000 f949 	bl	8002978 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80026e6:	f000 f8eb 	bl	80028c0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80026ea:	f000 f917 	bl	800291c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  dev_trace_init_t trace_init;
  trace_init.mosi.port = GPIO_PA;
 80026ee:	2300      	movs	r3, #0
 80026f0:	75bb      	strb	r3, [r7, #22]
  trace_init.sck. port = GPIO_PA;
 80026f2:	2300      	movs	r3, #0
 80026f4:	76bb      	strb	r3, [r7, #26]
  trace_init.nss.port = GPIO_PA;
 80026f6:	2300      	movs	r3, #0
 80026f8:	77bb      	strb	r3, [r7, #30]
  trace_init.mosi.pin =BB(0, b00000001);
 80026fa:	2301      	movs	r3, #1
 80026fc:	82bb      	strh	r3, [r7, #20]
  trace_init.sck.pin = BB(0, b00000010);
 80026fe:	2302      	movs	r3, #2
 8002700:	833b      	strh	r3, [r7, #24]
  trace_init.nss.pin = BB(0, b00000100);
 8002702:	2304      	movs	r3, #4
 8002704:	83bb      	strh	r3, [r7, #28]
  dev_trace_init(&trace_init);
 8002706:	f107 0314 	add.w	r3, r7, #20
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe fc10 	bl	8000f30 <dev_trace_init>

  debug_printf("\r\n\n\n\n******HUMAN HEALTH MONITORING SENSOR******\r\n");
 8002710:	4840      	ldr	r0, [pc, #256]	; (8002814 <main+0x148>)
 8002712:	f7fe fe61 	bl	80013d8 <debug_printf>

  uint32_t serial_id = 1717;
 8002716:	f240 63b5 	movw	r3, #1717	; 0x6b5
 800271a:	613b      	str	r3, [r7, #16]
  uint32_t temperature = 3755;
 800271c:	f640 63ab 	movw	r3, #3755	; 0xeab
 8002720:	623b      	str	r3, [r7, #32]
  uint32_t pressure = 140000;
 8002722:	4b3d      	ldr	r3, [pc, #244]	; (8002818 <main+0x14c>)
 8002724:	60fb      	str	r3, [r7, #12]
  uint32_t heart_rate = 55555;
 8002726:	f64d 1303 	movw	r3, #55555	; 0xd903
 800272a:	60bb      	str	r3, [r7, #8]
  uint32_t saturation = 7777;
 800272c:	f641 6361 	movw	r3, #7777	; 0x1e61
 8002730:	607b      	str	r3, [r7, #4]

  uint32_t last_time = HAL_GetTick();
 8002732:	f000 fca5 	bl	8003080 <HAL_GetTick>
 8002736:	6278      	str	r0, [r7, #36]	; 0x24

//  int data[] = {START_MESSAGE, serial_id, temperature, pressure, heart_rate, saturation, END_MESSAGE};
  tx_buffer[0] = START_MESSAGE;
 8002738:	4b38      	ldr	r3, [pc, #224]	; (800281c <main+0x150>)
 800273a:	22aa      	movs	r2, #170	; 0xaa
 800273c:	701a      	strb	r2, [r3, #0]
 800273e:	693b      	ldr	r3, [r7, #16]
  memcpy(&tx_buffer[1], &serial_id, 4);
 8002740:	4a36      	ldr	r2, [pc, #216]	; (800281c <main+0x150>)
 8002742:	f8c2 3001 	str.w	r3, [r2, #1]
 8002746:	68fb      	ldr	r3, [r7, #12]
//  memcpy(&tx_buffer[5], &temperature, 4);
  memcpy(&tx_buffer[9], &pressure, 4);
 8002748:	4a34      	ldr	r2, [pc, #208]	; (800281c <main+0x150>)
 800274a:	f8c2 3009 	str.w	r3, [r2, #9]
 800274e:	68bb      	ldr	r3, [r7, #8]
  memcpy(&tx_buffer[13], &heart_rate, 4);
 8002750:	4a32      	ldr	r2, [pc, #200]	; (800281c <main+0x150>)
 8002752:	f8c2 300d 	str.w	r3, [r2, #13]
 8002756:	687b      	ldr	r3, [r7, #4]
  memcpy(&tx_buffer[17], &saturation, 4);
 8002758:	4a30      	ldr	r2, [pc, #192]	; (800281c <main+0x150>)
 800275a:	f8c2 3011 	str.w	r3, [r2, #17]
  tx_buffer[21] = END_MESSAGE;
 800275e:	4b2f      	ldr	r3, [pc, #188]	; (800281c <main+0x150>)
 8002760:	2255      	movs	r2, #85	; 0x55
 8002762:	755a      	strb	r2, [r3, #21]

  max30102_init(&max30102, &hi2c1);
 8002764:	492e      	ldr	r1, [pc, #184]	; (8002820 <main+0x154>)
 8002766:	482f      	ldr	r0, [pc, #188]	; (8002824 <main+0x158>)
 8002768:	f7ff fca2 	bl	80020b0 <max30102_init>
//  max30102_on_interrupt(&max30102);

  max30102_reset(&max30102);
 800276c:	482d      	ldr	r0, [pc, #180]	; (8002824 <main+0x158>)
 800276e:	f7ff fd13 	bl	8002198 <max30102_reset>
  max30102_clear_fifo(&max30102);
 8002772:	482c      	ldr	r0, [pc, #176]	; (8002824 <main+0x158>)
 8002774:	f7ff feee 	bl	8002554 <max30102_clear_fifo>


  // FIFO configurations
  max30102_set_fifo_config(&max30102, max30102_smp_ave_8, 1, 7);
 8002778:	2307      	movs	r3, #7
 800277a:	2201      	movs	r2, #1
 800277c:	2103      	movs	r1, #3
 800277e:	4829      	ldr	r0, [pc, #164]	; (8002824 <main+0x158>)
 8002780:	f7ff feae 	bl	80024e0 <max30102_set_fifo_config>

  // LED configurations
  max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 8002784:	2101      	movs	r1, #1
 8002786:	4827      	ldr	r0, [pc, #156]	; (8002824 <main+0x158>)
 8002788:	f7ff fe11 	bl	80023ae <max30102_set_led_pulse_width>
  max30102_set_adc_resolution(&max30102, max30102_adc_2048);
 800278c:	2100      	movs	r1, #0
 800278e:	4825      	ldr	r0, [pc, #148]	; (8002824 <main+0x158>)
 8002790:	f7ff fe30 	bl	80023f4 <max30102_set_adc_resolution>
  max30102_set_sampling_rate(&max30102, max30102_sr_800);
 8002794:	2104      	movs	r1, #4
 8002796:	4823      	ldr	r0, [pc, #140]	; (8002824 <main+0x158>)
 8002798:	f7ff fdea 	bl	8002370 <max30102_set_sampling_rate>
  max30102_set_led_current_1(&max30102, 6.2);
 800279c:	4922      	ldr	r1, [pc, #136]	; (8002828 <main+0x15c>)
 800279e:	4821      	ldr	r0, [pc, #132]	; (8002824 <main+0x158>)
 80027a0:	f7ff fe4e 	bl	8002440 <max30102_set_led_current_1>
  max30102_set_led_current_2(&max30102, 6.2);
 80027a4:	4920      	ldr	r1, [pc, #128]	; (8002828 <main+0x15c>)
 80027a6:	481f      	ldr	r0, [pc, #124]	; (8002824 <main+0x158>)
 80027a8:	f7ff fe72 	bl	8002490 <max30102_set_led_current_2>

    // Enter SpO2 mode
  max30102_set_mode(&max30102, max30102_spo2);
 80027ac:	2103      	movs	r1, #3
 80027ae:	481d      	ldr	r0, [pc, #116]	; (8002824 <main+0x158>)
 80027b0:	f7ff fdb8 	bl	8002324 <max30102_set_mode>

   // Enable FIFO_A_FULL interrupt
  max30102_set_a_full(&max30102, 1);
 80027b4:	2101      	movs	r1, #1
 80027b6:	481b      	ldr	r0, [pc, #108]	; (8002824 <main+0x158>)
 80027b8:	f7ff fcff 	bl	80021ba <max30102_set_a_full>

  // Enable die temperature measurement
  max30102_set_die_temp_en(&max30102, 1);
 80027bc:	2101      	movs	r1, #1
 80027be:	4819      	ldr	r0, [pc, #100]	; (8002824 <main+0x158>)
 80027c0:	f7ff fd3b 	bl	800223a <max30102_set_die_temp_en>

  // Enable DIE_TEMP_RDY interrupt
  max30102_set_die_temp_rdy(&max30102, 1);
 80027c4:	2101      	movs	r1, #1
 80027c6:	4817      	ldr	r0, [pc, #92]	; (8002824 <main+0x158>)
 80027c8:	f7ff fd1f 	bl	800220a <max30102_set_die_temp_rdy>

  uint8_t en_reg[2] = {0};
 80027cc:	2300      	movs	r3, #0
 80027ce:	803b      	strh	r3, [r7, #0]
  max30102_read(&max30102, 0x00, en_reg, 1);
 80027d0:	463a      	mov	r2, r7
 80027d2:	2301      	movs	r3, #1
 80027d4:	2100      	movs	r1, #0
 80027d6:	4813      	ldr	r0, [pc, #76]	; (8002824 <main+0x158>)
 80027d8:	f7ff fcbb 	bl	8002152 <max30102_read>
//		// Run interrupt handler to read FIFO
//		max30102_interrupt_handler(&max30102);
//
//	  }

	  max30102_interrupt_handler(&max30102);
 80027dc:	4811      	ldr	r0, [pc, #68]	; (8002824 <main+0x158>)
 80027de:	f7ff fd51 	bl	8002284 <max30102_interrupt_handler>



	  if (HAL_GetTick() - last_time > 1000){
 80027e2:	f000 fc4d 	bl	8003080 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027f0:	d9f4      	bls.n	80027dc <main+0x110>
		  HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13);
 80027f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027f6:	480d      	ldr	r0, [pc, #52]	; (800282c <main+0x160>)
 80027f8:	f001 f998 	bl	8003b2c <HAL_GPIO_TogglePin>
		  get_temp();
 80027fc:	f000 f97c 	bl	8002af8 <get_temp>
		  HAL_UART_Transmit_DMA(&huart1, tx_buffer, sizeof(tx_buffer));
 8002800:	2280      	movs	r2, #128	; 0x80
 8002802:	4906      	ldr	r1, [pc, #24]	; (800281c <main+0x150>)
 8002804:	480a      	ldr	r0, [pc, #40]	; (8002830 <main+0x164>)
 8002806:	f002 fe61 	bl	80054cc <HAL_UART_Transmit_DMA>
		  last_time = HAL_GetTick();
 800280a:	f000 fc39 	bl	8003080 <HAL_GetTick>
 800280e:	6278      	str	r0, [r7, #36]	; 0x24
	  max30102_interrupt_handler(&max30102);
 8002810:	e7e4      	b.n	80027dc <main+0x110>
 8002812:	bf00      	nop
 8002814:	080072ec 	.word	0x080072ec
 8002818:	000222e0 	.word	0x000222e0
 800281c:	200002a8 	.word	0x200002a8
 8002820:	20000130 	.word	0x20000130
 8002824:	20000330 	.word	0x20000330
 8002828:	40c66666 	.word	0x40c66666
 800282c:	40011000 	.word	0x40011000
 8002830:	200001d8 	.word	0x200001d8

08002834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b090      	sub	sp, #64	; 0x40
 8002838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800283a:	f107 0318 	add.w	r3, r7, #24
 800283e:	2228      	movs	r2, #40	; 0x28
 8002840:	2100      	movs	r1, #0
 8002842:	4618      	mov	r0, r3
 8002844:	f003 fcb0 	bl	80061a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002848:	1d3b      	adds	r3, r7, #4
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	605a      	str	r2, [r3, #4]
 8002850:	609a      	str	r2, [r3, #8]
 8002852:	60da      	str	r2, [r3, #12]
 8002854:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002856:	2301      	movs	r3, #1
 8002858:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800285a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800285e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002860:	2300      	movs	r3, #0
 8002862:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002864:	2301      	movs	r3, #1
 8002866:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002868:	2302      	movs	r3, #2
 800286a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800286c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002870:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002872:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002876:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002878:	f107 0318 	add.w	r3, r7, #24
 800287c:	4618      	mov	r0, r3
 800287e:	f002 f9c5 	bl	8004c0c <HAL_RCC_OscConfig>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002888:	f000 f9b0 	bl	8002bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800288c:	230f      	movs	r3, #15
 800288e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002890:	2302      	movs	r3, #2
 8002892:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002894:	2300      	movs	r3, #0
 8002896:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800289c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028a2:	1d3b      	adds	r3, r7, #4
 80028a4:	2102      	movs	r1, #2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f002 fc32 	bl	8005110 <HAL_RCC_ClockConfig>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80028b2:	f000 f99b 	bl	8002bec <Error_Handler>
  }
}
 80028b6:	bf00      	nop
 80028b8:	3740      	adds	r7, #64	; 0x40
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028c4:	4b12      	ldr	r3, [pc, #72]	; (8002910 <MX_I2C1_Init+0x50>)
 80028c6:	4a13      	ldr	r2, [pc, #76]	; (8002914 <MX_I2C1_Init+0x54>)
 80028c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80028ca:	4b11      	ldr	r3, [pc, #68]	; (8002910 <MX_I2C1_Init+0x50>)
 80028cc:	4a12      	ldr	r2, [pc, #72]	; (8002918 <MX_I2C1_Init+0x58>)
 80028ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028d0:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <MX_I2C1_Init+0x50>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80028d6:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <MX_I2C1_Init+0x50>)
 80028d8:	2200      	movs	r2, #0
 80028da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <MX_I2C1_Init+0x50>)
 80028de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028e4:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <MX_I2C1_Init+0x50>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <MX_I2C1_Init+0x50>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028f0:	4b07      	ldr	r3, [pc, #28]	; (8002910 <MX_I2C1_Init+0x50>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028f6:	4b06      	ldr	r3, [pc, #24]	; (8002910 <MX_I2C1_Init+0x50>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028fc:	4804      	ldr	r0, [pc, #16]	; (8002910 <MX_I2C1_Init+0x50>)
 80028fe:	f001 f951 	bl	8003ba4 <HAL_I2C_Init>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002908:	f000 f970 	bl	8002bec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800290c:	bf00      	nop
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20000130 	.word	0x20000130
 8002914:	40005400 	.word	0x40005400
 8002918:	000186a0 	.word	0x000186a0

0800291c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002920:	4b12      	ldr	r3, [pc, #72]	; (800296c <MX_I2C2_Init+0x50>)
 8002922:	4a13      	ldr	r2, [pc, #76]	; (8002970 <MX_I2C2_Init+0x54>)
 8002924:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002926:	4b11      	ldr	r3, [pc, #68]	; (800296c <MX_I2C2_Init+0x50>)
 8002928:	4a12      	ldr	r2, [pc, #72]	; (8002974 <MX_I2C2_Init+0x58>)
 800292a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800292c:	4b0f      	ldr	r3, [pc, #60]	; (800296c <MX_I2C2_Init+0x50>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002932:	4b0e      	ldr	r3, [pc, #56]	; (800296c <MX_I2C2_Init+0x50>)
 8002934:	2200      	movs	r2, #0
 8002936:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <MX_I2C2_Init+0x50>)
 800293a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800293e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002940:	4b0a      	ldr	r3, [pc, #40]	; (800296c <MX_I2C2_Init+0x50>)
 8002942:	2200      	movs	r2, #0
 8002944:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <MX_I2C2_Init+0x50>)
 8002948:	2200      	movs	r2, #0
 800294a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800294c:	4b07      	ldr	r3, [pc, #28]	; (800296c <MX_I2C2_Init+0x50>)
 800294e:	2200      	movs	r2, #0
 8002950:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <MX_I2C2_Init+0x50>)
 8002954:	2200      	movs	r2, #0
 8002956:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002958:	4804      	ldr	r0, [pc, #16]	; (800296c <MX_I2C2_Init+0x50>)
 800295a:	f001 f923 	bl	8003ba4 <HAL_I2C_Init>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002964:	f000 f942 	bl	8002bec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002968:	bf00      	nop
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000184 	.word	0x20000184
 8002970:	40005800 	.word	0x40005800
 8002974:	000186a0 	.word	0x000186a0

08002978 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800297c:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <MX_USART1_UART_Init+0x4c>)
 800297e:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <MX_USART1_UART_Init+0x50>)
 8002980:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002982:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <MX_USART1_UART_Init+0x4c>)
 8002984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002988:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800298a:	4b0e      	ldr	r3, [pc, #56]	; (80029c4 <MX_USART1_UART_Init+0x4c>)
 800298c:	2200      	movs	r2, #0
 800298e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002990:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <MX_USART1_UART_Init+0x4c>)
 8002992:	2200      	movs	r2, #0
 8002994:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002996:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <MX_USART1_UART_Init+0x4c>)
 8002998:	2200      	movs	r2, #0
 800299a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <MX_USART1_UART_Init+0x4c>)
 800299e:	220c      	movs	r2, #12
 80029a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029a2:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <MX_USART1_UART_Init+0x4c>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <MX_USART1_UART_Init+0x4c>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029ae:	4805      	ldr	r0, [pc, #20]	; (80029c4 <MX_USART1_UART_Init+0x4c>)
 80029b0:	f002 fd3c 	bl	800542c <HAL_UART_Init>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80029ba:	f000 f917 	bl	8002bec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	200001d8 	.word	0x200001d8
 80029c8:	40013800 	.word	0x40013800

080029cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <MX_DMA_Init+0x48>)
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	4a0f      	ldr	r2, [pc, #60]	; (8002a14 <MX_DMA_Init+0x48>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6153      	str	r3, [r2, #20]
 80029de:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <MX_DMA_Init+0x48>)
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	607b      	str	r3, [r7, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80029ea:	2200      	movs	r2, #0
 80029ec:	2100      	movs	r1, #0
 80029ee:	200e      	movs	r0, #14
 80029f0:	f000 fc27 	bl	8003242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80029f4:	200e      	movs	r0, #14
 80029f6:	f000 fc40 	bl	800327a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80029fa:	2200      	movs	r2, #0
 80029fc:	2100      	movs	r1, #0
 80029fe:	200f      	movs	r0, #15
 8002a00:	f000 fc1f 	bl	8003242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002a04:	200f      	movs	r0, #15
 8002a06:	f000 fc38 	bl	800327a <HAL_NVIC_EnableIRQ>

}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40021000 	.word	0x40021000

08002a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b088      	sub	sp, #32
 8002a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1e:	f107 0310 	add.w	r3, r7, #16
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a2c:	4b2e      	ldr	r3, [pc, #184]	; (8002ae8 <MX_GPIO_Init+0xd0>)
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	4a2d      	ldr	r2, [pc, #180]	; (8002ae8 <MX_GPIO_Init+0xd0>)
 8002a32:	f043 0310 	orr.w	r3, r3, #16
 8002a36:	6193      	str	r3, [r2, #24]
 8002a38:	4b2b      	ldr	r3, [pc, #172]	; (8002ae8 <MX_GPIO_Init+0xd0>)
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a44:	4b28      	ldr	r3, [pc, #160]	; (8002ae8 <MX_GPIO_Init+0xd0>)
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	4a27      	ldr	r2, [pc, #156]	; (8002ae8 <MX_GPIO_Init+0xd0>)
 8002a4a:	f043 0320 	orr.w	r3, r3, #32
 8002a4e:	6193      	str	r3, [r2, #24]
 8002a50:	4b25      	ldr	r3, [pc, #148]	; (8002ae8 <MX_GPIO_Init+0xd0>)
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	f003 0320 	and.w	r3, r3, #32
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5c:	4b22      	ldr	r3, [pc, #136]	; (8002ae8 <MX_GPIO_Init+0xd0>)
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	4a21      	ldr	r2, [pc, #132]	; (8002ae8 <MX_GPIO_Init+0xd0>)
 8002a62:	f043 0308 	orr.w	r3, r3, #8
 8002a66:	6193      	str	r3, [r2, #24]
 8002a68:	4b1f      	ldr	r3, [pc, #124]	; (8002ae8 <MX_GPIO_Init+0xd0>)
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	607b      	str	r3, [r7, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a74:	4b1c      	ldr	r3, [pc, #112]	; (8002ae8 <MX_GPIO_Init+0xd0>)
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	4a1b      	ldr	r2, [pc, #108]	; (8002ae8 <MX_GPIO_Init+0xd0>)
 8002a7a:	f043 0304 	orr.w	r3, r3, #4
 8002a7e:	6193      	str	r3, [r2, #24]
 8002a80:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <MX_GPIO_Init+0xd0>)
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	603b      	str	r3, [r7, #0]
 8002a8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a92:	4816      	ldr	r0, [pc, #88]	; (8002aec <MX_GPIO_Init+0xd4>)
 8002a94:	f001 f832 	bl	8003afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aaa:	f107 0310 	add.w	r3, r7, #16
 8002aae:	4619      	mov	r1, r3
 8002ab0:	480e      	ldr	r0, [pc, #56]	; (8002aec <MX_GPIO_Init+0xd4>)
 8002ab2:	f000 fe9f 	bl	80037f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002aba:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <MX_GPIO_Init+0xd8>)
 8002abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac2:	f107 0310 	add.w	r3, r7, #16
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	480a      	ldr	r0, [pc, #40]	; (8002af4 <MX_GPIO_Init+0xdc>)
 8002aca:	f000 fe93 	bl	80037f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	2006      	movs	r0, #6
 8002ad4:	f000 fbb5 	bl	8003242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002ad8:	2006      	movs	r0, #6
 8002ada:	f000 fbce 	bl	800327a <HAL_NVIC_EnableIRQ>

}
 8002ade:	bf00      	nop
 8002ae0:	3720      	adds	r7, #32
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40011000 	.word	0x40011000
 8002af0:	10210000 	.word	0x10210000
 8002af4:	40010c00 	.word	0x40010c00

08002af8 <get_temp>:

/* USER CODE BEGIN 4 */
float get_temp(void){
 8002af8:	b5b0      	push	{r4, r5, r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af02      	add	r7, sp, #8
	uint8_t temp_buff[2] = {0};
 8002afe:	2300      	movs	r3, #0
 8002b00:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c2, TEMP_I2C_ADDRESS, TEMP_READ_ADDRESS, 1, TEMP_TIMEOUT);
 8002b02:	230a      	movs	r3, #10
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	2301      	movs	r3, #1
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2190      	movs	r1, #144	; 0x90
 8002b0c:	4833      	ldr	r0, [pc, #204]	; (8002bdc <get_temp+0xe4>)
 8002b0e:	f001 f98d 	bl	8003e2c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, TEMP_I2C_ADDRESS, temp_buff, sizeof(temp_buff), TEMP_TIMEOUT);
 8002b12:	f107 0208 	add.w	r2, r7, #8
 8002b16:	230a      	movs	r3, #10
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	2190      	movs	r1, #144	; 0x90
 8002b1e:	482f      	ldr	r0, [pc, #188]	; (8002bdc <get_temp+0xe4>)
 8002b20:	f001 fa82 	bl	8004028 <HAL_I2C_Master_Receive>

	float ans = 0;
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	607b      	str	r3, [r7, #4]
	for(int q = -8; q < 0; q++){
 8002b2a:	f06f 0307 	mvn.w	r3, #7
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	e02b      	b.n	8002b8a <get_temp+0x92>
	  if(temp_buff[1] & (1 << q + 8)){
 8002b32:	7a7b      	ldrb	r3, [r7, #9]
 8002b34:	461a      	mov	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3308      	adds	r3, #8
 8002b3a:	fa42 f303 	asr.w	r3, r2, r3
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d01e      	beq.n	8002b84 <get_temp+0x8c>
		  ans += pow(2,q);
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f7fd fd08 	bl	800055c <__aeabi_i2d>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	f04f 0000 	mov.w	r0, #0
 8002b54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002b58:	f003 fc28 	bl	80063ac <pow>
 8002b5c:	4604      	mov	r4, r0
 8002b5e:	460d      	mov	r5, r1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fd fd0c 	bl	8000580 <__aeabi_f2d>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	4629      	mov	r1, r5
 8002b70:	f7fd fba8 	bl	80002c4 <__adddf3>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4610      	mov	r0, r2
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	f7fe f850 	bl	8000c20 <__aeabi_d2f>
 8002b80:	4603      	mov	r3, r0
 8002b82:	607b      	str	r3, [r7, #4]
	for(int q = -8; q < 0; q++){
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	3301      	adds	r3, #1
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	dbd0      	blt.n	8002b32 <get_temp+0x3a>
	  }
    }
	ans += temp_buff[0];
 8002b90:	7a3b      	ldrb	r3, [r7, #8]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe f94e 	bl	8000e34 <__aeabi_i2f>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	f7fe f894 	bl	8000ccc <__addsf3>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	607b      	str	r3, [r7, #4]
	ans *= 1000;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	490d      	ldr	r1, [pc, #52]	; (8002be0 <get_temp+0xe8>)
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7fd facf 	bl	8000150 <__aeabi_fmul>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	607b      	str	r3, [r7, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]

	memcpy(&tx_buffer[5], &ans, 4);
 8002bb8:	4a0a      	ldr	r2, [pc, #40]	; (8002be4 <get_temp+0xec>)
 8002bba:	f8c2 3005 	str.w	r3, [r2, #5]
	debug_printf("temp %f\n\r" , ans);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7fd fcdd 	bl	8000580 <__aeabi_f2d>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4807      	ldr	r0, [pc, #28]	; (8002be8 <get_temp+0xf0>)
 8002bcc:	f7fe fc04 	bl	80013d8 <debug_printf>

}
 8002bd0:	bf00      	nop
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20000184 	.word	0x20000184
 8002be0:	447a0000 	.word	0x447a0000
 8002be4:	200002a8 	.word	0x200002a8
 8002be8:	08007320 	.word	0x08007320

08002bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bf0:	b672      	cpsid	i
}
 8002bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bf4:	e7fe      	b.n	8002bf4 <Error_Handler+0x8>
	...

08002bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002bfe:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <HAL_MspInit+0x40>)
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	4a0d      	ldr	r2, [pc, #52]	; (8002c38 <HAL_MspInit+0x40>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	6193      	str	r3, [r2, #24]
 8002c0a:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <HAL_MspInit+0x40>)
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	607b      	str	r3, [r7, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c16:	4b08      	ldr	r3, [pc, #32]	; (8002c38 <HAL_MspInit+0x40>)
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	4a07      	ldr	r2, [pc, #28]	; (8002c38 <HAL_MspInit+0x40>)
 8002c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c20:	61d3      	str	r3, [r2, #28]
 8002c22:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <HAL_MspInit+0x40>)
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr
 8002c38:	40021000 	.word	0x40021000

08002c3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08a      	sub	sp, #40	; 0x28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f107 0318 	add.w	r3, r7, #24
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a2b      	ldr	r2, [pc, #172]	; (8002d04 <HAL_I2C_MspInit+0xc8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d124      	bne.n	8002ca6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5c:	4b2a      	ldr	r3, [pc, #168]	; (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	4a29      	ldr	r2, [pc, #164]	; (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002c62:	f043 0308 	orr.w	r3, r3, #8
 8002c66:	6193      	str	r3, [r2, #24]
 8002c68:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c74:	23c0      	movs	r3, #192	; 0xc0
 8002c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c78:	2312      	movs	r3, #18
 8002c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c80:	f107 0318 	add.w	r3, r7, #24
 8002c84:	4619      	mov	r1, r3
 8002c86:	4821      	ldr	r0, [pc, #132]	; (8002d0c <HAL_I2C_MspInit+0xd0>)
 8002c88:	f000 fdb4 	bl	80037f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c8c:	4b1e      	ldr	r3, [pc, #120]	; (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	4a1d      	ldr	r2, [pc, #116]	; (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002c92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c96:	61d3      	str	r3, [r2, #28]
 8002c98:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002ca4:	e029      	b.n	8002cfa <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a19      	ldr	r2, [pc, #100]	; (8002d10 <HAL_I2C_MspInit+0xd4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d124      	bne.n	8002cfa <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb0:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	4a14      	ldr	r2, [pc, #80]	; (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002cb6:	f043 0308 	orr.w	r3, r3, #8
 8002cba:	6193      	str	r3, [r2, #24]
 8002cbc:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002cc8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cce:	2312      	movs	r3, #18
 8002cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd6:	f107 0318 	add.w	r3, r7, #24
 8002cda:	4619      	mov	r1, r3
 8002cdc:	480b      	ldr	r0, [pc, #44]	; (8002d0c <HAL_I2C_MspInit+0xd0>)
 8002cde:	f000 fd89 	bl	80037f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	4a08      	ldr	r2, [pc, #32]	; (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002ce8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cec:	61d3      	str	r3, [r2, #28]
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
}
 8002cfa:	bf00      	nop
 8002cfc:	3728      	adds	r7, #40	; 0x28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40005400 	.word	0x40005400
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40010c00 	.word	0x40010c00
 8002d10:	40005800 	.word	0x40005800

08002d14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d1c:	f107 0310 	add.w	r3, r7, #16
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a47      	ldr	r2, [pc, #284]	; (8002e4c <HAL_UART_MspInit+0x138>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	f040 8086 	bne.w	8002e42 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d36:	4b46      	ldr	r3, [pc, #280]	; (8002e50 <HAL_UART_MspInit+0x13c>)
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	4a45      	ldr	r2, [pc, #276]	; (8002e50 <HAL_UART_MspInit+0x13c>)
 8002d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d40:	6193      	str	r3, [r2, #24]
 8002d42:	4b43      	ldr	r3, [pc, #268]	; (8002e50 <HAL_UART_MspInit+0x13c>)
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4e:	4b40      	ldr	r3, [pc, #256]	; (8002e50 <HAL_UART_MspInit+0x13c>)
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	4a3f      	ldr	r2, [pc, #252]	; (8002e50 <HAL_UART_MspInit+0x13c>)
 8002d54:	f043 0304 	orr.w	r3, r3, #4
 8002d58:	6193      	str	r3, [r2, #24]
 8002d5a:	4b3d      	ldr	r3, [pc, #244]	; (8002e50 <HAL_UART_MspInit+0x13c>)
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d70:	2303      	movs	r3, #3
 8002d72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d74:	f107 0310 	add.w	r3, r7, #16
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4836      	ldr	r0, [pc, #216]	; (8002e54 <HAL_UART_MspInit+0x140>)
 8002d7c:	f000 fd3a 	bl	80037f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8e:	f107 0310 	add.w	r3, r7, #16
 8002d92:	4619      	mov	r1, r3
 8002d94:	482f      	ldr	r0, [pc, #188]	; (8002e54 <HAL_UART_MspInit+0x140>)
 8002d96:	f000 fd2d 	bl	80037f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002d9a:	4b2f      	ldr	r3, [pc, #188]	; (8002e58 <HAL_UART_MspInit+0x144>)
 8002d9c:	4a2f      	ldr	r2, [pc, #188]	; (8002e5c <HAL_UART_MspInit+0x148>)
 8002d9e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002da0:	4b2d      	ldr	r3, [pc, #180]	; (8002e58 <HAL_UART_MspInit+0x144>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002da6:	4b2c      	ldr	r3, [pc, #176]	; (8002e58 <HAL_UART_MspInit+0x144>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dac:	4b2a      	ldr	r3, [pc, #168]	; (8002e58 <HAL_UART_MspInit+0x144>)
 8002dae:	2280      	movs	r2, #128	; 0x80
 8002db0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002db2:	4b29      	ldr	r3, [pc, #164]	; (8002e58 <HAL_UART_MspInit+0x144>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002db8:	4b27      	ldr	r3, [pc, #156]	; (8002e58 <HAL_UART_MspInit+0x144>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002dbe:	4b26      	ldr	r3, [pc, #152]	; (8002e58 <HAL_UART_MspInit+0x144>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002dc4:	4b24      	ldr	r3, [pc, #144]	; (8002e58 <HAL_UART_MspInit+0x144>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002dca:	4823      	ldr	r0, [pc, #140]	; (8002e58 <HAL_UART_MspInit+0x144>)
 8002dcc:	f000 fa70 	bl	80032b0 <HAL_DMA_Init>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8002dd6:	f7ff ff09 	bl	8002bec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a1e      	ldr	r2, [pc, #120]	; (8002e58 <HAL_UART_MspInit+0x144>)
 8002dde:	63da      	str	r2, [r3, #60]	; 0x3c
 8002de0:	4a1d      	ldr	r2, [pc, #116]	; (8002e58 <HAL_UART_MspInit+0x144>)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002de6:	4b1e      	ldr	r3, [pc, #120]	; (8002e60 <HAL_UART_MspInit+0x14c>)
 8002de8:	4a1e      	ldr	r2, [pc, #120]	; (8002e64 <HAL_UART_MspInit+0x150>)
 8002dea:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dec:	4b1c      	ldr	r3, [pc, #112]	; (8002e60 <HAL_UART_MspInit+0x14c>)
 8002dee:	2210      	movs	r2, #16
 8002df0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002df2:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <HAL_UART_MspInit+0x14c>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002df8:	4b19      	ldr	r3, [pc, #100]	; (8002e60 <HAL_UART_MspInit+0x14c>)
 8002dfa:	2280      	movs	r2, #128	; 0x80
 8002dfc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dfe:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <HAL_UART_MspInit+0x14c>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e04:	4b16      	ldr	r3, [pc, #88]	; (8002e60 <HAL_UART_MspInit+0x14c>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002e0a:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <HAL_UART_MspInit+0x14c>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e10:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <HAL_UART_MspInit+0x14c>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002e16:	4812      	ldr	r0, [pc, #72]	; (8002e60 <HAL_UART_MspInit+0x14c>)
 8002e18:	f000 fa4a 	bl	80032b0 <HAL_DMA_Init>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8002e22:	f7ff fee3 	bl	8002bec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a0d      	ldr	r2, [pc, #52]	; (8002e60 <HAL_UART_MspInit+0x14c>)
 8002e2a:	639a      	str	r2, [r3, #56]	; 0x38
 8002e2c:	4a0c      	ldr	r2, [pc, #48]	; (8002e60 <HAL_UART_MspInit+0x14c>)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e32:	2200      	movs	r2, #0
 8002e34:	2100      	movs	r1, #0
 8002e36:	2025      	movs	r0, #37	; 0x25
 8002e38:	f000 fa03 	bl	8003242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e3c:	2025      	movs	r0, #37	; 0x25
 8002e3e:	f000 fa1c 	bl	800327a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e42:	bf00      	nop
 8002e44:	3720      	adds	r7, #32
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40013800 	.word	0x40013800
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40010800 	.word	0x40010800
 8002e58:	20000220 	.word	0x20000220
 8002e5c:	40020058 	.word	0x40020058
 8002e60:	20000264 	.word	0x20000264
 8002e64:	40020044 	.word	0x40020044

08002e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e6c:	e7fe      	b.n	8002e6c <NMI_Handler+0x4>

08002e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e72:	e7fe      	b.n	8002e72 <HardFault_Handler+0x4>

08002e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e78:	e7fe      	b.n	8002e78 <MemManage_Handler+0x4>

08002e7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e7e:	e7fe      	b.n	8002e7e <BusFault_Handler+0x4>

08002e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e84:	e7fe      	b.n	8002e84 <UsageFault_Handler+0x4>

08002e86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e8a:	bf00      	nop
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr

08002e92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr

08002e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002eae:	f000 f8d5 	bl	800305c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	max30102_on_interrupt(&max30102);
 8002ebc:	4803      	ldr	r0, [pc, #12]	; (8002ecc <EXTI0_IRQHandler+0x14>)
 8002ebe:	f7ff f9d4 	bl	800226a <max30102_on_interrupt>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	f000 fe4c 	bl	8003b60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002ec8:	bf00      	nop
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20000330 	.word	0x20000330

08002ed0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002ed4:	4802      	ldr	r0, [pc, #8]	; (8002ee0 <DMA1_Channel4_IRQHandler+0x10>)
 8002ed6:	f000 fb59 	bl	800358c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000264 	.word	0x20000264

08002ee4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002ee8:	4802      	ldr	r0, [pc, #8]	; (8002ef4 <DMA1_Channel5_IRQHandler+0x10>)
 8002eea:	f000 fb4f 	bl	800358c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20000220 	.word	0x20000220

08002ef8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002efc:	4802      	ldr	r0, [pc, #8]	; (8002f08 <USART1_IRQHandler+0x10>)
 8002efe:	f002 fb55 	bl	80055ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	200001d8 	.word	0x200001d8

08002f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f14:	4a14      	ldr	r2, [pc, #80]	; (8002f68 <_sbrk+0x5c>)
 8002f16:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <_sbrk+0x60>)
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f20:	4b13      	ldr	r3, [pc, #76]	; (8002f70 <_sbrk+0x64>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d102      	bne.n	8002f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f28:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <_sbrk+0x64>)
 8002f2a:	4a12      	ldr	r2, [pc, #72]	; (8002f74 <_sbrk+0x68>)
 8002f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f2e:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <_sbrk+0x64>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4413      	add	r3, r2
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d207      	bcs.n	8002f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f3c:	f003 f8ec 	bl	8006118 <__errno>
 8002f40:	4603      	mov	r3, r0
 8002f42:	220c      	movs	r2, #12
 8002f44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f46:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4a:	e009      	b.n	8002f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f4c:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <_sbrk+0x64>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f52:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <_sbrk+0x64>)
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4413      	add	r3, r2
 8002f5a:	4a05      	ldr	r2, [pc, #20]	; (8002f70 <_sbrk+0x64>)
 8002f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20005000 	.word	0x20005000
 8002f6c:	00000400 	.word	0x00000400
 8002f70:	20000438 	.word	0x20000438
 8002f74:	20000450 	.word	0x20000450

08002f78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f84:	f7ff fff8 	bl	8002f78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f88:	480b      	ldr	r0, [pc, #44]	; (8002fb8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002f8a:	490c      	ldr	r1, [pc, #48]	; (8002fbc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002f8c:	4a0c      	ldr	r2, [pc, #48]	; (8002fc0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f90:	e002      	b.n	8002f98 <LoopCopyDataInit>

08002f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f96:	3304      	adds	r3, #4

08002f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f9c:	d3f9      	bcc.n	8002f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f9e:	4a09      	ldr	r2, [pc, #36]	; (8002fc4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002fa0:	4c09      	ldr	r4, [pc, #36]	; (8002fc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fa4:	e001      	b.n	8002faa <LoopFillZerobss>

08002fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fa8:	3204      	adds	r2, #4

08002faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fac:	d3fb      	bcc.n	8002fa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fae:	f003 f8b9 	bl	8006124 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fb2:	f7ff fb8b 	bl	80026cc <main>
  bx lr
 8002fb6:	4770      	bx	lr
  ldr r0, =_sdata
 8002fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fbc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002fc0:	08007390 	.word	0x08007390
  ldr r2, =_sbss
 8002fc4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002fc8:	20000450 	.word	0x20000450

08002fcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fcc:	e7fe      	b.n	8002fcc <ADC1_2_IRQHandler>
	...

08002fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fd4:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <HAL_Init+0x28>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a07      	ldr	r2, [pc, #28]	; (8002ff8 <HAL_Init+0x28>)
 8002fda:	f043 0310 	orr.w	r3, r3, #16
 8002fde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fe0:	2003      	movs	r0, #3
 8002fe2:	f000 f923 	bl	800322c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fe6:	200f      	movs	r0, #15
 8002fe8:	f000 f808 	bl	8002ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fec:	f7ff fe04 	bl	8002bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40022000 	.word	0x40022000

08002ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003004:	4b12      	ldr	r3, [pc, #72]	; (8003050 <HAL_InitTick+0x54>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	4b12      	ldr	r3, [pc, #72]	; (8003054 <HAL_InitTick+0x58>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	4619      	mov	r1, r3
 800300e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003012:	fbb3 f3f1 	udiv	r3, r3, r1
 8003016:	fbb2 f3f3 	udiv	r3, r2, r3
 800301a:	4618      	mov	r0, r3
 800301c:	f000 f93b 	bl	8003296 <HAL_SYSTICK_Config>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e00e      	b.n	8003048 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b0f      	cmp	r3, #15
 800302e:	d80a      	bhi.n	8003046 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003030:	2200      	movs	r2, #0
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	f04f 30ff 	mov.w	r0, #4294967295
 8003038:	f000 f903 	bl	8003242 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800303c:	4a06      	ldr	r2, [pc, #24]	; (8003058 <HAL_InitTick+0x5c>)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	e000      	b.n	8003048 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
}
 8003048:	4618      	mov	r0, r3
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	20000000 	.word	0x20000000
 8003054:	20000008 	.word	0x20000008
 8003058:	20000004 	.word	0x20000004

0800305c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003060:	4b05      	ldr	r3, [pc, #20]	; (8003078 <HAL_IncTick+0x1c>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	461a      	mov	r2, r3
 8003066:	4b05      	ldr	r3, [pc, #20]	; (800307c <HAL_IncTick+0x20>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4413      	add	r3, r2
 800306c:	4a03      	ldr	r2, [pc, #12]	; (800307c <HAL_IncTick+0x20>)
 800306e:	6013      	str	r3, [r2, #0]
}
 8003070:	bf00      	nop
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr
 8003078:	20000008 	.word	0x20000008
 800307c:	2000043c 	.word	0x2000043c

08003080 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return uwTick;
 8003084:	4b02      	ldr	r3, [pc, #8]	; (8003090 <HAL_GetTick+0x10>)
 8003086:	681b      	ldr	r3, [r3, #0]
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr
 8003090:	2000043c 	.word	0x2000043c

08003094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030a4:	4b0c      	ldr	r3, [pc, #48]	; (80030d8 <__NVIC_SetPriorityGrouping+0x44>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030b0:	4013      	ands	r3, r2
 80030b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030c6:	4a04      	ldr	r2, [pc, #16]	; (80030d8 <__NVIC_SetPriorityGrouping+0x44>)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	60d3      	str	r3, [r2, #12]
}
 80030cc:	bf00      	nop
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030e0:	4b04      	ldr	r3, [pc, #16]	; (80030f4 <__NVIC_GetPriorityGrouping+0x18>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	0a1b      	lsrs	r3, r3, #8
 80030e6:	f003 0307 	and.w	r3, r3, #7
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003106:	2b00      	cmp	r3, #0
 8003108:	db0b      	blt.n	8003122 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	f003 021f 	and.w	r2, r3, #31
 8003110:	4906      	ldr	r1, [pc, #24]	; (800312c <__NVIC_EnableIRQ+0x34>)
 8003112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	2001      	movs	r0, #1
 800311a:	fa00 f202 	lsl.w	r2, r0, r2
 800311e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr
 800312c:	e000e100 	.word	0xe000e100

08003130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	6039      	str	r1, [r7, #0]
 800313a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800313c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003140:	2b00      	cmp	r3, #0
 8003142:	db0a      	blt.n	800315a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	b2da      	uxtb	r2, r3
 8003148:	490c      	ldr	r1, [pc, #48]	; (800317c <__NVIC_SetPriority+0x4c>)
 800314a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314e:	0112      	lsls	r2, r2, #4
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	440b      	add	r3, r1
 8003154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003158:	e00a      	b.n	8003170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	b2da      	uxtb	r2, r3
 800315e:	4908      	ldr	r1, [pc, #32]	; (8003180 <__NVIC_SetPriority+0x50>)
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	3b04      	subs	r3, #4
 8003168:	0112      	lsls	r2, r2, #4
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	440b      	add	r3, r1
 800316e:	761a      	strb	r2, [r3, #24]
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	e000e100 	.word	0xe000e100
 8003180:	e000ed00 	.word	0xe000ed00

08003184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003184:	b480      	push	{r7}
 8003186:	b089      	sub	sp, #36	; 0x24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	f1c3 0307 	rsb	r3, r3, #7
 800319e:	2b04      	cmp	r3, #4
 80031a0:	bf28      	it	cs
 80031a2:	2304      	movcs	r3, #4
 80031a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	3304      	adds	r3, #4
 80031aa:	2b06      	cmp	r3, #6
 80031ac:	d902      	bls.n	80031b4 <NVIC_EncodePriority+0x30>
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	3b03      	subs	r3, #3
 80031b2:	e000      	b.n	80031b6 <NVIC_EncodePriority+0x32>
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b8:	f04f 32ff 	mov.w	r2, #4294967295
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43da      	mvns	r2, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	401a      	ands	r2, r3
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031cc:	f04f 31ff 	mov.w	r1, #4294967295
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	fa01 f303 	lsl.w	r3, r1, r3
 80031d6:	43d9      	mvns	r1, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031dc:	4313      	orrs	r3, r2
         );
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3724      	adds	r7, #36	; 0x24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr

080031e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031f8:	d301      	bcc.n	80031fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031fa:	2301      	movs	r3, #1
 80031fc:	e00f      	b.n	800321e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031fe:	4a0a      	ldr	r2, [pc, #40]	; (8003228 <SysTick_Config+0x40>)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3b01      	subs	r3, #1
 8003204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003206:	210f      	movs	r1, #15
 8003208:	f04f 30ff 	mov.w	r0, #4294967295
 800320c:	f7ff ff90 	bl	8003130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <SysTick_Config+0x40>)
 8003212:	2200      	movs	r2, #0
 8003214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003216:	4b04      	ldr	r3, [pc, #16]	; (8003228 <SysTick_Config+0x40>)
 8003218:	2207      	movs	r2, #7
 800321a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	e000e010 	.word	0xe000e010

0800322c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff ff2d 	bl	8003094 <__NVIC_SetPriorityGrouping>
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003242:	b580      	push	{r7, lr}
 8003244:	b086      	sub	sp, #24
 8003246:	af00      	add	r7, sp, #0
 8003248:	4603      	mov	r3, r0
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003254:	f7ff ff42 	bl	80030dc <__NVIC_GetPriorityGrouping>
 8003258:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	6978      	ldr	r0, [r7, #20]
 8003260:	f7ff ff90 	bl	8003184 <NVIC_EncodePriority>
 8003264:	4602      	mov	r2, r0
 8003266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800326a:	4611      	mov	r1, r2
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff ff5f 	bl	8003130 <__NVIC_SetPriority>
}
 8003272:	bf00      	nop
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	4603      	mov	r3, r0
 8003282:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff ff35 	bl	80030f8 <__NVIC_EnableIRQ>
}
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff ffa2 	bl	80031e8 <SysTick_Config>
 80032a4:	4603      	mov	r3, r0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e043      	b.n	800334e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	461a      	mov	r2, r3
 80032cc:	4b22      	ldr	r3, [pc, #136]	; (8003358 <HAL_DMA_Init+0xa8>)
 80032ce:	4413      	add	r3, r2
 80032d0:	4a22      	ldr	r2, [pc, #136]	; (800335c <HAL_DMA_Init+0xac>)
 80032d2:	fba2 2303 	umull	r2, r3, r2, r3
 80032d6:	091b      	lsrs	r3, r3, #4
 80032d8:	009a      	lsls	r2, r3, #2
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a1f      	ldr	r2, [pc, #124]	; (8003360 <HAL_DMA_Init+0xb0>)
 80032e2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80032fa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80032fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003308:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003314:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003320:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	4313      	orrs	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr
 8003358:	bffdfff8 	.word	0xbffdfff8
 800335c:	cccccccd 	.word	0xcccccccd
 8003360:	40020000 	.word	0x40020000

08003364 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f893 3020 	ldrb.w	r3, [r3, #32]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <HAL_DMA_Start_IT+0x20>
 8003380:	2302      	movs	r3, #2
 8003382:	e04b      	b.n	800341c <HAL_DMA_Start_IT+0xb8>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d13a      	bne.n	800340e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0201 	bic.w	r2, r2, #1
 80033b4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f9eb 	bl	8003798 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d008      	beq.n	80033dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f042 020e 	orr.w	r2, r2, #14
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	e00f      	b.n	80033fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0204 	bic.w	r2, r2, #4
 80033ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 020a 	orr.w	r2, r2, #10
 80033fa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	e005      	b.n	800341a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003416:	2302      	movs	r3, #2
 8003418:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800341a:	7dfb      	ldrb	r3, [r7, #23]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800342c:	2300      	movs	r3, #0
 800342e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d008      	beq.n	800344e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2204      	movs	r2, #4
 8003440:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e020      	b.n	8003490 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 020e 	bic.w	r2, r2, #14
 800345c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0201 	bic.w	r2, r2, #1
 800346c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003476:	2101      	movs	r1, #1
 8003478:	fa01 f202 	lsl.w	r2, r1, r2
 800347c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800348e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	bc80      	pop	{r7}
 8003498:	4770      	bx	lr
	...

0800349c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d005      	beq.n	80034c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2204      	movs	r2, #4
 80034b8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	73fb      	strb	r3, [r7, #15]
 80034be:	e051      	b.n	8003564 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 020e 	bic.w	r2, r2, #14
 80034ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0201 	bic.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a22      	ldr	r2, [pc, #136]	; (8003570 <HAL_DMA_Abort_IT+0xd4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d029      	beq.n	800353e <HAL_DMA_Abort_IT+0xa2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a21      	ldr	r2, [pc, #132]	; (8003574 <HAL_DMA_Abort_IT+0xd8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d022      	beq.n	800353a <HAL_DMA_Abort_IT+0x9e>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a1f      	ldr	r2, [pc, #124]	; (8003578 <HAL_DMA_Abort_IT+0xdc>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d01a      	beq.n	8003534 <HAL_DMA_Abort_IT+0x98>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a1e      	ldr	r2, [pc, #120]	; (800357c <HAL_DMA_Abort_IT+0xe0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d012      	beq.n	800352e <HAL_DMA_Abort_IT+0x92>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a1c      	ldr	r2, [pc, #112]	; (8003580 <HAL_DMA_Abort_IT+0xe4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00a      	beq.n	8003528 <HAL_DMA_Abort_IT+0x8c>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a1b      	ldr	r2, [pc, #108]	; (8003584 <HAL_DMA_Abort_IT+0xe8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d102      	bne.n	8003522 <HAL_DMA_Abort_IT+0x86>
 800351c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003520:	e00e      	b.n	8003540 <HAL_DMA_Abort_IT+0xa4>
 8003522:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003526:	e00b      	b.n	8003540 <HAL_DMA_Abort_IT+0xa4>
 8003528:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800352c:	e008      	b.n	8003540 <HAL_DMA_Abort_IT+0xa4>
 800352e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003532:	e005      	b.n	8003540 <HAL_DMA_Abort_IT+0xa4>
 8003534:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003538:	e002      	b.n	8003540 <HAL_DMA_Abort_IT+0xa4>
 800353a:	2310      	movs	r3, #16
 800353c:	e000      	b.n	8003540 <HAL_DMA_Abort_IT+0xa4>
 800353e:	2301      	movs	r3, #1
 8003540:	4a11      	ldr	r2, [pc, #68]	; (8003588 <HAL_DMA_Abort_IT+0xec>)
 8003542:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	4798      	blx	r3
    } 
  }
  return status;
 8003564:	7bfb      	ldrb	r3, [r7, #15]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40020008 	.word	0x40020008
 8003574:	4002001c 	.word	0x4002001c
 8003578:	40020030 	.word	0x40020030
 800357c:	40020044 	.word	0x40020044
 8003580:	40020058 	.word	0x40020058
 8003584:	4002006c 	.word	0x4002006c
 8003588:	40020000 	.word	0x40020000

0800358c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	2204      	movs	r2, #4
 80035aa:	409a      	lsls	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d04f      	beq.n	8003654 <HAL_DMA_IRQHandler+0xc8>
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d04a      	beq.n	8003654 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0320 	and.w	r3, r3, #32
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d107      	bne.n	80035dc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0204 	bic.w	r2, r2, #4
 80035da:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a66      	ldr	r2, [pc, #408]	; (800377c <HAL_DMA_IRQHandler+0x1f0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d029      	beq.n	800363a <HAL_DMA_IRQHandler+0xae>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a65      	ldr	r2, [pc, #404]	; (8003780 <HAL_DMA_IRQHandler+0x1f4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d022      	beq.n	8003636 <HAL_DMA_IRQHandler+0xaa>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a63      	ldr	r2, [pc, #396]	; (8003784 <HAL_DMA_IRQHandler+0x1f8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d01a      	beq.n	8003630 <HAL_DMA_IRQHandler+0xa4>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a62      	ldr	r2, [pc, #392]	; (8003788 <HAL_DMA_IRQHandler+0x1fc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d012      	beq.n	800362a <HAL_DMA_IRQHandler+0x9e>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a60      	ldr	r2, [pc, #384]	; (800378c <HAL_DMA_IRQHandler+0x200>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00a      	beq.n	8003624 <HAL_DMA_IRQHandler+0x98>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a5f      	ldr	r2, [pc, #380]	; (8003790 <HAL_DMA_IRQHandler+0x204>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d102      	bne.n	800361e <HAL_DMA_IRQHandler+0x92>
 8003618:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800361c:	e00e      	b.n	800363c <HAL_DMA_IRQHandler+0xb0>
 800361e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003622:	e00b      	b.n	800363c <HAL_DMA_IRQHandler+0xb0>
 8003624:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003628:	e008      	b.n	800363c <HAL_DMA_IRQHandler+0xb0>
 800362a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800362e:	e005      	b.n	800363c <HAL_DMA_IRQHandler+0xb0>
 8003630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003634:	e002      	b.n	800363c <HAL_DMA_IRQHandler+0xb0>
 8003636:	2340      	movs	r3, #64	; 0x40
 8003638:	e000      	b.n	800363c <HAL_DMA_IRQHandler+0xb0>
 800363a:	2304      	movs	r3, #4
 800363c:	4a55      	ldr	r2, [pc, #340]	; (8003794 <HAL_DMA_IRQHandler+0x208>)
 800363e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 8094 	beq.w	8003772 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003652:	e08e      	b.n	8003772 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	2202      	movs	r2, #2
 800365a:	409a      	lsls	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4013      	ands	r3, r2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d056      	beq.n	8003712 <HAL_DMA_IRQHandler+0x186>
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d051      	beq.n	8003712 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10b      	bne.n	8003694 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 020a 	bic.w	r2, r2, #10
 800368a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a38      	ldr	r2, [pc, #224]	; (800377c <HAL_DMA_IRQHandler+0x1f0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d029      	beq.n	80036f2 <HAL_DMA_IRQHandler+0x166>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a37      	ldr	r2, [pc, #220]	; (8003780 <HAL_DMA_IRQHandler+0x1f4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d022      	beq.n	80036ee <HAL_DMA_IRQHandler+0x162>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a35      	ldr	r2, [pc, #212]	; (8003784 <HAL_DMA_IRQHandler+0x1f8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d01a      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x15c>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a34      	ldr	r2, [pc, #208]	; (8003788 <HAL_DMA_IRQHandler+0x1fc>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d012      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x156>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a32      	ldr	r2, [pc, #200]	; (800378c <HAL_DMA_IRQHandler+0x200>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00a      	beq.n	80036dc <HAL_DMA_IRQHandler+0x150>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a31      	ldr	r2, [pc, #196]	; (8003790 <HAL_DMA_IRQHandler+0x204>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d102      	bne.n	80036d6 <HAL_DMA_IRQHandler+0x14a>
 80036d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80036d4:	e00e      	b.n	80036f4 <HAL_DMA_IRQHandler+0x168>
 80036d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036da:	e00b      	b.n	80036f4 <HAL_DMA_IRQHandler+0x168>
 80036dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036e0:	e008      	b.n	80036f4 <HAL_DMA_IRQHandler+0x168>
 80036e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036e6:	e005      	b.n	80036f4 <HAL_DMA_IRQHandler+0x168>
 80036e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036ec:	e002      	b.n	80036f4 <HAL_DMA_IRQHandler+0x168>
 80036ee:	2320      	movs	r3, #32
 80036f0:	e000      	b.n	80036f4 <HAL_DMA_IRQHandler+0x168>
 80036f2:	2302      	movs	r3, #2
 80036f4:	4a27      	ldr	r2, [pc, #156]	; (8003794 <HAL_DMA_IRQHandler+0x208>)
 80036f6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	2b00      	cmp	r3, #0
 8003706:	d034      	beq.n	8003772 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003710:	e02f      	b.n	8003772 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	2208      	movs	r2, #8
 8003718:	409a      	lsls	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4013      	ands	r3, r2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d028      	beq.n	8003774 <HAL_DMA_IRQHandler+0x1e8>
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f003 0308 	and.w	r3, r3, #8
 8003728:	2b00      	cmp	r3, #0
 800372a:	d023      	beq.n	8003774 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 020e 	bic.w	r2, r2, #14
 800373a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003744:	2101      	movs	r1, #1
 8003746:	fa01 f202 	lsl.w	r2, r1, r2
 800374a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	2b00      	cmp	r3, #0
 8003768:	d004      	beq.n	8003774 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	4798      	blx	r3
    }
  }
  return;
 8003772:	bf00      	nop
 8003774:	bf00      	nop
}
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40020008 	.word	0x40020008
 8003780:	4002001c 	.word	0x4002001c
 8003784:	40020030 	.word	0x40020030
 8003788:	40020044 	.word	0x40020044
 800378c:	40020058 	.word	0x40020058
 8003790:	4002006c 	.word	0x4002006c
 8003794:	40020000 	.word	0x40020000

08003798 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ae:	2101      	movs	r1, #1
 80037b0:	fa01 f202 	lsl.w	r2, r1, r2
 80037b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b10      	cmp	r3, #16
 80037c4:	d108      	bne.n	80037d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037d6:	e007      	b.n	80037e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	60da      	str	r2, [r3, #12]
}
 80037e8:	bf00      	nop
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr
	...

080037f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b08b      	sub	sp, #44	; 0x2c
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037fe:	2300      	movs	r3, #0
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003802:	2300      	movs	r3, #0
 8003804:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003806:	e169      	b.n	8003adc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003808:	2201      	movs	r2, #1
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69fa      	ldr	r2, [r7, #28]
 8003818:	4013      	ands	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	429a      	cmp	r2, r3
 8003822:	f040 8158 	bne.w	8003ad6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	4a9a      	ldr	r2, [pc, #616]	; (8003a94 <HAL_GPIO_Init+0x2a0>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d05e      	beq.n	80038ee <HAL_GPIO_Init+0xfa>
 8003830:	4a98      	ldr	r2, [pc, #608]	; (8003a94 <HAL_GPIO_Init+0x2a0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d875      	bhi.n	8003922 <HAL_GPIO_Init+0x12e>
 8003836:	4a98      	ldr	r2, [pc, #608]	; (8003a98 <HAL_GPIO_Init+0x2a4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d058      	beq.n	80038ee <HAL_GPIO_Init+0xfa>
 800383c:	4a96      	ldr	r2, [pc, #600]	; (8003a98 <HAL_GPIO_Init+0x2a4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d86f      	bhi.n	8003922 <HAL_GPIO_Init+0x12e>
 8003842:	4a96      	ldr	r2, [pc, #600]	; (8003a9c <HAL_GPIO_Init+0x2a8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d052      	beq.n	80038ee <HAL_GPIO_Init+0xfa>
 8003848:	4a94      	ldr	r2, [pc, #592]	; (8003a9c <HAL_GPIO_Init+0x2a8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d869      	bhi.n	8003922 <HAL_GPIO_Init+0x12e>
 800384e:	4a94      	ldr	r2, [pc, #592]	; (8003aa0 <HAL_GPIO_Init+0x2ac>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d04c      	beq.n	80038ee <HAL_GPIO_Init+0xfa>
 8003854:	4a92      	ldr	r2, [pc, #584]	; (8003aa0 <HAL_GPIO_Init+0x2ac>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d863      	bhi.n	8003922 <HAL_GPIO_Init+0x12e>
 800385a:	4a92      	ldr	r2, [pc, #584]	; (8003aa4 <HAL_GPIO_Init+0x2b0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d046      	beq.n	80038ee <HAL_GPIO_Init+0xfa>
 8003860:	4a90      	ldr	r2, [pc, #576]	; (8003aa4 <HAL_GPIO_Init+0x2b0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d85d      	bhi.n	8003922 <HAL_GPIO_Init+0x12e>
 8003866:	2b12      	cmp	r3, #18
 8003868:	d82a      	bhi.n	80038c0 <HAL_GPIO_Init+0xcc>
 800386a:	2b12      	cmp	r3, #18
 800386c:	d859      	bhi.n	8003922 <HAL_GPIO_Init+0x12e>
 800386e:	a201      	add	r2, pc, #4	; (adr r2, 8003874 <HAL_GPIO_Init+0x80>)
 8003870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003874:	080038ef 	.word	0x080038ef
 8003878:	080038c9 	.word	0x080038c9
 800387c:	080038db 	.word	0x080038db
 8003880:	0800391d 	.word	0x0800391d
 8003884:	08003923 	.word	0x08003923
 8003888:	08003923 	.word	0x08003923
 800388c:	08003923 	.word	0x08003923
 8003890:	08003923 	.word	0x08003923
 8003894:	08003923 	.word	0x08003923
 8003898:	08003923 	.word	0x08003923
 800389c:	08003923 	.word	0x08003923
 80038a0:	08003923 	.word	0x08003923
 80038a4:	08003923 	.word	0x08003923
 80038a8:	08003923 	.word	0x08003923
 80038ac:	08003923 	.word	0x08003923
 80038b0:	08003923 	.word	0x08003923
 80038b4:	08003923 	.word	0x08003923
 80038b8:	080038d1 	.word	0x080038d1
 80038bc:	080038e5 	.word	0x080038e5
 80038c0:	4a79      	ldr	r2, [pc, #484]	; (8003aa8 <HAL_GPIO_Init+0x2b4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d013      	beq.n	80038ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80038c6:	e02c      	b.n	8003922 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	623b      	str	r3, [r7, #32]
          break;
 80038ce:	e029      	b.n	8003924 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	3304      	adds	r3, #4
 80038d6:	623b      	str	r3, [r7, #32]
          break;
 80038d8:	e024      	b.n	8003924 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	3308      	adds	r3, #8
 80038e0:	623b      	str	r3, [r7, #32]
          break;
 80038e2:	e01f      	b.n	8003924 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	330c      	adds	r3, #12
 80038ea:	623b      	str	r3, [r7, #32]
          break;
 80038ec:	e01a      	b.n	8003924 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d102      	bne.n	80038fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80038f6:	2304      	movs	r3, #4
 80038f8:	623b      	str	r3, [r7, #32]
          break;
 80038fa:	e013      	b.n	8003924 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d105      	bne.n	8003910 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003904:	2308      	movs	r3, #8
 8003906:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69fa      	ldr	r2, [r7, #28]
 800390c:	611a      	str	r2, [r3, #16]
          break;
 800390e:	e009      	b.n	8003924 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003910:	2308      	movs	r3, #8
 8003912:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	69fa      	ldr	r2, [r7, #28]
 8003918:	615a      	str	r2, [r3, #20]
          break;
 800391a:	e003      	b.n	8003924 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800391c:	2300      	movs	r3, #0
 800391e:	623b      	str	r3, [r7, #32]
          break;
 8003920:	e000      	b.n	8003924 <HAL_GPIO_Init+0x130>
          break;
 8003922:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	2bff      	cmp	r3, #255	; 0xff
 8003928:	d801      	bhi.n	800392e <HAL_GPIO_Init+0x13a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	e001      	b.n	8003932 <HAL_GPIO_Init+0x13e>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3304      	adds	r3, #4
 8003932:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	2bff      	cmp	r3, #255	; 0xff
 8003938:	d802      	bhi.n	8003940 <HAL_GPIO_Init+0x14c>
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	e002      	b.n	8003946 <HAL_GPIO_Init+0x152>
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	3b08      	subs	r3, #8
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	210f      	movs	r1, #15
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	fa01 f303 	lsl.w	r3, r1, r3
 8003954:	43db      	mvns	r3, r3
 8003956:	401a      	ands	r2, r3
 8003958:	6a39      	ldr	r1, [r7, #32]
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	fa01 f303 	lsl.w	r3, r1, r3
 8003960:	431a      	orrs	r2, r3
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 80b1 	beq.w	8003ad6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003974:	4b4d      	ldr	r3, [pc, #308]	; (8003aac <HAL_GPIO_Init+0x2b8>)
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	4a4c      	ldr	r2, [pc, #304]	; (8003aac <HAL_GPIO_Init+0x2b8>)
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	6193      	str	r3, [r2, #24]
 8003980:	4b4a      	ldr	r3, [pc, #296]	; (8003aac <HAL_GPIO_Init+0x2b8>)
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	60bb      	str	r3, [r7, #8]
 800398a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800398c:	4a48      	ldr	r2, [pc, #288]	; (8003ab0 <HAL_GPIO_Init+0x2bc>)
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	089b      	lsrs	r3, r3, #2
 8003992:	3302      	adds	r3, #2
 8003994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003998:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	220f      	movs	r2, #15
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	43db      	mvns	r3, r3
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4013      	ands	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a40      	ldr	r2, [pc, #256]	; (8003ab4 <HAL_GPIO_Init+0x2c0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d013      	beq.n	80039e0 <HAL_GPIO_Init+0x1ec>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a3f      	ldr	r2, [pc, #252]	; (8003ab8 <HAL_GPIO_Init+0x2c4>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00d      	beq.n	80039dc <HAL_GPIO_Init+0x1e8>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a3e      	ldr	r2, [pc, #248]	; (8003abc <HAL_GPIO_Init+0x2c8>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d007      	beq.n	80039d8 <HAL_GPIO_Init+0x1e4>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a3d      	ldr	r2, [pc, #244]	; (8003ac0 <HAL_GPIO_Init+0x2cc>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d101      	bne.n	80039d4 <HAL_GPIO_Init+0x1e0>
 80039d0:	2303      	movs	r3, #3
 80039d2:	e006      	b.n	80039e2 <HAL_GPIO_Init+0x1ee>
 80039d4:	2304      	movs	r3, #4
 80039d6:	e004      	b.n	80039e2 <HAL_GPIO_Init+0x1ee>
 80039d8:	2302      	movs	r3, #2
 80039da:	e002      	b.n	80039e2 <HAL_GPIO_Init+0x1ee>
 80039dc:	2301      	movs	r3, #1
 80039de:	e000      	b.n	80039e2 <HAL_GPIO_Init+0x1ee>
 80039e0:	2300      	movs	r3, #0
 80039e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e4:	f002 0203 	and.w	r2, r2, #3
 80039e8:	0092      	lsls	r2, r2, #2
 80039ea:	4093      	lsls	r3, r2
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80039f2:	492f      	ldr	r1, [pc, #188]	; (8003ab0 <HAL_GPIO_Init+0x2bc>)
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	089b      	lsrs	r3, r3, #2
 80039f8:	3302      	adds	r3, #2
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d006      	beq.n	8003a1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a0c:	4b2d      	ldr	r3, [pc, #180]	; (8003ac4 <HAL_GPIO_Init+0x2d0>)
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	492c      	ldr	r1, [pc, #176]	; (8003ac4 <HAL_GPIO_Init+0x2d0>)
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	608b      	str	r3, [r1, #8]
 8003a18:	e006      	b.n	8003a28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003a1a:	4b2a      	ldr	r3, [pc, #168]	; (8003ac4 <HAL_GPIO_Init+0x2d0>)
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	43db      	mvns	r3, r3
 8003a22:	4928      	ldr	r1, [pc, #160]	; (8003ac4 <HAL_GPIO_Init+0x2d0>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d006      	beq.n	8003a42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a34:	4b23      	ldr	r3, [pc, #140]	; (8003ac4 <HAL_GPIO_Init+0x2d0>)
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	4922      	ldr	r1, [pc, #136]	; (8003ac4 <HAL_GPIO_Init+0x2d0>)
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	60cb      	str	r3, [r1, #12]
 8003a40:	e006      	b.n	8003a50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a42:	4b20      	ldr	r3, [pc, #128]	; (8003ac4 <HAL_GPIO_Init+0x2d0>)
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	491e      	ldr	r1, [pc, #120]	; (8003ac4 <HAL_GPIO_Init+0x2d0>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d006      	beq.n	8003a6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003a5c:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <HAL_GPIO_Init+0x2d0>)
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	4918      	ldr	r1, [pc, #96]	; (8003ac4 <HAL_GPIO_Init+0x2d0>)
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	604b      	str	r3, [r1, #4]
 8003a68:	e006      	b.n	8003a78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003a6a:	4b16      	ldr	r3, [pc, #88]	; (8003ac4 <HAL_GPIO_Init+0x2d0>)
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	43db      	mvns	r3, r3
 8003a72:	4914      	ldr	r1, [pc, #80]	; (8003ac4 <HAL_GPIO_Init+0x2d0>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d021      	beq.n	8003ac8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003a84:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <HAL_GPIO_Init+0x2d0>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	490e      	ldr	r1, [pc, #56]	; (8003ac4 <HAL_GPIO_Init+0x2d0>)
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	600b      	str	r3, [r1, #0]
 8003a90:	e021      	b.n	8003ad6 <HAL_GPIO_Init+0x2e2>
 8003a92:	bf00      	nop
 8003a94:	10320000 	.word	0x10320000
 8003a98:	10310000 	.word	0x10310000
 8003a9c:	10220000 	.word	0x10220000
 8003aa0:	10210000 	.word	0x10210000
 8003aa4:	10120000 	.word	0x10120000
 8003aa8:	10110000 	.word	0x10110000
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	40010000 	.word	0x40010000
 8003ab4:	40010800 	.word	0x40010800
 8003ab8:	40010c00 	.word	0x40010c00
 8003abc:	40011000 	.word	0x40011000
 8003ac0:	40011400 	.word	0x40011400
 8003ac4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <HAL_GPIO_Init+0x304>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	4909      	ldr	r1, [pc, #36]	; (8003af8 <HAL_GPIO_Init+0x304>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	3301      	adds	r3, #1
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f47f ae8e 	bne.w	8003808 <HAL_GPIO_Init+0x14>
  }
}
 8003aec:	bf00      	nop
 8003aee:	bf00      	nop
 8003af0:	372c      	adds	r7, #44	; 0x2c
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr
 8003af8:	40010400 	.word	0x40010400

08003afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	460b      	mov	r3, r1
 8003b06:	807b      	strh	r3, [r7, #2]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b0c:	787b      	ldrb	r3, [r7, #1]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b12:	887a      	ldrh	r2, [r7, #2]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003b18:	e003      	b.n	8003b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b1a:	887b      	ldrh	r3, [r7, #2]
 8003b1c:	041a      	lsls	r2, r3, #16
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	611a      	str	r2, [r3, #16]
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b3e:	887a      	ldrh	r2, [r7, #2]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4013      	ands	r3, r2
 8003b44:	041a      	lsls	r2, r3, #16
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	43d9      	mvns	r1, r3
 8003b4a:	887b      	ldrh	r3, [r7, #2]
 8003b4c:	400b      	ands	r3, r1
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	611a      	str	r2, [r3, #16]
}
 8003b54:	bf00      	nop
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr
	...

08003b60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	4603      	mov	r3, r0
 8003b68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b6a:	4b08      	ldr	r3, [pc, #32]	; (8003b8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b6c:	695a      	ldr	r2, [r3, #20]
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	4013      	ands	r3, r2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d006      	beq.n	8003b84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b76:	4a05      	ldr	r2, [pc, #20]	; (8003b8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b78:	88fb      	ldrh	r3, [r7, #6]
 8003b7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b7c:	88fb      	ldrh	r3, [r7, #6]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 f806 	bl	8003b90 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b84:	bf00      	nop
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40010400 	.word	0x40010400

08003b90 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	4603      	mov	r3, r0
 8003b98:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e12b      	b.n	8003e0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff f836 	bl	8002c3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2224      	movs	r2, #36	; 0x24
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0201 	bic.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bf6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c08:	f001 fbca 	bl	80053a0 <HAL_RCC_GetPCLK1Freq>
 8003c0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	4a81      	ldr	r2, [pc, #516]	; (8003e18 <HAL_I2C_Init+0x274>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d807      	bhi.n	8003c28 <HAL_I2C_Init+0x84>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4a80      	ldr	r2, [pc, #512]	; (8003e1c <HAL_I2C_Init+0x278>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	bf94      	ite	ls
 8003c20:	2301      	movls	r3, #1
 8003c22:	2300      	movhi	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	e006      	b.n	8003c36 <HAL_I2C_Init+0x92>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4a7d      	ldr	r2, [pc, #500]	; (8003e20 <HAL_I2C_Init+0x27c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	bf94      	ite	ls
 8003c30:	2301      	movls	r3, #1
 8003c32:	2300      	movhi	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e0e7      	b.n	8003e0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4a78      	ldr	r2, [pc, #480]	; (8003e24 <HAL_I2C_Init+0x280>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	0c9b      	lsrs	r3, r3, #18
 8003c48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	4a6a      	ldr	r2, [pc, #424]	; (8003e18 <HAL_I2C_Init+0x274>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d802      	bhi.n	8003c78 <HAL_I2C_Init+0xd4>
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	3301      	adds	r3, #1
 8003c76:	e009      	b.n	8003c8c <HAL_I2C_Init+0xe8>
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c7e:	fb02 f303 	mul.w	r3, r2, r3
 8003c82:	4a69      	ldr	r2, [pc, #420]	; (8003e28 <HAL_I2C_Init+0x284>)
 8003c84:	fba2 2303 	umull	r2, r3, r2, r3
 8003c88:	099b      	lsrs	r3, r3, #6
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	430b      	orrs	r3, r1
 8003c92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	495c      	ldr	r1, [pc, #368]	; (8003e18 <HAL_I2C_Init+0x274>)
 8003ca8:	428b      	cmp	r3, r1
 8003caa:	d819      	bhi.n	8003ce0 <HAL_I2C_Init+0x13c>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	1e59      	subs	r1, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cba:	1c59      	adds	r1, r3, #1
 8003cbc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003cc0:	400b      	ands	r3, r1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <HAL_I2C_Init+0x138>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	1e59      	subs	r1, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cda:	e051      	b.n	8003d80 <HAL_I2C_Init+0x1dc>
 8003cdc:	2304      	movs	r3, #4
 8003cde:	e04f      	b.n	8003d80 <HAL_I2C_Init+0x1dc>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d111      	bne.n	8003d0c <HAL_I2C_Init+0x168>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	1e58      	subs	r0, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6859      	ldr	r1, [r3, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	440b      	add	r3, r1
 8003cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	bf0c      	ite	eq
 8003d04:	2301      	moveq	r3, #1
 8003d06:	2300      	movne	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	e012      	b.n	8003d32 <HAL_I2C_Init+0x18e>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	1e58      	subs	r0, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6859      	ldr	r1, [r3, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	0099      	lsls	r1, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d22:	3301      	adds	r3, #1
 8003d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	bf0c      	ite	eq
 8003d2c:	2301      	moveq	r3, #1
 8003d2e:	2300      	movne	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_I2C_Init+0x196>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e022      	b.n	8003d80 <HAL_I2C_Init+0x1dc>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10e      	bne.n	8003d60 <HAL_I2C_Init+0x1bc>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	1e58      	subs	r0, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6859      	ldr	r1, [r3, #4]
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	440b      	add	r3, r1
 8003d50:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d54:	3301      	adds	r3, #1
 8003d56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d5e:	e00f      	b.n	8003d80 <HAL_I2C_Init+0x1dc>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	1e58      	subs	r0, r3, #1
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6859      	ldr	r1, [r3, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	0099      	lsls	r1, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d76:	3301      	adds	r3, #1
 8003d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	6809      	ldr	r1, [r1, #0]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69da      	ldr	r2, [r3, #28]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003dae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6911      	ldr	r1, [r2, #16]
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	68d2      	ldr	r2, [r2, #12]
 8003dba:	4311      	orrs	r1, r2
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6812      	ldr	r2, [r2, #0]
 8003dc0:	430b      	orrs	r3, r1
 8003dc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	000186a0 	.word	0x000186a0
 8003e1c:	001e847f 	.word	0x001e847f
 8003e20:	003d08ff 	.word	0x003d08ff
 8003e24:	431bde83 	.word	0x431bde83
 8003e28:	10624dd3 	.word	0x10624dd3

08003e2c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b088      	sub	sp, #32
 8003e30:	af02      	add	r7, sp, #8
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	607a      	str	r2, [r7, #4]
 8003e36:	461a      	mov	r2, r3
 8003e38:	460b      	mov	r3, r1
 8003e3a:	817b      	strh	r3, [r7, #10]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e40:	f7ff f91e 	bl	8003080 <HAL_GetTick>
 8003e44:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	f040 80e0 	bne.w	8004014 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	2319      	movs	r3, #25
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	4970      	ldr	r1, [pc, #448]	; (8004020 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 fc9e 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	e0d3      	b.n	8004016 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_I2C_Master_Transmit+0x50>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e0cc      	b.n	8004016 <HAL_I2C_Master_Transmit+0x1ea>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d007      	beq.n	8003ea2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f042 0201 	orr.w	r2, r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eb0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2221      	movs	r2, #33	; 0x21
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2210      	movs	r2, #16
 8003ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	893a      	ldrh	r2, [r7, #8]
 8003ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4a50      	ldr	r2, [pc, #320]	; (8004024 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ee2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ee4:	8979      	ldrh	r1, [r7, #10]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	6a3a      	ldr	r2, [r7, #32]
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 fb08 	bl	8004500 <I2C_MasterRequestWrite>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e08d      	b.n	8004016 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003efa:	2300      	movs	r3, #0
 8003efc:	613b      	str	r3, [r7, #16]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	613b      	str	r3, [r7, #16]
 8003f0e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f10:	e066      	b.n	8003fe0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	6a39      	ldr	r1, [r7, #32]
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 fd5c 	bl	80049d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00d      	beq.n	8003f3e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d107      	bne.n	8003f3a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e06b      	b.n	8004016 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	781a      	ldrb	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d11b      	bne.n	8003fb4 <HAL_I2C_Master_Transmit+0x188>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d017      	beq.n	8003fb4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	781a      	ldrb	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	6a39      	ldr	r1, [r7, #32]
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 fd53 	bl	8004a64 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00d      	beq.n	8003fe0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d107      	bne.n	8003fdc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fda:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e01a      	b.n	8004016 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d194      	bne.n	8003f12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	e000      	b.n	8004016 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004014:	2302      	movs	r3, #2
  }
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	00100002 	.word	0x00100002
 8004024:	ffff0000 	.word	0xffff0000

08004028 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08c      	sub	sp, #48	; 0x30
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	607a      	str	r2, [r7, #4]
 8004032:	461a      	mov	r2, r3
 8004034:	460b      	mov	r3, r1
 8004036:	817b      	strh	r3, [r7, #10]
 8004038:	4613      	mov	r3, r2
 800403a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004040:	f7ff f81e 	bl	8003080 <HAL_GetTick>
 8004044:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b20      	cmp	r3, #32
 8004050:	f040 824b 	bne.w	80044ea <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	2319      	movs	r3, #25
 800405a:	2201      	movs	r2, #1
 800405c:	497f      	ldr	r1, [pc, #508]	; (800425c <HAL_I2C_Master_Receive+0x234>)
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 fb9e 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800406a:	2302      	movs	r3, #2
 800406c:	e23e      	b.n	80044ec <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_I2C_Master_Receive+0x54>
 8004078:	2302      	movs	r3, #2
 800407a:	e237      	b.n	80044ec <HAL_I2C_Master_Receive+0x4c4>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b01      	cmp	r3, #1
 8004090:	d007      	beq.n	80040a2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0201 	orr.w	r2, r2, #1
 80040a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2222      	movs	r2, #34	; 0x22
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2210      	movs	r2, #16
 80040be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	893a      	ldrh	r2, [r7, #8]
 80040d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4a5f      	ldr	r2, [pc, #380]	; (8004260 <HAL_I2C_Master_Receive+0x238>)
 80040e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040e4:	8979      	ldrh	r1, [r7, #10]
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 fa8a 	bl	8004604 <I2C_MasterRequestRead>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e1f8      	b.n	80044ec <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d113      	bne.n	800412a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004102:	2300      	movs	r3, #0
 8004104:	61fb      	str	r3, [r7, #28]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	61fb      	str	r3, [r7, #28]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	61fb      	str	r3, [r7, #28]
 8004116:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	e1cc      	b.n	80044c4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412e:	2b01      	cmp	r3, #1
 8004130:	d11e      	bne.n	8004170 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004140:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004142:	b672      	cpsid	i
}
 8004144:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004146:	2300      	movs	r3, #0
 8004148:	61bb      	str	r3, [r7, #24]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	61bb      	str	r3, [r7, #24]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	61bb      	str	r3, [r7, #24]
 800415a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800416a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800416c:	b662      	cpsie	i
}
 800416e:	e035      	b.n	80041dc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004174:	2b02      	cmp	r3, #2
 8004176:	d11e      	bne.n	80041b6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004186:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004188:	b672      	cpsid	i
}
 800418a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800418c:	2300      	movs	r3, #0
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80041b2:	b662      	cpsie	i
}
 80041b4:	e012      	b.n	80041dc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c6:	2300      	movs	r3, #0
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	613b      	str	r3, [r7, #16]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	613b      	str	r3, [r7, #16]
 80041da:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80041dc:	e172      	b.n	80044c4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	f200 811f 	bhi.w	8004426 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d123      	bne.n	8004238 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 fc7d 	bl	8004af4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e173      	b.n	80044ec <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004236:	e145      	b.n	80044c4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423c:	2b02      	cmp	r3, #2
 800423e:	d152      	bne.n	80042e6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	2200      	movs	r2, #0
 8004248:	4906      	ldr	r1, [pc, #24]	; (8004264 <HAL_I2C_Master_Receive+0x23c>)
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 faa8 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d008      	beq.n	8004268 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e148      	b.n	80044ec <HAL_I2C_Master_Receive+0x4c4>
 800425a:	bf00      	nop
 800425c:	00100002 	.word	0x00100002
 8004260:	ffff0000 	.word	0xffff0000
 8004264:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004268:	b672      	cpsid	i
}
 800426a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800427a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	691a      	ldr	r2, [r3, #16]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80042ae:	b662      	cpsie	i
}
 80042b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042da:	b29b      	uxth	r3, r3
 80042dc:	3b01      	subs	r3, #1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042e4:	e0ee      	b.n	80044c4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ec:	2200      	movs	r2, #0
 80042ee:	4981      	ldr	r1, [pc, #516]	; (80044f4 <HAL_I2C_Master_Receive+0x4cc>)
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 fa55 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0f5      	b.n	80044ec <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800430e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004310:	b672      	cpsid	i
}
 8004312:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691a      	ldr	r2, [r3, #16]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433c:	b29b      	uxth	r3, r3
 800433e:	3b01      	subs	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004346:	4b6c      	ldr	r3, [pc, #432]	; (80044f8 <HAL_I2C_Master_Receive+0x4d0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	08db      	lsrs	r3, r3, #3
 800434c:	4a6b      	ldr	r2, [pc, #428]	; (80044fc <HAL_I2C_Master_Receive+0x4d4>)
 800434e:	fba2 2303 	umull	r2, r3, r2, r3
 8004352:	0a1a      	lsrs	r2, r3, #8
 8004354:	4613      	mov	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	00da      	lsls	r2, r3, #3
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	3b01      	subs	r3, #1
 8004364:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d118      	bne.n	800439e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2220      	movs	r2, #32
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	f043 0220 	orr.w	r2, r3, #32
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800438e:	b662      	cpsie	i
}
 8004390:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e0a6      	b.n	80044ec <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d1d9      	bne.n	8004360 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80043ee:	b662      	cpsie	i
}
 80043f0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	691a      	ldr	r2, [r3, #16]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004424:	e04e      	b.n	80044c4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004428:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 fb62 	bl	8004af4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e058      	b.n	80044ec <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	b2d2      	uxtb	r2, r2
 8004446:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004456:	3b01      	subs	r3, #1
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004462:	b29b      	uxth	r3, r3
 8004464:	3b01      	subs	r3, #1
 8004466:	b29a      	uxth	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	f003 0304 	and.w	r3, r3, #4
 8004476:	2b04      	cmp	r3, #4
 8004478:	d124      	bne.n	80044c4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447e:	2b03      	cmp	r3, #3
 8004480:	d107      	bne.n	8004492 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004490:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	3b01      	subs	r3, #1
 80044be:	b29a      	uxth	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f47f ae88 	bne.w	80041de <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044e6:	2300      	movs	r3, #0
 80044e8:	e000      	b.n	80044ec <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80044ea:	2302      	movs	r3, #2
  }
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3728      	adds	r7, #40	; 0x28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	00010004 	.word	0x00010004
 80044f8:	20000000 	.word	0x20000000
 80044fc:	14f8b589 	.word	0x14f8b589

08004500 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b088      	sub	sp, #32
 8004504:	af02      	add	r7, sp, #8
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	607a      	str	r2, [r7, #4]
 800450a:	603b      	str	r3, [r7, #0]
 800450c:	460b      	mov	r3, r1
 800450e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2b08      	cmp	r3, #8
 800451a:	d006      	beq.n	800452a <I2C_MasterRequestWrite+0x2a>
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d003      	beq.n	800452a <I2C_MasterRequestWrite+0x2a>
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004528:	d108      	bne.n	800453c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	e00b      	b.n	8004554 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004540:	2b12      	cmp	r3, #18
 8004542:	d107      	bne.n	8004554 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004552:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 f91d 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00d      	beq.n	8004588 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800457a:	d103      	bne.n	8004584 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004582:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e035      	b.n	80045f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004590:	d108      	bne.n	80045a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004592:	897b      	ldrh	r3, [r7, #10]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	461a      	mov	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045a0:	611a      	str	r2, [r3, #16]
 80045a2:	e01b      	b.n	80045dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045a4:	897b      	ldrh	r3, [r7, #10]
 80045a6:	11db      	asrs	r3, r3, #7
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	f003 0306 	and.w	r3, r3, #6
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	f063 030f 	orn	r3, r3, #15
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	490e      	ldr	r1, [pc, #56]	; (80045fc <I2C_MasterRequestWrite+0xfc>)
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 f966 	bl	8004894 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e010      	b.n	80045f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045d2:	897b      	ldrh	r3, [r7, #10]
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	4907      	ldr	r1, [pc, #28]	; (8004600 <I2C_MasterRequestWrite+0x100>)
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 f956 	bl	8004894 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e000      	b.n	80045f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	00010008 	.word	0x00010008
 8004600:	00010002 	.word	0x00010002

08004604 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af02      	add	r7, sp, #8
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	607a      	str	r2, [r7, #4]
 800460e:	603b      	str	r3, [r7, #0]
 8004610:	460b      	mov	r3, r1
 8004612:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004628:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2b08      	cmp	r3, #8
 800462e:	d006      	beq.n	800463e <I2C_MasterRequestRead+0x3a>
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d003      	beq.n	800463e <I2C_MasterRequestRead+0x3a>
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800463c:	d108      	bne.n	8004650 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	e00b      	b.n	8004668 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	2b11      	cmp	r3, #17
 8004656:	d107      	bne.n	8004668 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004666:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 f893 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00d      	beq.n	800469c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800468e:	d103      	bne.n	8004698 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004696:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e079      	b.n	8004790 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046a4:	d108      	bne.n	80046b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046a6:	897b      	ldrh	r3, [r7, #10]
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	f043 0301 	orr.w	r3, r3, #1
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	611a      	str	r2, [r3, #16]
 80046b6:	e05f      	b.n	8004778 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80046b8:	897b      	ldrh	r3, [r7, #10]
 80046ba:	11db      	asrs	r3, r3, #7
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	f003 0306 	and.w	r3, r3, #6
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	f063 030f 	orn	r3, r3, #15
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	4930      	ldr	r1, [pc, #192]	; (8004798 <I2C_MasterRequestRead+0x194>)
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 f8dc 	bl	8004894 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e054      	b.n	8004790 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80046e6:	897b      	ldrh	r3, [r7, #10]
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	4929      	ldr	r1, [pc, #164]	; (800479c <I2C_MasterRequestRead+0x198>)
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 f8cc 	bl	8004894 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e044      	b.n	8004790 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004706:	2300      	movs	r3, #0
 8004708:	613b      	str	r3, [r7, #16]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800472a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 f831 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00d      	beq.n	8004760 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004752:	d103      	bne.n	800475c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800475a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e017      	b.n	8004790 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004760:	897b      	ldrh	r3, [r7, #10]
 8004762:	11db      	asrs	r3, r3, #7
 8004764:	b2db      	uxtb	r3, r3
 8004766:	f003 0306 	and.w	r3, r3, #6
 800476a:	b2db      	uxtb	r3, r3
 800476c:	f063 030e 	orn	r3, r3, #14
 8004770:	b2da      	uxtb	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	4907      	ldr	r1, [pc, #28]	; (800479c <I2C_MasterRequestRead+0x198>)
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 f888 	bl	8004894 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	00010008 	.word	0x00010008
 800479c:	00010002 	.word	0x00010002

080047a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	4613      	mov	r3, r2
 80047ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047b0:	e048      	b.n	8004844 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b8:	d044      	beq.n	8004844 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ba:	f7fe fc61 	bl	8003080 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d302      	bcc.n	80047d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d139      	bne.n	8004844 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	0c1b      	lsrs	r3, r3, #16
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d10d      	bne.n	80047f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	43da      	mvns	r2, r3
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	4013      	ands	r3, r2
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bf0c      	ite	eq
 80047ec:	2301      	moveq	r3, #1
 80047ee:	2300      	movne	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	e00c      	b.n	8004810 <I2C_WaitOnFlagUntilTimeout+0x70>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	43da      	mvns	r2, r3
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	4013      	ands	r3, r2
 8004802:	b29b      	uxth	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	bf0c      	ite	eq
 8004808:	2301      	moveq	r3, #1
 800480a:	2300      	movne	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	461a      	mov	r2, r3
 8004810:	79fb      	ldrb	r3, [r7, #7]
 8004812:	429a      	cmp	r2, r3
 8004814:	d116      	bne.n	8004844 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004830:	f043 0220 	orr.w	r2, r3, #32
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e023      	b.n	800488c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	0c1b      	lsrs	r3, r3, #16
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b01      	cmp	r3, #1
 800484c:	d10d      	bne.n	800486a <I2C_WaitOnFlagUntilTimeout+0xca>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	43da      	mvns	r2, r3
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	4013      	ands	r3, r2
 800485a:	b29b      	uxth	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	bf0c      	ite	eq
 8004860:	2301      	moveq	r3, #1
 8004862:	2300      	movne	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	461a      	mov	r2, r3
 8004868:	e00c      	b.n	8004884 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	43da      	mvns	r2, r3
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	4013      	ands	r3, r2
 8004876:	b29b      	uxth	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	bf0c      	ite	eq
 800487c:	2301      	moveq	r3, #1
 800487e:	2300      	movne	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	461a      	mov	r2, r3
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	429a      	cmp	r2, r3
 8004888:	d093      	beq.n	80047b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
 80048a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048a2:	e071      	b.n	8004988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b2:	d123      	bne.n	80048fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e8:	f043 0204 	orr.w	r2, r3, #4
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e067      	b.n	80049cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004902:	d041      	beq.n	8004988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004904:	f7fe fbbc 	bl	8003080 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	429a      	cmp	r2, r3
 8004912:	d302      	bcc.n	800491a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d136      	bne.n	8004988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	0c1b      	lsrs	r3, r3, #16
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b01      	cmp	r3, #1
 8004922:	d10c      	bne.n	800493e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	43da      	mvns	r2, r3
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	4013      	ands	r3, r2
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	bf14      	ite	ne
 8004936:	2301      	movne	r3, #1
 8004938:	2300      	moveq	r3, #0
 800493a:	b2db      	uxtb	r3, r3
 800493c:	e00b      	b.n	8004956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	43da      	mvns	r2, r3
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	4013      	ands	r3, r2
 800494a:	b29b      	uxth	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	bf14      	ite	ne
 8004950:	2301      	movne	r3, #1
 8004952:	2300      	moveq	r3, #0
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d016      	beq.n	8004988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2220      	movs	r2, #32
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	f043 0220 	orr.w	r2, r3, #32
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e021      	b.n	80049cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	0c1b      	lsrs	r3, r3, #16
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b01      	cmp	r3, #1
 8004990:	d10c      	bne.n	80049ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	43da      	mvns	r2, r3
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	4013      	ands	r3, r2
 800499e:	b29b      	uxth	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	bf14      	ite	ne
 80049a4:	2301      	movne	r3, #1
 80049a6:	2300      	moveq	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	e00b      	b.n	80049c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	43da      	mvns	r2, r3
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	4013      	ands	r3, r2
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	bf14      	ite	ne
 80049be:	2301      	movne	r3, #1
 80049c0:	2300      	moveq	r3, #0
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f47f af6d 	bne.w	80048a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049e0:	e034      	b.n	8004a4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f000 f8e3 	bl	8004bae <I2C_IsAcknowledgeFailed>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e034      	b.n	8004a5c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f8:	d028      	beq.n	8004a4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049fa:	f7fe fb41 	bl	8003080 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d302      	bcc.n	8004a10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d11d      	bne.n	8004a4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1a:	2b80      	cmp	r3, #128	; 0x80
 8004a1c:	d016      	beq.n	8004a4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a38:	f043 0220 	orr.w	r2, r3, #32
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e007      	b.n	8004a5c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a56:	2b80      	cmp	r3, #128	; 0x80
 8004a58:	d1c3      	bne.n	80049e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a70:	e034      	b.n	8004adc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 f89b 	bl	8004bae <I2C_IsAcknowledgeFailed>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e034      	b.n	8004aec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a88:	d028      	beq.n	8004adc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a8a:	f7fe faf9 	bl	8003080 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d302      	bcc.n	8004aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d11d      	bne.n	8004adc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d016      	beq.n	8004adc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	f043 0220 	orr.w	r2, r3, #32
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e007      	b.n	8004aec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	f003 0304 	and.w	r3, r3, #4
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d1c3      	bne.n	8004a72 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b00:	e049      	b.n	8004b96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	f003 0310 	and.w	r3, r3, #16
 8004b0c:	2b10      	cmp	r3, #16
 8004b0e:	d119      	bne.n	8004b44 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0210 	mvn.w	r2, #16
 8004b18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2220      	movs	r2, #32
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e030      	b.n	8004ba6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b44:	f7fe fa9c 	bl	8003080 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d302      	bcc.n	8004b5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d11d      	bne.n	8004b96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b64:	2b40      	cmp	r3, #64	; 0x40
 8004b66:	d016      	beq.n	8004b96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	f043 0220 	orr.w	r2, r3, #32
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e007      	b.n	8004ba6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba0:	2b40      	cmp	r3, #64	; 0x40
 8004ba2:	d1ae      	bne.n	8004b02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc4:	d11b      	bne.n	8004bfe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	f043 0204 	orr.w	r2, r3, #4
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bc80      	pop	{r7}
 8004c08:	4770      	bx	lr
	...

08004c0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e272      	b.n	8005104 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 8087 	beq.w	8004d3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c2c:	4b92      	ldr	r3, [pc, #584]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f003 030c 	and.w	r3, r3, #12
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d00c      	beq.n	8004c52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c38:	4b8f      	ldr	r3, [pc, #572]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f003 030c 	and.w	r3, r3, #12
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d112      	bne.n	8004c6a <HAL_RCC_OscConfig+0x5e>
 8004c44:	4b8c      	ldr	r3, [pc, #560]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c50:	d10b      	bne.n	8004c6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c52:	4b89      	ldr	r3, [pc, #548]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d06c      	beq.n	8004d38 <HAL_RCC_OscConfig+0x12c>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d168      	bne.n	8004d38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e24c      	b.n	8005104 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c72:	d106      	bne.n	8004c82 <HAL_RCC_OscConfig+0x76>
 8004c74:	4b80      	ldr	r3, [pc, #512]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a7f      	ldr	r2, [pc, #508]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c7e:	6013      	str	r3, [r2, #0]
 8004c80:	e02e      	b.n	8004ce0 <HAL_RCC_OscConfig+0xd4>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10c      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x98>
 8004c8a:	4b7b      	ldr	r3, [pc, #492]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a7a      	ldr	r2, [pc, #488]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	4b78      	ldr	r3, [pc, #480]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a77      	ldr	r2, [pc, #476]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004c9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	e01d      	b.n	8004ce0 <HAL_RCC_OscConfig+0xd4>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cac:	d10c      	bne.n	8004cc8 <HAL_RCC_OscConfig+0xbc>
 8004cae:	4b72      	ldr	r3, [pc, #456]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a71      	ldr	r2, [pc, #452]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	4b6f      	ldr	r3, [pc, #444]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a6e      	ldr	r2, [pc, #440]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	e00b      	b.n	8004ce0 <HAL_RCC_OscConfig+0xd4>
 8004cc8:	4b6b      	ldr	r3, [pc, #428]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a6a      	ldr	r2, [pc, #424]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	4b68      	ldr	r3, [pc, #416]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a67      	ldr	r2, [pc, #412]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d013      	beq.n	8004d10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce8:	f7fe f9ca 	bl	8003080 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cf0:	f7fe f9c6 	bl	8003080 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b64      	cmp	r3, #100	; 0x64
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e200      	b.n	8005104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d02:	4b5d      	ldr	r3, [pc, #372]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0f0      	beq.n	8004cf0 <HAL_RCC_OscConfig+0xe4>
 8004d0e:	e014      	b.n	8004d3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d10:	f7fe f9b6 	bl	8003080 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d18:	f7fe f9b2 	bl	8003080 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b64      	cmp	r3, #100	; 0x64
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e1ec      	b.n	8005104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d2a:	4b53      	ldr	r3, [pc, #332]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1f0      	bne.n	8004d18 <HAL_RCC_OscConfig+0x10c>
 8004d36:	e000      	b.n	8004d3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d063      	beq.n	8004e0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d46:	4b4c      	ldr	r3, [pc, #304]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f003 030c 	and.w	r3, r3, #12
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00b      	beq.n	8004d6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004d52:	4b49      	ldr	r3, [pc, #292]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f003 030c 	and.w	r3, r3, #12
 8004d5a:	2b08      	cmp	r3, #8
 8004d5c:	d11c      	bne.n	8004d98 <HAL_RCC_OscConfig+0x18c>
 8004d5e:	4b46      	ldr	r3, [pc, #280]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d116      	bne.n	8004d98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d6a:	4b43      	ldr	r3, [pc, #268]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d005      	beq.n	8004d82 <HAL_RCC_OscConfig+0x176>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d001      	beq.n	8004d82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e1c0      	b.n	8005104 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d82:	4b3d      	ldr	r3, [pc, #244]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	4939      	ldr	r1, [pc, #228]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d96:	e03a      	b.n	8004e0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d020      	beq.n	8004de2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004da0:	4b36      	ldr	r3, [pc, #216]	; (8004e7c <HAL_RCC_OscConfig+0x270>)
 8004da2:	2201      	movs	r2, #1
 8004da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da6:	f7fe f96b 	bl	8003080 <HAL_GetTick>
 8004daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dac:	e008      	b.n	8004dc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dae:	f7fe f967 	bl	8003080 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e1a1      	b.n	8005104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dc0:	4b2d      	ldr	r3, [pc, #180]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0f0      	beq.n	8004dae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dcc:	4b2a      	ldr	r3, [pc, #168]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	4927      	ldr	r1, [pc, #156]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	600b      	str	r3, [r1, #0]
 8004de0:	e015      	b.n	8004e0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004de2:	4b26      	ldr	r3, [pc, #152]	; (8004e7c <HAL_RCC_OscConfig+0x270>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de8:	f7fe f94a 	bl	8003080 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004df0:	f7fe f946 	bl	8003080 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e180      	b.n	8005104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e02:	4b1d      	ldr	r3, [pc, #116]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1f0      	bne.n	8004df0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d03a      	beq.n	8004e90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d019      	beq.n	8004e56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e22:	4b17      	ldr	r3, [pc, #92]	; (8004e80 <HAL_RCC_OscConfig+0x274>)
 8004e24:	2201      	movs	r2, #1
 8004e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e28:	f7fe f92a 	bl	8003080 <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e30:	f7fe f926 	bl	8003080 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e160      	b.n	8005104 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e42:	4b0d      	ldr	r3, [pc, #52]	; (8004e78 <HAL_RCC_OscConfig+0x26c>)
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0f0      	beq.n	8004e30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004e4e:	2001      	movs	r0, #1
 8004e50:	f000 face 	bl	80053f0 <RCC_Delay>
 8004e54:	e01c      	b.n	8004e90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e56:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <HAL_RCC_OscConfig+0x274>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e5c:	f7fe f910 	bl	8003080 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e62:	e00f      	b.n	8004e84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e64:	f7fe f90c 	bl	8003080 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d908      	bls.n	8004e84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e146      	b.n	8005104 <HAL_RCC_OscConfig+0x4f8>
 8004e76:	bf00      	nop
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	42420000 	.word	0x42420000
 8004e80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e84:	4b92      	ldr	r3, [pc, #584]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1e9      	bne.n	8004e64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 80a6 	beq.w	8004fea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ea2:	4b8b      	ldr	r3, [pc, #556]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10d      	bne.n	8004eca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eae:	4b88      	ldr	r3, [pc, #544]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	4a87      	ldr	r2, [pc, #540]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 8004eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eb8:	61d3      	str	r3, [r2, #28]
 8004eba:	4b85      	ldr	r3, [pc, #532]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec2:	60bb      	str	r3, [r7, #8]
 8004ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eca:	4b82      	ldr	r3, [pc, #520]	; (80050d4 <HAL_RCC_OscConfig+0x4c8>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d118      	bne.n	8004f08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ed6:	4b7f      	ldr	r3, [pc, #508]	; (80050d4 <HAL_RCC_OscConfig+0x4c8>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a7e      	ldr	r2, [pc, #504]	; (80050d4 <HAL_RCC_OscConfig+0x4c8>)
 8004edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ee2:	f7fe f8cd 	bl	8003080 <HAL_GetTick>
 8004ee6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee8:	e008      	b.n	8004efc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eea:	f7fe f8c9 	bl	8003080 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b64      	cmp	r3, #100	; 0x64
 8004ef6:	d901      	bls.n	8004efc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e103      	b.n	8005104 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004efc:	4b75      	ldr	r3, [pc, #468]	; (80050d4 <HAL_RCC_OscConfig+0x4c8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0f0      	beq.n	8004eea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d106      	bne.n	8004f1e <HAL_RCC_OscConfig+0x312>
 8004f10:	4b6f      	ldr	r3, [pc, #444]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	4a6e      	ldr	r2, [pc, #440]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 8004f16:	f043 0301 	orr.w	r3, r3, #1
 8004f1a:	6213      	str	r3, [r2, #32]
 8004f1c:	e02d      	b.n	8004f7a <HAL_RCC_OscConfig+0x36e>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10c      	bne.n	8004f40 <HAL_RCC_OscConfig+0x334>
 8004f26:	4b6a      	ldr	r3, [pc, #424]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	4a69      	ldr	r2, [pc, #420]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 8004f2c:	f023 0301 	bic.w	r3, r3, #1
 8004f30:	6213      	str	r3, [r2, #32]
 8004f32:	4b67      	ldr	r3, [pc, #412]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	4a66      	ldr	r2, [pc, #408]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 8004f38:	f023 0304 	bic.w	r3, r3, #4
 8004f3c:	6213      	str	r3, [r2, #32]
 8004f3e:	e01c      	b.n	8004f7a <HAL_RCC_OscConfig+0x36e>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	2b05      	cmp	r3, #5
 8004f46:	d10c      	bne.n	8004f62 <HAL_RCC_OscConfig+0x356>
 8004f48:	4b61      	ldr	r3, [pc, #388]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	4a60      	ldr	r2, [pc, #384]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 8004f4e:	f043 0304 	orr.w	r3, r3, #4
 8004f52:	6213      	str	r3, [r2, #32]
 8004f54:	4b5e      	ldr	r3, [pc, #376]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	4a5d      	ldr	r2, [pc, #372]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 8004f5a:	f043 0301 	orr.w	r3, r3, #1
 8004f5e:	6213      	str	r3, [r2, #32]
 8004f60:	e00b      	b.n	8004f7a <HAL_RCC_OscConfig+0x36e>
 8004f62:	4b5b      	ldr	r3, [pc, #364]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	4a5a      	ldr	r2, [pc, #360]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 8004f68:	f023 0301 	bic.w	r3, r3, #1
 8004f6c:	6213      	str	r3, [r2, #32]
 8004f6e:	4b58      	ldr	r3, [pc, #352]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	4a57      	ldr	r2, [pc, #348]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 8004f74:	f023 0304 	bic.w	r3, r3, #4
 8004f78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d015      	beq.n	8004fae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f82:	f7fe f87d 	bl	8003080 <HAL_GetTick>
 8004f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f88:	e00a      	b.n	8004fa0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f8a:	f7fe f879 	bl	8003080 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d901      	bls.n	8004fa0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e0b1      	b.n	8005104 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fa0:	4b4b      	ldr	r3, [pc, #300]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0ee      	beq.n	8004f8a <HAL_RCC_OscConfig+0x37e>
 8004fac:	e014      	b.n	8004fd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fae:	f7fe f867 	bl	8003080 <HAL_GetTick>
 8004fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fb4:	e00a      	b.n	8004fcc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb6:	f7fe f863 	bl	8003080 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e09b      	b.n	8005104 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fcc:	4b40      	ldr	r3, [pc, #256]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1ee      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004fd8:	7dfb      	ldrb	r3, [r7, #23]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d105      	bne.n	8004fea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fde:	4b3c      	ldr	r3, [pc, #240]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	4a3b      	ldr	r2, [pc, #236]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 8004fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fe8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 8087 	beq.w	8005102 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ff4:	4b36      	ldr	r3, [pc, #216]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f003 030c 	and.w	r3, r3, #12
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d061      	beq.n	80050c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	2b02      	cmp	r3, #2
 8005006:	d146      	bne.n	8005096 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005008:	4b33      	ldr	r3, [pc, #204]	; (80050d8 <HAL_RCC_OscConfig+0x4cc>)
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800500e:	f7fe f837 	bl	8003080 <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005014:	e008      	b.n	8005028 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005016:	f7fe f833 	bl	8003080 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d901      	bls.n	8005028 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e06d      	b.n	8005104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005028:	4b29      	ldr	r3, [pc, #164]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1f0      	bne.n	8005016 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800503c:	d108      	bne.n	8005050 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800503e:	4b24      	ldr	r3, [pc, #144]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	4921      	ldr	r1, [pc, #132]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 800504c:	4313      	orrs	r3, r2
 800504e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005050:	4b1f      	ldr	r3, [pc, #124]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a19      	ldr	r1, [r3, #32]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	430b      	orrs	r3, r1
 8005062:	491b      	ldr	r1, [pc, #108]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 8005064:	4313      	orrs	r3, r2
 8005066:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005068:	4b1b      	ldr	r3, [pc, #108]	; (80050d8 <HAL_RCC_OscConfig+0x4cc>)
 800506a:	2201      	movs	r2, #1
 800506c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800506e:	f7fe f807 	bl	8003080 <HAL_GetTick>
 8005072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005074:	e008      	b.n	8005088 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005076:	f7fe f803 	bl	8003080 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d901      	bls.n	8005088 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e03d      	b.n	8005104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005088:	4b11      	ldr	r3, [pc, #68]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0f0      	beq.n	8005076 <HAL_RCC_OscConfig+0x46a>
 8005094:	e035      	b.n	8005102 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005096:	4b10      	ldr	r3, [pc, #64]	; (80050d8 <HAL_RCC_OscConfig+0x4cc>)
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509c:	f7fd fff0 	bl	8003080 <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a4:	f7fd ffec 	bl	8003080 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e026      	b.n	8005104 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050b6:	4b06      	ldr	r3, [pc, #24]	; (80050d0 <HAL_RCC_OscConfig+0x4c4>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1f0      	bne.n	80050a4 <HAL_RCC_OscConfig+0x498>
 80050c2:	e01e      	b.n	8005102 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d107      	bne.n	80050dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e019      	b.n	8005104 <HAL_RCC_OscConfig+0x4f8>
 80050d0:	40021000 	.word	0x40021000
 80050d4:	40007000 	.word	0x40007000
 80050d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80050dc:	4b0b      	ldr	r3, [pc, #44]	; (800510c <HAL_RCC_OscConfig+0x500>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d106      	bne.n	80050fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d001      	beq.n	8005102 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	40021000 	.word	0x40021000

08005110 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e0d0      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005124:	4b6a      	ldr	r3, [pc, #424]	; (80052d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	429a      	cmp	r2, r3
 8005130:	d910      	bls.n	8005154 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005132:	4b67      	ldr	r3, [pc, #412]	; (80052d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f023 0207 	bic.w	r2, r3, #7
 800513a:	4965      	ldr	r1, [pc, #404]	; (80052d0 <HAL_RCC_ClockConfig+0x1c0>)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	4313      	orrs	r3, r2
 8005140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005142:	4b63      	ldr	r3, [pc, #396]	; (80052d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d001      	beq.n	8005154 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e0b8      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d020      	beq.n	80051a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d005      	beq.n	8005178 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800516c:	4b59      	ldr	r3, [pc, #356]	; (80052d4 <HAL_RCC_ClockConfig+0x1c4>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	4a58      	ldr	r2, [pc, #352]	; (80052d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005172:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005176:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0308 	and.w	r3, r3, #8
 8005180:	2b00      	cmp	r3, #0
 8005182:	d005      	beq.n	8005190 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005184:	4b53      	ldr	r3, [pc, #332]	; (80052d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	4a52      	ldr	r2, [pc, #328]	; (80052d4 <HAL_RCC_ClockConfig+0x1c4>)
 800518a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800518e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005190:	4b50      	ldr	r3, [pc, #320]	; (80052d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	494d      	ldr	r1, [pc, #308]	; (80052d4 <HAL_RCC_ClockConfig+0x1c4>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d040      	beq.n	8005230 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d107      	bne.n	80051c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051b6:	4b47      	ldr	r3, [pc, #284]	; (80052d4 <HAL_RCC_ClockConfig+0x1c4>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d115      	bne.n	80051ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e07f      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d107      	bne.n	80051de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ce:	4b41      	ldr	r3, [pc, #260]	; (80052d4 <HAL_RCC_ClockConfig+0x1c4>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d109      	bne.n	80051ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e073      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051de:	4b3d      	ldr	r3, [pc, #244]	; (80052d4 <HAL_RCC_ClockConfig+0x1c4>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e06b      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051ee:	4b39      	ldr	r3, [pc, #228]	; (80052d4 <HAL_RCC_ClockConfig+0x1c4>)
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f023 0203 	bic.w	r2, r3, #3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	4936      	ldr	r1, [pc, #216]	; (80052d4 <HAL_RCC_ClockConfig+0x1c4>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005200:	f7fd ff3e 	bl	8003080 <HAL_GetTick>
 8005204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005206:	e00a      	b.n	800521e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005208:	f7fd ff3a 	bl	8003080 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	f241 3288 	movw	r2, #5000	; 0x1388
 8005216:	4293      	cmp	r3, r2
 8005218:	d901      	bls.n	800521e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e053      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800521e:	4b2d      	ldr	r3, [pc, #180]	; (80052d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f003 020c 	and.w	r2, r3, #12
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	429a      	cmp	r2, r3
 800522e:	d1eb      	bne.n	8005208 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005230:	4b27      	ldr	r3, [pc, #156]	; (80052d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	429a      	cmp	r2, r3
 800523c:	d210      	bcs.n	8005260 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800523e:	4b24      	ldr	r3, [pc, #144]	; (80052d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f023 0207 	bic.w	r2, r3, #7
 8005246:	4922      	ldr	r1, [pc, #136]	; (80052d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	4313      	orrs	r3, r2
 800524c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800524e:	4b20      	ldr	r3, [pc, #128]	; (80052d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0307 	and.w	r3, r3, #7
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d001      	beq.n	8005260 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e032      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b00      	cmp	r3, #0
 800526a:	d008      	beq.n	800527e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800526c:	4b19      	ldr	r3, [pc, #100]	; (80052d4 <HAL_RCC_ClockConfig+0x1c4>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	4916      	ldr	r1, [pc, #88]	; (80052d4 <HAL_RCC_ClockConfig+0x1c4>)
 800527a:	4313      	orrs	r3, r2
 800527c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0308 	and.w	r3, r3, #8
 8005286:	2b00      	cmp	r3, #0
 8005288:	d009      	beq.n	800529e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800528a:	4b12      	ldr	r3, [pc, #72]	; (80052d4 <HAL_RCC_ClockConfig+0x1c4>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	490e      	ldr	r1, [pc, #56]	; (80052d4 <HAL_RCC_ClockConfig+0x1c4>)
 800529a:	4313      	orrs	r3, r2
 800529c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800529e:	f000 f821 	bl	80052e4 <HAL_RCC_GetSysClockFreq>
 80052a2:	4602      	mov	r2, r0
 80052a4:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <HAL_RCC_ClockConfig+0x1c4>)
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	091b      	lsrs	r3, r3, #4
 80052aa:	f003 030f 	and.w	r3, r3, #15
 80052ae:	490a      	ldr	r1, [pc, #40]	; (80052d8 <HAL_RCC_ClockConfig+0x1c8>)
 80052b0:	5ccb      	ldrb	r3, [r1, r3]
 80052b2:	fa22 f303 	lsr.w	r3, r2, r3
 80052b6:	4a09      	ldr	r2, [pc, #36]	; (80052dc <HAL_RCC_ClockConfig+0x1cc>)
 80052b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80052ba:	4b09      	ldr	r3, [pc, #36]	; (80052e0 <HAL_RCC_ClockConfig+0x1d0>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fd fe9c 	bl	8002ffc <HAL_InitTick>

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	40022000 	.word	0x40022000
 80052d4:	40021000 	.word	0x40021000
 80052d8:	0800732c 	.word	0x0800732c
 80052dc:	20000000 	.word	0x20000000
 80052e0:	20000004 	.word	0x20000004

080052e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	2300      	movs	r3, #0
 80052f0:	60bb      	str	r3, [r7, #8]
 80052f2:	2300      	movs	r3, #0
 80052f4:	617b      	str	r3, [r7, #20]
 80052f6:	2300      	movs	r3, #0
 80052f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80052fe:	4b1e      	ldr	r3, [pc, #120]	; (8005378 <HAL_RCC_GetSysClockFreq+0x94>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f003 030c 	and.w	r3, r3, #12
 800530a:	2b04      	cmp	r3, #4
 800530c:	d002      	beq.n	8005314 <HAL_RCC_GetSysClockFreq+0x30>
 800530e:	2b08      	cmp	r3, #8
 8005310:	d003      	beq.n	800531a <HAL_RCC_GetSysClockFreq+0x36>
 8005312:	e027      	b.n	8005364 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005314:	4b19      	ldr	r3, [pc, #100]	; (800537c <HAL_RCC_GetSysClockFreq+0x98>)
 8005316:	613b      	str	r3, [r7, #16]
      break;
 8005318:	e027      	b.n	800536a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	0c9b      	lsrs	r3, r3, #18
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	4a17      	ldr	r2, [pc, #92]	; (8005380 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005324:	5cd3      	ldrb	r3, [r2, r3]
 8005326:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d010      	beq.n	8005354 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005332:	4b11      	ldr	r3, [pc, #68]	; (8005378 <HAL_RCC_GetSysClockFreq+0x94>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	0c5b      	lsrs	r3, r3, #17
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	4a11      	ldr	r2, [pc, #68]	; (8005384 <HAL_RCC_GetSysClockFreq+0xa0>)
 800533e:	5cd3      	ldrb	r3, [r2, r3]
 8005340:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a0d      	ldr	r2, [pc, #52]	; (800537c <HAL_RCC_GetSysClockFreq+0x98>)
 8005346:	fb03 f202 	mul.w	r2, r3, r2
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005350:	617b      	str	r3, [r7, #20]
 8005352:	e004      	b.n	800535e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a0c      	ldr	r2, [pc, #48]	; (8005388 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005358:	fb02 f303 	mul.w	r3, r2, r3
 800535c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	613b      	str	r3, [r7, #16]
      break;
 8005362:	e002      	b.n	800536a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005364:	4b05      	ldr	r3, [pc, #20]	; (800537c <HAL_RCC_GetSysClockFreq+0x98>)
 8005366:	613b      	str	r3, [r7, #16]
      break;
 8005368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800536a:	693b      	ldr	r3, [r7, #16]
}
 800536c:	4618      	mov	r0, r3
 800536e:	371c      	adds	r7, #28
 8005370:	46bd      	mov	sp, r7
 8005372:	bc80      	pop	{r7}
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40021000 	.word	0x40021000
 800537c:	007a1200 	.word	0x007a1200
 8005380:	08007344 	.word	0x08007344
 8005384:	08007354 	.word	0x08007354
 8005388:	003d0900 	.word	0x003d0900

0800538c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005390:	4b02      	ldr	r3, [pc, #8]	; (800539c <HAL_RCC_GetHCLKFreq+0x10>)
 8005392:	681b      	ldr	r3, [r3, #0]
}
 8005394:	4618      	mov	r0, r3
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr
 800539c:	20000000 	.word	0x20000000

080053a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053a4:	f7ff fff2 	bl	800538c <HAL_RCC_GetHCLKFreq>
 80053a8:	4602      	mov	r2, r0
 80053aa:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	0a1b      	lsrs	r3, r3, #8
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	4903      	ldr	r1, [pc, #12]	; (80053c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053b6:	5ccb      	ldrb	r3, [r1, r3]
 80053b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053bc:	4618      	mov	r0, r3
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	40021000 	.word	0x40021000
 80053c4:	0800733c 	.word	0x0800733c

080053c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053cc:	f7ff ffde 	bl	800538c <HAL_RCC_GetHCLKFreq>
 80053d0:	4602      	mov	r2, r0
 80053d2:	4b05      	ldr	r3, [pc, #20]	; (80053e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	0adb      	lsrs	r3, r3, #11
 80053d8:	f003 0307 	and.w	r3, r3, #7
 80053dc:	4903      	ldr	r1, [pc, #12]	; (80053ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80053de:	5ccb      	ldrb	r3, [r1, r3]
 80053e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	40021000 	.word	0x40021000
 80053ec:	0800733c 	.word	0x0800733c

080053f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80053f8:	4b0a      	ldr	r3, [pc, #40]	; (8005424 <RCC_Delay+0x34>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a0a      	ldr	r2, [pc, #40]	; (8005428 <RCC_Delay+0x38>)
 80053fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005402:	0a5b      	lsrs	r3, r3, #9
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	fb02 f303 	mul.w	r3, r2, r3
 800540a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800540c:	bf00      	nop
  }
  while (Delay --);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1e5a      	subs	r2, r3, #1
 8005412:	60fa      	str	r2, [r7, #12]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1f9      	bne.n	800540c <RCC_Delay+0x1c>
}
 8005418:	bf00      	nop
 800541a:	bf00      	nop
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	bc80      	pop	{r7}
 8005422:	4770      	bx	lr
 8005424:	20000000 	.word	0x20000000
 8005428:	10624dd3 	.word	0x10624dd3

0800542c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e042      	b.n	80054c4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7fd fc5e 	bl	8002d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2224      	movs	r2, #36	; 0x24
 800545c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800546e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fdc3 	bl	8005ffc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	691a      	ldr	r2, [r3, #16]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005484:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	695a      	ldr	r2, [r3, #20]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005494:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68da      	ldr	r2, [r3, #12]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2220      	movs	r2, #32
 80054b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b08c      	sub	sp, #48	; 0x30
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	4613      	mov	r3, r2
 80054d8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b20      	cmp	r3, #32
 80054e4:	d156      	bne.n	8005594 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <HAL_UART_Transmit_DMA+0x26>
 80054ec:	88fb      	ldrh	r3, [r7, #6]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e04f      	b.n	8005596 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	88fa      	ldrh	r2, [r7, #6]
 8005500:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	88fa      	ldrh	r2, [r7, #6]
 8005506:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2221      	movs	r2, #33	; 0x21
 8005512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551a:	4a21      	ldr	r2, [pc, #132]	; (80055a0 <HAL_UART_Transmit_DMA+0xd4>)
 800551c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005522:	4a20      	ldr	r2, [pc, #128]	; (80055a4 <HAL_UART_Transmit_DMA+0xd8>)
 8005524:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552a:	4a1f      	ldr	r2, [pc, #124]	; (80055a8 <HAL_UART_Transmit_DMA+0xdc>)
 800552c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005532:	2200      	movs	r2, #0
 8005534:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8005536:	f107 0308 	add.w	r3, r7, #8
 800553a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005542:	6819      	ldr	r1, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3304      	adds	r3, #4
 800554a:	461a      	mov	r2, r3
 800554c:	88fb      	ldrh	r3, [r7, #6]
 800554e:	f7fd ff09 	bl	8003364 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800555a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	3314      	adds	r3, #20
 8005562:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	e853 3f00 	ldrex	r3, [r3]
 800556a:	617b      	str	r3, [r7, #20]
   return(result);
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005572:	62bb      	str	r3, [r7, #40]	; 0x28
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3314      	adds	r3, #20
 800557a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800557c:	627a      	str	r2, [r7, #36]	; 0x24
 800557e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005580:	6a39      	ldr	r1, [r7, #32]
 8005582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005584:	e841 2300 	strex	r3, r2, [r1]
 8005588:	61fb      	str	r3, [r7, #28]
   return(result);
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1e5      	bne.n	800555c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005590:	2300      	movs	r3, #0
 8005592:	e000      	b.n	8005596 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005594:	2302      	movs	r3, #2
  }
}
 8005596:	4618      	mov	r0, r3
 8005598:	3730      	adds	r7, #48	; 0x30
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	08005b2f 	.word	0x08005b2f
 80055a4:	08005bc9 	.word	0x08005bc9
 80055a8:	08005be5 	.word	0x08005be5

080055ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b0ba      	sub	sp, #232	; 0xe8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80055d8:	2300      	movs	r3, #0
 80055da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055e2:	f003 030f 	and.w	r3, r3, #15
 80055e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80055ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10f      	bne.n	8005612 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f6:	f003 0320 	and.w	r3, r3, #32
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d009      	beq.n	8005612 <HAL_UART_IRQHandler+0x66>
 80055fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005602:	f003 0320 	and.w	r3, r3, #32
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fc38 	bl	8005e80 <UART_Receive_IT>
      return;
 8005610:	e25b      	b.n	8005aca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005612:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 80de 	beq.w	80057d8 <HAL_UART_IRQHandler+0x22c>
 800561c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d106      	bne.n	8005636 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800562c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 80d1 	beq.w	80057d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00b      	beq.n	800565a <HAL_UART_IRQHandler+0xae>
 8005642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564a:	2b00      	cmp	r3, #0
 800564c:	d005      	beq.n	800565a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005652:	f043 0201 	orr.w	r2, r3, #1
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800565a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800565e:	f003 0304 	and.w	r3, r3, #4
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00b      	beq.n	800567e <HAL_UART_IRQHandler+0xd2>
 8005666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d005      	beq.n	800567e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005676:	f043 0202 	orr.w	r2, r3, #2
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800567e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00b      	beq.n	80056a2 <HAL_UART_IRQHandler+0xf6>
 800568a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d005      	beq.n	80056a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569a:	f043 0204 	orr.w	r2, r3, #4
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056a6:	f003 0308 	and.w	r3, r3, #8
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d011      	beq.n	80056d2 <HAL_UART_IRQHandler+0x126>
 80056ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056b2:	f003 0320 	and.w	r3, r3, #32
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d105      	bne.n	80056c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80056ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d005      	beq.n	80056d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ca:	f043 0208 	orr.w	r2, r3, #8
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f000 81f2 	beq.w	8005ac0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056e0:	f003 0320 	and.w	r3, r3, #32
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d008      	beq.n	80056fa <HAL_UART_IRQHandler+0x14e>
 80056e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ec:	f003 0320 	and.w	r3, r3, #32
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 fbc3 	bl	8005e80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005704:	2b00      	cmp	r3, #0
 8005706:	bf14      	ite	ne
 8005708:	2301      	movne	r3, #1
 800570a:	2300      	moveq	r3, #0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005716:	f003 0308 	and.w	r3, r3, #8
 800571a:	2b00      	cmp	r3, #0
 800571c:	d103      	bne.n	8005726 <HAL_UART_IRQHandler+0x17a>
 800571e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005722:	2b00      	cmp	r3, #0
 8005724:	d04f      	beq.n	80057c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 facd 	bl	8005cc6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005736:	2b00      	cmp	r3, #0
 8005738:	d041      	beq.n	80057be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3314      	adds	r3, #20
 8005740:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005744:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005748:	e853 3f00 	ldrex	r3, [r3]
 800574c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005750:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005758:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	3314      	adds	r3, #20
 8005762:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005766:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800576a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005772:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005776:	e841 2300 	strex	r3, r2, [r1]
 800577a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800577e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1d9      	bne.n	800573a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578a:	2b00      	cmp	r3, #0
 800578c:	d013      	beq.n	80057b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005792:	4a7e      	ldr	r2, [pc, #504]	; (800598c <HAL_UART_IRQHandler+0x3e0>)
 8005794:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579a:	4618      	mov	r0, r3
 800579c:	f7fd fe7e 	bl	800349c <HAL_DMA_Abort_IT>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d016      	beq.n	80057d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80057b0:	4610      	mov	r0, r2
 80057b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b4:	e00e      	b.n	80057d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f9a5 	bl	8005b06 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057bc:	e00a      	b.n	80057d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f9a1 	bl	8005b06 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c4:	e006      	b.n	80057d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f99d 	bl	8005b06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80057d2:	e175      	b.n	8005ac0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d4:	bf00      	nop
    return;
 80057d6:	e173      	b.n	8005ac0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057dc:	2b01      	cmp	r3, #1
 80057de:	f040 814f 	bne.w	8005a80 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80057e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e6:	f003 0310 	and.w	r3, r3, #16
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f000 8148 	beq.w	8005a80 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80057f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057f4:	f003 0310 	and.w	r3, r3, #16
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 8141 	beq.w	8005a80 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057fe:	2300      	movs	r3, #0
 8005800:	60bb      	str	r3, [r7, #8]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	60bb      	str	r3, [r7, #8]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	60bb      	str	r3, [r7, #8]
 8005812:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 80b6 	beq.w	8005990 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005830:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 8145 	beq.w	8005ac4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800583e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005842:	429a      	cmp	r2, r3
 8005844:	f080 813e 	bcs.w	8005ac4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800584e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	2b20      	cmp	r3, #32
 8005858:	f000 8088 	beq.w	800596c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	330c      	adds	r3, #12
 8005862:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005866:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800586a:	e853 3f00 	ldrex	r3, [r3]
 800586e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005872:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005876:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800587a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	330c      	adds	r3, #12
 8005884:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005888:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800588c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005890:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005894:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005898:	e841 2300 	strex	r3, r2, [r1]
 800589c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80058a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1d9      	bne.n	800585c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3314      	adds	r3, #20
 80058ae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058b2:	e853 3f00 	ldrex	r3, [r3]
 80058b6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80058b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058ba:	f023 0301 	bic.w	r3, r3, #1
 80058be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	3314      	adds	r3, #20
 80058c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058cc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80058d0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80058d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80058d8:	e841 2300 	strex	r3, r2, [r1]
 80058dc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80058de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1e1      	bne.n	80058a8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3314      	adds	r3, #20
 80058ea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058ee:	e853 3f00 	ldrex	r3, [r3]
 80058f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80058f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3314      	adds	r3, #20
 8005904:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005908:	66fa      	str	r2, [r7, #108]	; 0x6c
 800590a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800590e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005910:	e841 2300 	strex	r3, r2, [r1]
 8005914:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005916:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1e3      	bne.n	80058e4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	330c      	adds	r3, #12
 8005930:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005934:	e853 3f00 	ldrex	r3, [r3]
 8005938:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800593a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800593c:	f023 0310 	bic.w	r3, r3, #16
 8005940:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	330c      	adds	r3, #12
 800594a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800594e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005950:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005952:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005954:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800595c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e3      	bne.n	800592a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005966:	4618      	mov	r0, r3
 8005968:	f7fd fd5c 	bl	8003424 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2202      	movs	r2, #2
 8005970:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800597a:	b29b      	uxth	r3, r3
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	b29b      	uxth	r3, r3
 8005980:	4619      	mov	r1, r3
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f8c8 	bl	8005b18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005988:	e09c      	b.n	8005ac4 <HAL_UART_IRQHandler+0x518>
 800598a:	bf00      	nop
 800598c:	08005d8b 	.word	0x08005d8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005998:	b29b      	uxth	r3, r3
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 808e 	beq.w	8005ac8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80059ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 8089 	beq.w	8005ac8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	330c      	adds	r3, #12
 80059bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c0:	e853 3f00 	ldrex	r3, [r3]
 80059c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	330c      	adds	r3, #12
 80059d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80059da:	647a      	str	r2, [r7, #68]	; 0x44
 80059dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059e2:	e841 2300 	strex	r3, r2, [r1]
 80059e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1e3      	bne.n	80059b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3314      	adds	r3, #20
 80059f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	e853 3f00 	ldrex	r3, [r3]
 80059fc:	623b      	str	r3, [r7, #32]
   return(result);
 80059fe:	6a3b      	ldr	r3, [r7, #32]
 8005a00:	f023 0301 	bic.w	r3, r3, #1
 8005a04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	3314      	adds	r3, #20
 8005a0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a12:	633a      	str	r2, [r7, #48]	; 0x30
 8005a14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1e3      	bne.n	80059ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	330c      	adds	r3, #12
 8005a3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	e853 3f00 	ldrex	r3, [r3]
 8005a42:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 0310 	bic.w	r3, r3, #16
 8005a4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	330c      	adds	r3, #12
 8005a54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005a58:	61fa      	str	r2, [r7, #28]
 8005a5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5c:	69b9      	ldr	r1, [r7, #24]
 8005a5e:	69fa      	ldr	r2, [r7, #28]
 8005a60:	e841 2300 	strex	r3, r2, [r1]
 8005a64:	617b      	str	r3, [r7, #20]
   return(result);
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1e3      	bne.n	8005a34 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a76:	4619      	mov	r1, r3
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f84d 	bl	8005b18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a7e:	e023      	b.n	8005ac8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d009      	beq.n	8005aa0 <HAL_UART_IRQHandler+0x4f4>
 8005a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f98a 	bl	8005db2 <UART_Transmit_IT>
    return;
 8005a9e:	e014      	b.n	8005aca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00e      	beq.n	8005aca <HAL_UART_IRQHandler+0x51e>
 8005aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d008      	beq.n	8005aca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f9c9 	bl	8005e50 <UART_EndTransmit_IT>
    return;
 8005abe:	e004      	b.n	8005aca <HAL_UART_IRQHandler+0x51e>
    return;
 8005ac0:	bf00      	nop
 8005ac2:	e002      	b.n	8005aca <HAL_UART_IRQHandler+0x51e>
      return;
 8005ac4:	bf00      	nop
 8005ac6:	e000      	b.n	8005aca <HAL_UART_IRQHandler+0x51e>
      return;
 8005ac8:	bf00      	nop
  }
}
 8005aca:	37e8      	adds	r7, #232	; 0xe8
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bc80      	pop	{r7}
 8005ae0:	4770      	bx	lr

08005ae2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005aea:	bf00      	nop
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bc80      	pop	{r7}
 8005af2:	4770      	bx	lr

08005af4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bc80      	pop	{r7}
 8005b04:	4770      	bx	lr

08005b06 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b083      	sub	sp, #12
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b0e:	bf00      	nop
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bc80      	pop	{r7}
 8005b16:	4770      	bx	lr

08005b18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	460b      	mov	r3, r1
 8005b22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bc80      	pop	{r7}
 8005b2c:	4770      	bx	lr

08005b2e <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b090      	sub	sp, #64	; 0x40
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d137      	bne.n	8005bba <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3314      	adds	r3, #20
 8005b56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	e853 3f00 	ldrex	r3, [r3]
 8005b5e:	623b      	str	r3, [r7, #32]
   return(result);
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b66:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3314      	adds	r3, #20
 8005b6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b70:	633a      	str	r2, [r7, #48]	; 0x30
 8005b72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b78:	e841 2300 	strex	r3, r2, [r1]
 8005b7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1e5      	bne.n	8005b50 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	330c      	adds	r3, #12
 8005b8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	e853 3f00 	ldrex	r3, [r3]
 8005b92:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	330c      	adds	r3, #12
 8005ba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ba4:	61fa      	str	r2, [r7, #28]
 8005ba6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba8:	69b9      	ldr	r1, [r7, #24]
 8005baa:	69fa      	ldr	r2, [r7, #28]
 8005bac:	e841 2300 	strex	r3, r2, [r1]
 8005bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1e5      	bne.n	8005b84 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005bb8:	e002      	b.n	8005bc0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005bba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005bbc:	f7ff ff88 	bl	8005ad0 <HAL_UART_TxCpltCallback>
}
 8005bc0:	bf00      	nop
 8005bc2:	3740      	adds	r7, #64	; 0x40
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f7ff ff83 	bl	8005ae2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bdc:	bf00      	nop
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	bf14      	ite	ne
 8005c04:	2301      	movne	r3, #1
 8005c06:	2300      	moveq	r3, #0
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b21      	cmp	r3, #33	; 0x21
 8005c16:	d108      	bne.n	8005c2a <UART_DMAError+0x46>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d005      	beq.n	8005c2a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2200      	movs	r2, #0
 8005c22:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005c24:	68b8      	ldr	r0, [r7, #8]
 8005c26:	f000 f827 	bl	8005c78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	bf14      	ite	ne
 8005c38:	2301      	movne	r3, #1
 8005c3a:	2300      	moveq	r3, #0
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b22      	cmp	r3, #34	; 0x22
 8005c4a:	d108      	bne.n	8005c5e <UART_DMAError+0x7a>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d005      	beq.n	8005c5e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2200      	movs	r2, #0
 8005c56:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005c58:	68b8      	ldr	r0, [r7, #8]
 8005c5a:	f000 f834 	bl	8005cc6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c62:	f043 0210 	orr.w	r2, r3, #16
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c6a:	68b8      	ldr	r0, [r7, #8]
 8005c6c:	f7ff ff4b 	bl	8005b06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c70:	bf00      	nop
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b089      	sub	sp, #36	; 0x24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	330c      	adds	r3, #12
 8005c86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	e853 3f00 	ldrex	r3, [r3]
 8005c8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c96:	61fb      	str	r3, [r7, #28]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	330c      	adds	r3, #12
 8005c9e:	69fa      	ldr	r2, [r7, #28]
 8005ca0:	61ba      	str	r2, [r7, #24]
 8005ca2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca4:	6979      	ldr	r1, [r7, #20]
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	e841 2300 	strex	r3, r2, [r1]
 8005cac:	613b      	str	r3, [r7, #16]
   return(result);
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1e5      	bne.n	8005c80 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005cbc:	bf00      	nop
 8005cbe:	3724      	adds	r7, #36	; 0x24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bc80      	pop	{r7}
 8005cc4:	4770      	bx	lr

08005cc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b095      	sub	sp, #84	; 0x54
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	330c      	adds	r3, #12
 8005cd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd8:	e853 3f00 	ldrex	r3, [r3]
 8005cdc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	330c      	adds	r3, #12
 8005cec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cee:	643a      	str	r2, [r7, #64]	; 0x40
 8005cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cf6:	e841 2300 	strex	r3, r2, [r1]
 8005cfa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1e5      	bne.n	8005cce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3314      	adds	r3, #20
 8005d08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	f023 0301 	bic.w	r3, r3, #1
 8005d18:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	3314      	adds	r3, #20
 8005d20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d2a:	e841 2300 	strex	r3, r2, [r1]
 8005d2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1e5      	bne.n	8005d02 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d119      	bne.n	8005d72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	330c      	adds	r3, #12
 8005d44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	e853 3f00 	ldrex	r3, [r3]
 8005d4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f023 0310 	bic.w	r3, r3, #16
 8005d54:	647b      	str	r3, [r7, #68]	; 0x44
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	330c      	adds	r3, #12
 8005d5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d5e:	61ba      	str	r2, [r7, #24]
 8005d60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d62:	6979      	ldr	r1, [r7, #20]
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	e841 2300 	strex	r3, r2, [r1]
 8005d6a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1e5      	bne.n	8005d3e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d80:	bf00      	nop
 8005d82:	3754      	adds	r7, #84	; 0x54
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bc80      	pop	{r7}
 8005d88:	4770      	bx	lr

08005d8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f7ff feae 	bl	8005b06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005daa:	bf00      	nop
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b085      	sub	sp, #20
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b21      	cmp	r3, #33	; 0x21
 8005dc4:	d13e      	bne.n	8005e44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dce:	d114      	bne.n	8005dfa <UART_Transmit_IT+0x48>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d110      	bne.n	8005dfa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	881b      	ldrh	r3, [r3, #0]
 8005de2:	461a      	mov	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	1c9a      	adds	r2, r3, #2
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	621a      	str	r2, [r3, #32]
 8005df8:	e008      	b.n	8005e0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	1c59      	adds	r1, r3, #1
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	6211      	str	r1, [r2, #32]
 8005e04:	781a      	ldrb	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	3b01      	subs	r3, #1
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	4619      	mov	r1, r3
 8005e1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10f      	bne.n	8005e40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68da      	ldr	r2, [r3, #12]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e40:	2300      	movs	r3, #0
 8005e42:	e000      	b.n	8005e46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e44:	2302      	movs	r3, #2
  }
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bc80      	pop	{r7}
 8005e4e:	4770      	bx	lr

08005e50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7ff fe2d 	bl	8005ad0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08c      	sub	sp, #48	; 0x30
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b22      	cmp	r3, #34	; 0x22
 8005e92:	f040 80ae 	bne.w	8005ff2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e9e:	d117      	bne.n	8005ed0 <UART_Receive_IT+0x50>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d113      	bne.n	8005ed0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec8:	1c9a      	adds	r2, r3, #2
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	629a      	str	r2, [r3, #40]	; 0x28
 8005ece:	e026      	b.n	8005f1e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee2:	d007      	beq.n	8005ef4 <UART_Receive_IT+0x74>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10a      	bne.n	8005f02 <UART_Receive_IT+0x82>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d106      	bne.n	8005f02 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efe:	701a      	strb	r2, [r3, #0]
 8005f00:	e008      	b.n	8005f14 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f12:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d15d      	bne.n	8005fee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0220 	bic.w	r2, r2, #32
 8005f40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68da      	ldr	r2, [r3, #12]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	695a      	ldr	r2, [r3, #20]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0201 	bic.w	r2, r2, #1
 8005f60:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2220      	movs	r2, #32
 8005f66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d135      	bne.n	8005fe4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	330c      	adds	r3, #12
 8005f84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	e853 3f00 	ldrex	r3, [r3]
 8005f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f023 0310 	bic.w	r3, r3, #16
 8005f94:	627b      	str	r3, [r7, #36]	; 0x24
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	330c      	adds	r3, #12
 8005f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f9e:	623a      	str	r2, [r7, #32]
 8005fa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa2:	69f9      	ldr	r1, [r7, #28]
 8005fa4:	6a3a      	ldr	r2, [r7, #32]
 8005fa6:	e841 2300 	strex	r3, r2, [r1]
 8005faa:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1e5      	bne.n	8005f7e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0310 	and.w	r3, r3, #16
 8005fbc:	2b10      	cmp	r3, #16
 8005fbe:	d10a      	bne.n	8005fd6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fda:	4619      	mov	r1, r3
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7ff fd9b 	bl	8005b18 <HAL_UARTEx_RxEventCallback>
 8005fe2:	e002      	b.n	8005fea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff fd85 	bl	8005af4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	e002      	b.n	8005ff4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	e000      	b.n	8005ff4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005ff2:	2302      	movs	r3, #2
  }
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3730      	adds	r7, #48	; 0x30
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	689a      	ldr	r2, [r3, #8]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	431a      	orrs	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	4313      	orrs	r3, r2
 800602a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006036:	f023 030c 	bic.w	r3, r3, #12
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	6812      	ldr	r2, [r2, #0]
 800603e:	68b9      	ldr	r1, [r7, #8]
 8006040:	430b      	orrs	r3, r1
 8006042:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	699a      	ldr	r2, [r3, #24]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a2c      	ldr	r2, [pc, #176]	; (8006110 <UART_SetConfig+0x114>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d103      	bne.n	800606c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006064:	f7ff f9b0 	bl	80053c8 <HAL_RCC_GetPCLK2Freq>
 8006068:	60f8      	str	r0, [r7, #12]
 800606a:	e002      	b.n	8006072 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800606c:	f7ff f998 	bl	80053a0 <HAL_RCC_GetPCLK1Freq>
 8006070:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	4613      	mov	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	009a      	lsls	r2, r3, #2
 800607c:	441a      	add	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	fbb2 f3f3 	udiv	r3, r2, r3
 8006088:	4a22      	ldr	r2, [pc, #136]	; (8006114 <UART_SetConfig+0x118>)
 800608a:	fba2 2303 	umull	r2, r3, r2, r3
 800608e:	095b      	lsrs	r3, r3, #5
 8006090:	0119      	lsls	r1, r3, #4
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	4613      	mov	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	009a      	lsls	r2, r3, #2
 800609c:	441a      	add	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80060a8:	4b1a      	ldr	r3, [pc, #104]	; (8006114 <UART_SetConfig+0x118>)
 80060aa:	fba3 0302 	umull	r0, r3, r3, r2
 80060ae:	095b      	lsrs	r3, r3, #5
 80060b0:	2064      	movs	r0, #100	; 0x64
 80060b2:	fb00 f303 	mul.w	r3, r0, r3
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	011b      	lsls	r3, r3, #4
 80060ba:	3332      	adds	r3, #50	; 0x32
 80060bc:	4a15      	ldr	r2, [pc, #84]	; (8006114 <UART_SetConfig+0x118>)
 80060be:	fba2 2303 	umull	r2, r3, r2, r3
 80060c2:	095b      	lsrs	r3, r3, #5
 80060c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060c8:	4419      	add	r1, r3
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	4613      	mov	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	009a      	lsls	r2, r3, #2
 80060d4:	441a      	add	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80060e0:	4b0c      	ldr	r3, [pc, #48]	; (8006114 <UART_SetConfig+0x118>)
 80060e2:	fba3 0302 	umull	r0, r3, r3, r2
 80060e6:	095b      	lsrs	r3, r3, #5
 80060e8:	2064      	movs	r0, #100	; 0x64
 80060ea:	fb00 f303 	mul.w	r3, r0, r3
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	011b      	lsls	r3, r3, #4
 80060f2:	3332      	adds	r3, #50	; 0x32
 80060f4:	4a07      	ldr	r2, [pc, #28]	; (8006114 <UART_SetConfig+0x118>)
 80060f6:	fba2 2303 	umull	r2, r3, r2, r3
 80060fa:	095b      	lsrs	r3, r3, #5
 80060fc:	f003 020f 	and.w	r2, r3, #15
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	440a      	add	r2, r1
 8006106:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006108:	bf00      	nop
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	40013800 	.word	0x40013800
 8006114:	51eb851f 	.word	0x51eb851f

08006118 <__errno>:
 8006118:	4b01      	ldr	r3, [pc, #4]	; (8006120 <__errno+0x8>)
 800611a:	6818      	ldr	r0, [r3, #0]
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	2000000c 	.word	0x2000000c

08006124 <__libc_init_array>:
 8006124:	b570      	push	{r4, r5, r6, lr}
 8006126:	2600      	movs	r6, #0
 8006128:	4d0c      	ldr	r5, [pc, #48]	; (800615c <__libc_init_array+0x38>)
 800612a:	4c0d      	ldr	r4, [pc, #52]	; (8006160 <__libc_init_array+0x3c>)
 800612c:	1b64      	subs	r4, r4, r5
 800612e:	10a4      	asrs	r4, r4, #2
 8006130:	42a6      	cmp	r6, r4
 8006132:	d109      	bne.n	8006148 <__libc_init_array+0x24>
 8006134:	f001 f81e 	bl	8007174 <_init>
 8006138:	2600      	movs	r6, #0
 800613a:	4d0a      	ldr	r5, [pc, #40]	; (8006164 <__libc_init_array+0x40>)
 800613c:	4c0a      	ldr	r4, [pc, #40]	; (8006168 <__libc_init_array+0x44>)
 800613e:	1b64      	subs	r4, r4, r5
 8006140:	10a4      	asrs	r4, r4, #2
 8006142:	42a6      	cmp	r6, r4
 8006144:	d105      	bne.n	8006152 <__libc_init_array+0x2e>
 8006146:	bd70      	pop	{r4, r5, r6, pc}
 8006148:	f855 3b04 	ldr.w	r3, [r5], #4
 800614c:	4798      	blx	r3
 800614e:	3601      	adds	r6, #1
 8006150:	e7ee      	b.n	8006130 <__libc_init_array+0xc>
 8006152:	f855 3b04 	ldr.w	r3, [r5], #4
 8006156:	4798      	blx	r3
 8006158:	3601      	adds	r6, #1
 800615a:	e7f2      	b.n	8006142 <__libc_init_array+0x1e>
 800615c:	08007388 	.word	0x08007388
 8006160:	08007388 	.word	0x08007388
 8006164:	08007388 	.word	0x08007388
 8006168:	0800738c 	.word	0x0800738c

0800616c <malloc>:
 800616c:	4b02      	ldr	r3, [pc, #8]	; (8006178 <malloc+0xc>)
 800616e:	4601      	mov	r1, r0
 8006170:	6818      	ldr	r0, [r3, #0]
 8006172:	f000 b889 	b.w	8006288 <_malloc_r>
 8006176:	bf00      	nop
 8006178:	2000000c 	.word	0x2000000c

0800617c <free>:
 800617c:	4b02      	ldr	r3, [pc, #8]	; (8006188 <free+0xc>)
 800617e:	4601      	mov	r1, r0
 8006180:	6818      	ldr	r0, [r3, #0]
 8006182:	f000 b819 	b.w	80061b8 <_free_r>
 8006186:	bf00      	nop
 8006188:	2000000c 	.word	0x2000000c

0800618c <memcpy>:
 800618c:	440a      	add	r2, r1
 800618e:	4291      	cmp	r1, r2
 8006190:	f100 33ff 	add.w	r3, r0, #4294967295
 8006194:	d100      	bne.n	8006198 <memcpy+0xc>
 8006196:	4770      	bx	lr
 8006198:	b510      	push	{r4, lr}
 800619a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800619e:	4291      	cmp	r1, r2
 80061a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061a4:	d1f9      	bne.n	800619a <memcpy+0xe>
 80061a6:	bd10      	pop	{r4, pc}

080061a8 <memset>:
 80061a8:	4603      	mov	r3, r0
 80061aa:	4402      	add	r2, r0
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d100      	bne.n	80061b2 <memset+0xa>
 80061b0:	4770      	bx	lr
 80061b2:	f803 1b01 	strb.w	r1, [r3], #1
 80061b6:	e7f9      	b.n	80061ac <memset+0x4>

080061b8 <_free_r>:
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	4605      	mov	r5, r0
 80061bc:	2900      	cmp	r1, #0
 80061be:	d040      	beq.n	8006242 <_free_r+0x8a>
 80061c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061c4:	1f0c      	subs	r4, r1, #4
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	bfb8      	it	lt
 80061ca:	18e4      	addlt	r4, r4, r3
 80061cc:	f000 f8e0 	bl	8006390 <__malloc_lock>
 80061d0:	4a1c      	ldr	r2, [pc, #112]	; (8006244 <_free_r+0x8c>)
 80061d2:	6813      	ldr	r3, [r2, #0]
 80061d4:	b933      	cbnz	r3, 80061e4 <_free_r+0x2c>
 80061d6:	6063      	str	r3, [r4, #4]
 80061d8:	6014      	str	r4, [r2, #0]
 80061da:	4628      	mov	r0, r5
 80061dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061e0:	f000 b8dc 	b.w	800639c <__malloc_unlock>
 80061e4:	42a3      	cmp	r3, r4
 80061e6:	d908      	bls.n	80061fa <_free_r+0x42>
 80061e8:	6820      	ldr	r0, [r4, #0]
 80061ea:	1821      	adds	r1, r4, r0
 80061ec:	428b      	cmp	r3, r1
 80061ee:	bf01      	itttt	eq
 80061f0:	6819      	ldreq	r1, [r3, #0]
 80061f2:	685b      	ldreq	r3, [r3, #4]
 80061f4:	1809      	addeq	r1, r1, r0
 80061f6:	6021      	streq	r1, [r4, #0]
 80061f8:	e7ed      	b.n	80061d6 <_free_r+0x1e>
 80061fa:	461a      	mov	r2, r3
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	b10b      	cbz	r3, 8006204 <_free_r+0x4c>
 8006200:	42a3      	cmp	r3, r4
 8006202:	d9fa      	bls.n	80061fa <_free_r+0x42>
 8006204:	6811      	ldr	r1, [r2, #0]
 8006206:	1850      	adds	r0, r2, r1
 8006208:	42a0      	cmp	r0, r4
 800620a:	d10b      	bne.n	8006224 <_free_r+0x6c>
 800620c:	6820      	ldr	r0, [r4, #0]
 800620e:	4401      	add	r1, r0
 8006210:	1850      	adds	r0, r2, r1
 8006212:	4283      	cmp	r3, r0
 8006214:	6011      	str	r1, [r2, #0]
 8006216:	d1e0      	bne.n	80061da <_free_r+0x22>
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	4401      	add	r1, r0
 800621e:	6011      	str	r1, [r2, #0]
 8006220:	6053      	str	r3, [r2, #4]
 8006222:	e7da      	b.n	80061da <_free_r+0x22>
 8006224:	d902      	bls.n	800622c <_free_r+0x74>
 8006226:	230c      	movs	r3, #12
 8006228:	602b      	str	r3, [r5, #0]
 800622a:	e7d6      	b.n	80061da <_free_r+0x22>
 800622c:	6820      	ldr	r0, [r4, #0]
 800622e:	1821      	adds	r1, r4, r0
 8006230:	428b      	cmp	r3, r1
 8006232:	bf01      	itttt	eq
 8006234:	6819      	ldreq	r1, [r3, #0]
 8006236:	685b      	ldreq	r3, [r3, #4]
 8006238:	1809      	addeq	r1, r1, r0
 800623a:	6021      	streq	r1, [r4, #0]
 800623c:	6063      	str	r3, [r4, #4]
 800623e:	6054      	str	r4, [r2, #4]
 8006240:	e7cb      	b.n	80061da <_free_r+0x22>
 8006242:	bd38      	pop	{r3, r4, r5, pc}
 8006244:	20000440 	.word	0x20000440

08006248 <sbrk_aligned>:
 8006248:	b570      	push	{r4, r5, r6, lr}
 800624a:	4e0e      	ldr	r6, [pc, #56]	; (8006284 <sbrk_aligned+0x3c>)
 800624c:	460c      	mov	r4, r1
 800624e:	6831      	ldr	r1, [r6, #0]
 8006250:	4605      	mov	r5, r0
 8006252:	b911      	cbnz	r1, 800625a <sbrk_aligned+0x12>
 8006254:	f000 f88c 	bl	8006370 <_sbrk_r>
 8006258:	6030      	str	r0, [r6, #0]
 800625a:	4621      	mov	r1, r4
 800625c:	4628      	mov	r0, r5
 800625e:	f000 f887 	bl	8006370 <_sbrk_r>
 8006262:	1c43      	adds	r3, r0, #1
 8006264:	d00a      	beq.n	800627c <sbrk_aligned+0x34>
 8006266:	1cc4      	adds	r4, r0, #3
 8006268:	f024 0403 	bic.w	r4, r4, #3
 800626c:	42a0      	cmp	r0, r4
 800626e:	d007      	beq.n	8006280 <sbrk_aligned+0x38>
 8006270:	1a21      	subs	r1, r4, r0
 8006272:	4628      	mov	r0, r5
 8006274:	f000 f87c 	bl	8006370 <_sbrk_r>
 8006278:	3001      	adds	r0, #1
 800627a:	d101      	bne.n	8006280 <sbrk_aligned+0x38>
 800627c:	f04f 34ff 	mov.w	r4, #4294967295
 8006280:	4620      	mov	r0, r4
 8006282:	bd70      	pop	{r4, r5, r6, pc}
 8006284:	20000444 	.word	0x20000444

08006288 <_malloc_r>:
 8006288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800628c:	1ccd      	adds	r5, r1, #3
 800628e:	f025 0503 	bic.w	r5, r5, #3
 8006292:	3508      	adds	r5, #8
 8006294:	2d0c      	cmp	r5, #12
 8006296:	bf38      	it	cc
 8006298:	250c      	movcc	r5, #12
 800629a:	2d00      	cmp	r5, #0
 800629c:	4607      	mov	r7, r0
 800629e:	db01      	blt.n	80062a4 <_malloc_r+0x1c>
 80062a0:	42a9      	cmp	r1, r5
 80062a2:	d905      	bls.n	80062b0 <_malloc_r+0x28>
 80062a4:	230c      	movs	r3, #12
 80062a6:	2600      	movs	r6, #0
 80062a8:	603b      	str	r3, [r7, #0]
 80062aa:	4630      	mov	r0, r6
 80062ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062b0:	4e2e      	ldr	r6, [pc, #184]	; (800636c <_malloc_r+0xe4>)
 80062b2:	f000 f86d 	bl	8006390 <__malloc_lock>
 80062b6:	6833      	ldr	r3, [r6, #0]
 80062b8:	461c      	mov	r4, r3
 80062ba:	bb34      	cbnz	r4, 800630a <_malloc_r+0x82>
 80062bc:	4629      	mov	r1, r5
 80062be:	4638      	mov	r0, r7
 80062c0:	f7ff ffc2 	bl	8006248 <sbrk_aligned>
 80062c4:	1c43      	adds	r3, r0, #1
 80062c6:	4604      	mov	r4, r0
 80062c8:	d14d      	bne.n	8006366 <_malloc_r+0xde>
 80062ca:	6834      	ldr	r4, [r6, #0]
 80062cc:	4626      	mov	r6, r4
 80062ce:	2e00      	cmp	r6, #0
 80062d0:	d140      	bne.n	8006354 <_malloc_r+0xcc>
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	4631      	mov	r1, r6
 80062d6:	4638      	mov	r0, r7
 80062d8:	eb04 0803 	add.w	r8, r4, r3
 80062dc:	f000 f848 	bl	8006370 <_sbrk_r>
 80062e0:	4580      	cmp	r8, r0
 80062e2:	d13a      	bne.n	800635a <_malloc_r+0xd2>
 80062e4:	6821      	ldr	r1, [r4, #0]
 80062e6:	3503      	adds	r5, #3
 80062e8:	1a6d      	subs	r5, r5, r1
 80062ea:	f025 0503 	bic.w	r5, r5, #3
 80062ee:	3508      	adds	r5, #8
 80062f0:	2d0c      	cmp	r5, #12
 80062f2:	bf38      	it	cc
 80062f4:	250c      	movcc	r5, #12
 80062f6:	4638      	mov	r0, r7
 80062f8:	4629      	mov	r1, r5
 80062fa:	f7ff ffa5 	bl	8006248 <sbrk_aligned>
 80062fe:	3001      	adds	r0, #1
 8006300:	d02b      	beq.n	800635a <_malloc_r+0xd2>
 8006302:	6823      	ldr	r3, [r4, #0]
 8006304:	442b      	add	r3, r5
 8006306:	6023      	str	r3, [r4, #0]
 8006308:	e00e      	b.n	8006328 <_malloc_r+0xa0>
 800630a:	6822      	ldr	r2, [r4, #0]
 800630c:	1b52      	subs	r2, r2, r5
 800630e:	d41e      	bmi.n	800634e <_malloc_r+0xc6>
 8006310:	2a0b      	cmp	r2, #11
 8006312:	d916      	bls.n	8006342 <_malloc_r+0xba>
 8006314:	1961      	adds	r1, r4, r5
 8006316:	42a3      	cmp	r3, r4
 8006318:	6025      	str	r5, [r4, #0]
 800631a:	bf18      	it	ne
 800631c:	6059      	strne	r1, [r3, #4]
 800631e:	6863      	ldr	r3, [r4, #4]
 8006320:	bf08      	it	eq
 8006322:	6031      	streq	r1, [r6, #0]
 8006324:	5162      	str	r2, [r4, r5]
 8006326:	604b      	str	r3, [r1, #4]
 8006328:	4638      	mov	r0, r7
 800632a:	f104 060b 	add.w	r6, r4, #11
 800632e:	f000 f835 	bl	800639c <__malloc_unlock>
 8006332:	f026 0607 	bic.w	r6, r6, #7
 8006336:	1d23      	adds	r3, r4, #4
 8006338:	1af2      	subs	r2, r6, r3
 800633a:	d0b6      	beq.n	80062aa <_malloc_r+0x22>
 800633c:	1b9b      	subs	r3, r3, r6
 800633e:	50a3      	str	r3, [r4, r2]
 8006340:	e7b3      	b.n	80062aa <_malloc_r+0x22>
 8006342:	6862      	ldr	r2, [r4, #4]
 8006344:	42a3      	cmp	r3, r4
 8006346:	bf0c      	ite	eq
 8006348:	6032      	streq	r2, [r6, #0]
 800634a:	605a      	strne	r2, [r3, #4]
 800634c:	e7ec      	b.n	8006328 <_malloc_r+0xa0>
 800634e:	4623      	mov	r3, r4
 8006350:	6864      	ldr	r4, [r4, #4]
 8006352:	e7b2      	b.n	80062ba <_malloc_r+0x32>
 8006354:	4634      	mov	r4, r6
 8006356:	6876      	ldr	r6, [r6, #4]
 8006358:	e7b9      	b.n	80062ce <_malloc_r+0x46>
 800635a:	230c      	movs	r3, #12
 800635c:	4638      	mov	r0, r7
 800635e:	603b      	str	r3, [r7, #0]
 8006360:	f000 f81c 	bl	800639c <__malloc_unlock>
 8006364:	e7a1      	b.n	80062aa <_malloc_r+0x22>
 8006366:	6025      	str	r5, [r4, #0]
 8006368:	e7de      	b.n	8006328 <_malloc_r+0xa0>
 800636a:	bf00      	nop
 800636c:	20000440 	.word	0x20000440

08006370 <_sbrk_r>:
 8006370:	b538      	push	{r3, r4, r5, lr}
 8006372:	2300      	movs	r3, #0
 8006374:	4d05      	ldr	r5, [pc, #20]	; (800638c <_sbrk_r+0x1c>)
 8006376:	4604      	mov	r4, r0
 8006378:	4608      	mov	r0, r1
 800637a:	602b      	str	r3, [r5, #0]
 800637c:	f7fc fdc6 	bl	8002f0c <_sbrk>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	d102      	bne.n	800638a <_sbrk_r+0x1a>
 8006384:	682b      	ldr	r3, [r5, #0]
 8006386:	b103      	cbz	r3, 800638a <_sbrk_r+0x1a>
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	bd38      	pop	{r3, r4, r5, pc}
 800638c:	20000448 	.word	0x20000448

08006390 <__malloc_lock>:
 8006390:	4801      	ldr	r0, [pc, #4]	; (8006398 <__malloc_lock+0x8>)
 8006392:	f000 b809 	b.w	80063a8 <__retarget_lock_acquire_recursive>
 8006396:	bf00      	nop
 8006398:	2000044c 	.word	0x2000044c

0800639c <__malloc_unlock>:
 800639c:	4801      	ldr	r0, [pc, #4]	; (80063a4 <__malloc_unlock+0x8>)
 800639e:	f000 b804 	b.w	80063aa <__retarget_lock_release_recursive>
 80063a2:	bf00      	nop
 80063a4:	2000044c 	.word	0x2000044c

080063a8 <__retarget_lock_acquire_recursive>:
 80063a8:	4770      	bx	lr

080063aa <__retarget_lock_release_recursive>:
 80063aa:	4770      	bx	lr

080063ac <pow>:
 80063ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063b0:	4614      	mov	r4, r2
 80063b2:	461d      	mov	r5, r3
 80063b4:	4680      	mov	r8, r0
 80063b6:	4689      	mov	r9, r1
 80063b8:	f000 f862 	bl	8006480 <__ieee754_pow>
 80063bc:	4622      	mov	r2, r4
 80063be:	4606      	mov	r6, r0
 80063c0:	460f      	mov	r7, r1
 80063c2:	462b      	mov	r3, r5
 80063c4:	4620      	mov	r0, r4
 80063c6:	4629      	mov	r1, r5
 80063c8:	f7fa fbcc 	bl	8000b64 <__aeabi_dcmpun>
 80063cc:	bbc8      	cbnz	r0, 8006442 <pow+0x96>
 80063ce:	2200      	movs	r2, #0
 80063d0:	2300      	movs	r3, #0
 80063d2:	4640      	mov	r0, r8
 80063d4:	4649      	mov	r1, r9
 80063d6:	f7fa fb93 	bl	8000b00 <__aeabi_dcmpeq>
 80063da:	b1b8      	cbz	r0, 800640c <pow+0x60>
 80063dc:	2200      	movs	r2, #0
 80063de:	2300      	movs	r3, #0
 80063e0:	4620      	mov	r0, r4
 80063e2:	4629      	mov	r1, r5
 80063e4:	f7fa fb8c 	bl	8000b00 <__aeabi_dcmpeq>
 80063e8:	2800      	cmp	r0, #0
 80063ea:	d141      	bne.n	8006470 <pow+0xc4>
 80063ec:	4620      	mov	r0, r4
 80063ee:	4629      	mov	r1, r5
 80063f0:	f000 fe3b 	bl	800706a <finite>
 80063f4:	b328      	cbz	r0, 8006442 <pow+0x96>
 80063f6:	2200      	movs	r2, #0
 80063f8:	2300      	movs	r3, #0
 80063fa:	4620      	mov	r0, r4
 80063fc:	4629      	mov	r1, r5
 80063fe:	f7fa fb89 	bl	8000b14 <__aeabi_dcmplt>
 8006402:	b1f0      	cbz	r0, 8006442 <pow+0x96>
 8006404:	f7ff fe88 	bl	8006118 <__errno>
 8006408:	2322      	movs	r3, #34	; 0x22
 800640a:	e019      	b.n	8006440 <pow+0x94>
 800640c:	4630      	mov	r0, r6
 800640e:	4639      	mov	r1, r7
 8006410:	f000 fe2b 	bl	800706a <finite>
 8006414:	b9c8      	cbnz	r0, 800644a <pow+0x9e>
 8006416:	4640      	mov	r0, r8
 8006418:	4649      	mov	r1, r9
 800641a:	f000 fe26 	bl	800706a <finite>
 800641e:	b1a0      	cbz	r0, 800644a <pow+0x9e>
 8006420:	4620      	mov	r0, r4
 8006422:	4629      	mov	r1, r5
 8006424:	f000 fe21 	bl	800706a <finite>
 8006428:	b178      	cbz	r0, 800644a <pow+0x9e>
 800642a:	4632      	mov	r2, r6
 800642c:	463b      	mov	r3, r7
 800642e:	4630      	mov	r0, r6
 8006430:	4639      	mov	r1, r7
 8006432:	f7fa fb97 	bl	8000b64 <__aeabi_dcmpun>
 8006436:	2800      	cmp	r0, #0
 8006438:	d0e4      	beq.n	8006404 <pow+0x58>
 800643a:	f7ff fe6d 	bl	8006118 <__errno>
 800643e:	2321      	movs	r3, #33	; 0x21
 8006440:	6003      	str	r3, [r0, #0]
 8006442:	4630      	mov	r0, r6
 8006444:	4639      	mov	r1, r7
 8006446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800644a:	2200      	movs	r2, #0
 800644c:	2300      	movs	r3, #0
 800644e:	4630      	mov	r0, r6
 8006450:	4639      	mov	r1, r7
 8006452:	f7fa fb55 	bl	8000b00 <__aeabi_dcmpeq>
 8006456:	2800      	cmp	r0, #0
 8006458:	d0f3      	beq.n	8006442 <pow+0x96>
 800645a:	4640      	mov	r0, r8
 800645c:	4649      	mov	r1, r9
 800645e:	f000 fe04 	bl	800706a <finite>
 8006462:	2800      	cmp	r0, #0
 8006464:	d0ed      	beq.n	8006442 <pow+0x96>
 8006466:	4620      	mov	r0, r4
 8006468:	4629      	mov	r1, r5
 800646a:	f000 fdfe 	bl	800706a <finite>
 800646e:	e7c8      	b.n	8006402 <pow+0x56>
 8006470:	2600      	movs	r6, #0
 8006472:	4f01      	ldr	r7, [pc, #4]	; (8006478 <pow+0xcc>)
 8006474:	e7e5      	b.n	8006442 <pow+0x96>
 8006476:	bf00      	nop
 8006478:	3ff00000 	.word	0x3ff00000
 800647c:	00000000 	.word	0x00000000

08006480 <__ieee754_pow>:
 8006480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006484:	b093      	sub	sp, #76	; 0x4c
 8006486:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800648a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800648e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006492:	4689      	mov	r9, r1
 8006494:	ea56 0102 	orrs.w	r1, r6, r2
 8006498:	4680      	mov	r8, r0
 800649a:	d111      	bne.n	80064c0 <__ieee754_pow+0x40>
 800649c:	1803      	adds	r3, r0, r0
 800649e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80064a2:	4152      	adcs	r2, r2
 80064a4:	4299      	cmp	r1, r3
 80064a6:	4b82      	ldr	r3, [pc, #520]	; (80066b0 <__ieee754_pow+0x230>)
 80064a8:	4193      	sbcs	r3, r2
 80064aa:	f080 84b9 	bcs.w	8006e20 <__ieee754_pow+0x9a0>
 80064ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064b2:	4640      	mov	r0, r8
 80064b4:	4649      	mov	r1, r9
 80064b6:	f7f9 ff05 	bl	80002c4 <__adddf3>
 80064ba:	4683      	mov	fp, r0
 80064bc:	468c      	mov	ip, r1
 80064be:	e06f      	b.n	80065a0 <__ieee754_pow+0x120>
 80064c0:	4b7c      	ldr	r3, [pc, #496]	; (80066b4 <__ieee754_pow+0x234>)
 80064c2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80064c6:	429c      	cmp	r4, r3
 80064c8:	464d      	mov	r5, r9
 80064ca:	4682      	mov	sl, r0
 80064cc:	dc06      	bgt.n	80064dc <__ieee754_pow+0x5c>
 80064ce:	d101      	bne.n	80064d4 <__ieee754_pow+0x54>
 80064d0:	2800      	cmp	r0, #0
 80064d2:	d1ec      	bne.n	80064ae <__ieee754_pow+0x2e>
 80064d4:	429e      	cmp	r6, r3
 80064d6:	dc01      	bgt.n	80064dc <__ieee754_pow+0x5c>
 80064d8:	d10f      	bne.n	80064fa <__ieee754_pow+0x7a>
 80064da:	b172      	cbz	r2, 80064fa <__ieee754_pow+0x7a>
 80064dc:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80064e0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80064e4:	ea55 050a 	orrs.w	r5, r5, sl
 80064e8:	d1e1      	bne.n	80064ae <__ieee754_pow+0x2e>
 80064ea:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80064ee:	18db      	adds	r3, r3, r3
 80064f0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80064f4:	4152      	adcs	r2, r2
 80064f6:	429d      	cmp	r5, r3
 80064f8:	e7d5      	b.n	80064a6 <__ieee754_pow+0x26>
 80064fa:	2d00      	cmp	r5, #0
 80064fc:	da39      	bge.n	8006572 <__ieee754_pow+0xf2>
 80064fe:	4b6e      	ldr	r3, [pc, #440]	; (80066b8 <__ieee754_pow+0x238>)
 8006500:	429e      	cmp	r6, r3
 8006502:	dc52      	bgt.n	80065aa <__ieee754_pow+0x12a>
 8006504:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006508:	429e      	cmp	r6, r3
 800650a:	f340 849c 	ble.w	8006e46 <__ieee754_pow+0x9c6>
 800650e:	1533      	asrs	r3, r6, #20
 8006510:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006514:	2b14      	cmp	r3, #20
 8006516:	dd0f      	ble.n	8006538 <__ieee754_pow+0xb8>
 8006518:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800651c:	fa22 f103 	lsr.w	r1, r2, r3
 8006520:	fa01 f303 	lsl.w	r3, r1, r3
 8006524:	4293      	cmp	r3, r2
 8006526:	f040 848e 	bne.w	8006e46 <__ieee754_pow+0x9c6>
 800652a:	f001 0101 	and.w	r1, r1, #1
 800652e:	f1c1 0302 	rsb	r3, r1, #2
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	b182      	cbz	r2, 8006558 <__ieee754_pow+0xd8>
 8006536:	e05d      	b.n	80065f4 <__ieee754_pow+0x174>
 8006538:	2a00      	cmp	r2, #0
 800653a:	d159      	bne.n	80065f0 <__ieee754_pow+0x170>
 800653c:	f1c3 0314 	rsb	r3, r3, #20
 8006540:	fa46 f103 	asr.w	r1, r6, r3
 8006544:	fa01 f303 	lsl.w	r3, r1, r3
 8006548:	42b3      	cmp	r3, r6
 800654a:	f040 8479 	bne.w	8006e40 <__ieee754_pow+0x9c0>
 800654e:	f001 0101 	and.w	r1, r1, #1
 8006552:	f1c1 0302 	rsb	r3, r1, #2
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	4b58      	ldr	r3, [pc, #352]	; (80066bc <__ieee754_pow+0x23c>)
 800655a:	429e      	cmp	r6, r3
 800655c:	d132      	bne.n	80065c4 <__ieee754_pow+0x144>
 800655e:	2f00      	cmp	r7, #0
 8006560:	f280 846a 	bge.w	8006e38 <__ieee754_pow+0x9b8>
 8006564:	4642      	mov	r2, r8
 8006566:	464b      	mov	r3, r9
 8006568:	2000      	movs	r0, #0
 800656a:	4954      	ldr	r1, [pc, #336]	; (80066bc <__ieee754_pow+0x23c>)
 800656c:	f7fa f98a 	bl	8000884 <__aeabi_ddiv>
 8006570:	e7a3      	b.n	80064ba <__ieee754_pow+0x3a>
 8006572:	2300      	movs	r3, #0
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	2a00      	cmp	r2, #0
 8006578:	d13c      	bne.n	80065f4 <__ieee754_pow+0x174>
 800657a:	4b4e      	ldr	r3, [pc, #312]	; (80066b4 <__ieee754_pow+0x234>)
 800657c:	429e      	cmp	r6, r3
 800657e:	d1eb      	bne.n	8006558 <__ieee754_pow+0xd8>
 8006580:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006584:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006588:	ea53 030a 	orrs.w	r3, r3, sl
 800658c:	f000 8448 	beq.w	8006e20 <__ieee754_pow+0x9a0>
 8006590:	4b4b      	ldr	r3, [pc, #300]	; (80066c0 <__ieee754_pow+0x240>)
 8006592:	429c      	cmp	r4, r3
 8006594:	dd0b      	ble.n	80065ae <__ieee754_pow+0x12e>
 8006596:	2f00      	cmp	r7, #0
 8006598:	f2c0 8448 	blt.w	8006e2c <__ieee754_pow+0x9ac>
 800659c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80065a0:	4658      	mov	r0, fp
 80065a2:	4661      	mov	r1, ip
 80065a4:	b013      	add	sp, #76	; 0x4c
 80065a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065aa:	2302      	movs	r3, #2
 80065ac:	e7e2      	b.n	8006574 <__ieee754_pow+0xf4>
 80065ae:	2f00      	cmp	r7, #0
 80065b0:	f04f 0b00 	mov.w	fp, #0
 80065b4:	f04f 0c00 	mov.w	ip, #0
 80065b8:	daf2      	bge.n	80065a0 <__ieee754_pow+0x120>
 80065ba:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80065be:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80065c2:	e7ed      	b.n	80065a0 <__ieee754_pow+0x120>
 80065c4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80065c8:	d106      	bne.n	80065d8 <__ieee754_pow+0x158>
 80065ca:	4642      	mov	r2, r8
 80065cc:	464b      	mov	r3, r9
 80065ce:	4640      	mov	r0, r8
 80065d0:	4649      	mov	r1, r9
 80065d2:	f7fa f82d 	bl	8000630 <__aeabi_dmul>
 80065d6:	e770      	b.n	80064ba <__ieee754_pow+0x3a>
 80065d8:	4b3a      	ldr	r3, [pc, #232]	; (80066c4 <__ieee754_pow+0x244>)
 80065da:	429f      	cmp	r7, r3
 80065dc:	d10a      	bne.n	80065f4 <__ieee754_pow+0x174>
 80065de:	2d00      	cmp	r5, #0
 80065e0:	db08      	blt.n	80065f4 <__ieee754_pow+0x174>
 80065e2:	4640      	mov	r0, r8
 80065e4:	4649      	mov	r1, r9
 80065e6:	b013      	add	sp, #76	; 0x4c
 80065e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ec:	f000 bc5e 	b.w	8006eac <__ieee754_sqrt>
 80065f0:	2300      	movs	r3, #0
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	4640      	mov	r0, r8
 80065f6:	4649      	mov	r1, r9
 80065f8:	f000 fd34 	bl	8007064 <fabs>
 80065fc:	4683      	mov	fp, r0
 80065fe:	468c      	mov	ip, r1
 8006600:	f1ba 0f00 	cmp.w	sl, #0
 8006604:	d128      	bne.n	8006658 <__ieee754_pow+0x1d8>
 8006606:	b124      	cbz	r4, 8006612 <__ieee754_pow+0x192>
 8006608:	4b2c      	ldr	r3, [pc, #176]	; (80066bc <__ieee754_pow+0x23c>)
 800660a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800660e:	429a      	cmp	r2, r3
 8006610:	d122      	bne.n	8006658 <__ieee754_pow+0x1d8>
 8006612:	2f00      	cmp	r7, #0
 8006614:	da07      	bge.n	8006626 <__ieee754_pow+0x1a6>
 8006616:	465a      	mov	r2, fp
 8006618:	4663      	mov	r3, ip
 800661a:	2000      	movs	r0, #0
 800661c:	4927      	ldr	r1, [pc, #156]	; (80066bc <__ieee754_pow+0x23c>)
 800661e:	f7fa f931 	bl	8000884 <__aeabi_ddiv>
 8006622:	4683      	mov	fp, r0
 8006624:	468c      	mov	ip, r1
 8006626:	2d00      	cmp	r5, #0
 8006628:	daba      	bge.n	80065a0 <__ieee754_pow+0x120>
 800662a:	9b00      	ldr	r3, [sp, #0]
 800662c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006630:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006634:	4323      	orrs	r3, r4
 8006636:	d108      	bne.n	800664a <__ieee754_pow+0x1ca>
 8006638:	465a      	mov	r2, fp
 800663a:	4663      	mov	r3, ip
 800663c:	4658      	mov	r0, fp
 800663e:	4661      	mov	r1, ip
 8006640:	f7f9 fe3e 	bl	80002c0 <__aeabi_dsub>
 8006644:	4602      	mov	r2, r0
 8006646:	460b      	mov	r3, r1
 8006648:	e790      	b.n	800656c <__ieee754_pow+0xec>
 800664a:	9b00      	ldr	r3, [sp, #0]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d1a7      	bne.n	80065a0 <__ieee754_pow+0x120>
 8006650:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8006654:	469c      	mov	ip, r3
 8006656:	e7a3      	b.n	80065a0 <__ieee754_pow+0x120>
 8006658:	0feb      	lsrs	r3, r5, #31
 800665a:	3b01      	subs	r3, #1
 800665c:	930c      	str	r3, [sp, #48]	; 0x30
 800665e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006660:	9b00      	ldr	r3, [sp, #0]
 8006662:	4313      	orrs	r3, r2
 8006664:	d104      	bne.n	8006670 <__ieee754_pow+0x1f0>
 8006666:	4642      	mov	r2, r8
 8006668:	464b      	mov	r3, r9
 800666a:	4640      	mov	r0, r8
 800666c:	4649      	mov	r1, r9
 800666e:	e7e7      	b.n	8006640 <__ieee754_pow+0x1c0>
 8006670:	4b15      	ldr	r3, [pc, #84]	; (80066c8 <__ieee754_pow+0x248>)
 8006672:	429e      	cmp	r6, r3
 8006674:	f340 80f6 	ble.w	8006864 <__ieee754_pow+0x3e4>
 8006678:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800667c:	429e      	cmp	r6, r3
 800667e:	4b10      	ldr	r3, [pc, #64]	; (80066c0 <__ieee754_pow+0x240>)
 8006680:	dd09      	ble.n	8006696 <__ieee754_pow+0x216>
 8006682:	429c      	cmp	r4, r3
 8006684:	dc0c      	bgt.n	80066a0 <__ieee754_pow+0x220>
 8006686:	2f00      	cmp	r7, #0
 8006688:	da0c      	bge.n	80066a4 <__ieee754_pow+0x224>
 800668a:	2000      	movs	r0, #0
 800668c:	b013      	add	sp, #76	; 0x4c
 800668e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006692:	f000 bce2 	b.w	800705a <__math_oflow>
 8006696:	429c      	cmp	r4, r3
 8006698:	dbf5      	blt.n	8006686 <__ieee754_pow+0x206>
 800669a:	4b08      	ldr	r3, [pc, #32]	; (80066bc <__ieee754_pow+0x23c>)
 800669c:	429c      	cmp	r4, r3
 800669e:	dd15      	ble.n	80066cc <__ieee754_pow+0x24c>
 80066a0:	2f00      	cmp	r7, #0
 80066a2:	dcf2      	bgt.n	800668a <__ieee754_pow+0x20a>
 80066a4:	2000      	movs	r0, #0
 80066a6:	b013      	add	sp, #76	; 0x4c
 80066a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ac:	f000 bcd0 	b.w	8007050 <__math_uflow>
 80066b0:	fff00000 	.word	0xfff00000
 80066b4:	7ff00000 	.word	0x7ff00000
 80066b8:	433fffff 	.word	0x433fffff
 80066bc:	3ff00000 	.word	0x3ff00000
 80066c0:	3fefffff 	.word	0x3fefffff
 80066c4:	3fe00000 	.word	0x3fe00000
 80066c8:	41e00000 	.word	0x41e00000
 80066cc:	4661      	mov	r1, ip
 80066ce:	2200      	movs	r2, #0
 80066d0:	4658      	mov	r0, fp
 80066d2:	4b5f      	ldr	r3, [pc, #380]	; (8006850 <__ieee754_pow+0x3d0>)
 80066d4:	f7f9 fdf4 	bl	80002c0 <__aeabi_dsub>
 80066d8:	a355      	add	r3, pc, #340	; (adr r3, 8006830 <__ieee754_pow+0x3b0>)
 80066da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066de:	4604      	mov	r4, r0
 80066e0:	460d      	mov	r5, r1
 80066e2:	f7f9 ffa5 	bl	8000630 <__aeabi_dmul>
 80066e6:	a354      	add	r3, pc, #336	; (adr r3, 8006838 <__ieee754_pow+0x3b8>)
 80066e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ec:	4606      	mov	r6, r0
 80066ee:	460f      	mov	r7, r1
 80066f0:	4620      	mov	r0, r4
 80066f2:	4629      	mov	r1, r5
 80066f4:	f7f9 ff9c 	bl	8000630 <__aeabi_dmul>
 80066f8:	2200      	movs	r2, #0
 80066fa:	4682      	mov	sl, r0
 80066fc:	468b      	mov	fp, r1
 80066fe:	4620      	mov	r0, r4
 8006700:	4629      	mov	r1, r5
 8006702:	4b54      	ldr	r3, [pc, #336]	; (8006854 <__ieee754_pow+0x3d4>)
 8006704:	f7f9 ff94 	bl	8000630 <__aeabi_dmul>
 8006708:	4602      	mov	r2, r0
 800670a:	460b      	mov	r3, r1
 800670c:	a14c      	add	r1, pc, #304	; (adr r1, 8006840 <__ieee754_pow+0x3c0>)
 800670e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006712:	f7f9 fdd5 	bl	80002c0 <__aeabi_dsub>
 8006716:	4622      	mov	r2, r4
 8006718:	462b      	mov	r3, r5
 800671a:	f7f9 ff89 	bl	8000630 <__aeabi_dmul>
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	2000      	movs	r0, #0
 8006724:	494c      	ldr	r1, [pc, #304]	; (8006858 <__ieee754_pow+0x3d8>)
 8006726:	f7f9 fdcb 	bl	80002c0 <__aeabi_dsub>
 800672a:	4622      	mov	r2, r4
 800672c:	462b      	mov	r3, r5
 800672e:	4680      	mov	r8, r0
 8006730:	4689      	mov	r9, r1
 8006732:	4620      	mov	r0, r4
 8006734:	4629      	mov	r1, r5
 8006736:	f7f9 ff7b 	bl	8000630 <__aeabi_dmul>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	4640      	mov	r0, r8
 8006740:	4649      	mov	r1, r9
 8006742:	f7f9 ff75 	bl	8000630 <__aeabi_dmul>
 8006746:	a340      	add	r3, pc, #256	; (adr r3, 8006848 <__ieee754_pow+0x3c8>)
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	f7f9 ff70 	bl	8000630 <__aeabi_dmul>
 8006750:	4602      	mov	r2, r0
 8006752:	460b      	mov	r3, r1
 8006754:	4650      	mov	r0, sl
 8006756:	4659      	mov	r1, fp
 8006758:	f7f9 fdb2 	bl	80002c0 <__aeabi_dsub>
 800675c:	f04f 0a00 	mov.w	sl, #0
 8006760:	4602      	mov	r2, r0
 8006762:	460b      	mov	r3, r1
 8006764:	4604      	mov	r4, r0
 8006766:	460d      	mov	r5, r1
 8006768:	4630      	mov	r0, r6
 800676a:	4639      	mov	r1, r7
 800676c:	f7f9 fdaa 	bl	80002c4 <__adddf3>
 8006770:	4632      	mov	r2, r6
 8006772:	463b      	mov	r3, r7
 8006774:	4650      	mov	r0, sl
 8006776:	468b      	mov	fp, r1
 8006778:	f7f9 fda2 	bl	80002c0 <__aeabi_dsub>
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	4620      	mov	r0, r4
 8006782:	4629      	mov	r1, r5
 8006784:	f7f9 fd9c 	bl	80002c0 <__aeabi_dsub>
 8006788:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800678c:	9b00      	ldr	r3, [sp, #0]
 800678e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006790:	3b01      	subs	r3, #1
 8006792:	4313      	orrs	r3, r2
 8006794:	f04f 0600 	mov.w	r6, #0
 8006798:	f04f 0200 	mov.w	r2, #0
 800679c:	bf0c      	ite	eq
 800679e:	4b2f      	ldreq	r3, [pc, #188]	; (800685c <__ieee754_pow+0x3dc>)
 80067a0:	4b2b      	ldrne	r3, [pc, #172]	; (8006850 <__ieee754_pow+0x3d0>)
 80067a2:	4604      	mov	r4, r0
 80067a4:	460d      	mov	r5, r1
 80067a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067aa:	e9cd 2300 	strd	r2, r3, [sp]
 80067ae:	4632      	mov	r2, r6
 80067b0:	463b      	mov	r3, r7
 80067b2:	f7f9 fd85 	bl	80002c0 <__aeabi_dsub>
 80067b6:	4652      	mov	r2, sl
 80067b8:	465b      	mov	r3, fp
 80067ba:	f7f9 ff39 	bl	8000630 <__aeabi_dmul>
 80067be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067c2:	4680      	mov	r8, r0
 80067c4:	4689      	mov	r9, r1
 80067c6:	4620      	mov	r0, r4
 80067c8:	4629      	mov	r1, r5
 80067ca:	f7f9 ff31 	bl	8000630 <__aeabi_dmul>
 80067ce:	4602      	mov	r2, r0
 80067d0:	460b      	mov	r3, r1
 80067d2:	4640      	mov	r0, r8
 80067d4:	4649      	mov	r1, r9
 80067d6:	f7f9 fd75 	bl	80002c4 <__adddf3>
 80067da:	4632      	mov	r2, r6
 80067dc:	463b      	mov	r3, r7
 80067de:	4680      	mov	r8, r0
 80067e0:	4689      	mov	r9, r1
 80067e2:	4650      	mov	r0, sl
 80067e4:	4659      	mov	r1, fp
 80067e6:	f7f9 ff23 	bl	8000630 <__aeabi_dmul>
 80067ea:	4604      	mov	r4, r0
 80067ec:	460d      	mov	r5, r1
 80067ee:	460b      	mov	r3, r1
 80067f0:	4602      	mov	r2, r0
 80067f2:	4649      	mov	r1, r9
 80067f4:	4640      	mov	r0, r8
 80067f6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80067fa:	f7f9 fd63 	bl	80002c4 <__adddf3>
 80067fe:	4b18      	ldr	r3, [pc, #96]	; (8006860 <__ieee754_pow+0x3e0>)
 8006800:	4682      	mov	sl, r0
 8006802:	4299      	cmp	r1, r3
 8006804:	460f      	mov	r7, r1
 8006806:	460e      	mov	r6, r1
 8006808:	f340 82e5 	ble.w	8006dd6 <__ieee754_pow+0x956>
 800680c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006810:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006814:	4303      	orrs	r3, r0
 8006816:	f000 81df 	beq.w	8006bd8 <__ieee754_pow+0x758>
 800681a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800681e:	2200      	movs	r2, #0
 8006820:	2300      	movs	r3, #0
 8006822:	f7fa f977 	bl	8000b14 <__aeabi_dcmplt>
 8006826:	3800      	subs	r0, #0
 8006828:	bf18      	it	ne
 800682a:	2001      	movne	r0, #1
 800682c:	e72e      	b.n	800668c <__ieee754_pow+0x20c>
 800682e:	bf00      	nop
 8006830:	60000000 	.word	0x60000000
 8006834:	3ff71547 	.word	0x3ff71547
 8006838:	f85ddf44 	.word	0xf85ddf44
 800683c:	3e54ae0b 	.word	0x3e54ae0b
 8006840:	55555555 	.word	0x55555555
 8006844:	3fd55555 	.word	0x3fd55555
 8006848:	652b82fe 	.word	0x652b82fe
 800684c:	3ff71547 	.word	0x3ff71547
 8006850:	3ff00000 	.word	0x3ff00000
 8006854:	3fd00000 	.word	0x3fd00000
 8006858:	3fe00000 	.word	0x3fe00000
 800685c:	bff00000 	.word	0xbff00000
 8006860:	408fffff 	.word	0x408fffff
 8006864:	4bd2      	ldr	r3, [pc, #840]	; (8006bb0 <__ieee754_pow+0x730>)
 8006866:	2200      	movs	r2, #0
 8006868:	402b      	ands	r3, r5
 800686a:	b943      	cbnz	r3, 800687e <__ieee754_pow+0x3fe>
 800686c:	4658      	mov	r0, fp
 800686e:	4661      	mov	r1, ip
 8006870:	4bd0      	ldr	r3, [pc, #832]	; (8006bb4 <__ieee754_pow+0x734>)
 8006872:	f7f9 fedd 	bl	8000630 <__aeabi_dmul>
 8006876:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800687a:	4683      	mov	fp, r0
 800687c:	460c      	mov	r4, r1
 800687e:	1523      	asrs	r3, r4, #20
 8006880:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006884:	4413      	add	r3, r2
 8006886:	930b      	str	r3, [sp, #44]	; 0x2c
 8006888:	4bcb      	ldr	r3, [pc, #812]	; (8006bb8 <__ieee754_pow+0x738>)
 800688a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800688e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006892:	429c      	cmp	r4, r3
 8006894:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006898:	dd08      	ble.n	80068ac <__ieee754_pow+0x42c>
 800689a:	4bc8      	ldr	r3, [pc, #800]	; (8006bbc <__ieee754_pow+0x73c>)
 800689c:	429c      	cmp	r4, r3
 800689e:	f340 8199 	ble.w	8006bd4 <__ieee754_pow+0x754>
 80068a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068a4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80068a8:	3301      	adds	r3, #1
 80068aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80068ac:	2600      	movs	r6, #0
 80068ae:	00f3      	lsls	r3, r6, #3
 80068b0:	930d      	str	r3, [sp, #52]	; 0x34
 80068b2:	4bc3      	ldr	r3, [pc, #780]	; (8006bc0 <__ieee754_pow+0x740>)
 80068b4:	4658      	mov	r0, fp
 80068b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80068ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068be:	4629      	mov	r1, r5
 80068c0:	461a      	mov	r2, r3
 80068c2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80068c6:	4623      	mov	r3, r4
 80068c8:	f7f9 fcfa 	bl	80002c0 <__aeabi_dsub>
 80068cc:	46da      	mov	sl, fp
 80068ce:	462b      	mov	r3, r5
 80068d0:	4652      	mov	r2, sl
 80068d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80068d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80068da:	f7f9 fcf3 	bl	80002c4 <__adddf3>
 80068de:	4602      	mov	r2, r0
 80068e0:	460b      	mov	r3, r1
 80068e2:	2000      	movs	r0, #0
 80068e4:	49b7      	ldr	r1, [pc, #732]	; (8006bc4 <__ieee754_pow+0x744>)
 80068e6:	f7f9 ffcd 	bl	8000884 <__aeabi_ddiv>
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
 80068ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80068f2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80068f6:	f7f9 fe9b 	bl	8000630 <__aeabi_dmul>
 80068fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80068fe:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8006902:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006906:	2300      	movs	r3, #0
 8006908:	2200      	movs	r2, #0
 800690a:	46ab      	mov	fp, r5
 800690c:	106d      	asrs	r5, r5, #1
 800690e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006912:	9304      	str	r3, [sp, #16]
 8006914:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006918:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800691c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8006920:	4640      	mov	r0, r8
 8006922:	4649      	mov	r1, r9
 8006924:	4614      	mov	r4, r2
 8006926:	461d      	mov	r5, r3
 8006928:	f7f9 fe82 	bl	8000630 <__aeabi_dmul>
 800692c:	4602      	mov	r2, r0
 800692e:	460b      	mov	r3, r1
 8006930:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006934:	f7f9 fcc4 	bl	80002c0 <__aeabi_dsub>
 8006938:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800693c:	4606      	mov	r6, r0
 800693e:	460f      	mov	r7, r1
 8006940:	4620      	mov	r0, r4
 8006942:	4629      	mov	r1, r5
 8006944:	f7f9 fcbc 	bl	80002c0 <__aeabi_dsub>
 8006948:	4602      	mov	r2, r0
 800694a:	460b      	mov	r3, r1
 800694c:	4650      	mov	r0, sl
 800694e:	4659      	mov	r1, fp
 8006950:	f7f9 fcb6 	bl	80002c0 <__aeabi_dsub>
 8006954:	4642      	mov	r2, r8
 8006956:	464b      	mov	r3, r9
 8006958:	f7f9 fe6a 	bl	8000630 <__aeabi_dmul>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	4630      	mov	r0, r6
 8006962:	4639      	mov	r1, r7
 8006964:	f7f9 fcac 	bl	80002c0 <__aeabi_dsub>
 8006968:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800696c:	f7f9 fe60 	bl	8000630 <__aeabi_dmul>
 8006970:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006974:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006978:	4610      	mov	r0, r2
 800697a:	4619      	mov	r1, r3
 800697c:	f7f9 fe58 	bl	8000630 <__aeabi_dmul>
 8006980:	a379      	add	r3, pc, #484	; (adr r3, 8006b68 <__ieee754_pow+0x6e8>)
 8006982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006986:	4604      	mov	r4, r0
 8006988:	460d      	mov	r5, r1
 800698a:	f7f9 fe51 	bl	8000630 <__aeabi_dmul>
 800698e:	a378      	add	r3, pc, #480	; (adr r3, 8006b70 <__ieee754_pow+0x6f0>)
 8006990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006994:	f7f9 fc96 	bl	80002c4 <__adddf3>
 8006998:	4622      	mov	r2, r4
 800699a:	462b      	mov	r3, r5
 800699c:	f7f9 fe48 	bl	8000630 <__aeabi_dmul>
 80069a0:	a375      	add	r3, pc, #468	; (adr r3, 8006b78 <__ieee754_pow+0x6f8>)
 80069a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a6:	f7f9 fc8d 	bl	80002c4 <__adddf3>
 80069aa:	4622      	mov	r2, r4
 80069ac:	462b      	mov	r3, r5
 80069ae:	f7f9 fe3f 	bl	8000630 <__aeabi_dmul>
 80069b2:	a373      	add	r3, pc, #460	; (adr r3, 8006b80 <__ieee754_pow+0x700>)
 80069b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b8:	f7f9 fc84 	bl	80002c4 <__adddf3>
 80069bc:	4622      	mov	r2, r4
 80069be:	462b      	mov	r3, r5
 80069c0:	f7f9 fe36 	bl	8000630 <__aeabi_dmul>
 80069c4:	a370      	add	r3, pc, #448	; (adr r3, 8006b88 <__ieee754_pow+0x708>)
 80069c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ca:	f7f9 fc7b 	bl	80002c4 <__adddf3>
 80069ce:	4622      	mov	r2, r4
 80069d0:	462b      	mov	r3, r5
 80069d2:	f7f9 fe2d 	bl	8000630 <__aeabi_dmul>
 80069d6:	a36e      	add	r3, pc, #440	; (adr r3, 8006b90 <__ieee754_pow+0x710>)
 80069d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069dc:	f7f9 fc72 	bl	80002c4 <__adddf3>
 80069e0:	4622      	mov	r2, r4
 80069e2:	4606      	mov	r6, r0
 80069e4:	460f      	mov	r7, r1
 80069e6:	462b      	mov	r3, r5
 80069e8:	4620      	mov	r0, r4
 80069ea:	4629      	mov	r1, r5
 80069ec:	f7f9 fe20 	bl	8000630 <__aeabi_dmul>
 80069f0:	4602      	mov	r2, r0
 80069f2:	460b      	mov	r3, r1
 80069f4:	4630      	mov	r0, r6
 80069f6:	4639      	mov	r1, r7
 80069f8:	f7f9 fe1a 	bl	8000630 <__aeabi_dmul>
 80069fc:	4604      	mov	r4, r0
 80069fe:	460d      	mov	r5, r1
 8006a00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a04:	4642      	mov	r2, r8
 8006a06:	464b      	mov	r3, r9
 8006a08:	f7f9 fc5c 	bl	80002c4 <__adddf3>
 8006a0c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006a10:	f7f9 fe0e 	bl	8000630 <__aeabi_dmul>
 8006a14:	4622      	mov	r2, r4
 8006a16:	462b      	mov	r3, r5
 8006a18:	f7f9 fc54 	bl	80002c4 <__adddf3>
 8006a1c:	4642      	mov	r2, r8
 8006a1e:	4606      	mov	r6, r0
 8006a20:	460f      	mov	r7, r1
 8006a22:	464b      	mov	r3, r9
 8006a24:	4640      	mov	r0, r8
 8006a26:	4649      	mov	r1, r9
 8006a28:	f7f9 fe02 	bl	8000630 <__aeabi_dmul>
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	4b66      	ldr	r3, [pc, #408]	; (8006bc8 <__ieee754_pow+0x748>)
 8006a30:	4682      	mov	sl, r0
 8006a32:	468b      	mov	fp, r1
 8006a34:	f7f9 fc46 	bl	80002c4 <__adddf3>
 8006a38:	4632      	mov	r2, r6
 8006a3a:	463b      	mov	r3, r7
 8006a3c:	f7f9 fc42 	bl	80002c4 <__adddf3>
 8006a40:	2400      	movs	r4, #0
 8006a42:	460d      	mov	r5, r1
 8006a44:	4622      	mov	r2, r4
 8006a46:	460b      	mov	r3, r1
 8006a48:	4640      	mov	r0, r8
 8006a4a:	4649      	mov	r1, r9
 8006a4c:	f7f9 fdf0 	bl	8000630 <__aeabi_dmul>
 8006a50:	2200      	movs	r2, #0
 8006a52:	4680      	mov	r8, r0
 8006a54:	4689      	mov	r9, r1
 8006a56:	4620      	mov	r0, r4
 8006a58:	4629      	mov	r1, r5
 8006a5a:	4b5b      	ldr	r3, [pc, #364]	; (8006bc8 <__ieee754_pow+0x748>)
 8006a5c:	f7f9 fc30 	bl	80002c0 <__aeabi_dsub>
 8006a60:	4652      	mov	r2, sl
 8006a62:	465b      	mov	r3, fp
 8006a64:	f7f9 fc2c 	bl	80002c0 <__aeabi_dsub>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	4639      	mov	r1, r7
 8006a70:	f7f9 fc26 	bl	80002c0 <__aeabi_dsub>
 8006a74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a78:	f7f9 fdda 	bl	8000630 <__aeabi_dmul>
 8006a7c:	4622      	mov	r2, r4
 8006a7e:	4606      	mov	r6, r0
 8006a80:	460f      	mov	r7, r1
 8006a82:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006a86:	462b      	mov	r3, r5
 8006a88:	f7f9 fdd2 	bl	8000630 <__aeabi_dmul>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	460b      	mov	r3, r1
 8006a90:	4630      	mov	r0, r6
 8006a92:	4639      	mov	r1, r7
 8006a94:	f7f9 fc16 	bl	80002c4 <__adddf3>
 8006a98:	2400      	movs	r4, #0
 8006a9a:	4606      	mov	r6, r0
 8006a9c:	460f      	mov	r7, r1
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	4640      	mov	r0, r8
 8006aa4:	4649      	mov	r1, r9
 8006aa6:	f7f9 fc0d 	bl	80002c4 <__adddf3>
 8006aaa:	a33b      	add	r3, pc, #236	; (adr r3, 8006b98 <__ieee754_pow+0x718>)
 8006aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	460d      	mov	r5, r1
 8006ab4:	f7f9 fdbc 	bl	8000630 <__aeabi_dmul>
 8006ab8:	4642      	mov	r2, r8
 8006aba:	464b      	mov	r3, r9
 8006abc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	4629      	mov	r1, r5
 8006ac4:	f7f9 fbfc 	bl	80002c0 <__aeabi_dsub>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	4630      	mov	r0, r6
 8006ace:	4639      	mov	r1, r7
 8006ad0:	f7f9 fbf6 	bl	80002c0 <__aeabi_dsub>
 8006ad4:	a332      	add	r3, pc, #200	; (adr r3, 8006ba0 <__ieee754_pow+0x720>)
 8006ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ada:	f7f9 fda9 	bl	8000630 <__aeabi_dmul>
 8006ade:	a332      	add	r3, pc, #200	; (adr r3, 8006ba8 <__ieee754_pow+0x728>)
 8006ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae4:	4606      	mov	r6, r0
 8006ae6:	460f      	mov	r7, r1
 8006ae8:	4620      	mov	r0, r4
 8006aea:	4629      	mov	r1, r5
 8006aec:	f7f9 fda0 	bl	8000630 <__aeabi_dmul>
 8006af0:	4602      	mov	r2, r0
 8006af2:	460b      	mov	r3, r1
 8006af4:	4630      	mov	r0, r6
 8006af6:	4639      	mov	r1, r7
 8006af8:	f7f9 fbe4 	bl	80002c4 <__adddf3>
 8006afc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006afe:	4b33      	ldr	r3, [pc, #204]	; (8006bcc <__ieee754_pow+0x74c>)
 8006b00:	f04f 0a00 	mov.w	sl, #0
 8006b04:	4413      	add	r3, r2
 8006b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0a:	f7f9 fbdb 	bl	80002c4 <__adddf3>
 8006b0e:	4680      	mov	r8, r0
 8006b10:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006b12:	4689      	mov	r9, r1
 8006b14:	f7f9 fd22 	bl	800055c <__aeabi_i2d>
 8006b18:	4604      	mov	r4, r0
 8006b1a:	460d      	mov	r5, r1
 8006b1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b1e:	4b2c      	ldr	r3, [pc, #176]	; (8006bd0 <__ieee754_pow+0x750>)
 8006b20:	4413      	add	r3, r2
 8006b22:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006b26:	4642      	mov	r2, r8
 8006b28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b2c:	464b      	mov	r3, r9
 8006b2e:	f7f9 fbc9 	bl	80002c4 <__adddf3>
 8006b32:	4632      	mov	r2, r6
 8006b34:	463b      	mov	r3, r7
 8006b36:	f7f9 fbc5 	bl	80002c4 <__adddf3>
 8006b3a:	4622      	mov	r2, r4
 8006b3c:	462b      	mov	r3, r5
 8006b3e:	f7f9 fbc1 	bl	80002c4 <__adddf3>
 8006b42:	4622      	mov	r2, r4
 8006b44:	462b      	mov	r3, r5
 8006b46:	4650      	mov	r0, sl
 8006b48:	468b      	mov	fp, r1
 8006b4a:	f7f9 fbb9 	bl	80002c0 <__aeabi_dsub>
 8006b4e:	4632      	mov	r2, r6
 8006b50:	463b      	mov	r3, r7
 8006b52:	f7f9 fbb5 	bl	80002c0 <__aeabi_dsub>
 8006b56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b5a:	f7f9 fbb1 	bl	80002c0 <__aeabi_dsub>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	4640      	mov	r0, r8
 8006b64:	4649      	mov	r1, r9
 8006b66:	e60d      	b.n	8006784 <__ieee754_pow+0x304>
 8006b68:	4a454eef 	.word	0x4a454eef
 8006b6c:	3fca7e28 	.word	0x3fca7e28
 8006b70:	93c9db65 	.word	0x93c9db65
 8006b74:	3fcd864a 	.word	0x3fcd864a
 8006b78:	a91d4101 	.word	0xa91d4101
 8006b7c:	3fd17460 	.word	0x3fd17460
 8006b80:	518f264d 	.word	0x518f264d
 8006b84:	3fd55555 	.word	0x3fd55555
 8006b88:	db6fabff 	.word	0xdb6fabff
 8006b8c:	3fdb6db6 	.word	0x3fdb6db6
 8006b90:	33333303 	.word	0x33333303
 8006b94:	3fe33333 	.word	0x3fe33333
 8006b98:	e0000000 	.word	0xe0000000
 8006b9c:	3feec709 	.word	0x3feec709
 8006ba0:	dc3a03fd 	.word	0xdc3a03fd
 8006ba4:	3feec709 	.word	0x3feec709
 8006ba8:	145b01f5 	.word	0x145b01f5
 8006bac:	be3e2fe0 	.word	0xbe3e2fe0
 8006bb0:	7ff00000 	.word	0x7ff00000
 8006bb4:	43400000 	.word	0x43400000
 8006bb8:	0003988e 	.word	0x0003988e
 8006bbc:	000bb679 	.word	0x000bb679
 8006bc0:	08007358 	.word	0x08007358
 8006bc4:	3ff00000 	.word	0x3ff00000
 8006bc8:	40080000 	.word	0x40080000
 8006bcc:	08007378 	.word	0x08007378
 8006bd0:	08007368 	.word	0x08007368
 8006bd4:	2601      	movs	r6, #1
 8006bd6:	e66a      	b.n	80068ae <__ieee754_pow+0x42e>
 8006bd8:	a39d      	add	r3, pc, #628	; (adr r3, 8006e50 <__ieee754_pow+0x9d0>)
 8006bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bde:	4640      	mov	r0, r8
 8006be0:	4649      	mov	r1, r9
 8006be2:	f7f9 fb6f 	bl	80002c4 <__adddf3>
 8006be6:	4622      	mov	r2, r4
 8006be8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bec:	462b      	mov	r3, r5
 8006bee:	4650      	mov	r0, sl
 8006bf0:	4639      	mov	r1, r7
 8006bf2:	f7f9 fb65 	bl	80002c0 <__aeabi_dsub>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bfe:	f7f9 ffa7 	bl	8000b50 <__aeabi_dcmpgt>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	f47f ae09 	bne.w	800681a <__ieee754_pow+0x39a>
 8006c08:	4aa3      	ldr	r2, [pc, #652]	; (8006e98 <__ieee754_pow+0xa18>)
 8006c0a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	f340 8101 	ble.w	8006e16 <__ieee754_pow+0x996>
 8006c14:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006c18:	2000      	movs	r0, #0
 8006c1a:	151b      	asrs	r3, r3, #20
 8006c1c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006c20:	fa4a f303 	asr.w	r3, sl, r3
 8006c24:	4433      	add	r3, r6
 8006c26:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006c2a:	4f9c      	ldr	r7, [pc, #624]	; (8006e9c <__ieee754_pow+0xa1c>)
 8006c2c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006c30:	4117      	asrs	r7, r2
 8006c32:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006c36:	ea23 0107 	bic.w	r1, r3, r7
 8006c3a:	f1c2 0214 	rsb	r2, r2, #20
 8006c3e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006c42:	460b      	mov	r3, r1
 8006c44:	fa4a fa02 	asr.w	sl, sl, r2
 8006c48:	2e00      	cmp	r6, #0
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	4629      	mov	r1, r5
 8006c4e:	4620      	mov	r0, r4
 8006c50:	bfb8      	it	lt
 8006c52:	f1ca 0a00 	rsblt	sl, sl, #0
 8006c56:	f7f9 fb33 	bl	80002c0 <__aeabi_dsub>
 8006c5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c62:	2400      	movs	r4, #0
 8006c64:	4642      	mov	r2, r8
 8006c66:	464b      	mov	r3, r9
 8006c68:	f7f9 fb2c 	bl	80002c4 <__adddf3>
 8006c6c:	a37a      	add	r3, pc, #488	; (adr r3, 8006e58 <__ieee754_pow+0x9d8>)
 8006c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c72:	4620      	mov	r0, r4
 8006c74:	460d      	mov	r5, r1
 8006c76:	f7f9 fcdb 	bl	8000630 <__aeabi_dmul>
 8006c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c7e:	4606      	mov	r6, r0
 8006c80:	460f      	mov	r7, r1
 8006c82:	4620      	mov	r0, r4
 8006c84:	4629      	mov	r1, r5
 8006c86:	f7f9 fb1b 	bl	80002c0 <__aeabi_dsub>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	4640      	mov	r0, r8
 8006c90:	4649      	mov	r1, r9
 8006c92:	f7f9 fb15 	bl	80002c0 <__aeabi_dsub>
 8006c96:	a372      	add	r3, pc, #456	; (adr r3, 8006e60 <__ieee754_pow+0x9e0>)
 8006c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9c:	f7f9 fcc8 	bl	8000630 <__aeabi_dmul>
 8006ca0:	a371      	add	r3, pc, #452	; (adr r3, 8006e68 <__ieee754_pow+0x9e8>)
 8006ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca6:	4680      	mov	r8, r0
 8006ca8:	4689      	mov	r9, r1
 8006caa:	4620      	mov	r0, r4
 8006cac:	4629      	mov	r1, r5
 8006cae:	f7f9 fcbf 	bl	8000630 <__aeabi_dmul>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4640      	mov	r0, r8
 8006cb8:	4649      	mov	r1, r9
 8006cba:	f7f9 fb03 	bl	80002c4 <__adddf3>
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	460d      	mov	r5, r1
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	4639      	mov	r1, r7
 8006cca:	f7f9 fafb 	bl	80002c4 <__adddf3>
 8006cce:	4632      	mov	r2, r6
 8006cd0:	463b      	mov	r3, r7
 8006cd2:	4680      	mov	r8, r0
 8006cd4:	4689      	mov	r9, r1
 8006cd6:	f7f9 faf3 	bl	80002c0 <__aeabi_dsub>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4620      	mov	r0, r4
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	f7f9 faed 	bl	80002c0 <__aeabi_dsub>
 8006ce6:	4642      	mov	r2, r8
 8006ce8:	4606      	mov	r6, r0
 8006cea:	460f      	mov	r7, r1
 8006cec:	464b      	mov	r3, r9
 8006cee:	4640      	mov	r0, r8
 8006cf0:	4649      	mov	r1, r9
 8006cf2:	f7f9 fc9d 	bl	8000630 <__aeabi_dmul>
 8006cf6:	a35e      	add	r3, pc, #376	; (adr r3, 8006e70 <__ieee754_pow+0x9f0>)
 8006cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	460d      	mov	r5, r1
 8006d00:	f7f9 fc96 	bl	8000630 <__aeabi_dmul>
 8006d04:	a35c      	add	r3, pc, #368	; (adr r3, 8006e78 <__ieee754_pow+0x9f8>)
 8006d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0a:	f7f9 fad9 	bl	80002c0 <__aeabi_dsub>
 8006d0e:	4622      	mov	r2, r4
 8006d10:	462b      	mov	r3, r5
 8006d12:	f7f9 fc8d 	bl	8000630 <__aeabi_dmul>
 8006d16:	a35a      	add	r3, pc, #360	; (adr r3, 8006e80 <__ieee754_pow+0xa00>)
 8006d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1c:	f7f9 fad2 	bl	80002c4 <__adddf3>
 8006d20:	4622      	mov	r2, r4
 8006d22:	462b      	mov	r3, r5
 8006d24:	f7f9 fc84 	bl	8000630 <__aeabi_dmul>
 8006d28:	a357      	add	r3, pc, #348	; (adr r3, 8006e88 <__ieee754_pow+0xa08>)
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	f7f9 fac7 	bl	80002c0 <__aeabi_dsub>
 8006d32:	4622      	mov	r2, r4
 8006d34:	462b      	mov	r3, r5
 8006d36:	f7f9 fc7b 	bl	8000630 <__aeabi_dmul>
 8006d3a:	a355      	add	r3, pc, #340	; (adr r3, 8006e90 <__ieee754_pow+0xa10>)
 8006d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d40:	f7f9 fac0 	bl	80002c4 <__adddf3>
 8006d44:	4622      	mov	r2, r4
 8006d46:	462b      	mov	r3, r5
 8006d48:	f7f9 fc72 	bl	8000630 <__aeabi_dmul>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	460b      	mov	r3, r1
 8006d50:	4640      	mov	r0, r8
 8006d52:	4649      	mov	r1, r9
 8006d54:	f7f9 fab4 	bl	80002c0 <__aeabi_dsub>
 8006d58:	4604      	mov	r4, r0
 8006d5a:	460d      	mov	r5, r1
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4640      	mov	r0, r8
 8006d62:	4649      	mov	r1, r9
 8006d64:	f7f9 fc64 	bl	8000630 <__aeabi_dmul>
 8006d68:	2200      	movs	r2, #0
 8006d6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d72:	4620      	mov	r0, r4
 8006d74:	4629      	mov	r1, r5
 8006d76:	f7f9 faa3 	bl	80002c0 <__aeabi_dsub>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d82:	f7f9 fd7f 	bl	8000884 <__aeabi_ddiv>
 8006d86:	4632      	mov	r2, r6
 8006d88:	4604      	mov	r4, r0
 8006d8a:	460d      	mov	r5, r1
 8006d8c:	463b      	mov	r3, r7
 8006d8e:	4640      	mov	r0, r8
 8006d90:	4649      	mov	r1, r9
 8006d92:	f7f9 fc4d 	bl	8000630 <__aeabi_dmul>
 8006d96:	4632      	mov	r2, r6
 8006d98:	463b      	mov	r3, r7
 8006d9a:	f7f9 fa93 	bl	80002c4 <__adddf3>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	460b      	mov	r3, r1
 8006da2:	4620      	mov	r0, r4
 8006da4:	4629      	mov	r1, r5
 8006da6:	f7f9 fa8b 	bl	80002c0 <__aeabi_dsub>
 8006daa:	4642      	mov	r2, r8
 8006dac:	464b      	mov	r3, r9
 8006dae:	f7f9 fa87 	bl	80002c0 <__aeabi_dsub>
 8006db2:	4602      	mov	r2, r0
 8006db4:	460b      	mov	r3, r1
 8006db6:	2000      	movs	r0, #0
 8006db8:	4939      	ldr	r1, [pc, #228]	; (8006ea0 <__ieee754_pow+0xa20>)
 8006dba:	f7f9 fa81 	bl	80002c0 <__aeabi_dsub>
 8006dbe:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006dc2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006dc6:	da29      	bge.n	8006e1c <__ieee754_pow+0x99c>
 8006dc8:	4652      	mov	r2, sl
 8006dca:	f000 f955 	bl	8007078 <scalbn>
 8006dce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dd2:	f7ff bbfe 	b.w	80065d2 <__ieee754_pow+0x152>
 8006dd6:	4b33      	ldr	r3, [pc, #204]	; (8006ea4 <__ieee754_pow+0xa24>)
 8006dd8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006ddc:	429f      	cmp	r7, r3
 8006dde:	f77f af13 	ble.w	8006c08 <__ieee754_pow+0x788>
 8006de2:	4b31      	ldr	r3, [pc, #196]	; (8006ea8 <__ieee754_pow+0xa28>)
 8006de4:	440b      	add	r3, r1
 8006de6:	4303      	orrs	r3, r0
 8006de8:	d009      	beq.n	8006dfe <__ieee754_pow+0x97e>
 8006dea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006dee:	2200      	movs	r2, #0
 8006df0:	2300      	movs	r3, #0
 8006df2:	f7f9 fe8f 	bl	8000b14 <__aeabi_dcmplt>
 8006df6:	3800      	subs	r0, #0
 8006df8:	bf18      	it	ne
 8006dfa:	2001      	movne	r0, #1
 8006dfc:	e453      	b.n	80066a6 <__ieee754_pow+0x226>
 8006dfe:	4622      	mov	r2, r4
 8006e00:	462b      	mov	r3, r5
 8006e02:	f7f9 fa5d 	bl	80002c0 <__aeabi_dsub>
 8006e06:	4642      	mov	r2, r8
 8006e08:	464b      	mov	r3, r9
 8006e0a:	f7f9 fe97 	bl	8000b3c <__aeabi_dcmpge>
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	f43f aefa 	beq.w	8006c08 <__ieee754_pow+0x788>
 8006e14:	e7e9      	b.n	8006dea <__ieee754_pow+0x96a>
 8006e16:	f04f 0a00 	mov.w	sl, #0
 8006e1a:	e720      	b.n	8006c5e <__ieee754_pow+0x7de>
 8006e1c:	4621      	mov	r1, r4
 8006e1e:	e7d6      	b.n	8006dce <__ieee754_pow+0x94e>
 8006e20:	f04f 0b00 	mov.w	fp, #0
 8006e24:	f8df c078 	ldr.w	ip, [pc, #120]	; 8006ea0 <__ieee754_pow+0xa20>
 8006e28:	f7ff bbba 	b.w	80065a0 <__ieee754_pow+0x120>
 8006e2c:	f04f 0b00 	mov.w	fp, #0
 8006e30:	f04f 0c00 	mov.w	ip, #0
 8006e34:	f7ff bbb4 	b.w	80065a0 <__ieee754_pow+0x120>
 8006e38:	4640      	mov	r0, r8
 8006e3a:	4649      	mov	r1, r9
 8006e3c:	f7ff bb3d 	b.w	80064ba <__ieee754_pow+0x3a>
 8006e40:	9200      	str	r2, [sp, #0]
 8006e42:	f7ff bb89 	b.w	8006558 <__ieee754_pow+0xd8>
 8006e46:	2300      	movs	r3, #0
 8006e48:	f7ff bb73 	b.w	8006532 <__ieee754_pow+0xb2>
 8006e4c:	f3af 8000 	nop.w
 8006e50:	652b82fe 	.word	0x652b82fe
 8006e54:	3c971547 	.word	0x3c971547
 8006e58:	00000000 	.word	0x00000000
 8006e5c:	3fe62e43 	.word	0x3fe62e43
 8006e60:	fefa39ef 	.word	0xfefa39ef
 8006e64:	3fe62e42 	.word	0x3fe62e42
 8006e68:	0ca86c39 	.word	0x0ca86c39
 8006e6c:	be205c61 	.word	0xbe205c61
 8006e70:	72bea4d0 	.word	0x72bea4d0
 8006e74:	3e663769 	.word	0x3e663769
 8006e78:	c5d26bf1 	.word	0xc5d26bf1
 8006e7c:	3ebbbd41 	.word	0x3ebbbd41
 8006e80:	af25de2c 	.word	0xaf25de2c
 8006e84:	3f11566a 	.word	0x3f11566a
 8006e88:	16bebd93 	.word	0x16bebd93
 8006e8c:	3f66c16c 	.word	0x3f66c16c
 8006e90:	5555553e 	.word	0x5555553e
 8006e94:	3fc55555 	.word	0x3fc55555
 8006e98:	3fe00000 	.word	0x3fe00000
 8006e9c:	000fffff 	.word	0x000fffff
 8006ea0:	3ff00000 	.word	0x3ff00000
 8006ea4:	4090cbff 	.word	0x4090cbff
 8006ea8:	3f6f3400 	.word	0x3f6f3400

08006eac <__ieee754_sqrt>:
 8006eac:	f8df c158 	ldr.w	ip, [pc, #344]	; 8007008 <__ieee754_sqrt+0x15c>
 8006eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eb4:	ea3c 0c01 	bics.w	ip, ip, r1
 8006eb8:	4606      	mov	r6, r0
 8006eba:	460d      	mov	r5, r1
 8006ebc:	460c      	mov	r4, r1
 8006ebe:	460a      	mov	r2, r1
 8006ec0:	4607      	mov	r7, r0
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	d10f      	bne.n	8006ee6 <__ieee754_sqrt+0x3a>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	460b      	mov	r3, r1
 8006eca:	f7f9 fbb1 	bl	8000630 <__aeabi_dmul>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	4630      	mov	r0, r6
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	f7f9 f9f5 	bl	80002c4 <__adddf3>
 8006eda:	4606      	mov	r6, r0
 8006edc:	460d      	mov	r5, r1
 8006ede:	4630      	mov	r0, r6
 8006ee0:	4629      	mov	r1, r5
 8006ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ee6:	2900      	cmp	r1, #0
 8006ee8:	dc0e      	bgt.n	8006f08 <__ieee754_sqrt+0x5c>
 8006eea:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006eee:	ea5c 0707 	orrs.w	r7, ip, r7
 8006ef2:	d0f4      	beq.n	8006ede <__ieee754_sqrt+0x32>
 8006ef4:	b141      	cbz	r1, 8006f08 <__ieee754_sqrt+0x5c>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	f7f9 f9e1 	bl	80002c0 <__aeabi_dsub>
 8006efe:	4602      	mov	r2, r0
 8006f00:	460b      	mov	r3, r1
 8006f02:	f7f9 fcbf 	bl	8000884 <__aeabi_ddiv>
 8006f06:	e7e8      	b.n	8006eda <__ieee754_sqrt+0x2e>
 8006f08:	1521      	asrs	r1, r4, #20
 8006f0a:	d075      	beq.n	8006ff8 <__ieee754_sqrt+0x14c>
 8006f0c:	07cc      	lsls	r4, r1, #31
 8006f0e:	f04f 0400 	mov.w	r4, #0
 8006f12:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006f16:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8006f1a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006f1e:	bf5e      	ittt	pl
 8006f20:	0fd9      	lsrpl	r1, r3, #31
 8006f22:	005b      	lslpl	r3, r3, #1
 8006f24:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8006f28:	0fd9      	lsrs	r1, r3, #31
 8006f2a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8006f2e:	2516      	movs	r5, #22
 8006f30:	4620      	mov	r0, r4
 8006f32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f36:	107f      	asrs	r7, r7, #1
 8006f38:	005b      	lsls	r3, r3, #1
 8006f3a:	1846      	adds	r6, r0, r1
 8006f3c:	4296      	cmp	r6, r2
 8006f3e:	bfde      	ittt	le
 8006f40:	1b92      	suble	r2, r2, r6
 8006f42:	1870      	addle	r0, r6, r1
 8006f44:	1864      	addle	r4, r4, r1
 8006f46:	0052      	lsls	r2, r2, #1
 8006f48:	3d01      	subs	r5, #1
 8006f4a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006f4e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006f52:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006f56:	d1f0      	bne.n	8006f3a <__ieee754_sqrt+0x8e>
 8006f58:	4629      	mov	r1, r5
 8006f5a:	f04f 0e20 	mov.w	lr, #32
 8006f5e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006f62:	4282      	cmp	r2, r0
 8006f64:	eb06 0c05 	add.w	ip, r6, r5
 8006f68:	dc02      	bgt.n	8006f70 <__ieee754_sqrt+0xc4>
 8006f6a:	d113      	bne.n	8006f94 <__ieee754_sqrt+0xe8>
 8006f6c:	459c      	cmp	ip, r3
 8006f6e:	d811      	bhi.n	8006f94 <__ieee754_sqrt+0xe8>
 8006f70:	f1bc 0f00 	cmp.w	ip, #0
 8006f74:	eb0c 0506 	add.w	r5, ip, r6
 8006f78:	da43      	bge.n	8007002 <__ieee754_sqrt+0x156>
 8006f7a:	2d00      	cmp	r5, #0
 8006f7c:	db41      	blt.n	8007002 <__ieee754_sqrt+0x156>
 8006f7e:	f100 0801 	add.w	r8, r0, #1
 8006f82:	1a12      	subs	r2, r2, r0
 8006f84:	4640      	mov	r0, r8
 8006f86:	459c      	cmp	ip, r3
 8006f88:	bf88      	it	hi
 8006f8a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006f8e:	eba3 030c 	sub.w	r3, r3, ip
 8006f92:	4431      	add	r1, r6
 8006f94:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006f98:	f1be 0e01 	subs.w	lr, lr, #1
 8006f9c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8006fa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006fa4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006fa8:	d1db      	bne.n	8006f62 <__ieee754_sqrt+0xb6>
 8006faa:	4313      	orrs	r3, r2
 8006fac:	d006      	beq.n	8006fbc <__ieee754_sqrt+0x110>
 8006fae:	1c48      	adds	r0, r1, #1
 8006fb0:	bf0b      	itete	eq
 8006fb2:	4671      	moveq	r1, lr
 8006fb4:	3101      	addne	r1, #1
 8006fb6:	3401      	addeq	r4, #1
 8006fb8:	f021 0101 	bicne.w	r1, r1, #1
 8006fbc:	1063      	asrs	r3, r4, #1
 8006fbe:	0849      	lsrs	r1, r1, #1
 8006fc0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006fc4:	07e2      	lsls	r2, r4, #31
 8006fc6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006fca:	bf48      	it	mi
 8006fcc:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006fd0:	460e      	mov	r6, r1
 8006fd2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006fd6:	e782      	b.n	8006ede <__ieee754_sqrt+0x32>
 8006fd8:	0ada      	lsrs	r2, r3, #11
 8006fda:	3815      	subs	r0, #21
 8006fdc:	055b      	lsls	r3, r3, #21
 8006fde:	2a00      	cmp	r2, #0
 8006fe0:	d0fa      	beq.n	8006fd8 <__ieee754_sqrt+0x12c>
 8006fe2:	02d5      	lsls	r5, r2, #11
 8006fe4:	d50a      	bpl.n	8006ffc <__ieee754_sqrt+0x150>
 8006fe6:	f1c1 0420 	rsb	r4, r1, #32
 8006fea:	fa23 f404 	lsr.w	r4, r3, r4
 8006fee:	1e4d      	subs	r5, r1, #1
 8006ff0:	408b      	lsls	r3, r1
 8006ff2:	4322      	orrs	r2, r4
 8006ff4:	1b41      	subs	r1, r0, r5
 8006ff6:	e789      	b.n	8006f0c <__ieee754_sqrt+0x60>
 8006ff8:	4608      	mov	r0, r1
 8006ffa:	e7f0      	b.n	8006fde <__ieee754_sqrt+0x132>
 8006ffc:	0052      	lsls	r2, r2, #1
 8006ffe:	3101      	adds	r1, #1
 8007000:	e7ef      	b.n	8006fe2 <__ieee754_sqrt+0x136>
 8007002:	4680      	mov	r8, r0
 8007004:	e7bd      	b.n	8006f82 <__ieee754_sqrt+0xd6>
 8007006:	bf00      	nop
 8007008:	7ff00000 	.word	0x7ff00000

0800700c <with_errno>:
 800700c:	b570      	push	{r4, r5, r6, lr}
 800700e:	4604      	mov	r4, r0
 8007010:	460d      	mov	r5, r1
 8007012:	4616      	mov	r6, r2
 8007014:	f7ff f880 	bl	8006118 <__errno>
 8007018:	4629      	mov	r1, r5
 800701a:	6006      	str	r6, [r0, #0]
 800701c:	4620      	mov	r0, r4
 800701e:	bd70      	pop	{r4, r5, r6, pc}

08007020 <xflow>:
 8007020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007022:	4615      	mov	r5, r2
 8007024:	461c      	mov	r4, r3
 8007026:	b180      	cbz	r0, 800704a <xflow+0x2a>
 8007028:	4610      	mov	r0, r2
 800702a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800702e:	e9cd 0100 	strd	r0, r1, [sp]
 8007032:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007036:	4628      	mov	r0, r5
 8007038:	4621      	mov	r1, r4
 800703a:	f7f9 faf9 	bl	8000630 <__aeabi_dmul>
 800703e:	2222      	movs	r2, #34	; 0x22
 8007040:	b003      	add	sp, #12
 8007042:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007046:	f7ff bfe1 	b.w	800700c <with_errno>
 800704a:	4610      	mov	r0, r2
 800704c:	4619      	mov	r1, r3
 800704e:	e7ee      	b.n	800702e <xflow+0xe>

08007050 <__math_uflow>:
 8007050:	2200      	movs	r2, #0
 8007052:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007056:	f7ff bfe3 	b.w	8007020 <xflow>

0800705a <__math_oflow>:
 800705a:	2200      	movs	r2, #0
 800705c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007060:	f7ff bfde 	b.w	8007020 <xflow>

08007064 <fabs>:
 8007064:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007068:	4770      	bx	lr

0800706a <finite>:
 800706a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800706e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007072:	0fc0      	lsrs	r0, r0, #31
 8007074:	4770      	bx	lr
	...

08007078 <scalbn>:
 8007078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800707e:	4604      	mov	r4, r0
 8007080:	460d      	mov	r5, r1
 8007082:	4617      	mov	r7, r2
 8007084:	460b      	mov	r3, r1
 8007086:	b996      	cbnz	r6, 80070ae <scalbn+0x36>
 8007088:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800708c:	4303      	orrs	r3, r0
 800708e:	d039      	beq.n	8007104 <scalbn+0x8c>
 8007090:	4b33      	ldr	r3, [pc, #204]	; (8007160 <scalbn+0xe8>)
 8007092:	2200      	movs	r2, #0
 8007094:	f7f9 facc 	bl	8000630 <__aeabi_dmul>
 8007098:	4b32      	ldr	r3, [pc, #200]	; (8007164 <scalbn+0xec>)
 800709a:	4604      	mov	r4, r0
 800709c:	429f      	cmp	r7, r3
 800709e:	460d      	mov	r5, r1
 80070a0:	da0f      	bge.n	80070c2 <scalbn+0x4a>
 80070a2:	a32b      	add	r3, pc, #172	; (adr r3, 8007150 <scalbn+0xd8>)
 80070a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a8:	f7f9 fac2 	bl	8000630 <__aeabi_dmul>
 80070ac:	e006      	b.n	80070bc <scalbn+0x44>
 80070ae:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80070b2:	4296      	cmp	r6, r2
 80070b4:	d10a      	bne.n	80070cc <scalbn+0x54>
 80070b6:	4602      	mov	r2, r0
 80070b8:	f7f9 f904 	bl	80002c4 <__adddf3>
 80070bc:	4604      	mov	r4, r0
 80070be:	460d      	mov	r5, r1
 80070c0:	e020      	b.n	8007104 <scalbn+0x8c>
 80070c2:	460b      	mov	r3, r1
 80070c4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80070c8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80070cc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80070d0:	19b9      	adds	r1, r7, r6
 80070d2:	4291      	cmp	r1, r2
 80070d4:	dd0e      	ble.n	80070f4 <scalbn+0x7c>
 80070d6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80070da:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80070de:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80070e2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80070e6:	4820      	ldr	r0, [pc, #128]	; (8007168 <scalbn+0xf0>)
 80070e8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80070ec:	a31a      	add	r3, pc, #104	; (adr r3, 8007158 <scalbn+0xe0>)
 80070ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f2:	e7d9      	b.n	80070a8 <scalbn+0x30>
 80070f4:	2900      	cmp	r1, #0
 80070f6:	dd08      	ble.n	800710a <scalbn+0x92>
 80070f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80070fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007100:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8007104:	4620      	mov	r0, r4
 8007106:	4629      	mov	r1, r5
 8007108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800710a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800710e:	da12      	bge.n	8007136 <scalbn+0xbe>
 8007110:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007114:	429f      	cmp	r7, r3
 8007116:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800711a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800711e:	dcdc      	bgt.n	80070da <scalbn+0x62>
 8007120:	a30b      	add	r3, pc, #44	; (adr r3, 8007150 <scalbn+0xd8>)
 8007122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007126:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800712a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800712e:	480f      	ldr	r0, [pc, #60]	; (800716c <scalbn+0xf4>)
 8007130:	f041 011f 	orr.w	r1, r1, #31
 8007134:	e7b8      	b.n	80070a8 <scalbn+0x30>
 8007136:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800713a:	3136      	adds	r1, #54	; 0x36
 800713c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007140:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8007144:	4620      	mov	r0, r4
 8007146:	4629      	mov	r1, r5
 8007148:	2200      	movs	r2, #0
 800714a:	4b09      	ldr	r3, [pc, #36]	; (8007170 <scalbn+0xf8>)
 800714c:	e7ac      	b.n	80070a8 <scalbn+0x30>
 800714e:	bf00      	nop
 8007150:	c2f8f359 	.word	0xc2f8f359
 8007154:	01a56e1f 	.word	0x01a56e1f
 8007158:	8800759c 	.word	0x8800759c
 800715c:	7e37e43c 	.word	0x7e37e43c
 8007160:	43500000 	.word	0x43500000
 8007164:	ffff3cb0 	.word	0xffff3cb0
 8007168:	8800759c 	.word	0x8800759c
 800716c:	c2f8f359 	.word	0xc2f8f359
 8007170:	3c900000 	.word	0x3c900000

08007174 <_init>:
 8007174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007176:	bf00      	nop
 8007178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800717a:	bc08      	pop	{r3}
 800717c:	469e      	mov	lr, r3
 800717e:	4770      	bx	lr

08007180 <_fini>:
 8007180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007182:	bf00      	nop
 8007184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007186:	bc08      	pop	{r3}
 8007188:	469e      	mov	lr, r3
 800718a:	4770      	bx	lr
