
Senior_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b78  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08006c88  08006c88  00016c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e50  08006e50  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006e50  08006e50  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e50  08006e50  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e50  08006e50  00016e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e54  08006e54  00016e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006e58  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000628  20000070  08006ec8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  08006ec8  00020698  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de81  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002673  00000000  00000000  0002df5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  000305d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009bf  00000000  00000000  00031268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000197c1  00000000  00000000  00031c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011019  00000000  00000000  0004b3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000881f8  00000000  00000000  0005c401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a14  00000000  00000000  000e45fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000e8010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08006c70 	.word	0x08006c70

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08006c70 	.word	0x08006c70

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dc6:	2afd      	cmp	r2, #253	; 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	; 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	; 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	; 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__gesf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295
 8001018:	e006      	b.n	8001028 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__lesf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpsf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001030:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	bf18      	it	ne
 800103a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800103e:	d011      	beq.n	8001064 <__cmpsf2+0x40>
 8001040:	b001      	add	sp, #4
 8001042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001046:	bf18      	it	ne
 8001048:	ea90 0f01 	teqne	r0, r1
 800104c:	bf58      	it	pl
 800104e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001052:	bf88      	it	hi
 8001054:	17c8      	asrhi	r0, r1, #31
 8001056:	bf38      	it	cc
 8001058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800105c:	bf18      	it	ne
 800105e:	f040 0001 	orrne.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	d102      	bne.n	8001070 <__cmpsf2+0x4c>
 800106a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800106e:	d105      	bne.n	800107c <__cmpsf2+0x58>
 8001070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001074:	d1e4      	bne.n	8001040 <__cmpsf2+0x1c>
 8001076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107a:	d0e1      	beq.n	8001040 <__cmpsf2+0x1c>
 800107c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_cfrcmple>:
 8001084:	4684      	mov	ip, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4661      	mov	r1, ip
 800108a:	e7ff      	b.n	800108c <__aeabi_cfcmpeq>

0800108c <__aeabi_cfcmpeq>:
 800108c:	b50f      	push	{r0, r1, r2, r3, lr}
 800108e:	f7ff ffc9 	bl	8001024 <__cmpsf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	bf48      	it	mi
 8001096:	f110 0f00 	cmnmi.w	r0, #0
 800109a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800109c <__aeabi_fcmpeq>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff fff4 	bl	800108c <__aeabi_cfcmpeq>
 80010a4:	bf0c      	ite	eq
 80010a6:	2001      	moveq	r0, #1
 80010a8:	2000      	movne	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmplt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffea 	bl	800108c <__aeabi_cfcmpeq>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmple>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffe0 	bl	800108c <__aeabi_cfcmpeq>
 80010cc:	bf94      	ite	ls
 80010ce:	2001      	movls	r0, #1
 80010d0:	2000      	movhi	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmpge>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffd2 	bl	8001084 <__aeabi_cfrcmple>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpgt>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffc8 	bl	8001084 <__aeabi_cfrcmple>
 80010f4:	bf34      	ite	cc
 80010f6:	2001      	movcc	r0, #1
 80010f8:	2000      	movcs	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <dev_trace_send_byte_int>:

//------------------------------------------------------------------------------
//         Local functions
//------------------------------------------------------------------------------
void dev_trace_send_byte_int(UINT8 b)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
		UINT8 i; 

		for (i=0; i<8; i++)
 800110a:	2300      	movs	r3, #0
 800110c:	73fb      	strb	r3, [r7, #15]
 800110e:	e015      	b.n	800113c <dev_trace_send_byte_int+0x3c>
		{
				dev_gpio_set(&trace_spi[TRACE_SPI_MOSI], b & 0x80); 
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001116:	b2db      	uxtb	r3, r3
 8001118:	4619      	mov	r1, r3
 800111a:	480c      	ldr	r0, [pc, #48]	; (800114c <dev_trace_send_byte_int+0x4c>)
 800111c:	f001 f8ba 	bl	8002294 <dev_gpio_set>
//				dev_gpio_set(&trace_spi[TRACE_SPI_MOSI], b & 0x80); 
				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 1); 
 8001120:	2101      	movs	r1, #1
 8001122:	480b      	ldr	r0, [pc, #44]	; (8001150 <dev_trace_send_byte_int+0x50>)
 8001124:	f001 f8b6 	bl	8002294 <dev_gpio_set>
//				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 1); 
				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 0); 
 8001128:	2100      	movs	r1, #0
 800112a:	4809      	ldr	r0, [pc, #36]	; (8001150 <dev_trace_send_byte_int+0x50>)
 800112c:	f001 f8b2 	bl	8002294 <dev_gpio_set>
//				dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 0); 
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_SCK].port, trace_spi[TRACE_SPI_SCK].pin, b & 0x80);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 1);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
			
				b = b << 1;
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	71fb      	strb	r3, [r7, #7]
		for (i=0; i<8; i++)
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	3301      	adds	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	2b07      	cmp	r3, #7
 8001140:	d9e6      	bls.n	8001110 <dev_trace_send_byte_int+0x10>
		}
}
 8001142:	bf00      	nop
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000090 	.word	0x20000090
 8001150:	200000b0 	.word	0x200000b0

08001154 <dev_trace_init>:

//------------------------------------------------------------------------------
//         Global functions
//------------------------------------------------------------------------------
UINT8 dev_trace_init(dev_trace_init_t* init)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
		UINT8 ret;


		ret = dev_gpio_init_simp(&trace_spi[TRACE_SPI_MOSI], init->mosi.port, init->mosi.pin, GPIO_MODE_OUTPUT_PP);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7899      	ldrb	r1, [r3, #2]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	881a      	ldrh	r2, [r3, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	4827      	ldr	r0, [pc, #156]	; (8001204 <dev_trace_init+0xb0>)
 8001168:	f001 f864 	bl	8002234 <dev_gpio_init_simp>
 800116c:	4603      	mov	r3, r0
 800116e:	73fb      	strb	r3, [r7, #15]
		if (ret) return TRACE_EERROR(ret);
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d007      	beq.n	8001186 <dev_trace_init+0x32>
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	224e      	movs	r2, #78	; 0x4e
 800117a:	4923      	ldr	r1, [pc, #140]	; (8001208 <dev_trace_init+0xb4>)
 800117c:	4618      	mov	r0, r3
 800117e:	f000 f873 	bl	8001268 <dev_trace_get_error>
 8001182:	4603      	mov	r3, r0
 8001184:	e039      	b.n	80011fa <dev_trace_init+0xa6>
		ret = dev_gpio_init_simp(&trace_spi[TRACE_SPI_SCK], init->sck.port, init->sck.pin, GPIO_MODE_OUTPUT_PP);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7999      	ldrb	r1, [r3, #6]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	889a      	ldrh	r2, [r3, #4]
 800118e:	2301      	movs	r3, #1
 8001190:	481e      	ldr	r0, [pc, #120]	; (800120c <dev_trace_init+0xb8>)
 8001192:	f001 f84f 	bl	8002234 <dev_gpio_init_simp>
 8001196:	4603      	mov	r3, r0
 8001198:	73fb      	strb	r3, [r7, #15]
		if (ret) return TRACE_EERROR(ret);
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d007      	beq.n	80011b0 <dev_trace_init+0x5c>
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	2250      	movs	r2, #80	; 0x50
 80011a4:	4918      	ldr	r1, [pc, #96]	; (8001208 <dev_trace_init+0xb4>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f85e 	bl	8001268 <dev_trace_get_error>
 80011ac:	4603      	mov	r3, r0
 80011ae:	e024      	b.n	80011fa <dev_trace_init+0xa6>
		ret = dev_gpio_init_simp(&trace_spi[TRACE_SPI_NSS], init->nss.port, init->nss.pin, GPIO_MODE_OUTPUT_PP);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	7a99      	ldrb	r1, [r3, #10]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	891a      	ldrh	r2, [r3, #8]
 80011b8:	2301      	movs	r3, #1
 80011ba:	4815      	ldr	r0, [pc, #84]	; (8001210 <dev_trace_init+0xbc>)
 80011bc:	f001 f83a 	bl	8002234 <dev_gpio_init_simp>
 80011c0:	4603      	mov	r3, r0
 80011c2:	73fb      	strb	r3, [r7, #15]
		if (ret) return TRACE_EERROR(ret);
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d007      	beq.n	80011da <dev_trace_init+0x86>
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	2252      	movs	r2, #82	; 0x52
 80011ce:	490e      	ldr	r1, [pc, #56]	; (8001208 <dev_trace_init+0xb4>)
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f849 	bl	8001268 <dev_trace_get_error>
 80011d6:	4603      	mov	r3, r0
 80011d8:	e00f      	b.n	80011fa <dev_trace_init+0xa6>
//  HAL_GPIO_Init(trace_spi[TRACE_SPI_NSS].port, &GPIO_InitStruct);	
	
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_NSS].port, trace_spi[TRACE_SPI_NSS].pin, 1);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_SCK].port, trace_spi[TRACE_SPI_SCK].pin, 0);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
		dev_gpio_set(&trace_spi[TRACE_SPI_NSS], 1);
 80011da:	2101      	movs	r1, #1
 80011dc:	480c      	ldr	r0, [pc, #48]	; (8001210 <dev_trace_init+0xbc>)
 80011de:	f001 f859 	bl	8002294 <dev_gpio_set>
		dev_gpio_set(&trace_spi[TRACE_SPI_SCK], 0);
 80011e2:	2100      	movs	r1, #0
 80011e4:	4809      	ldr	r0, [pc, #36]	; (800120c <dev_trace_init+0xb8>)
 80011e6:	f001 f855 	bl	8002294 <dev_gpio_set>
		dev_gpio_set(&trace_spi[TRACE_SPI_MOSI], 0);
 80011ea:	2100      	movs	r1, #0
 80011ec:	4805      	ldr	r0, [pc, #20]	; (8001204 <dev_trace_init+0xb0>)
 80011ee:	f001 f851 	bl	8002294 <dev_gpio_set>

		trace_ready = 1;	
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <dev_trace_init+0xc0>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	701a      	strb	r2, [r3, #0]

		return RET_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000090 	.word	0x20000090
 8001208:	08006c88 	.word	0x08006c88
 800120c:	200000b0 	.word	0x200000b0
 8001210:	200000d0 	.word	0x200000d0
 8001214:	2000008c 	.word	0x2000008c

08001218 <dev_trace_send_byte>:

// Send one Byte 
void dev_trace_send_byte(UINT8 b)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
	if (trace_ready == 0) return;
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <dev_trace_send_byte+0x48>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d016      	beq.n	8001258 <dev_trace_send_byte+0x40>

//		dev_gpio_set(&trace_spi[TRACE_SPI_NSS], 0);
		HAL_GPIO_WritePin(trace_spi[TRACE_SPI_NSS].port, trace_spi[TRACE_SPI_NSS].pin, 0);
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <dev_trace_send_byte+0x4c>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	4a0d      	ldr	r2, [pc, #52]	; (8001264 <dev_trace_send_byte+0x4c>)
 8001230:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 8001234:	2200      	movs	r2, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f003 f918 	bl	800446c <HAL_GPIO_WritePin>
		dev_trace_send_byte_int(b);
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff5e 	bl	8001100 <dev_trace_send_byte_int>
//		dev_gpio_set(&trace_spi[TRACE_SPI_NSS], 1);
	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_NSS].port, trace_spi[TRACE_SPI_NSS].pin, 1);
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <dev_trace_send_byte+0x4c>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	4a06      	ldr	r2, [pc, #24]	; (8001264 <dev_trace_send_byte+0x4c>)
 800124a:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 800124e:	2201      	movs	r2, #1
 8001250:	4618      	mov	r0, r3
 8001252:	f003 f90b 	bl	800446c <HAL_GPIO_WritePin>
 8001256:	e000      	b.n	800125a <dev_trace_send_byte+0x42>
	if (trace_ready == 0) return;
 8001258:	bf00      	nop
//		HAL_GPIO_WritePin(trace_spi[TRACE_SPI_SCK].port, trace_spi[TRACE_SPI_SCK].pin, 0);
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
}
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2000008c 	.word	0x2000008c
 8001264:	20000090 	.word	0x20000090

08001268 <dev_trace_get_error>:
//	HAL_GPIO_WritePin(trace_spi[TRACE_SPI_MOSI].port, trace_spi[TRACE_SPI_MOSI].pin, 0);
}

// Get Trace error
uint8_t dev_trace_get_error(uint8_t error_value, char* file_name, uint32_t file_line)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	73fb      	strb	r3, [r7, #15]
		if (error_value == RET_OK) return RET_OK;
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <dev_trace_get_error+0x18>
 800127c:	2300      	movs	r3, #0
 800127e:	e006      	b.n	800128e <dev_trace_get_error+0x26>
	
		debug_printf("EE> %d at %s:%d\n\r", error_value, file_name, file_line); 
 8001280:	7bf9      	ldrb	r1, [r7, #15]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68ba      	ldr	r2, [r7, #8]
 8001286:	4804      	ldr	r0, [pc, #16]	; (8001298 <dev_trace_get_error+0x30>)
 8001288:	f000 f9b6 	bl	80015f8 <debug_printf>

		return error_value;
 800128c:	7bfb      	ldrb	r3, [r7, #15]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	08006ca0 	.word	0x08006ca0

0800129c <dev_trace_generate_error>:

// Generate Trace error
uint8_t dev_trace_generate_error(char* error_name, char* file_name, uint32_t file_line)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
		trace_error_id++;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <dev_trace_generate_error+0x54>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	3301      	adds	r3, #1
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <dev_trace_generate_error+0x54>)
 80012b2:	701a      	strb	r2, [r3, #0]
		if (trace_error_id < 100) trace_error_id = 100;
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <dev_trace_generate_error+0x54>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b63      	cmp	r3, #99	; 0x63
 80012ba:	d802      	bhi.n	80012c2 <dev_trace_generate_error+0x26>
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <dev_trace_generate_error+0x54>)
 80012be:	2264      	movs	r2, #100	; 0x64
 80012c0:	701a      	strb	r2, [r3, #0]
		if (trace_error_id >= 200) trace_error_id = 100;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <dev_trace_generate_error+0x54>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2bc7      	cmp	r3, #199	; 0xc7
 80012c8:	d902      	bls.n	80012d0 <dev_trace_generate_error+0x34>
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <dev_trace_generate_error+0x54>)
 80012cc:	2264      	movs	r2, #100	; 0x64
 80012ce:	701a      	strb	r2, [r3, #0]

		debug_printf("GE> %d %s at %s:%d\n\r", trace_error_id, error_name, file_name, file_line);
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <dev_trace_generate_error+0x54>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <dev_trace_generate_error+0x58>)
 80012e0:	f000 f98a 	bl	80015f8 <debug_printf>

		return trace_error_id;
 80012e4:	4b02      	ldr	r3, [pc, #8]	; (80012f0 <dev_trace_generate_error+0x54>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2000008d 	.word	0x2000008d
 80012f4:	08006cb4 	.word	0x08006cb4

080012f8 <debug_printf_char>:
}

// Custom Printf function
//////////////////////////////////////////////////////////////////////////
void debug_printf_char(UINT8 c)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
    if (c < ' ') 
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2b1f      	cmp	r3, #31
 8001306:	d82a      	bhi.n	800135e <debug_printf_char+0x66>
    {    
        dev_trace_send_byte('~');
 8001308:	207e      	movs	r0, #126	; 0x7e
 800130a:	f7ff ff85 	bl	8001218 <dev_trace_send_byte>
        dev_trace_send_byte(HB2HEX(c / 0x10));
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b9f      	cmp	r3, #159	; 0x9f
 8001312:	d905      	bls.n	8001320 <debug_printf_char+0x28>
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	b2db      	uxtb	r3, r3
 800131a:	3337      	adds	r3, #55	; 0x37
 800131c:	b2db      	uxtb	r3, r3
 800131e:	e004      	b.n	800132a <debug_printf_char+0x32>
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	091b      	lsrs	r3, r3, #4
 8001324:	b2db      	uxtb	r3, r3
 8001326:	3330      	adds	r3, #48	; 0x30
 8001328:	b2db      	uxtb	r3, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ff74 	bl	8001218 <dev_trace_send_byte>
        dev_trace_send_byte(HB2HEX(c % 0x10));
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b09      	cmp	r3, #9
 800133a:	d906      	bls.n	800134a <debug_printf_char+0x52>
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	b2db      	uxtb	r3, r3
 8001344:	3337      	adds	r3, #55	; 0x37
 8001346:	b2db      	uxtb	r3, r3
 8001348:	e005      	b.n	8001356 <debug_printf_char+0x5e>
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f003 030f 	and.w	r3, r3, #15
 8001350:	b2db      	uxtb	r3, r3
 8001352:	3330      	adds	r3, #48	; 0x30
 8001354:	b2db      	uxtb	r3, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff5e 	bl	8001218 <dev_trace_send_byte>
    }
    else dev_trace_send_byte(c);
}
 800135c:	e003      	b.n	8001366 <debug_printf_char+0x6e>
    else dev_trace_send_byte(c);
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff59 	bl	8001218 <dev_trace_send_byte>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <debug_printf_text>:

void debug_printf_text(char* text)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b084      	sub	sp, #16
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
   int i = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]

   while(text[i] != 0)
 800137a:	e009      	b.n	8001390 <debug_printf_text+0x22>
   {   
      dev_trace_send_byte(text[i]);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff47 	bl	8001218 <dev_trace_send_byte>
      i++;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	3301      	adds	r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
   while(text[i] != 0)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1ef      	bne.n	800137c <debug_printf_text+0xe>
   }   
}
 800139c:	bf00      	nop
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <debug_printf_ulong>:

void debug_printf_ulong(unsigned long d)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
   UINT8 buf[10], len = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	75fb      	strb	r3, [r7, #23]

   if (d == 0) 
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d11c      	bne.n	80013f4 <debug_printf_ulong+0x4c>
   {
      dev_trace_send_byte('0');
 80013ba:	2030      	movs	r0, #48	; 0x30
 80013bc:	f7ff ff2c 	bl	8001218 <dev_trace_send_byte>
 80013c0:	e02d      	b.n	800141e <debug_printf_ulong+0x76>
      return;
   }   
   
   while (d > 0)
   {   
      buf[len] = d % 10;
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	4b17      	ldr	r3, [pc, #92]	; (8001424 <debug_printf_ulong+0x7c>)
 80013c6:	fba3 2301 	umull	r2, r3, r3, r1
 80013ca:	08da      	lsrs	r2, r3, #3
 80013cc:	4613      	mov	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	1aca      	subs	r2, r1, r3
 80013d6:	7dfb      	ldrb	r3, [r7, #23]
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	3318      	adds	r3, #24
 80013dc:	443b      	add	r3, r7
 80013de:	f803 2c0c 	strb.w	r2, [r3, #-12]
      d = d / 10;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <debug_printf_ulong+0x7c>)
 80013e6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ea:	08db      	lsrs	r3, r3, #3
 80013ec:	607b      	str	r3, [r7, #4]
      len++;
 80013ee:	7dfb      	ldrb	r3, [r7, #23]
 80013f0:	3301      	adds	r3, #1
 80013f2:	75fb      	strb	r3, [r7, #23]
   while (d > 0)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1e3      	bne.n	80013c2 <debug_printf_ulong+0x1a>
   }   

   while (len > 0)
 80013fa:	e00d      	b.n	8001418 <debug_printf_ulong+0x70>
   {   
      dev_trace_send_byte(buf[len - 1] + 0x30);
 80013fc:	7dfb      	ldrb	r3, [r7, #23]
 80013fe:	3b01      	subs	r3, #1
 8001400:	3318      	adds	r3, #24
 8001402:	443b      	add	r3, r7
 8001404:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001408:	3330      	adds	r3, #48	; 0x30
 800140a:	b2db      	uxtb	r3, r3
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff03 	bl	8001218 <dev_trace_send_byte>
      len--;
 8001412:	7dfb      	ldrb	r3, [r7, #23]
 8001414:	3b01      	subs	r3, #1
 8001416:	75fb      	strb	r3, [r7, #23]
   while (len > 0)
 8001418:	7dfb      	ldrb	r3, [r7, #23]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1ee      	bne.n	80013fc <debug_printf_ulong+0x54>
   }   
}
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	cccccccd 	.word	0xcccccccd

08001428 <debug_printf_long>:

   debug_printf_ulong(d);
}

void debug_printf_long(unsigned long d, UINT8 mode)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	70fb      	strb	r3, [r7, #3]
   UINT8 buf[10], len = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	75fb      	strb	r3, [r7, #23]

   if (d == 0) 
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d103      	bne.n	8001446 <debug_printf_long+0x1e>
   {
      dev_trace_send_byte('0');
 800143e:	2030      	movs	r0, #48	; 0x30
 8001440:	f7ff feea 	bl	8001218 <dev_trace_send_byte>
 8001444:	e03a      	b.n	80014bc <debug_printf_long+0x94>
      return;
   }   
   
   if (mode == 'd') 
 8001446:	78fb      	ldrb	r3, [r7, #3]
 8001448:	2b64      	cmp	r3, #100	; 0x64
 800144a:	d122      	bne.n	8001492 <debug_printf_long+0x6a>
   if ((signed long)d < 0) 
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	da1f      	bge.n	8001492 <debug_printf_long+0x6a>
   {
      dev_trace_send_byte('-');
 8001452:	202d      	movs	r0, #45	; 0x2d
 8001454:	f7ff fee0 	bl	8001218 <dev_trace_send_byte>
      d = -((signed long)d);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	425b      	negs	r3, r3
 800145c:	607b      	str	r3, [r7, #4]
   }   

   while (d > 0)
 800145e:	e018      	b.n	8001492 <debug_printf_long+0x6a>
   {   
      buf[len] = d % 10;
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <debug_printf_long+0x9c>)
 8001464:	fba3 2301 	umull	r2, r3, r3, r1
 8001468:	08da      	lsrs	r2, r3, #3
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	1aca      	subs	r2, r1, r3
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	3318      	adds	r3, #24
 800147a:	443b      	add	r3, r7
 800147c:	f803 2c0c 	strb.w	r2, [r3, #-12]
      d = d / 10;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a10      	ldr	r2, [pc, #64]	; (80014c4 <debug_printf_long+0x9c>)
 8001484:	fba2 2303 	umull	r2, r3, r2, r3
 8001488:	08db      	lsrs	r3, r3, #3
 800148a:	607b      	str	r3, [r7, #4]
      len++;
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	3301      	adds	r3, #1
 8001490:	75fb      	strb	r3, [r7, #23]
   while (d > 0)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1e3      	bne.n	8001460 <debug_printf_long+0x38>
   }   

   while (len > 0)
 8001498:	e00d      	b.n	80014b6 <debug_printf_long+0x8e>
   {   
      dev_trace_send_byte(buf[len - 1] + 0x30);
 800149a:	7dfb      	ldrb	r3, [r7, #23]
 800149c:	3b01      	subs	r3, #1
 800149e:	3318      	adds	r3, #24
 80014a0:	443b      	add	r3, r7
 80014a2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80014a6:	3330      	adds	r3, #48	; 0x30
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff feb4 	bl	8001218 <dev_trace_send_byte>
      len--;
 80014b0:	7dfb      	ldrb	r3, [r7, #23]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	75fb      	strb	r3, [r7, #23]
   while (len > 0)
 80014b6:	7dfb      	ldrb	r3, [r7, #23]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1ee      	bne.n	800149a <debug_printf_long+0x72>
   }   
}
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	cccccccd 	.word	0xcccccccd

080014c8 <debug_printf_hex>:

void debug_printf_hex(UINT32 d, UINT8 mode)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	70fb      	strb	r3, [r7, #3]
   UINT32 buf = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]
   UINT8 b, len = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	72fb      	strb	r3, [r7, #11]

   if (d == 0) 
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d112      	bne.n	8001508 <debug_printf_hex+0x40>
   {
      dev_trace_send_byte('0');
 80014e2:	2030      	movs	r0, #48	; 0x30
 80014e4:	f7ff fe98 	bl	8001218 <dev_trace_send_byte>
      return;
 80014e8:	e03a      	b.n	8001560 <debug_printf_hex+0x98>
   }   

   while (d > 0)
   {  
      buf = buf << 4;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	011b      	lsls	r3, r3, #4
 80014ee:	60fb      	str	r3, [r7, #12]
      buf = buf + d % 0x10;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	4413      	add	r3, r2
 80014fa:	60fb      	str	r3, [r7, #12]
      d = d >> 4;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	091b      	lsrs	r3, r3, #4
 8001500:	607b      	str	r3, [r7, #4]
      len++;
 8001502:	7afb      	ldrb	r3, [r7, #11]
 8001504:	3301      	adds	r3, #1
 8001506:	72fb      	strb	r3, [r7, #11]
   while (d > 0)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1ed      	bne.n	80014ea <debug_printf_hex+0x22>
   }   

   while (len > 0)
 800150e:	e024      	b.n	800155a <debug_printf_hex+0x92>
   {   
      b = buf % 0x10;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	f003 030f 	and.w	r3, r3, #15
 8001518:	72bb      	strb	r3, [r7, #10]
   
      if (b < 0xA) dev_trace_send_byte(b + 0x30);
 800151a:	7abb      	ldrb	r3, [r7, #10]
 800151c:	2b09      	cmp	r3, #9
 800151e:	d806      	bhi.n	800152e <debug_printf_hex+0x66>
 8001520:	7abb      	ldrb	r3, [r7, #10]
 8001522:	3330      	adds	r3, #48	; 0x30
 8001524:	b2db      	uxtb	r3, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fe76 	bl	8001218 <dev_trace_send_byte>
 800152c:	e00f      	b.n	800154e <debug_printf_hex+0x86>
      else  
      {      
         if (mode == 'X') dev_trace_send_byte(b + 0x41 - 0xA);
 800152e:	78fb      	ldrb	r3, [r7, #3]
 8001530:	2b58      	cmp	r3, #88	; 0x58
 8001532:	d106      	bne.n	8001542 <debug_printf_hex+0x7a>
 8001534:	7abb      	ldrb	r3, [r7, #10]
 8001536:	3337      	adds	r3, #55	; 0x37
 8001538:	b2db      	uxtb	r3, r3
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fe6c 	bl	8001218 <dev_trace_send_byte>
 8001540:	e005      	b.n	800154e <debug_printf_hex+0x86>
                  else  dev_trace_send_byte(b + 0x61 - 0xA);
 8001542:	7abb      	ldrb	r3, [r7, #10]
 8001544:	3357      	adds	r3, #87	; 0x57
 8001546:	b2db      	uxtb	r3, r3
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fe65 	bl	8001218 <dev_trace_send_byte>
      }

      buf = buf >> 4;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	091b      	lsrs	r3, r3, #4
 8001552:	60fb      	str	r3, [r7, #12]
      len--;
 8001554:	7afb      	ldrb	r3, [r7, #11]
 8001556:	3b01      	subs	r3, #1
 8001558:	72fb      	strb	r3, [r7, #11]
   while (len > 0)
 800155a:	7afb      	ldrb	r3, [r7, #11]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1d7      	bne.n	8001510 <debug_printf_hex+0x48>
   }   
}
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <debug_printf_bin>:

void debug_printf_bin(UINT32 d, UINT8 mode)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b084      	sub	sp, #16
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	460b      	mov	r3, r1
 8001570:	70fb      	strb	r3, [r7, #3]
   UINT32 buf = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
   UINT8 i, len = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	72bb      	strb	r3, [r7, #10]

   if (mode == 'B') len = 32;
 800157a:	78fb      	ldrb	r3, [r7, #3]
 800157c:	2b42      	cmp	r3, #66	; 0x42
 800157e:	d102      	bne.n	8001586 <debug_printf_bin+0x20>
 8001580:	2320      	movs	r3, #32
 8001582:	72bb      	strb	r3, [r7, #10]
 8001584:	e001      	b.n	800158a <debug_printf_bin+0x24>
                else len = 8;
 8001586:	2308      	movs	r3, #8
 8001588:	72bb      	strb	r3, [r7, #10]

   for(i=0; i<len; i++)
 800158a:	2300      	movs	r3, #0
 800158c:	72fb      	strb	r3, [r7, #11]
 800158e:	e010      	b.n	80015b2 <debug_printf_bin+0x4c>
   {
      buf = buf << 1;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	60fb      	str	r3, [r7, #12]
      if (d % 2) buf++;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b00      	cmp	r3, #0
 800159e:	d002      	beq.n	80015a6 <debug_printf_bin+0x40>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	3301      	adds	r3, #1
 80015a4:	60fb      	str	r3, [r7, #12]
      d = d >> 1;      
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	085b      	lsrs	r3, r3, #1
 80015aa:	607b      	str	r3, [r7, #4]
   for(i=0; i<len; i++)
 80015ac:	7afb      	ldrb	r3, [r7, #11]
 80015ae:	3301      	adds	r3, #1
 80015b0:	72fb      	strb	r3, [r7, #11]
 80015b2:	7afa      	ldrb	r2, [r7, #11]
 80015b4:	7abb      	ldrb	r3, [r7, #10]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d3ea      	bcc.n	8001590 <debug_printf_bin+0x2a>
   }   
                
   for(i=0; i<len; i++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	72fb      	strb	r3, [r7, #11]
 80015be:	e011      	b.n	80015e4 <debug_printf_bin+0x7e>
   {
      if (buf % 2) dev_trace_send_byte('1');
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <debug_printf_bin+0x6c>
 80015ca:	2031      	movs	r0, #49	; 0x31
 80015cc:	f7ff fe24 	bl	8001218 <dev_trace_send_byte>
 80015d0:	e002      	b.n	80015d8 <debug_printf_bin+0x72>
            else dev_trace_send_byte('0');
 80015d2:	2030      	movs	r0, #48	; 0x30
 80015d4:	f7ff fe20 	bl	8001218 <dev_trace_send_byte>
               
      buf = buf >> 1;      
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	085b      	lsrs	r3, r3, #1
 80015dc:	60fb      	str	r3, [r7, #12]
   for(i=0; i<len; i++)
 80015de:	7afb      	ldrb	r3, [r7, #11]
 80015e0:	3301      	adds	r3, #1
 80015e2:	72fb      	strb	r3, [r7, #11]
 80015e4:	7afa      	ldrb	r2, [r7, #11]
 80015e6:	7abb      	ldrb	r3, [r7, #10]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d3e9      	bcc.n	80015c0 <debug_printf_bin+0x5a>
   }   
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <debug_printf>:

void debug_printf(char* text, ...)
{
 80015f8:	b40f      	push	{r0, r1, r2, r3}
 80015fa:	b5b0      	push	{r4, r5, r7, lr}
 80015fc:	b098      	sub	sp, #96	; 0x60
 80015fe:	af00      	add	r7, sp, #0
   va_list tag;
   int i = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	65fb      	str	r3, [r7, #92]	; 0x5c

   va_start(tag, text);
 8001604:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001608:	60bb      	str	r3, [r7, #8]
   
   while(text[i] != 0)
 800160a:	e225      	b.n	8001a58 <debug_printf+0x460>
   {
      if (text[i] != '%') 
 800160c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800160e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001610:	4413      	add	r3, r2
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b25      	cmp	r3, #37	; 0x25
 8001616:	d00a      	beq.n	800162e <debug_printf+0x36>
      {
         dev_trace_send_byte(text[i]);
 8001618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800161a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800161c:	4413      	add	r3, r2
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fdf9 	bl	8001218 <dev_trace_send_byte>
         i++;
 8001626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001628:	3301      	adds	r3, #1
 800162a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800162c:	e214      	b.n	8001a58 <debug_printf+0x460>
//         continue;
      }   
      else if (text[i + 1] != 0)
 800162e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001630:	3301      	adds	r3, #1
 8001632:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001634:	4413      	add	r3, r2
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 820d 	beq.w	8001a58 <debug_printf+0x460>
      {   
         switch(text[i + 1])   
 800163e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001640:	3301      	adds	r3, #1
 8001642:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001644:	4413      	add	r3, r2
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	3b42      	subs	r3, #66	; 0x42
 800164a:	2b36      	cmp	r3, #54	; 0x36
 800164c:	f200 8201 	bhi.w	8001a52 <debug_printf+0x45a>
 8001650:	a201      	add	r2, pc, #4	; (adr r2, 8001658 <debug_printf+0x60>)
 8001652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001656:	bf00      	nop
 8001658:	08001909 	.word	0x08001909
 800165c:	08001a53 	.word	0x08001a53
 8001660:	08001a53 	.word	0x08001a53
 8001664:	08001a53 	.word	0x08001a53
 8001668:	08001a53 	.word	0x08001a53
 800166c:	08001a53 	.word	0x08001a53
 8001670:	08001a53 	.word	0x08001a53
 8001674:	08001a53 	.word	0x08001a53
 8001678:	08001a53 	.word	0x08001a53
 800167c:	08001a53 	.word	0x08001a53
 8001680:	08001a53 	.word	0x08001a53
 8001684:	080019bf 	.word	0x080019bf
 8001688:	08001a53 	.word	0x08001a53
 800168c:	08001a53 	.word	0x08001a53
 8001690:	08001a53 	.word	0x08001a53
 8001694:	08001a53 	.word	0x08001a53
 8001698:	08001a53 	.word	0x08001a53
 800169c:	08001a53 	.word	0x08001a53
 80016a0:	08001a53 	.word	0x08001a53
 80016a4:	08001a53 	.word	0x08001a53
 80016a8:	08001a53 	.word	0x08001a53
 80016ac:	08001a53 	.word	0x08001a53
 80016b0:	080018e1 	.word	0x080018e1
 80016b4:	08001a53 	.word	0x08001a53
 80016b8:	08001a53 	.word	0x08001a53
 80016bc:	08001a53 	.word	0x08001a53
 80016c0:	08001a53 	.word	0x08001a53
 80016c4:	08001a53 	.word	0x08001a53
 80016c8:	08001a53 	.word	0x08001a53
 80016cc:	08001a53 	.word	0x08001a53
 80016d0:	08001a53 	.word	0x08001a53
 80016d4:	08001a53 	.word	0x08001a53
 80016d8:	080018f5 	.word	0x080018f5
 80016dc:	080018b5 	.word	0x080018b5
 80016e0:	08001735 	.word	0x08001735
 80016e4:	08001a53 	.word	0x08001a53
 80016e8:	0800175f 	.word	0x0800175f
 80016ec:	08001a53 	.word	0x08001a53
 80016f0:	08001a53 	.word	0x08001a53
 80016f4:	08001a53 	.word	0x08001a53
 80016f8:	08001a53 	.word	0x08001a53
 80016fc:	08001a53 	.word	0x08001a53
 8001700:	08001a53 	.word	0x08001a53
 8001704:	0800191d 	.word	0x0800191d
 8001708:	08001a53 	.word	0x08001a53
 800170c:	08001a53 	.word	0x08001a53
 8001710:	080019ff 	.word	0x080019ff
 8001714:	08001a53 	.word	0x08001a53
 8001718:	08001a53 	.word	0x08001a53
 800171c:	080018a3 	.word	0x080018a3
 8001720:	08001a53 	.word	0x08001a53
 8001724:	0800174b 	.word	0x0800174b
 8001728:	08001a53 	.word	0x08001a53
 800172c:	08001a53 	.word	0x08001a53
 8001730:	080018cd 	.word	0x080018cd
         {
            case 'd' : 
               {
                  signed long d = va_arg(tag, signed long);
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	1d1a      	adds	r2, r3, #4
 8001738:	60ba      	str	r2, [r7, #8]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
                  debug_printf_long(d, 'd');
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	2164      	movs	r1, #100	; 0x64
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fe70 	bl	8001428 <debug_printf_long>
               } break;
 8001748:	e183      	b.n	8001a52 <debug_printf+0x45a>

            case 'u' : 
               {
                  unsigned long d = va_arg(tag, unsigned long);
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	1d1a      	adds	r2, r3, #4
 800174e:	60ba      	str	r2, [r7, #8]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	63bb      	str	r3, [r7, #56]	; 0x38
                  debug_printf_long(d, 'u');
 8001754:	2175      	movs	r1, #117	; 0x75
 8001756:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001758:	f7ff fe66 	bl	8001428 <debug_printf_long>
               } break;
 800175c:	e179      	b.n	8001a52 <debug_printf+0x45a>

            case 'f' :
               {
                  signed long l;
                  unsigned char i, m[8];
                  double d = va_arg(tag, double);
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	3307      	adds	r3, #7
 8001762:	f023 0307 	bic.w	r3, r3, #7
 8001766:	f103 0208 	add.w	r2, r3, #8
 800176a:	60ba      	str	r2, [r7, #8]
 800176c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001770:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

                  if (d < 0)
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	f04f 0300 	mov.w	r3, #0
 800177c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001780:	f7ff f914 	bl	80009ac <__aeabi_dcmplt>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d008      	beq.n	800179c <debug_printf+0x1a4>
                  {
                    d = -d;
 800178a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800178c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800178e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001792:	e9c7 4512 	strd	r4, r5, [r7, #72]	; 0x48
                    dev_trace_send_byte('-');
 8001796:	202d      	movs	r0, #45	; 0x2d
 8001798:	f7ff fd3e 	bl	8001218 <dev_trace_send_byte>
                  }

                  debug_printf_ulong(d);
 800179c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80017a0:	f7ff f96a 	bl	8000a78 <__aeabi_d2uiz>
 80017a4:	4603      	mov	r3, r0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fdfe 	bl	80013a8 <debug_printf_ulong>
                  dev_trace_send_byte('.');
 80017ac:	202e      	movs	r0, #46	; 0x2e
 80017ae:	f7ff fd33 	bl	8001218 <dev_trace_send_byte>

                  d =  d - (signed long)d;
 80017b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80017b6:	f7ff f937 	bl	8000a28 <__aeabi_d2iz>
 80017ba:	4603      	mov	r3, r0
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fe19 	bl	80003f4 <__aeabi_i2d>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80017ca:	f7fe fcc5 	bl	8000158 <__aeabi_dsub>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
                  l = d * 1000000000;
 80017d6:	a3a8      	add	r3, pc, #672	; (adr r3, 8001a78 <debug_printf+0x480>)
 80017d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017dc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80017e0:	f7fe fe72 	bl	80004c8 <__aeabi_dmul>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	f7ff f91c 	bl	8000a28 <__aeabi_d2iz>
 80017f0:	4603      	mov	r3, r0
 80017f2:	65bb      	str	r3, [r7, #88]	; 0x58

                  if ((l % 1000) > 500) l = l / 1000 + 1;
 80017f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80017f6:	4ba2      	ldr	r3, [pc, #648]	; (8001a80 <debug_printf+0x488>)
 80017f8:	fb83 1302 	smull	r1, r3, r3, r2
 80017fc:	1199      	asrs	r1, r3, #6
 80017fe:	17d3      	asrs	r3, r2, #31
 8001800:	1acb      	subs	r3, r1, r3
 8001802:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001806:	fb01 f303 	mul.w	r3, r1, r3
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001810:	dd09      	ble.n	8001826 <debug_printf+0x22e>
 8001812:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001814:	4a9a      	ldr	r2, [pc, #616]	; (8001a80 <debug_printf+0x488>)
 8001816:	fb82 1203 	smull	r1, r2, r2, r3
 800181a:	1192      	asrs	r2, r2, #6
 800181c:	17db      	asrs	r3, r3, #31
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	3301      	adds	r3, #1
 8001822:	65bb      	str	r3, [r7, #88]	; 0x58
 8001824:	e007      	b.n	8001836 <debug_printf+0x23e>
                                  else  l = l / 1000;
 8001826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001828:	4a95      	ldr	r2, [pc, #596]	; (8001a80 <debug_printf+0x488>)
 800182a:	fb82 1203 	smull	r1, r2, r2, r3
 800182e:	1192      	asrs	r2, r2, #6
 8001830:	17db      	asrs	r3, r3, #31
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	65bb      	str	r3, [r7, #88]	; 0x58
      //                m[1] = 0;
        //              debug_printf_text(m);
          //            break;
            //      }

                  i = 6; //sizeof(m);
 8001836:	2306      	movs	r3, #6
 8001838:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  //                {
    //                 l = l / 10;
      //               i--;
        //          }

                  m[i] = 0;
 800183c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001840:	3360      	adds	r3, #96	; 0x60
 8001842:	443b      	add	r3, r7
 8001844:	2200      	movs	r2, #0
 8001846:	f803 2c60 	strb.w	r2, [r3, #-96]
                  while (i)
 800184a:	e021      	b.n	8001890 <debug_printf+0x298>
                  {
                     i--;
 800184c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001850:	3b01      	subs	r3, #1
 8001852:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                     m[i] = 0x30 + (l % 10);
 8001856:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001858:	4b8a      	ldr	r3, [pc, #552]	; (8001a84 <debug_printf+0x48c>)
 800185a:	fb83 1302 	smull	r1, r3, r3, r2
 800185e:	1099      	asrs	r1, r3, #2
 8001860:	17d3      	asrs	r3, r2, #31
 8001862:	1ac9      	subs	r1, r1, r3
 8001864:	460b      	mov	r3, r1
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	1ad1      	subs	r1, r2, r3
 800186e:	b2ca      	uxtb	r2, r1
 8001870:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001874:	3230      	adds	r2, #48	; 0x30
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	3360      	adds	r3, #96	; 0x60
 800187a:	443b      	add	r3, r7
 800187c:	f803 2c60 	strb.w	r2, [r3, #-96]
                     l = l / 10;
 8001880:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001882:	4a80      	ldr	r2, [pc, #512]	; (8001a84 <debug_printf+0x48c>)
 8001884:	fb82 1203 	smull	r1, r2, r2, r3
 8001888:	1092      	asrs	r2, r2, #2
 800188a:	17db      	asrs	r3, r3, #31
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	65bb      	str	r3, [r7, #88]	; 0x58
                  while (i)
 8001890:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1d9      	bne.n	800184c <debug_printf+0x254>
                  }

                  debug_printf_text((char*)m);
 8001898:	463b      	mov	r3, r7
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fd67 	bl	800136e <debug_printf_text>

               } break;
 80018a0:	e0d7      	b.n	8001a52 <debug_printf+0x45a>
           
            case 's' : 
               {
                  char* s = va_arg(tag, char*);
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	1d1a      	adds	r2, r3, #4
 80018a6:	60ba      	str	r2, [r7, #8]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	637b      	str	r3, [r7, #52]	; 0x34
                  debug_printf_text(s);
 80018ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80018ae:	f7ff fd5e 	bl	800136e <debug_printf_text>
               } break;
 80018b2:	e0ce      	b.n	8001a52 <debug_printf+0x45a>

            case 'c' : 
               {
                  UINT8 b = va_arg(tag, unsigned long);
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	1d1a      	adds	r2, r3, #4
 80018b8:	60ba      	str	r2, [r7, #8]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                  debug_printf_char(b);
 80018c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fd17 	bl	80012f8 <debug_printf_char>
               } break;
 80018ca:	e0c2      	b.n	8001a52 <debug_printf+0x45a>
           
            case 'x' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	1d1a      	adds	r2, r3, #4
 80018d0:	60ba      	str	r2, [r7, #8]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	63fb      	str	r3, [r7, #60]	; 0x3c
                  debug_printf_hex(d, 'x');
 80018d6:	2178      	movs	r1, #120	; 0x78
 80018d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80018da:	f7ff fdf5 	bl	80014c8 <debug_printf_hex>
               } break;
 80018de:	e0b8      	b.n	8001a52 <debug_printf+0x45a>
            
            case 'X' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	1d1a      	adds	r2, r3, #4
 80018e4:	60ba      	str	r2, [r7, #8]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	61bb      	str	r3, [r7, #24]
                  debug_printf_hex(d, 'X');
 80018ea:	2158      	movs	r1, #88	; 0x58
 80018ec:	69b8      	ldr	r0, [r7, #24]
 80018ee:	f7ff fdeb 	bl	80014c8 <debug_printf_hex>
               } break;
 80018f2:	e0ae      	b.n	8001a52 <debug_printf+0x45a>
            
            case 'b' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	1d1a      	adds	r2, r3, #4
 80018f8:	60ba      	str	r2, [r7, #8]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	61fb      	str	r3, [r7, #28]
                  debug_printf_bin(d, 'b');
 80018fe:	2162      	movs	r1, #98	; 0x62
 8001900:	69f8      	ldr	r0, [r7, #28]
 8001902:	f7ff fe30 	bl	8001566 <debug_printf_bin>
               } break;
 8001906:	e0a4      	b.n	8001a52 <debug_printf+0x45a>
            
            case 'B' : 
               {
                  UINT32 d = va_arg(tag, UINT32);
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	1d1a      	adds	r2, r3, #4
 800190c:	60ba      	str	r2, [r7, #8]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60fb      	str	r3, [r7, #12]
                  debug_printf_bin(d, 'B');
 8001912:	2142      	movs	r1, #66	; 0x42
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f7ff fe26 	bl	8001566 <debug_printf_bin>
               } break;
 800191a:	e09a      	b.n	8001a52 <debug_printf+0x45a>
            
            case 'm' : 
               {
                  UINT8* mm = va_arg(tag, UINT8*);
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	1d1a      	adds	r2, r3, #4
 8001920:	60ba      	str	r2, [r7, #8]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
                  UINT16 size = va_arg(tag, int);
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	1d1a      	adds	r2, r3, #4
 800192a:	60ba      	str	r2, [r7, #8]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	857b      	strh	r3, [r7, #42]	; 0x2a
                  int ii;

                  for(ii=0; ii<size; ii++) 
 8001930:	2300      	movs	r3, #0
 8001932:	647b      	str	r3, [r7, #68]	; 0x44
 8001934:	e03e      	b.n	80019b4 <debug_printf+0x3bc>
                  {   
                     dev_trace_send_byte(HB2HEX(mm[ii] / 0x10));
 8001936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800193a:	4413      	add	r3, r2
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b9f      	cmp	r3, #159	; 0x9f
 8001940:	d908      	bls.n	8001954 <debug_printf+0x35c>
 8001942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001946:	4413      	add	r3, r2
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	091b      	lsrs	r3, r3, #4
 800194c:	b2db      	uxtb	r3, r3
 800194e:	3337      	adds	r3, #55	; 0x37
 8001950:	b2db      	uxtb	r3, r3
 8001952:	e007      	b.n	8001964 <debug_printf+0x36c>
 8001954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001958:	4413      	add	r3, r2
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	091b      	lsrs	r3, r3, #4
 800195e:	b2db      	uxtb	r3, r3
 8001960:	3330      	adds	r3, #48	; 0x30
 8001962:	b2db      	uxtb	r3, r3
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fc57 	bl	8001218 <dev_trace_send_byte>
                     dev_trace_send_byte(HB2HEX(mm[ii] % 0x10));
 800196a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800196c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800196e:	4413      	add	r3, r2
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b09      	cmp	r3, #9
 800197a:	d909      	bls.n	8001990 <debug_printf+0x398>
 800197c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800197e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001980:	4413      	add	r3, r2
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	f003 030f 	and.w	r3, r3, #15
 8001988:	b2db      	uxtb	r3, r3
 800198a:	3337      	adds	r3, #55	; 0x37
 800198c:	b2db      	uxtb	r3, r3
 800198e:	e008      	b.n	80019a2 <debug_printf+0x3aa>
 8001990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001994:	4413      	add	r3, r2
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	b2db      	uxtb	r3, r3
 800199e:	3330      	adds	r3, #48	; 0x30
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fc38 	bl	8001218 <dev_trace_send_byte>
                     dev_trace_send_byte(' ');
 80019a8:	2020      	movs	r0, #32
 80019aa:	f7ff fc35 	bl	8001218 <dev_trace_send_byte>
                  for(ii=0; ii<size; ii++) 
 80019ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019b0:	3301      	adds	r3, #1
 80019b2:	647b      	str	r3, [r7, #68]	; 0x44
 80019b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80019b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019b8:	429a      	cmp	r2, r3
 80019ba:	dbbc      	blt.n	8001936 <debug_printf+0x33e>
                  }
               
               } break;
 80019bc:	e049      	b.n	8001a52 <debug_printf+0x45a>

            case 'M' : 
               {
                  UINT8* mm = va_arg(tag, UINT8*);
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	1d1a      	adds	r2, r3, #4
 80019c2:	60ba      	str	r2, [r7, #8]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	617b      	str	r3, [r7, #20]
                  UINT16 size = va_arg(tag, int);
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	1d1a      	adds	r2, r3, #4
 80019cc:	60ba      	str	r2, [r7, #8]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	827b      	strh	r3, [r7, #18]
                  int ii;

                  for(ii=0; ii<size; ii++) 
 80019d2:	2300      	movs	r3, #0
 80019d4:	643b      	str	r3, [r7, #64]	; 0x40
 80019d6:	e00d      	b.n	80019f4 <debug_printf+0x3fc>
                  {   
                     debug_printf_long(mm[ii], 'u');
 80019d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	4413      	add	r3, r2
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2175      	movs	r1, #117	; 0x75
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fd20 	bl	8001428 <debug_printf_long>
                     dev_trace_send_byte(' ');
 80019e8:	2020      	movs	r0, #32
 80019ea:	f7ff fc15 	bl	8001218 <dev_trace_send_byte>
                  for(ii=0; ii<size; ii++) 
 80019ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019f0:	3301      	adds	r3, #1
 80019f2:	643b      	str	r3, [r7, #64]	; 0x40
 80019f4:	8a7b      	ldrh	r3, [r7, #18]
 80019f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80019f8:	429a      	cmp	r2, r3
 80019fa:	dbed      	blt.n	80019d8 <debug_printf+0x3e0>
                  }
               
               } break;
 80019fc:	e029      	b.n	8001a52 <debug_printf+0x45a>

            case 'p' : 
               {
                  UINT8* mm = va_arg(tag, UINT8*);
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	1d1a      	adds	r2, r3, #4
 8001a02:	60ba      	str	r2, [r7, #8]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	633b      	str	r3, [r7, #48]	; 0x30
               
                  debug_printf_long(mm[0], 'u');
 8001a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2175      	movs	r1, #117	; 0x75
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fd0a 	bl	8001428 <debug_printf_long>
                  dev_trace_send_byte('.');
 8001a14:	202e      	movs	r0, #46	; 0x2e
 8001a16:	f7ff fbff 	bl	8001218 <dev_trace_send_byte>
                  debug_printf_long(mm[1], 'u');
 8001a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2175      	movs	r1, #117	; 0x75
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fd00 	bl	8001428 <debug_printf_long>
                  dev_trace_send_byte('.');
 8001a28:	202e      	movs	r0, #46	; 0x2e
 8001a2a:	f7ff fbf5 	bl	8001218 <dev_trace_send_byte>
                  debug_printf_long(mm[2], 'u');
 8001a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a30:	3302      	adds	r3, #2
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2175      	movs	r1, #117	; 0x75
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fcf6 	bl	8001428 <debug_printf_long>
                  dev_trace_send_byte('.');
 8001a3c:	202e      	movs	r0, #46	; 0x2e
 8001a3e:	f7ff fbeb 	bl	8001218 <dev_trace_send_byte>
                  debug_printf_long(mm[3], 'u');
 8001a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a44:	3303      	adds	r3, #3
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2175      	movs	r1, #117	; 0x75
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fcec 	bl	8001428 <debug_printf_long>
               
               } break;
 8001a50:	bf00      	nop
           
         }
      
         i += 2;
 8001a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a54:	3302      	adds	r3, #2
 8001a56:	65fb      	str	r3, [r7, #92]	; 0x5c
   while(text[i] != 0)
 8001a58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a5a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001a5c:	4413      	add	r3, r2
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f47f add3 	bne.w	800160c <debug_printf+0x14>
      }
   }   

}
 8001a66:	bf00      	nop
 8001a68:	bf00      	nop
 8001a6a:	3760      	adds	r7, #96	; 0x60
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001a72:	b004      	add	sp, #16
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	00000000 	.word	0x00000000
 8001a7c:	41cdcd65 	.word	0x41cdcd65
 8001a80:	10624dd3 	.word	0x10624dd3
 8001a84:	66666667 	.word	0x66666667

08001a88 <hal_driver_set_info>:
static void* dma_2_irq_data[16];



void hal_driver_set_info(dev_info_t* info_1, dev_info_t* info_2)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
		info_2->id = info_1->id;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	781a      	ldrb	r2, [r3, #0]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	701a      	strb	r2, [r3, #0]
		info_2->status_in = info_1->status_in;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
		info_2->status_out = info_1->status_out;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	609a      	str	r2, [r3, #8]
		info_2->name = info_1->name;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691a      	ldr	r2, [r3, #16]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	611a      	str	r2, [r3, #16]
	
		info_2->rx_mode = HAL_DEFAULT_MODE_SYNC;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	731a      	strb	r2, [r3, #12]
		info_2->tx_mode = HAL_DEFAULT_MODE_SYNC;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	2200      	movs	r2, #0
 8001abc:	735a      	strb	r2, [r3, #13]
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <EXTI1_IRQHandler>:
//------------------------------------------------------------------------------
//         internal Functions
//------------------------------------------------------------------------------

//void EXTI0_IRQHandler(void){ (*gpio_irq_cbf[0])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);}
void EXTI1_IRQHandler(void){ (*gpio_irq_cbf[1])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);}
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	4b03      	ldr	r3, [pc, #12]	; (8001adc <EXTI1_IRQHandler+0x14>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	4798      	blx	r3
 8001ad2:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <EXTI1_IRQHandler+0x18>)
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	615a      	str	r2, [r3, #20]
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	200000f0 	.word	0x200000f0
 8001ae0:	40010400 	.word	0x40010400

08001ae4 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){ (*gpio_irq_cbf[2])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2);}
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <EXTI2_IRQHandler+0x14>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	4798      	blx	r3
 8001aee:	4b03      	ldr	r3, [pc, #12]	; (8001afc <EXTI2_IRQHandler+0x18>)
 8001af0:	2204      	movs	r2, #4
 8001af2:	615a      	str	r2, [r3, #20]
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	200000f0 	.word	0x200000f0
 8001afc:	40010400 	.word	0x40010400

08001b00 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){ (*gpio_irq_cbf[3])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);}
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <EXTI3_IRQHandler+0x14>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	4798      	blx	r3
 8001b0a:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <EXTI3_IRQHandler+0x18>)
 8001b0c:	2208      	movs	r2, #8
 8001b0e:	615a      	str	r2, [r3, #20]
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	200000f0 	.word	0x200000f0
 8001b18:	40010400 	.word	0x40010400

08001b1c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){ (*gpio_irq_cbf[4])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);}
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <EXTI4_IRQHandler+0x14>)
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	4798      	blx	r3
 8001b26:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <EXTI4_IRQHandler+0x18>)
 8001b28:	2210      	movs	r2, #16
 8001b2a:	615a      	str	r2, [r3, #20]
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	200000f0 	.word	0x200000f0
 8001b34:	40010400 	.word	0x40010400

08001b38 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{ 
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_5) != RESET) { (*gpio_irq_cbf[5])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5); }
 8001b3c:	4b1f      	ldr	r3, [pc, #124]	; (8001bbc <EXTI9_5_IRQHandler+0x84>)
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	f003 0320 	and.w	r3, r3, #32
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d005      	beq.n	8001b54 <EXTI9_5_IRQHandler+0x1c>
 8001b48:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <EXTI9_5_IRQHandler+0x88>)
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	4798      	blx	r3
 8001b4e:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <EXTI9_5_IRQHandler+0x84>)
 8001b50:	2220      	movs	r2, #32
 8001b52:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET) { (*gpio_irq_cbf[6])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6); }
 8001b54:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <EXTI9_5_IRQHandler+0x84>)
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <EXTI9_5_IRQHandler+0x34>
 8001b60:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <EXTI9_5_IRQHandler+0x88>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	4798      	blx	r3
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <EXTI9_5_IRQHandler+0x84>)
 8001b68:	2240      	movs	r2, #64	; 0x40
 8001b6a:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET) { (*gpio_irq_cbf[7])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7); }
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <EXTI9_5_IRQHandler+0x84>)
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <EXTI9_5_IRQHandler+0x4c>
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <EXTI9_5_IRQHandler+0x88>)
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	4798      	blx	r3
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <EXTI9_5_IRQHandler+0x84>)
 8001b80:	2280      	movs	r2, #128	; 0x80
 8001b82:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET) { (*gpio_irq_cbf[8])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8); }
 8001b84:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <EXTI9_5_IRQHandler+0x84>)
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d006      	beq.n	8001b9e <EXTI9_5_IRQHandler+0x66>
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <EXTI9_5_IRQHandler+0x88>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	4798      	blx	r3
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <EXTI9_5_IRQHandler+0x84>)
 8001b98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b9c:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET) { (*gpio_irq_cbf[9])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9); }
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <EXTI9_5_IRQHandler+0x84>)
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d006      	beq.n	8001bb8 <EXTI9_5_IRQHandler+0x80>
 8001baa:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <EXTI9_5_IRQHandler+0x88>)
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	4798      	blx	r3
 8001bb0:	4b02      	ldr	r3, [pc, #8]	; (8001bbc <EXTI9_5_IRQHandler+0x84>)
 8001bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb6:	615a      	str	r2, [r3, #20]
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40010400 	.word	0x40010400
 8001bc0:	200000f0 	.word	0x200000f0

08001bc4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{ 
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_10) != RESET) { (*gpio_irq_cbf[10])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10); }
 8001bc8:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <EXTI15_10_IRQHandler+0xa4>)
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d006      	beq.n	8001be2 <EXTI15_10_IRQHandler+0x1e>
 8001bd4:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <EXTI15_10_IRQHandler+0xa8>)
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd8:	4798      	blx	r3
 8001bda:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <EXTI15_10_IRQHandler+0xa4>)
 8001bdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001be0:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_11) != RESET) { (*gpio_irq_cbf[11])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11); }
 8001be2:	4b21      	ldr	r3, [pc, #132]	; (8001c68 <EXTI15_10_IRQHandler+0xa4>)
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d006      	beq.n	8001bfc <EXTI15_10_IRQHandler+0x38>
 8001bee:	4b1f      	ldr	r3, [pc, #124]	; (8001c6c <EXTI15_10_IRQHandler+0xa8>)
 8001bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf2:	4798      	blx	r3
 8001bf4:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <EXTI15_10_IRQHandler+0xa4>)
 8001bf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bfa:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_12) != RESET) { (*gpio_irq_cbf[12])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12); }
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <EXTI15_10_IRQHandler+0xa4>)
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d006      	beq.n	8001c16 <EXTI15_10_IRQHandler+0x52>
 8001c08:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <EXTI15_10_IRQHandler+0xa8>)
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0c:	4798      	blx	r3
 8001c0e:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <EXTI15_10_IRQHandler+0xa4>)
 8001c10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c14:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET) { (*gpio_irq_cbf[13])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13); }
 8001c16:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <EXTI15_10_IRQHandler+0xa4>)
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d006      	beq.n	8001c30 <EXTI15_10_IRQHandler+0x6c>
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <EXTI15_10_IRQHandler+0xa8>)
 8001c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c26:	4798      	blx	r3
 8001c28:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <EXTI15_10_IRQHandler+0xa4>)
 8001c2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c2e:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_14) != RESET) { (*gpio_irq_cbf[14])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14); }
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <EXTI15_10_IRQHandler+0xa4>)
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d006      	beq.n	8001c4a <EXTI15_10_IRQHandler+0x86>
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <EXTI15_10_IRQHandler+0xa8>)
 8001c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c40:	4798      	blx	r3
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <EXTI15_10_IRQHandler+0xa4>)
 8001c44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c48:	615a      	str	r2, [r3, #20]
	  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_15) != RESET) { (*gpio_irq_cbf[15])(); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_15); }
 8001c4a:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <EXTI15_10_IRQHandler+0xa4>)
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d006      	beq.n	8001c64 <EXTI15_10_IRQHandler+0xa0>
 8001c56:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <EXTI15_10_IRQHandler+0xa8>)
 8001c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5a:	4798      	blx	r3
 8001c5c:	4b02      	ldr	r3, [pc, #8]	; (8001c68 <EXTI15_10_IRQHandler+0xa4>)
 8001c5e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c62:	615a      	str	r2, [r3, #20]
}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40010400 	.word	0x40010400
 8001c6c:	200000f0 	.word	0x200000f0

08001c70 <dev_gpio_id_port>:

//------------------------------------------------------------------------------
//         GPIO Local Functions
//------------------------------------------------------------------------------
GPIO_TypeDef* dev_gpio_id_port(UINT8 gpio_id)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
		switch(gpio_id)
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d817      	bhi.n	8001cb0 <dev_gpio_id_port+0x40>
 8001c80:	a201      	add	r2, pc, #4	; (adr r2, 8001c88 <dev_gpio_id_port+0x18>)
 8001c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c86:	bf00      	nop
 8001c88:	08001c9d 	.word	0x08001c9d
 8001c8c:	08001ca1 	.word	0x08001ca1
 8001c90:	08001ca5 	.word	0x08001ca5
 8001c94:	08001ca9 	.word	0x08001ca9
 8001c98:	08001cad 	.word	0x08001cad
		{
				case GPIO_PA : return GPIOA;
 8001c9c:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <dev_gpio_id_port+0x4c>)
 8001c9e:	e008      	b.n	8001cb2 <dev_gpio_id_port+0x42>
				case GPIO_PB : return GPIOB;
 8001ca0:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <dev_gpio_id_port+0x50>)
 8001ca2:	e006      	b.n	8001cb2 <dev_gpio_id_port+0x42>
				case GPIO_PC : return GPIOC;
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <dev_gpio_id_port+0x54>)
 8001ca6:	e004      	b.n	8001cb2 <dev_gpio_id_port+0x42>
				case GPIO_PD : return GPIOD;
 8001ca8:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <dev_gpio_id_port+0x58>)
 8001caa:	e002      	b.n	8001cb2 <dev_gpio_id_port+0x42>
				case GPIO_PE : return GPIOE;
 8001cac:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <dev_gpio_id_port+0x5c>)
 8001cae:	e000      	b.n	8001cb2 <dev_gpio_id_port+0x42>
				case GPIO_PI : return GPIOI;
#endif

		}

		return (GPIO_TypeDef*)0;	
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	40010800 	.word	0x40010800
 8001cc0:	40010c00 	.word	0x40010c00
 8001cc4:	40011000 	.word	0x40011000
 8001cc8:	40011400 	.word	0x40011400
 8001ccc:	40011800 	.word	0x40011800

08001cd0 <dev_gpio_pin_id>:

		return 0;	
}

int dev_gpio_pin_id(UINT16 pin)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	80fb      	strh	r3, [r7, #6]
		if (pin & 0x0001) return 0;
 8001cda:	88fb      	ldrh	r3, [r7, #6]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <dev_gpio_pin_id+0x18>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	e069      	b.n	8001dbc <dev_gpio_pin_id+0xec>
		if (pin & 0x0002) return 1;
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <dev_gpio_pin_id+0x26>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e062      	b.n	8001dbc <dev_gpio_pin_id+0xec>
		if (pin & 0x0004) return 2;
 8001cf6:	88fb      	ldrh	r3, [r7, #6]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <dev_gpio_pin_id+0x34>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e05b      	b.n	8001dbc <dev_gpio_pin_id+0xec>
		if (pin & 0x0008) return 3;
 8001d04:	88fb      	ldrh	r3, [r7, #6]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <dev_gpio_pin_id+0x42>
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e054      	b.n	8001dbc <dev_gpio_pin_id+0xec>
		if (pin & 0x0010) return 4;
 8001d12:	88fb      	ldrh	r3, [r7, #6]
 8001d14:	f003 0310 	and.w	r3, r3, #16
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <dev_gpio_pin_id+0x50>
 8001d1c:	2304      	movs	r3, #4
 8001d1e:	e04d      	b.n	8001dbc <dev_gpio_pin_id+0xec>
		if (pin & 0x0020) return 5;
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	f003 0320 	and.w	r3, r3, #32
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <dev_gpio_pin_id+0x5e>
 8001d2a:	2305      	movs	r3, #5
 8001d2c:	e046      	b.n	8001dbc <dev_gpio_pin_id+0xec>
		if (pin & 0x0040) return 6;
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <dev_gpio_pin_id+0x6c>
 8001d38:	2306      	movs	r3, #6
 8001d3a:	e03f      	b.n	8001dbc <dev_gpio_pin_id+0xec>
		if (pin & 0x0080) return 7;
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <dev_gpio_pin_id+0x7a>
 8001d46:	2307      	movs	r3, #7
 8001d48:	e038      	b.n	8001dbc <dev_gpio_pin_id+0xec>
	
		if (pin & 0x0100) return 8;
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <dev_gpio_pin_id+0x88>
 8001d54:	2308      	movs	r3, #8
 8001d56:	e031      	b.n	8001dbc <dev_gpio_pin_id+0xec>
		if (pin & 0x0200) return 9;
 8001d58:	88fb      	ldrh	r3, [r7, #6]
 8001d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <dev_gpio_pin_id+0x96>
 8001d62:	2309      	movs	r3, #9
 8001d64:	e02a      	b.n	8001dbc <dev_gpio_pin_id+0xec>
		if (pin & 0x0400) return 10;
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <dev_gpio_pin_id+0xa4>
 8001d70:	230a      	movs	r3, #10
 8001d72:	e023      	b.n	8001dbc <dev_gpio_pin_id+0xec>
		if (pin & 0x0800) return 11;
 8001d74:	88fb      	ldrh	r3, [r7, #6]
 8001d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <dev_gpio_pin_id+0xb2>
 8001d7e:	230b      	movs	r3, #11
 8001d80:	e01c      	b.n	8001dbc <dev_gpio_pin_id+0xec>
		if (pin & 0x1000) return 12;
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <dev_gpio_pin_id+0xc0>
 8001d8c:	230c      	movs	r3, #12
 8001d8e:	e015      	b.n	8001dbc <dev_gpio_pin_id+0xec>
		if (pin & 0x2000) return 13;
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <dev_gpio_pin_id+0xce>
 8001d9a:	230d      	movs	r3, #13
 8001d9c:	e00e      	b.n	8001dbc <dev_gpio_pin_id+0xec>
		if (pin & 0x4000) return 14;
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <dev_gpio_pin_id+0xdc>
 8001da8:	230e      	movs	r3, #14
 8001daa:	e007      	b.n	8001dbc <dev_gpio_pin_id+0xec>
		if (pin & 0x8000) return 15;
 8001dac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	da01      	bge.n	8001db8 <dev_gpio_pin_id+0xe8>
 8001db4:	230f      	movs	r3, #15
 8001db6:	e001      	b.n	8001dbc <dev_gpio_pin_id+0xec>

		return -1;	
 8001db8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr
	...

08001dc8 <dev_gpio_init_rcc>:

//------------------------------------------------------------------------------
//         GPIO Init Functions
//------------------------------------------------------------------------------
UINT8 dev_gpio_init_rcc(UINT8 gpio_id)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
		switch(gpio_id)
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d84e      	bhi.n	8001e76 <dev_gpio_init_rcc+0xae>
 8001dd8:	a201      	add	r2, pc, #4	; (adr r2, 8001de0 <dev_gpio_init_rcc+0x18>)
 8001dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dde:	bf00      	nop
 8001de0:	08001df5 	.word	0x08001df5
 8001de4:	08001e0f 	.word	0x08001e0f
 8001de8:	08001e29 	.word	0x08001e29
 8001dec:	08001e43 	.word	0x08001e43
 8001df0:	08001e5d 	.word	0x08001e5d
		{
				case GPIO_PA : __HAL_RCC_GPIOA_CLK_ENABLE(); break;
 8001df4:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <dev_gpio_init_rcc+0xc4>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	4a24      	ldr	r2, [pc, #144]	; (8001e8c <dev_gpio_init_rcc+0xc4>)
 8001dfa:	f043 0304 	orr.w	r3, r3, #4
 8001dfe:	6193      	str	r3, [r2, #24]
 8001e00:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <dev_gpio_init_rcc+0xc4>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	61fb      	str	r3, [r7, #28]
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	e038      	b.n	8001e80 <dev_gpio_init_rcc+0xb8>
				case GPIO_PB : __HAL_RCC_GPIOB_CLK_ENABLE(); break;
 8001e0e:	4b1f      	ldr	r3, [pc, #124]	; (8001e8c <dev_gpio_init_rcc+0xc4>)
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	4a1e      	ldr	r2, [pc, #120]	; (8001e8c <dev_gpio_init_rcc+0xc4>)
 8001e14:	f043 0308 	orr.w	r3, r3, #8
 8001e18:	6193      	str	r3, [r2, #24]
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <dev_gpio_init_rcc+0xc4>)
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	61bb      	str	r3, [r7, #24]
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	e02b      	b.n	8001e80 <dev_gpio_init_rcc+0xb8>
				case GPIO_PC : __HAL_RCC_GPIOC_CLK_ENABLE(); break;
 8001e28:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <dev_gpio_init_rcc+0xc4>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	4a17      	ldr	r2, [pc, #92]	; (8001e8c <dev_gpio_init_rcc+0xc4>)
 8001e2e:	f043 0310 	orr.w	r3, r3, #16
 8001e32:	6193      	str	r3, [r2, #24]
 8001e34:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <dev_gpio_init_rcc+0xc4>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f003 0310 	and.w	r3, r3, #16
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	e01e      	b.n	8001e80 <dev_gpio_init_rcc+0xb8>
				case GPIO_PD : __HAL_RCC_GPIOD_CLK_ENABLE(); break;
 8001e42:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <dev_gpio_init_rcc+0xc4>)
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	4a11      	ldr	r2, [pc, #68]	; (8001e8c <dev_gpio_init_rcc+0xc4>)
 8001e48:	f043 0320 	orr.w	r3, r3, #32
 8001e4c:	6193      	str	r3, [r2, #24]
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <dev_gpio_init_rcc+0xc4>)
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	f003 0320 	and.w	r3, r3, #32
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	e011      	b.n	8001e80 <dev_gpio_init_rcc+0xb8>
				case GPIO_PE : __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <dev_gpio_init_rcc+0xc4>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <dev_gpio_init_rcc+0xc4>)
 8001e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e66:	6193      	str	r3, [r2, #24]
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <dev_gpio_init_rcc+0xc4>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	e004      	b.n	8001e80 <dev_gpio_init_rcc+0xb8>
			
#ifdef	GPIOI			
				case GPIO_PI : __HAL_RCC_GPIOI_CLK_ENABLE(); break;
#endif
			
				default : TRACE_GERROR("Unknow GPIO !!!");
 8001e76:	22a4      	movs	r2, #164	; 0xa4
 8001e78:	4905      	ldr	r1, [pc, #20]	; (8001e90 <dev_gpio_init_rcc+0xc8>)
 8001e7a:	4806      	ldr	r0, [pc, #24]	; (8001e94 <dev_gpio_init_rcc+0xcc>)
 8001e7c:	f7ff fa0e 	bl	800129c <dev_trace_generate_error>
		}
		
		return RET_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3720      	adds	r7, #32
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	08006cf8 	.word	0x08006cf8
 8001e94:	08006d10 	.word	0x08006d10

08001e98 <dev_gpio_init_mode>:
			
		return RET_OK;
}

UINT8 dev_gpio_init_mode(GPIO_InitTypeDef* init, UINT8 gpio_mode)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	70fb      	strb	r3, [r7, #3]
	
		switch(gpio_mode)
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	2b0b      	cmp	r3, #11
 8001ea8:	d859      	bhi.n	8001f5e <dev_gpio_init_mode+0xc6>
 8001eaa:	a201      	add	r2, pc, #4	; (adr r2, 8001eb0 <dev_gpio_init_mode+0x18>)
 8001eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb0:	08001ee1 	.word	0x08001ee1
 8001eb4:	08001f0b 	.word	0x08001f0b
 8001eb8:	08001ee1 	.word	0x08001ee1
 8001ebc:	08001efd 	.word	0x08001efd
 8001ec0:	08001eef 	.word	0x08001eef
 8001ec4:	08001f0b 	.word	0x08001f0b
 8001ec8:	08001f19 	.word	0x08001f19
 8001ecc:	08001f27 	.word	0x08001f27
 8001ed0:	08001f35 	.word	0x08001f35
 8001ed4:	08001f43 	.word	0x08001f43
 8001ed8:	08001f27 	.word	0x08001f27
 8001edc:	08001f51 	.word	0x08001f51
		{
				case GPIO_MODE_IN : 
				case GPIO_MODE_IN_FLOAT : 	init->Mode = GPIO_MODE_INPUT;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	605a      	str	r2, [r3, #4]
																		init->Pull = GPIO_NOPULL; break;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	e03e      	b.n	8001f6c <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_IN_UP : 			init->Mode = GPIO_MODE_INPUT;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	605a      	str	r2, [r3, #4]
																		init->Pull = GPIO_PULLUP; break;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	e037      	b.n	8001f6c <dev_gpio_init_mode+0xd4>
				
				case GPIO_MODE_IN_DOWN : 		init->Mode = GPIO_MODE_INPUT;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	605a      	str	r2, [r3, #4]
																		init->Pull = GPIO_PULLDOWN; break;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2202      	movs	r2, #2
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	e030      	b.n	8001f6c <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_OUT : 
				case GPIO_MODE_OUT_PP : 		init->Mode 	= GPIO_MODE_OUTPUT_PP;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	e029      	b.n	8001f6c <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_OUT_OD : 		init->Mode 	= GPIO_MODE_OUTPUT_OD;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2211      	movs	r2, #17
 8001f1c:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	e022      	b.n	8001f6c <dev_gpio_init_mode+0xd4>
#ifdef GPIO_MODE_AF_INPUT				
				case GPIO_MODE_ALF : 
				case GPIO_MODE_ALF_IN : 		init->Mode 	= GPIO_MODE_AF_INPUT;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	e01b      	b.n	8001f6c <dev_gpio_init_mode+0xd4>
#endif				
				
				case GPIO_MODE_ALF_PP : 		init->Mode 	= GPIO_MODE_AF_PP;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2202      	movs	r2, #2
 8001f38:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	e014      	b.n	8001f6c <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_ALF_OD : 		init->Mode 	= GPIO_MODE_AF_OD;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2212      	movs	r2, #18
 8001f46:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
 8001f4e:	e00d      	b.n	8001f6c <dev_gpio_init_mode+0xd4>

				case GPIO_MODE_AN : 				init->Mode 	= GPIO_MODE_ANALOG;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2203      	movs	r2, #3
 8001f54:	605a      	str	r2, [r3, #4]
																		init->Pull 	= GPIO_NOPULL; break;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	e006      	b.n	8001f6c <dev_gpio_init_mode+0xd4>

				default : 									return TRACE_GERROR("Unknow GPIO Mode !!!");
 8001f5e:	22e9      	movs	r2, #233	; 0xe9
 8001f60:	4905      	ldr	r1, [pc, #20]	; (8001f78 <dev_gpio_init_mode+0xe0>)
 8001f62:	4806      	ldr	r0, [pc, #24]	; (8001f7c <dev_gpio_init_mode+0xe4>)
 8001f64:	f7ff f99a 	bl	800129c <dev_trace_generate_error>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	e000      	b.n	8001f6e <dev_gpio_init_mode+0xd6>
				
		};
		
		return RET_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	08006cf8 	.word	0x08006cf8
 8001f7c:	08006d20 	.word	0x08006d20

08001f80 <dev_gpio_init_speed>:

UINT8 dev_gpio_init_speed(GPIO_InitTypeDef* init, UINT8 gpio_speed)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	70fb      	strb	r3, [r7, #3]
		switch(gpio_speed)
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d81a      	bhi.n	8001fc8 <dev_gpio_init_speed+0x48>
 8001f92:	a201      	add	r2, pc, #4	; (adr r2, 8001f98 <dev_gpio_init_speed+0x18>)
 8001f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f98:	08001fa9 	.word	0x08001fa9
 8001f9c:	08001fb1 	.word	0x08001fb1
 8001fa0:	08001fb9 	.word	0x08001fb9
 8001fa4:	08001fc1 	.word	0x08001fc1
		{
				case GPIO_PIN_SPEED_VHIGH : 			init->Speed = GPIO_SPEED_FREQ_HIGH; break;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2203      	movs	r2, #3
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	e012      	b.n	8001fd6 <dev_gpio_init_speed+0x56>
				case GPIO_PIN_SPEED_HIGH : 				init->Speed = GPIO_SPEED_FREQ_HIGH; break;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	e00e      	b.n	8001fd6 <dev_gpio_init_speed+0x56>
				case GPIO_PIN_SPEED_MED : 				init->Speed = GPIO_SPEED_FREQ_MEDIUM; break;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	e00a      	b.n	8001fd6 <dev_gpio_init_speed+0x56>
				case GPIO_PIN_SPEED_LOW : 				init->Speed = GPIO_SPEED_FREQ_LOW; break;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	e006      	b.n	8001fd6 <dev_gpio_init_speed+0x56>
			
				default : 									return TRACE_GERROR("Unknow GPIO Speed !!!");
 8001fc8:	22f9      	movs	r2, #249	; 0xf9
 8001fca:	4905      	ldr	r1, [pc, #20]	; (8001fe0 <dev_gpio_init_speed+0x60>)
 8001fcc:	4805      	ldr	r0, [pc, #20]	; (8001fe4 <dev_gpio_init_speed+0x64>)
 8001fce:	f7ff f965 	bl	800129c <dev_trace_generate_error>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	e000      	b.n	8001fd8 <dev_gpio_init_speed+0x58>
		};

		return RET_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	08006cf8 	.word	0x08006cf8
 8001fe4:	08006d38 	.word	0x08006d38

08001fe8 <dev_gpio_init>:
	
		return RET_OK;
}

UINT8 dev_gpio_init(dev_gpio_t* gpio, dev_gpio_init_t* init)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
		UINT8 ret;
		GPIO_InitTypeDef GPIO_InitStructure;

		hal_driver_set_info(&init->info, &gpio->info);
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	f7ff fd44 	bl	8001a88 <hal_driver_set_info>
	
		gpio->port = dev_gpio_id_port(gpio->info.id);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	791b      	ldrb	r3, [r3, #4]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff fe33 	bl	8001c70 <dev_gpio_id_port>
 800200a:	4602      	mov	r2, r0
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	601a      	str	r2, [r3, #0]
		gpio->pin = init->pin;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	8b1a      	ldrh	r2, [r3, #24]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	839a      	strh	r2, [r3, #28]
	
		GPIO_InitStructure.Pin = gpio->pin; 
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	8b9b      	ldrh	r3, [r3, #28]
 800201c:	60bb      	str	r3, [r7, #8]
	
		ret = dev_gpio_init_rcc(gpio->info.id);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	791b      	ldrb	r3, [r3, #4]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff fed0 	bl	8001dc8 <dev_gpio_init_rcc>
 8002028:	4603      	mov	r3, r0
 800202a:	77fb      	strb	r3, [r7, #31]
		if (ret) return TRACE_EERROR(ret);
 800202c:	7ffb      	ldrb	r3, [r7, #31]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d008      	beq.n	8002044 <dev_gpio_init+0x5c>
 8002032:	7ffb      	ldrb	r3, [r7, #31]
 8002034:	f240 1213 	movw	r2, #275	; 0x113
 8002038:	4978      	ldr	r1, [pc, #480]	; (800221c <dev_gpio_init+0x234>)
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff f914 	bl	8001268 <dev_trace_get_error>
 8002040:	4603      	mov	r3, r0
 8002042:	e0e7      	b.n	8002214 <dev_gpio_init+0x22c>
	
		ret = dev_gpio_init_mode(&GPIO_InitStructure, init->mode);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	7e9a      	ldrb	r2, [r3, #26]
 8002048:	f107 0308 	add.w	r3, r7, #8
 800204c:	4611      	mov	r1, r2
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff ff22 	bl	8001e98 <dev_gpio_init_mode>
 8002054:	4603      	mov	r3, r0
 8002056:	77fb      	strb	r3, [r7, #31]
		if (ret) return TRACE_EERROR(ret);
 8002058:	7ffb      	ldrb	r3, [r7, #31]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d008      	beq.n	8002070 <dev_gpio_init+0x88>
 800205e:	7ffb      	ldrb	r3, [r7, #31]
 8002060:	f44f 728b 	mov.w	r2, #278	; 0x116
 8002064:	496d      	ldr	r1, [pc, #436]	; (800221c <dev_gpio_init+0x234>)
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff f8fe 	bl	8001268 <dev_trace_get_error>
 800206c:	4603      	mov	r3, r0
 800206e:	e0d1      	b.n	8002214 <dev_gpio_init+0x22c>
	
		ret = dev_gpio_init_speed(&GPIO_InitStructure, init->speed);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	7eda      	ldrb	r2, [r3, #27]
 8002074:	f107 0308 	add.w	r3, r7, #8
 8002078:	4611      	mov	r1, r2
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff ff80 	bl	8001f80 <dev_gpio_init_speed>
 8002080:	4603      	mov	r3, r0
 8002082:	77fb      	strb	r3, [r7, #31]
		if (ret) return TRACE_EERROR(ret);
 8002084:	7ffb      	ldrb	r3, [r7, #31]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d008      	beq.n	800209c <dev_gpio_init+0xb4>
 800208a:	7ffb      	ldrb	r3, [r7, #31]
 800208c:	f240 1219 	movw	r2, #281	; 0x119
 8002090:	4962      	ldr	r1, [pc, #392]	; (800221c <dev_gpio_init+0x234>)
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff f8e8 	bl	8001268 <dev_trace_get_error>
 8002098:	4603      	mov	r3, r0
 800209a:	e0bb      	b.n	8002214 <dev_gpio_init+0x22c>
	
	  // EXTI interrupt init
		if (init->irq_cbf)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d013      	beq.n	80020cc <dev_gpio_init+0xe4>
		{
				switch(init->irq_mode)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	7f1b      	ldrb	r3, [r3, #28]
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d00c      	beq.n	80020c6 <dev_gpio_init+0xde>
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	dc0d      	bgt.n	80020cc <dev_gpio_init+0xe4>
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d002      	beq.n	80020ba <dev_gpio_init+0xd2>
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d003      	beq.n	80020c0 <dev_gpio_init+0xd8>
 80020b8:	e008      	b.n	80020cc <dev_gpio_init+0xe4>
				{
						case GPIO_IRQ_RISING : 		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING; break;
 80020ba:	4b59      	ldr	r3, [pc, #356]	; (8002220 <dev_gpio_init+0x238>)
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	e005      	b.n	80020cc <dev_gpio_init+0xe4>
						case GPIO_IRQ_FALLING : 	GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING; break;
 80020c0:	4b57      	ldr	r3, [pc, #348]	; (8002220 <dev_gpio_init+0x238>)
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	e002      	b.n	80020cc <dev_gpio_init+0xe4>
						case GPIO_IRQ_CHANGE : 		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING; break;
 80020c6:	4b56      	ldr	r3, [pc, #344]	; (8002220 <dev_gpio_init+0x238>)
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	bf00      	nop
				}
		}	
	
		HAL_GPIO_Init(gpio->port, &GPIO_InitStructure);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f107 0208 	add.w	r2, r7, #8
 80020d4:	4611      	mov	r1, r2
 80020d6:	4618      	mov	r0, r3
 80020d8:	f002 f844 	bl	8004164 <HAL_GPIO_Init>

		HAL_DRIVER_DEBUG(gpio->info.status_in, debug_printf("Init Gpio %s - %d, %X\n\r", gpio->info.name, gpio->info.id, gpio->pin));		
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00e      	beq.n	8002102 <dev_gpio_init+0x11a>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d009      	beq.n	8002102 <dev_gpio_init+0x11a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6959      	ldr	r1, [r3, #20]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	791b      	ldrb	r3, [r3, #4]
 80020f6:	461a      	mov	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	8b9b      	ldrh	r3, [r3, #28]
 80020fc:	4849      	ldr	r0, [pc, #292]	; (8002224 <dev_gpio_init+0x23c>)
 80020fe:	f7ff fa7b 	bl	80015f8 <debug_printf>

	  // EXTI interrupt init
		if (init->irq_cbf)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 8083 	beq.w	8002212 <dev_gpio_init+0x22a>
		{
				int pin_id = dev_gpio_pin_id(gpio->pin);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	8b9b      	ldrh	r3, [r3, #28]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fddd 	bl	8001cd0 <dev_gpio_pin_id>
 8002116:	61b8      	str	r0, [r7, #24]
			
				if (pin_id < 0) return TRACE_GERROR("Irq Line!!!");
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	2b00      	cmp	r3, #0
 800211c:	da07      	bge.n	800212e <dev_gpio_init+0x146>
 800211e:	f240 122f 	movw	r2, #303	; 0x12f
 8002122:	493e      	ldr	r1, [pc, #248]	; (800221c <dev_gpio_init+0x234>)
 8002124:	4840      	ldr	r0, [pc, #256]	; (8002228 <dev_gpio_init+0x240>)
 8002126:	f7ff f8b9 	bl	800129c <dev_trace_generate_error>
 800212a:	4603      	mov	r3, r0
 800212c:	e072      	b.n	8002214 <dev_gpio_init+0x22c>
			
				gpio_irq_cbf[pin_id] = init->irq_cbf;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	6a1a      	ldr	r2, [r3, #32]
 8002132:	493e      	ldr	r1, [pc, #248]	; (800222c <dev_gpio_init+0x244>)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			
				switch(pin_id)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	2b0f      	cmp	r3, #15
 800213e:	d83f      	bhi.n	80021c0 <dev_gpio_init+0x1d8>
 8002140:	a201      	add	r2, pc, #4	; (adr r2, 8002148 <dev_gpio_init+0x160>)
 8002142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002146:	bf00      	nop
 8002148:	08002189 	.word	0x08002189
 800214c:	08002191 	.word	0x08002191
 8002150:	08002199 	.word	0x08002199
 8002154:	080021a1 	.word	0x080021a1
 8002158:	080021a9 	.word	0x080021a9
 800215c:	080021b1 	.word	0x080021b1
 8002160:	080021b1 	.word	0x080021b1
 8002164:	080021b1 	.word	0x080021b1
 8002168:	080021b1 	.word	0x080021b1
 800216c:	080021b1 	.word	0x080021b1
 8002170:	080021b9 	.word	0x080021b9
 8002174:	080021b9 	.word	0x080021b9
 8002178:	080021b9 	.word	0x080021b9
 800217c:	080021b9 	.word	0x080021b9
 8002180:	080021b9 	.word	0x080021b9
 8002184:	080021b9 	.word	0x080021b9
				{
						case 0 : gpio->irq_line = EXTI0_IRQn; break;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2206      	movs	r2, #6
 800218c:	779a      	strb	r2, [r3, #30]
 800218e:	e017      	b.n	80021c0 <dev_gpio_init+0x1d8>
						case 1 : gpio->irq_line = EXTI1_IRQn; break;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2207      	movs	r2, #7
 8002194:	779a      	strb	r2, [r3, #30]
 8002196:	e013      	b.n	80021c0 <dev_gpio_init+0x1d8>
						case 2 : gpio->irq_line = EXTI2_IRQn; break;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2208      	movs	r2, #8
 800219c:	779a      	strb	r2, [r3, #30]
 800219e:	e00f      	b.n	80021c0 <dev_gpio_init+0x1d8>
						case 3 : gpio->irq_line = EXTI3_IRQn; break;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2209      	movs	r2, #9
 80021a4:	779a      	strb	r2, [r3, #30]
 80021a6:	e00b      	b.n	80021c0 <dev_gpio_init+0x1d8>
						case 4 : gpio->irq_line = EXTI4_IRQn; break;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	220a      	movs	r2, #10
 80021ac:	779a      	strb	r2, [r3, #30]
 80021ae:	e007      	b.n	80021c0 <dev_gpio_init+0x1d8>

						case 5 : 
						case 6 : 
						case 7 : 
						case 8 : 
						case 9 : gpio->irq_line = EXTI9_5_IRQn; break;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2217      	movs	r2, #23
 80021b4:	779a      	strb	r2, [r3, #30]
 80021b6:	e003      	b.n	80021c0 <dev_gpio_init+0x1d8>
						case 10 : 
						case 11 : 
						case 12 : 
						case 13 : 
						case 14 : 
						case 15 : gpio->irq_line = EXTI15_10_IRQn; break;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2228      	movs	r2, #40	; 0x28
 80021bc:	779a      	strb	r2, [r3, #30]
 80021be:	bf00      	nop
				}
			
				HAL_NVIC_SetPriority((IRQn_Type)gpio->irq_line, (init->irq_prior >> 4) & 0x0F, init->irq_prior & 0x0F);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	7f9b      	ldrb	r3, [r3, #30]
 80021c4:	b258      	sxtb	r0, r3
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	7f5b      	ldrb	r3, [r3, #29]
 80021ca:	091b      	lsrs	r3, r3, #4
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	f003 010f 	and.w	r1, r3, #15
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	7f5b      	ldrb	r3, [r3, #29]
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	461a      	mov	r2, r3
 80021dc:	f001 fd77 	bl	8003cce <HAL_NVIC_SetPriority>
				HAL_NVIC_EnableIRQ((IRQn_Type)gpio->irq_line);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	7f9b      	ldrb	r3, [r3, #30]
 80021e4:	b25b      	sxtb	r3, r3
 80021e6:	4618      	mov	r0, r3
 80021e8:	f001 fd8d 	bl	8003d06 <HAL_NVIC_EnableIRQ>

			
				HAL_DRIVER_DEBUG(gpio->info.status_in, debug_printf("Init Gpio IRQ %s -, %d, %X\n\r", gpio->info.name, gpio->info.id, gpio->irq_line));		
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00e      	beq.n	8002212 <dev_gpio_init+0x22a>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d009      	beq.n	8002212 <dev_gpio_init+0x22a>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6959      	ldr	r1, [r3, #20]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	791b      	ldrb	r3, [r3, #4]
 8002206:	461a      	mov	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	7f9b      	ldrb	r3, [r3, #30]
 800220c:	4808      	ldr	r0, [pc, #32]	; (8002230 <dev_gpio_init+0x248>)
 800220e:	f7ff f9f3 	bl	80015f8 <debug_printf>
		}	

		return RET_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3720      	adds	r7, #32
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	08006cf8 	.word	0x08006cf8
 8002220:	10110000 	.word	0x10110000
 8002224:	08006d50 	.word	0x08006d50
 8002228:	08006d68 	.word	0x08006d68
 800222c:	200000f0 	.word	0x200000f0
 8002230:	08006d74 	.word	0x08006d74

08002234 <dev_gpio_init_simp>:

UINT8 dev_gpio_init_simp(dev_gpio_t* gpio, UINT8 gpio_id, UINT16 gpio_pin, UINT8 gpio_mode)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08c      	sub	sp, #48	; 0x30
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	4608      	mov	r0, r1
 800223e:	4611      	mov	r1, r2
 8002240:	461a      	mov	r2, r3
 8002242:	4603      	mov	r3, r0
 8002244:	70fb      	strb	r3, [r7, #3]
 8002246:	460b      	mov	r3, r1
 8002248:	803b      	strh	r3, [r7, #0]
 800224a:	4613      	mov	r3, r2
 800224c:	70bb      	strb	r3, [r7, #2]
		dev_gpio_init_t init;
	
		init.info.id = gpio_id;
 800224e:	78fb      	ldrb	r3, [r7, #3]
 8002250:	733b      	strb	r3, [r7, #12]
		init.info.name = "";
 8002252:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <dev_gpio_init_simp+0x5c>)
 8002254:	61fb      	str	r3, [r7, #28]
		init.info.status_in = 0; 
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
		init.info.status_out = 0; 
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]

		init.pin = gpio_pin;
 800225e:	883b      	ldrh	r3, [r7, #0]
 8002260:	84bb      	strh	r3, [r7, #36]	; 0x24
		init.mode = gpio_mode;
 8002262:	78bb      	ldrb	r3, [r7, #2]
 8002264:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		init.speed = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		init.irq_cbf = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
		init.irq_mode = 0;
 8002272:	2300      	movs	r3, #0
 8002274:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	
		return dev_gpio_init(gpio, &init);
 8002278:	f107 030c 	add.w	r3, r7, #12
 800227c:	4619      	mov	r1, r3
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff feb2 	bl	8001fe8 <dev_gpio_init>
 8002284:	4603      	mov	r3, r0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3730      	adds	r7, #48	; 0x30
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	08006d94 	.word	0x08006d94

08002294 <dev_gpio_set>:
{
		return 0; //HAL_GPIO_ReadPins(gpio->port, gpio->pin); 
}

void dev_gpio_set(dev_gpio_t* gpio, UINT8 val)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	70fb      	strb	r3, [r7, #3]
		if (val) HAL_GPIO_WritePin(gpio->port, gpio->pin, (GPIO_PinState)1); 
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d008      	beq.n	80022b8 <dev_gpio_set+0x24>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	8b9b      	ldrh	r3, [r3, #28]
 80022ae:	2201      	movs	r2, #1
 80022b0:	4619      	mov	r1, r3
 80022b2:	f002 f8db 	bl	800446c <HAL_GPIO_WritePin>
				else HAL_GPIO_WritePin(gpio->port, gpio->pin, (GPIO_PinState)0);
}
 80022b6:	e007      	b.n	80022c8 <dev_gpio_set+0x34>
				else HAL_GPIO_WritePin(gpio->port, gpio->pin, (GPIO_PinState)0);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	8b9b      	ldrh	r3, [r3, #28]
 80022c0:	2200      	movs	r2, #0
 80022c2:	4619      	mov	r1, r3
 80022c4:	f002 f8d2 	bl	800446c <HAL_GPIO_WritePin>
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <max30102_setup>:
// MAX30102 object
max30102_t max30102;


void max30102_setup()
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
	max30102_init(&max30102, &hi2c1);
 80022d4:	491d      	ldr	r1, [pc, #116]	; (800234c <max30102_setup+0x7c>)
 80022d6:	481e      	ldr	r0, [pc, #120]	; (8002350 <max30102_setup+0x80>)
 80022d8:	f000 f8b0 	bl	800243c <max30102_init>
	//  max30102_on_interrupt(&max30102);

	  max30102_reset(&max30102);
 80022dc:	481c      	ldr	r0, [pc, #112]	; (8002350 <max30102_setup+0x80>)
 80022de:	f000 f921 	bl	8002524 <max30102_reset>
	  max30102_clear_fifo(&max30102);
 80022e2:	481b      	ldr	r0, [pc, #108]	; (8002350 <max30102_setup+0x80>)
 80022e4:	f000 fada 	bl	800289c <max30102_clear_fifo>


	  // FIFO configurations
	  max30102_set_fifo_config(&max30102, max30102_smp_ave_8, 1, 7);
 80022e8:	2307      	movs	r3, #7
 80022ea:	2201      	movs	r2, #1
 80022ec:	2103      	movs	r1, #3
 80022ee:	4818      	ldr	r0, [pc, #96]	; (8002350 <max30102_setup+0x80>)
 80022f0:	f000 fa9a 	bl	8002828 <max30102_set_fifo_config>

	  // LED configurations
	  max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 80022f4:	2101      	movs	r1, #1
 80022f6:	4816      	ldr	r0, [pc, #88]	; (8002350 <max30102_setup+0x80>)
 80022f8:	f000 f9fd 	bl	80026f6 <max30102_set_led_pulse_width>
	  max30102_set_adc_resolution(&max30102, max30102_adc_2048);
 80022fc:	2100      	movs	r1, #0
 80022fe:	4814      	ldr	r0, [pc, #80]	; (8002350 <max30102_setup+0x80>)
 8002300:	f000 fa1c 	bl	800273c <max30102_set_adc_resolution>
	  max30102_set_sampling_rate(&max30102, max30102_sr_800);
 8002304:	2104      	movs	r1, #4
 8002306:	4812      	ldr	r0, [pc, #72]	; (8002350 <max30102_setup+0x80>)
 8002308:	f000 f9d6 	bl	80026b8 <max30102_set_sampling_rate>
	  max30102_set_led_current_1(&max30102, 6.2);
 800230c:	4911      	ldr	r1, [pc, #68]	; (8002354 <max30102_setup+0x84>)
 800230e:	4810      	ldr	r0, [pc, #64]	; (8002350 <max30102_setup+0x80>)
 8002310:	f000 fa3a 	bl	8002788 <max30102_set_led_current_1>
	  max30102_set_led_current_2(&max30102, 6.2);
 8002314:	490f      	ldr	r1, [pc, #60]	; (8002354 <max30102_setup+0x84>)
 8002316:	480e      	ldr	r0, [pc, #56]	; (8002350 <max30102_setup+0x80>)
 8002318:	f000 fa5e 	bl	80027d8 <max30102_set_led_current_2>

	    // Enter SpO2 mode
	  max30102_set_mode(&max30102, max30102_spo2);
 800231c:	2103      	movs	r1, #3
 800231e:	480c      	ldr	r0, [pc, #48]	; (8002350 <max30102_setup+0x80>)
 8002320:	f000 f9a4 	bl	800266c <max30102_set_mode>

	   // Enable FIFO_A_FULL interrupt
	  max30102_set_a_full(&max30102, 1);
 8002324:	2101      	movs	r1, #1
 8002326:	480a      	ldr	r0, [pc, #40]	; (8002350 <max30102_setup+0x80>)
 8002328:	f000 f90d 	bl	8002546 <max30102_set_a_full>

	  // Enable die temperature measurement
	  max30102_set_die_temp_en(&max30102, 1);
 800232c:	2101      	movs	r1, #1
 800232e:	4808      	ldr	r0, [pc, #32]	; (8002350 <max30102_setup+0x80>)
 8002330:	f000 f949 	bl	80025c6 <max30102_set_die_temp_en>

	  // Enable DIE_TEMP_RDY interrupt
	  max30102_set_die_temp_rdy(&max30102, 1);
 8002334:	2101      	movs	r1, #1
 8002336:	4806      	ldr	r0, [pc, #24]	; (8002350 <max30102_setup+0x80>)
 8002338:	f000 f92d 	bl	8002596 <max30102_set_die_temp_rdy>


	  max30102_read(&max30102, 0x00, en_reg, 1);
 800233c:	2301      	movs	r3, #1
 800233e:	4a06      	ldr	r2, [pc, #24]	; (8002358 <max30102_setup+0x88>)
 8002340:	2100      	movs	r1, #0
 8002342:	4803      	ldr	r0, [pc, #12]	; (8002350 <max30102_setup+0x80>)
 8002344:	f000 f8cb 	bl	80024de <max30102_read>
}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000340 	.word	0x20000340
 8002350:	20000238 	.word	0x20000238
 8002354:	40c66666 	.word	0x40c66666
 8002358:	20000234 	.word	0x20000234

0800235c <max30102_loop>:


void max30102_loop()
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08c      	sub	sp, #48	; 0x30
 8002360:	af06      	add	r7, sp, #24


  max30102_read(&max30102, 0x07, en_reg, 1);
 8002362:	2301      	movs	r3, #1
 8002364:	4a19      	ldr	r2, [pc, #100]	; (80023cc <max30102_loop+0x70>)
 8002366:	2107      	movs	r1, #7
 8002368:	4819      	ldr	r0, [pc, #100]	; (80023d0 <max30102_loop+0x74>)
 800236a:	f000 f8b8 	bl	80024de <max30102_read>
  max30102_interrupt_handler(&max30102);
 800236e:	4818      	ldr	r0, [pc, #96]	; (80023d0 <max30102_loop+0x74>)
 8002370:	f000 f94e 	bl	8002610 <max30102_interrupt_handler>


  if (buf_index >= BUFFER_SIZE){
 8002374:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <max30102_loop+0x78>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b1f      	cmp	r3, #31
 800237a:	d922      	bls.n	80023c2 <max30102_loop+0x66>
	  int32_t n_heart_rate; 				// heart rate value
	  int8_t  ch_hr_valid;  				// indicator to show if the heart rate calculation is valid


	  // calculate heart rate and SpO2 after BUFFER_SIZE samples (ST seconds of samples) using Robert's method
	  rf_heart_rate_and_oxygen_saturation(aun_ir_buffer, BUFFER_SIZE, aun_red_buffer, &n_spo2, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid, &ratio, &correl);
 800237c:	f107 0214 	add.w	r2, r7, #20
 8002380:	f107 030c 	add.w	r3, r7, #12
 8002384:	9304      	str	r3, [sp, #16]
 8002386:	f107 0310 	add.w	r3, r7, #16
 800238a:	9303      	str	r3, [sp, #12]
 800238c:	1cfb      	adds	r3, r7, #3
 800238e:	9302      	str	r3, [sp, #8]
 8002390:	1d3b      	adds	r3, r7, #4
 8002392:	9301      	str	r3, [sp, #4]
 8002394:	f107 030b 	add.w	r3, r7, #11
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	4613      	mov	r3, r2
 800239c:	4a0e      	ldr	r2, [pc, #56]	; (80023d8 <max30102_loop+0x7c>)
 800239e:	2120      	movs	r1, #32
 80023a0:	480e      	ldr	r0, [pc, #56]	; (80023dc <max30102_loop+0x80>)
 80023a2:	f000 fb19 	bl	80029d8 <rf_heart_rate_and_oxygen_saturation>


	  // display results
//	  if (ch_hr_valid && ch_spo2_valid)
//	  {
		debug_printf("SPO2: %f , Heart Rate: %f\r\n", n_spo2, n_heart_rate);
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe f835 	bl	8000418 <__aeabi_f2d>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	9100      	str	r1, [sp, #0]
 80023b6:	480a      	ldr	r0, [pc, #40]	; (80023e0 <max30102_loop+0x84>)
 80023b8:	f7ff f91e 	bl	80015f8 <debug_printf>
//	  }
//	  else
//	  {
//		debug_printf("Not valid. Are you still alive?\r\n");
//	  }
	  buf_index = 0;
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <max30102_loop+0x78>)
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
  }
}
 80023c2:	bf00      	nop
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000234 	.word	0x20000234
 80023d0:	20000238 	.word	0x20000238
 80023d4:	20000230 	.word	0x20000230
 80023d8:	200001b0 	.word	0x200001b0
 80023dc:	20000130 	.word	0x20000130
 80023e0:	08006db8 	.word	0x08006db8

080023e4 <max30102_plot>:


// Override plot function
void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
    // printf("ir:%u\n", ir_sample);                  // Print IR only
    // printf("r:%u\n", red_sample);                  // Print Red only
	debug_printf("ir:%d,r:%d\n\r", ir_sample, red_sample);    // Print IR and Red
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	480e      	ldr	r0, [pc, #56]	; (800242c <max30102_plot+0x48>)
 80023f4:	f7ff f900 	bl	80015f8 <debug_printf>

//	memcpy(&tx_buffer[5], &ir_sample, 4);
//	memcpy(&tx_buffer[9], &red_sample, 4);
//	HAL_UART_Transmit_DMA(&huart1, samples_buf, sizeof(samples_buf));

	if (buf_index < BUFFER_SIZE){
 80023f8:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <max30102_plot+0x4c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b1f      	cmp	r3, #31
 80023fe:	d810      	bhi.n	8002422 <max30102_plot+0x3e>
		aun_ir_buffer[buf_index]=ir_sample;
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <max30102_plot+0x4c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	490b      	ldr	r1, [pc, #44]	; (8002434 <max30102_plot+0x50>)
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		aun_red_buffer[buf_index] = red_sample;
 800240c:	4b08      	ldr	r3, [pc, #32]	; (8002430 <max30102_plot+0x4c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4909      	ldr	r1, [pc, #36]	; (8002438 <max30102_plot+0x54>)
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		buf_index ++;
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <max30102_plot+0x4c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	3301      	adds	r3, #1
 800241e:	4a04      	ldr	r2, [pc, #16]	; (8002430 <max30102_plot+0x4c>)
 8002420:	6013      	str	r3, [r2, #0]
	}


}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	08006dd4 	.word	0x08006dd4
 8002430:	20000230 	.word	0x20000230
 8002434:	20000130 	.word	0x20000130
 8002438:	200001b0 	.word	0x200001b0

0800243c <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3304      	adds	r3, #4
 8002458:	2280      	movs	r2, #128	; 0x80
 800245a:	2100      	movs	r1, #0
 800245c:	4618      	mov	r0, r3
 800245e:	f004 fa71 	bl	8006944 <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3384      	adds	r3, #132	; 0x84
 8002466:	2280      	movs	r2, #128	; 0x80
 8002468:	2100      	movs	r1, #0
 800246a:	4618      	mov	r0, r3
 800246c:	f004 fa6a 	bl	8006944 <memset>
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af02      	add	r7, sp, #8
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	461a      	mov	r2, r3
 8002484:	460b      	mov	r3, r1
 8002486:	72fb      	strb	r3, [r7, #11]
 8002488:	4613      	mov	r3, r2
 800248a:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 800248c:	893b      	ldrh	r3, [r7, #8]
 800248e:	3301      	adds	r3, #1
 8002490:	4618      	mov	r0, r3
 8002492:	f004 f99b 	bl	80067cc <malloc>
 8002496:	4603      	mov	r3, r0
 8002498:	617b      	str	r3, [r7, #20]
    *payload = reg;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	7afa      	ldrb	r2, [r7, #11]
 800249e:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d009      	beq.n	80024ba <max30102_write+0x42>
 80024a6:	893b      	ldrh	r3, [r7, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d006      	beq.n	80024ba <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	3301      	adds	r3, #1
 80024b0:	893a      	ldrh	r2, [r7, #8]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f004 fa89 	bl	80069cc <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6818      	ldr	r0, [r3, #0]
 80024be:	893b      	ldrh	r3, [r7, #8]
 80024c0:	3301      	adds	r3, #1
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	220a      	movs	r2, #10
 80024c6:	9200      	str	r2, [sp, #0]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	21ae      	movs	r1, #174	; 0xae
 80024cc:	f002 f94c 	bl	8004768 <HAL_I2C_Master_Transmit>
    free(payload);
 80024d0:	6978      	ldr	r0, [r7, #20]
 80024d2:	f004 f983 	bl	80067dc <free>
}
 80024d6:	bf00      	nop
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b088      	sub	sp, #32
 80024e2:	af02      	add	r7, sp, #8
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	461a      	mov	r2, r3
 80024ea:	460b      	mov	r3, r1
 80024ec:	72fb      	strb	r3, [r7, #11]
 80024ee:	4613      	mov	r3, r2
 80024f0:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 80024f2:	7afb      	ldrb	r3, [r7, #11]
 80024f4:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6818      	ldr	r0, [r3, #0]
 80024fa:	f107 0217 	add.w	r2, r7, #23
 80024fe:	230a      	movs	r3, #10
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	2301      	movs	r3, #1
 8002504:	21ae      	movs	r1, #174	; 0xae
 8002506:	f002 f92f 	bl	8004768 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR + 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	893b      	ldrh	r3, [r7, #8]
 8002510:	220a      	movs	r2, #10
 8002512:	9200      	str	r2, [sp, #0]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	21af      	movs	r1, #175	; 0xaf
 8002518:	f002 fa24 	bl	8004964 <HAL_I2C_Master_Receive>
}
 800251c:	bf00      	nop
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 800252c:	2340      	movs	r3, #64	; 0x40
 800252e:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 8002530:	f107 020f 	add.w	r2, r7, #15
 8002534:	2301      	movs	r3, #1
 8002536:	2109      	movs	r1, #9
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff ff9d 	bl	8002478 <max30102_write>
}
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	460b      	mov	r3, r1
 8002550:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8002556:	f107 020f 	add.w	r2, r7, #15
 800255a:	2301      	movs	r3, #1
 800255c:	2102      	movs	r1, #2
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff ffbd 	bl	80024de <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800256a:	b2db      	uxtb	r3, r3
 800256c:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 800256e:	78fb      	ldrb	r3, [r7, #3]
 8002570:	01db      	lsls	r3, r3, #7
 8002572:	b25a      	sxtb	r2, r3
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	b25b      	sxtb	r3, r3
 8002578:	4313      	orrs	r3, r2
 800257a:	b25b      	sxtb	r3, r3
 800257c:	b2db      	uxtb	r3, r3
 800257e:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8002580:	f107 020f 	add.w	r2, r7, #15
 8002584:	2301      	movs	r3, #1
 8002586:	2102      	movs	r1, #2
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ff75 	bl	8002478 <max30102_write>
}
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b084      	sub	sp, #16
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
 800259e:	460b      	mov	r3, r1
 80025a0:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 80025a2:	78fb      	ldrb	r3, [r7, #3]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 80025b0:	f107 020f 	add.w	r2, r7, #15
 80025b4:	2301      	movs	r3, #1
 80025b6:	2103      	movs	r1, #3
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7ff ff5d 	bl	8002478 <max30102_write>
}
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	460b      	mov	r3, r1
 80025d0:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 80025e0:	f107 020f 	add.w	r2, r7, #15
 80025e4:	2301      	movs	r3, #1
 80025e6:	2121      	movs	r1, #33	; 0x21
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff ff45 	bl	8002478 <max30102_write>
}
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr

08002610 <max30102_interrupt_handler>:
 * @brief Read interrupt status registers (0x00 and 0x01) and perform corresponding tasks.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_interrupt_handler(max30102_t *obj)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

    uint8_t reg[2] = {0x00};
 8002618:	2300      	movs	r3, #0
 800261a:	81bb      	strh	r3, [r7, #12]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    max30102_read(obj, MAX30102_INTERRUPT_STATUS_1, reg, 2);
 800261c:	f107 020c 	add.w	r2, r7, #12
 8002620:	2302      	movs	r3, #2
 8002622:	2100      	movs	r1, #0
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff ff5a 	bl	80024de <max30102_read>

    if ((reg[0] >> MAX30102_INTERRUPT_A_FULL) & 0x01)
 800262a:	7b3b      	ldrb	r3, [r7, #12]
 800262c:	09db      	lsrs	r3, r3, #7
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <max30102_interrupt_handler+0x2e>
    {
//    	debug_printf("1\n\r");
        // FIFO almost full
        max30102_read_fifo(obj);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f94e 	bl	80028da <max30102_read_fifo>
    {
//    	debug_printf("3\n\r");
        // Ambient light overflow
    }

    if ((reg[1] >> MAX30102_INTERRUPT_DIE_TEMP_RDY) & 0x01)
 800263e:	7b7b      	ldrb	r3, [r7, #13]
 8002640:	085b      	lsrs	r3, r3, #1
 8002642:	b2db      	uxtb	r3, r3
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b00      	cmp	r3, #0
 800264a:	d007      	beq.n	800265c <max30102_interrupt_handler+0x4c>
    {
//    	debug_printf("4\n\r");
        // Temperature data ready
        int8_t temp_int;
        uint8_t temp_frac;
        max30102_read_temp(obj, &temp_int, &temp_frac);
 800264c:	f107 020a 	add.w	r2, r7, #10
 8002650:	f107 030b 	add.w	r3, r7, #11
 8002654:	4619      	mov	r1, r3
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f9a6 	bl	80029a8 <max30102_read_temp>
        // float temp = temp_int + 0.0625f * temp_frac;
    }

    // Reset interrupt flag
    obj->_interrupt_flag = 0;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
}
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 8002678:	f107 020f 	add.w	r2, r7, #15
 800267c:	2301      	movs	r3, #1
 800267e:	2109      	movs	r1, #9
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ff2c 	bl	80024de <max30102_read>
    config = (config & 0xf8) | mode;
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	b25b      	sxtb	r3, r3
 800268a:	f023 0307 	bic.w	r3, r3, #7
 800268e:	b25a      	sxtb	r2, r3
 8002690:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002694:	4313      	orrs	r3, r2
 8002696:	b25b      	sxtb	r3, r3
 8002698:	b2db      	uxtb	r3, r3
 800269a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 800269c:	f107 020f 	add.w	r2, r7, #15
 80026a0:	2301      	movs	r3, #1
 80026a2:	2109      	movs	r1, #9
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff fee7 	bl	8002478 <max30102_write>
    max30102_clear_fifo(obj);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f8f6 	bl	800289c <max30102_clear_fifo>
}
 80026b0:	bf00      	nop
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80026c4:	f107 020f 	add.w	r2, r7, #15
 80026c8:	2301      	movs	r3, #1
 80026ca:	210a      	movs	r1, #10
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ff06 	bl	80024de <max30102_read>
    config = (config & 0x63) << MAX30102_SPO2_SR;
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80026e0:	f107 020f 	add.w	r2, r7, #15
 80026e4:	2301      	movs	r3, #1
 80026e6:	210a      	movs	r1, #10
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff fec5 	bl	8002478 <max30102_write>
}
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	460b      	mov	r3, r1
 8002700:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8002702:	f107 020f 	add.w	r2, r7, #15
 8002706:	2301      	movs	r3, #1
 8002708:	210a      	movs	r1, #10
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff fee7 	bl	80024de <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	b25b      	sxtb	r3, r3
 8002714:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8002718:	b25a      	sxtb	r2, r3
 800271a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800271e:	4313      	orrs	r3, r2
 8002720:	b25b      	sxtb	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8002726:	f107 020f 	add.w	r2, r7, #15
 800272a:	2301      	movs	r3, #1
 800272c:	210a      	movs	r1, #10
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff fea2 	bl	8002478 <max30102_write>
}
 8002734:	bf00      	nop
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8002748:	f107 020f 	add.w	r2, r7, #15
 800274c:	2301      	movs	r3, #1
 800274e:	210a      	movs	r1, #10
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7ff fec4 	bl	80024de <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	b25b      	sxtb	r3, r3
 800275a:	f003 031f 	and.w	r3, r3, #31
 800275e:	b25a      	sxtb	r2, r3
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	015b      	lsls	r3, r3, #5
 8002764:	b25b      	sxtb	r3, r3
 8002766:	4313      	orrs	r3, r2
 8002768:	b25b      	sxtb	r3, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800276e:	f107 020f 	add.w	r2, r7, #15
 8002772:	2301      	movs	r3, #1
 8002774:	210a      	movs	r1, #10
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff fe7e 	bl	8002478 <max30102_write>
}
 800277c:	bf00      	nop
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	0000      	movs	r0, r0
	...

08002788 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 8002792:	6838      	ldr	r0, [r7, #0]
 8002794:	f7fd fe40 	bl	8000418 <__aeabi_f2d>
 8002798:	a30d      	add	r3, pc, #52	; (adr r3, 80027d0 <max30102_set_led_current_1+0x48>)
 800279a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279e:	f7fd ffbd 	bl	800071c <__aeabi_ddiv>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4610      	mov	r0, r2
 80027a8:	4619      	mov	r1, r3
 80027aa:	f7fe f965 	bl	8000a78 <__aeabi_d2uiz>
 80027ae:	4603      	mov	r3, r0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 80027b4:	f107 020f 	add.w	r2, r7, #15
 80027b8:	2301      	movs	r3, #1
 80027ba:	210c      	movs	r1, #12
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff fe5b 	bl	8002478 <max30102_write>
}
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	f3af 8000 	nop.w
 80027d0:	9999999a 	.word	0x9999999a
 80027d4:	3fc99999 	.word	0x3fc99999

080027d8 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
    uint8_t pa = ma / 0.2;
 80027e2:	6838      	ldr	r0, [r7, #0]
 80027e4:	f7fd fe18 	bl	8000418 <__aeabi_f2d>
 80027e8:	a30d      	add	r3, pc, #52	; (adr r3, 8002820 <max30102_set_led_current_2+0x48>)
 80027ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ee:	f7fd ff95 	bl	800071c <__aeabi_ddiv>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	4610      	mov	r0, r2
 80027f8:	4619      	mov	r1, r3
 80027fa:	f7fe f93d 	bl	8000a78 <__aeabi_d2uiz>
 80027fe:	4603      	mov	r3, r0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 8002804:	f107 020f 	add.w	r2, r7, #15
 8002808:	2301      	movs	r3, #1
 800280a:	210d      	movs	r1, #13
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff fe33 	bl	8002478 <max30102_write>
}
 8002812:	bf00      	nop
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	f3af 8000 	nop.w
 8002820:	9999999a 	.word	0x9999999a
 8002824:	3fc99999 	.word	0x3fc99999

08002828 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	4608      	mov	r0, r1
 8002832:	4611      	mov	r1, r2
 8002834:	461a      	mov	r2, r3
 8002836:	4603      	mov	r3, r0
 8002838:	70fb      	strb	r3, [r7, #3]
 800283a:	460b      	mov	r3, r1
 800283c:	70bb      	strb	r3, [r7, #2]
 800283e:	4613      	mov	r3, r2
 8002840:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 8002842:	2300      	movs	r3, #0
 8002844:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 8002846:	78fb      	ldrb	r3, [r7, #3]
 8002848:	015b      	lsls	r3, r3, #5
 800284a:	b25a      	sxtb	r2, r3
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	b25b      	sxtb	r3, r3
 8002850:	4313      	orrs	r3, r2
 8002852:	b25b      	sxtb	r3, r3
 8002854:	b2db      	uxtb	r3, r3
 8002856:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 8002858:	78bb      	ldrb	r3, [r7, #2]
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	b25b      	sxtb	r3, r3
 800285e:	f003 0310 	and.w	r3, r3, #16
 8002862:	b25a      	sxtb	r2, r3
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	b25b      	sxtb	r3, r3
 8002868:	4313      	orrs	r3, r2
 800286a:	b25b      	sxtb	r3, r3
 800286c:	b2db      	uxtb	r3, r3
 800286e:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 8002870:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8002874:	f003 030f 	and.w	r3, r3, #15
 8002878:	b25a      	sxtb	r2, r3
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	b25b      	sxtb	r3, r3
 800287e:	4313      	orrs	r3, r2
 8002880:	b25b      	sxtb	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 8002886:	f107 020f 	add.w	r2, r7, #15
 800288a:	2301      	movs	r3, #1
 800288c:	2108      	movs	r1, #8
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff fdf2 	bl	8002478 <max30102_write>
}
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 80028a4:	2300      	movs	r3, #0
 80028a6:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 80028a8:	f107 020f 	add.w	r2, r7, #15
 80028ac:	2303      	movs	r3, #3
 80028ae:	2104      	movs	r1, #4
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff fde1 	bl	8002478 <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 80028b6:	f107 020f 	add.w	r2, r7, #15
 80028ba:	2303      	movs	r3, #3
 80028bc:	2106      	movs	r1, #6
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff fdda 	bl	8002478 <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 80028c4:	f107 020f 	add.w	r2, r7, #15
 80028c8:	2303      	movs	r3, #3
 80028ca:	2105      	movs	r1, #5
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff fdd3 	bl	8002478 <max30102_write>
}
 80028d2:	bf00      	nop
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b088      	sub	sp, #32
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	74fb      	strb	r3, [r7, #19]
 80028e6:	2300      	movs	r3, #0
 80028e8:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 80028ea:	f107 0213 	add.w	r2, r7, #19
 80028ee:	2301      	movs	r3, #1
 80028f0:	2104      	movs	r1, #4
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff fdf3 	bl	80024de <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 80028f8:	f107 0212 	add.w	r2, r7, #18
 80028fc:	2301      	movs	r3, #1
 80028fe:	2106      	movs	r1, #6
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff fdec 	bl	80024de <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 8002906:	7cfa      	ldrb	r2, [r7, #19]
 8002908:	7cbb      	ldrb	r3, [r7, #18]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	b2db      	uxtb	r3, r3
 800290e:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 8002910:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002914:	2b00      	cmp	r3, #0
 8002916:	dc03      	bgt.n	8002920 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 8002918:	7ffb      	ldrb	r3, [r7, #31]
 800291a:	3320      	adds	r3, #32
 800291c:	b2db      	uxtb	r3, r3
 800291e:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 8002920:	2300      	movs	r3, #0
 8002922:	77bb      	strb	r3, [r7, #30]
 8002924:	e035      	b.n	8002992 <max30102_read_fifo+0xb8>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 8002926:	f107 020c 	add.w	r2, r7, #12
 800292a:	2306      	movs	r3, #6
 800292c:	2107      	movs	r1, #7
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff fdd5 	bl	80024de <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 8002934:	7b3b      	ldrb	r3, [r7, #12]
 8002936:	041b      	lsls	r3, r3, #16
 8002938:	461a      	mov	r2, r3
 800293a:	7b7b      	ldrb	r3, [r7, #13]
 800293c:	021b      	lsls	r3, r3, #8
 800293e:	4313      	orrs	r3, r2
 8002940:	7bba      	ldrb	r2, [r7, #14]
 8002942:	4313      	orrs	r3, r2
 8002944:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002948:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	041b      	lsls	r3, r3, #16
 800294e:	461a      	mov	r2, r3
 8002950:	7c3b      	ldrb	r3, [r7, #16]
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	4313      	orrs	r3, r2
 8002956:	7c7a      	ldrb	r2, [r7, #17]
 8002958:	4313      	orrs	r3, r2
 800295a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800295e:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 8002960:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 800296e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	3320      	adds	r3, #32
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 800297e:	6979      	ldr	r1, [r7, #20]
 8002980:	69b8      	ldr	r0, [r7, #24]
 8002982:	f7ff fd2f 	bl	80023e4 <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 8002986:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800298a:	b2db      	uxtb	r3, r3
 800298c:	3301      	adds	r3, #1
 800298e:	b2db      	uxtb	r3, r3
 8002990:	77bb      	strb	r3, [r7, #30]
 8002992:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8002996:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800299a:	429a      	cmp	r2, r3
 800299c:	dbc3      	blt.n	8002926 <max30102_read_fifo+0x4c>
    }
}
 800299e:	bf00      	nop
 80029a0:	bf00      	nop
 80029a2:	3720      	adds	r7, #32
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <max30102_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30102_read_temp(max30102_t *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
    max30102_read(obj, MAX30102_DIE_TINT, (uint8_t *)temp_int, 1);
 80029b4:	2301      	movs	r3, #1
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	211f      	movs	r1, #31
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f7ff fd8f 	bl	80024de <max30102_read>
    max30102_read(obj, MAX30102_DIE_TFRAC, temp_frac, 1);
 80029c0:	2301      	movs	r3, #1
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	2120      	movs	r1, #32
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f7ff fd89 	bl	80024de <max30102_read>
}
 80029cc:	bf00      	nop
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	0000      	movs	r0, r0
	...

080029d8 <rf_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 80029d8:	b5b0      	push	{r4, r5, r7, lr}
 80029da:	b0d6      	sub	sp, #344	; 0x158
 80029dc:	af04      	add	r7, sp, #16
 80029de:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 80029e2:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
 80029e6:	6020      	str	r0, [r4, #0]
 80029e8:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80029ec:	f5a0 70a0 	sub.w	r0, r0, #320	; 0x140
 80029f0:	6001      	str	r1, [r0, #0]
 80029f2:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80029f6:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 80029fa:	600a      	str	r2, [r1, #0]
 80029fc:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002a00:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8002a04:	6013      	str	r3, [r2, #0]
  float beta_ir, beta_red, x;
  float an_x[BUFFER_SIZE], *ptr_x; //ir
  float an_y[BUFFER_SIZE], *ptr_y; //red

  // calculates DC mean and subtracts DC from ir and red
  f_ir_mean=0.0;
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  f_red_mean=0.0;
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  for (k=0; k<n_ir_buffer_length; ++k) {
 8002a16:	2300      	movs	r3, #0
 8002a18:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002a1c:	e030      	b.n	8002a80 <rf_heart_rate_and_oxygen_saturation+0xa8>
    f_ir_mean += pun_ir_buffer[k];
 8002a1e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002a28:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8002a2c:	6812      	ldr	r2, [r2, #0]
 8002a2e:	4413      	add	r3, r2
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fe f946 	bl	8000cc4 <__aeabi_ui2f>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8002a40:	f7fe f890 	bl	8000b64 <__addsf3>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    f_red_mean += pun_red_buffer[k];
 8002a4a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002a54:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8002a58:	6812      	ldr	r2, [r2, #0]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe f930 	bl	8000cc4 <__aeabi_ui2f>
 8002a64:	4603      	mov	r3, r0
 8002a66:	4619      	mov	r1, r3
 8002a68:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8002a6c:	f7fe f87a 	bl	8000b64 <__addsf3>
 8002a70:	4603      	mov	r3, r0
 8002a72:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  for (k=0; k<n_ir_buffer_length; ++k) {
 8002a76:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002a80:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002a84:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002a88:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	dbc5      	blt.n	8002a1e <rf_heart_rate_and_oxygen_saturation+0x46>
  }
  f_ir_mean=f_ir_mean/n_ir_buffer_length ;
 8002a92:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002a96:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002a9a:	6818      	ldr	r0, [r3, #0]
 8002a9c:	f7fe f916 	bl	8000ccc <__aeabi_i2f>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8002aa8:	f7fe fa18 	bl	8000edc <__aeabi_fdiv>
 8002aac:	4603      	mov	r3, r0
 8002aae:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  f_red_mean=f_red_mean/n_ir_buffer_length ;
 8002ab2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002ab6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	f7fe f906 	bl	8000ccc <__aeabi_i2f>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8002ac8:	f7fe fa08 	bl	8000edc <__aeabi_fdiv>
 8002acc:	4603      	mov	r3, r0
 8002ace:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

  // remove DC
  for (k=0,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++ptr_x,++ptr_y) {
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002ad8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002adc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002ae0:	f107 0314 	add.w	r3, r7, #20
 8002ae4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002ae8:	e03e      	b.n	8002b68 <rf_heart_rate_and_oxygen_saturation+0x190>
    *ptr_x = pun_ir_buffer[k] - f_ir_mean;
 8002aea:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002af4:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	4413      	add	r3, r2
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe f8e0 	bl	8000cc4 <__aeabi_ui2f>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe f828 	bl	8000b60 <__aeabi_fsub>
 8002b10:	4603      	mov	r3, r0
 8002b12:	461a      	mov	r2, r3
 8002b14:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002b18:	601a      	str	r2, [r3, #0]
    *ptr_y = pun_red_buffer[k] - f_red_mean;
 8002b1a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002b24:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8002b28:	6812      	ldr	r2, [r2, #0]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe f8c8 	bl	8000cc4 <__aeabi_ui2f>
 8002b34:	4603      	mov	r3, r0
 8002b36:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fe f810 	bl	8000b60 <__aeabi_fsub>
 8002b40:	4603      	mov	r3, r0
 8002b42:	461a      	mov	r2, r3
 8002b44:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002b48:	601a      	str	r2, [r3, #0]
  for (k=0,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++ptr_x,++ptr_y) {
 8002b4a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002b4e:	3301      	adds	r3, #1
 8002b50:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002b54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002b58:	3304      	adds	r3, #4
 8002b5a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002b5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002b62:	3304      	adds	r3, #4
 8002b64:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002b68:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002b6c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b70:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	dbb7      	blt.n	8002aea <rf_heart_rate_and_oxygen_saturation+0x112>
  }

  // RF, remove linear trend (baseline leveling)
  beta_ir = rf_linear_regression_beta(an_x, mean_X, sum_X2);
 8002b7a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002b7e:	4ac8      	ldr	r2, [pc, #800]	; (8002ea0 <rf_heart_rate_and_oxygen_saturation+0x4c8>)
 8002b80:	49c8      	ldr	r1, [pc, #800]	; (8002ea4 <rf_heart_rate_and_oxygen_saturation+0x4cc>)
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 f9ac 	bl	8002ee0 <rf_linear_regression_beta>
 8002b88:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
  beta_red = rf_linear_regression_beta(an_y, mean_X, sum_X2);
 8002b8c:	f107 0314 	add.w	r3, r7, #20
 8002b90:	4ac3      	ldr	r2, [pc, #780]	; (8002ea0 <rf_heart_rate_and_oxygen_saturation+0x4c8>)
 8002b92:	49c4      	ldr	r1, [pc, #784]	; (8002ea4 <rf_heart_rate_and_oxygen_saturation+0x4cc>)
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 f9a3 	bl	8002ee0 <rf_linear_regression_beta>
 8002b9a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  for(k=0,x=-mean_X,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++x,++ptr_x,++ptr_y) {
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002ba4:	4bc0      	ldr	r3, [pc, #768]	; (8002ea8 <rf_heart_rate_and_oxygen_saturation+0x4d0>)
 8002ba6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002baa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002bae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002bb2:	f107 0314 	add.w	r3, r7, #20
 8002bb6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002bba:	e03d      	b.n	8002c38 <rf_heart_rate_and_oxygen_saturation+0x260>
    *ptr_x -= beta_ir*x;
 8002bbc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002bc0:	681c      	ldr	r4, [r3, #0]
 8002bc2:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8002bc6:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8002bca:	f7fe f8d3 	bl	8000d74 <__aeabi_fmul>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	f7fd ffc4 	bl	8000b60 <__aeabi_fsub>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002be0:	601a      	str	r2, [r3, #0]
    *ptr_y -= beta_red*x;
 8002be2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002be6:	681c      	ldr	r4, [r3, #0]
 8002be8:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8002bec:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8002bf0:	f7fe f8c0 	bl	8000d74 <__aeabi_fmul>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	f7fd ffb1 	bl	8000b60 <__aeabi_fsub>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	461a      	mov	r2, r3
 8002c02:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002c06:	601a      	str	r2, [r3, #0]
  for(k=0,x=-mean_X,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++x,++ptr_x,++ptr_y) {
 8002c08:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002c12:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002c16:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8002c1a:	f7fd ffa3 	bl	8000b64 <__addsf3>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002c24:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002c28:	3304      	adds	r3, #4
 8002c2a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002c2e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002c32:	3304      	adds	r3, #4
 8002c34:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002c38:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002c3c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002c40:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	dbb8      	blt.n	8002bbc <rf_heart_rate_and_oxygen_saturation+0x1e4>
  }

    // For SpO2 calculate RMS of both AC signals. In addition, pulse detector needs raw sum of squares for IR
  f_y_ac=rf_rms(an_y,n_ir_buffer_length,&f_red_sumsq);
 8002c4a:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8002c4e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002c52:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002c56:	f107 0014 	add.w	r0, r7, #20
 8002c5a:	6819      	ldr	r1, [r3, #0]
 8002c5c:	f000 fab8 	bl	80031d0 <rf_rms>
 8002c60:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  f_x_ac=rf_rms(an_x,n_ir_buffer_length,&f_ir_sumsq);
 8002c64:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002c68:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002c6c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002c70:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8002c74:	6819      	ldr	r1, [r3, #0]
 8002c76:	f000 faab 	bl	80031d0 <rf_rms>
 8002c7a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

  // Calculate Pearson correlation between red and IR
  *correl=rf_Pcorrelation(an_x, an_y, n_ir_buffer_length)/sqrt(f_red_sumsq*f_ir_sumsq);
 8002c7e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002c82:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002c86:	f107 0114 	add.w	r1, r7, #20
 8002c8a:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	f000 faef 	bl	8003272 <rf_Pcorrelation>
 8002c94:	4603      	mov	r3, r0
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd fbbe 	bl	8000418 <__aeabi_f2d>
 8002c9c:	4604      	mov	r4, r0
 8002c9e:	460d      	mov	r5, r1
 8002ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ca4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002ca8:	4611      	mov	r1, r2
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fe f862 	bl	8000d74 <__aeabi_fmul>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd fbb0 	bl	8000418 <__aeabi_f2d>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	f003 feda 	bl	8006a78 <sqrt>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4620      	mov	r0, r4
 8002cca:	4629      	mov	r1, r5
 8002ccc:	f7fd fd26 	bl	800071c <__aeabi_ddiv>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	f7fd feee 	bl	8000ab8 <__aeabi_d2f>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002ce2:	601a      	str	r2, [r3, #0]

  // Find signal periodicity
  if(*correl>=min_pearson_correlation) {
 8002ce4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4970      	ldr	r1, [pc, #448]	; (8002eac <rf_heart_rate_and_oxygen_saturation+0x4d4>)
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fe f9f3 	bl	80010d8 <__aeabi_fcmpge>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d027      	beq.n	8002d48 <rf_heart_rate_and_oxygen_saturation+0x370>
    // At the beginning of oximetry run the exact range of heart rate is unknown. This may lead to wrong rate if the next call does not find the _first_
    // peak of the autocorrelation function. E.g., second peak would yield only 50% of the true rate.
    if(LOWEST_PERIOD==n_last_peak_interval)
 8002cf8:	4b6d      	ldr	r3, [pc, #436]	; (8002eb0 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d10c      	bne.n	8002d1a <rf_heart_rate_and_oxygen_saturation+0x342>
      rf_initialize_periodicity_search(an_x, BUFFER_SIZE, &n_last_peak_interval, HIGHEST_PERIOD, min_autocorrelation_ratio, f_ir_sumsq);
 8002d00:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002d04:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8002d08:	9301      	str	r3, [sp, #4]
 8002d0a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	2325      	movs	r3, #37	; 0x25
 8002d12:	4a67      	ldr	r2, [pc, #412]	; (8002eb0 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 8002d14:	2120      	movs	r1, #32
 8002d16:	f000 f962 	bl	8002fde <rf_initialize_periodicity_search>
    // RF, If correlation os good, then find average periodicity of the IR signal. If aperiodic, return periodicity of 0
    if(n_last_peak_interval!=0)
 8002d1a:	4b65      	ldr	r3, [pc, #404]	; (8002eb0 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d015      	beq.n	8002d4e <rf_heart_rate_and_oxygen_saturation+0x376>
      rf_signal_periodicity(an_x, BUFFER_SIZE, &n_last_peak_interval, LOWEST_PERIOD, HIGHEST_PERIOD, min_autocorrelation_ratio, f_ir_sumsq, ratio);
 8002d22:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002d26:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8002d2a:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8002d2e:	9203      	str	r2, [sp, #12]
 8002d30:	9302      	str	r3, [sp, #8]
 8002d32:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002d36:	9301      	str	r3, [sp, #4]
 8002d38:	2325      	movs	r3, #37	; 0x25
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	2308      	movs	r3, #8
 8002d3e:	4a5c      	ldr	r2, [pc, #368]	; (8002eb0 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 8002d40:	2120      	movs	r1, #32
 8002d42:	f000 f9bf 	bl	80030c4 <rf_signal_periodicity>
 8002d46:	e002      	b.n	8002d4e <rf_heart_rate_and_oxygen_saturation+0x376>
  } else n_last_peak_interval=0;
 8002d48:	4b59      	ldr	r3, [pc, #356]	; (8002eb0 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]

  // Calculate heart rate if periodicity detector was successful. Otherwise, reset peak interval to its initial value and report error.
  if(n_last_peak_interval!=0) {
 8002d4e:	4b58      	ldr	r3, [pc, #352]	; (8002eb0 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d02f      	beq.n	8002db6 <rf_heart_rate_and_oxygen_saturation+0x3de>
    *pn_heart_rate = (int32_t)(FS60/n_last_peak_interval);
 8002d56:	4b56      	ldr	r3, [pc, #344]	; (8002eb0 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002d5e:	fb92 f2f3 	sdiv	r2, r2, r3
 8002d62:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002d66:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 1;
 8002d68:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	701a      	strb	r2, [r3, #0]
    *pch_spo2_valid  = 0;
    return;
  }

  // After trend removal, the mean represents DC level
  xy_ratio= (f_y_ac*f_ir_mean)/(f_x_ac*f_red_mean);  //formula is (f_y_ac*f_x_dc) / (f_x_ac*f_y_dc) ;
 8002d70:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002d74:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8002d78:	f7fd fffc 	bl	8000d74 <__aeabi_fmul>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	461c      	mov	r4, r3
 8002d80:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002d84:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002d88:	f7fd fff4 	bl	8000d74 <__aeabi_fmul>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4620      	mov	r0, r4
 8002d92:	f7fe f8a3 	bl	8000edc <__aeabi_fdiv>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  if(xy_ratio>0.02 && xy_ratio<1.84) { // Check boundaries of applicability
 8002d9c:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8002da0:	f7fd fb3a 	bl	8000418 <__aeabi_f2d>
 8002da4:	a334      	add	r3, pc, #208	; (adr r3, 8002e78 <rf_heart_rate_and_oxygen_saturation+0x4a0>)
 8002da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002daa:	f7fd fe1d 	bl	80009e8 <__aeabi_dcmpgt>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d117      	bne.n	8002de4 <rf_heart_rate_and_oxygen_saturation+0x40c>
 8002db4:	e082      	b.n	8002ebc <rf_heart_rate_and_oxygen_saturation+0x4e4>
    n_last_peak_interval=LOWEST_PERIOD;
 8002db6:	4b3e      	ldr	r3, [pc, #248]	; (8002eb0 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 8002db8:	2208      	movs	r2, #8
 8002dba:	601a      	str	r2, [r3, #0]
    *pn_heart_rate = -999; // unable to calculate because signal looks aperiodic
 8002dbc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002dc0:	4a3c      	ldr	r2, [pc, #240]	; (8002eb4 <rf_heart_rate_and_oxygen_saturation+0x4dc>)
 8002dc2:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 0;
 8002dc4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]
    *pn_spo2 =  -999 ; // do not use SPO2 from this corrupt signal
 8002dcc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002dd0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a38      	ldr	r2, [pc, #224]	; (8002eb8 <rf_heart_rate_and_oxygen_saturation+0x4e0>)
 8002dd8:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 0;
 8002dda:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002dde:	2200      	movs	r2, #0
 8002de0:	701a      	strb	r2, [r3, #0]
 8002de2:	e076      	b.n	8002ed2 <rf_heart_rate_and_oxygen_saturation+0x4fa>
  if(xy_ratio>0.02 && xy_ratio<1.84) { // Check boundaries of applicability
 8002de4:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8002de8:	f7fd fb16 	bl	8000418 <__aeabi_f2d>
 8002dec:	a324      	add	r3, pc, #144	; (adr r3, 8002e80 <rf_heart_rate_and_oxygen_saturation+0x4a8>)
 8002dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df2:	f7fd fddb 	bl	80009ac <__aeabi_dcmplt>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d05f      	beq.n	8002ebc <rf_heart_rate_and_oxygen_saturation+0x4e4>
    *pn_spo2 = (-45.060*xy_ratio + 30.354)*xy_ratio + 94.845;
 8002dfc:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8002e00:	f7fd fb0a 	bl	8000418 <__aeabi_f2d>
 8002e04:	a320      	add	r3, pc, #128	; (adr r3, 8002e88 <rf_heart_rate_and_oxygen_saturation+0x4b0>)
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	f7fd fb5d 	bl	80004c8 <__aeabi_dmul>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4610      	mov	r0, r2
 8002e14:	4619      	mov	r1, r3
 8002e16:	a31e      	add	r3, pc, #120	; (adr r3, 8002e90 <rf_heart_rate_and_oxygen_saturation+0x4b8>)
 8002e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1c:	f7fd f99e 	bl	800015c <__adddf3>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4614      	mov	r4, r2
 8002e26:	461d      	mov	r5, r3
 8002e28:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8002e2c:	f7fd faf4 	bl	8000418 <__aeabi_f2d>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4620      	mov	r0, r4
 8002e36:	4629      	mov	r1, r5
 8002e38:	f7fd fb46 	bl	80004c8 <__aeabi_dmul>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	4610      	mov	r0, r2
 8002e42:	4619      	mov	r1, r3
 8002e44:	a314      	add	r3, pc, #80	; (adr r3, 8002e98 <rf_heart_rate_and_oxygen_saturation+0x4c0>)
 8002e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4a:	f7fd f987 	bl	800015c <__adddf3>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	4610      	mov	r0, r2
 8002e54:	4619      	mov	r1, r3
 8002e56:	f7fd fe2f 	bl	8000ab8 <__aeabi_d2f>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002e60:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid = 1;
 8002e68:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	701a      	strb	r2, [r3, #0]
 8002e70:	e02f      	b.n	8002ed2 <rf_heart_rate_and_oxygen_saturation+0x4fa>
 8002e72:	bf00      	nop
 8002e74:	f3af 8000 	nop.w
 8002e78:	47ae147b 	.word	0x47ae147b
 8002e7c:	3f947ae1 	.word	0x3f947ae1
 8002e80:	d70a3d71 	.word	0xd70a3d71
 8002e84:	3ffd70a3 	.word	0x3ffd70a3
 8002e88:	147ae148 	.word	0x147ae148
 8002e8c:	c04687ae 	.word	0xc04687ae
 8002e90:	be76c8b4 	.word	0xbe76c8b4
 8002e94:	403e5a9f 	.word	0x403e5a9f
 8002e98:	7ae147ae 	.word	0x7ae147ae
 8002e9c:	4057b614 	.word	0x4057b614
 8002ea0:	47a2be80 	.word	0x47a2be80
 8002ea4:	41780000 	.word	0x41780000
 8002ea8:	c1780000 	.word	0xc1780000
 8002eac:	3f4ccccd 	.word	0x3f4ccccd
 8002eb0:	20000000 	.word	0x20000000
 8002eb4:	fffffc19 	.word	0xfffffc19
 8002eb8:	c479c000 	.word	0xc479c000
  } else {
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
 8002ebc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002ec0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a05      	ldr	r2, [pc, #20]	; (8002edc <rf_heart_rate_and_oxygen_saturation+0x504>)
 8002ec8:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 0;
 8002eca:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002ece:	2200      	movs	r2, #0
 8002ed0:	701a      	strb	r2, [r3, #0]
  }
}
 8002ed2:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8002eda:	bf00      	nop
 8002edc:	c479c000 	.word	0xc479c000

08002ee0 <rf_linear_regression_beta>:
*               point index values (0 to BUFFER_SIZE-1). xmean must equal to (BUFFER_SIZE-1)/2! sum_x2 is
*               the sum of squares of the mean-centered index values.
*               Robert Fraczkiewicz, 12/22/2017
* \retval       Beta
*/
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  float x,beta,*pn_ptr;
  beta=0.0;
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	61bb      	str	r3, [r7, #24]
  for(x=-xmean,pn_ptr=pn_x;x<=xmean;++x,++pn_ptr)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002ef8:	61fb      	str	r3, [r7, #28]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	e016      	b.n	8002f2e <rf_linear_regression_beta+0x4e>
    beta+=x*(*pn_ptr);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	69f9      	ldr	r1, [r7, #28]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fd ff34 	bl	8000d74 <__aeabi_fmul>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	4619      	mov	r1, r3
 8002f10:	69b8      	ldr	r0, [r7, #24]
 8002f12:	f7fd fe27 	bl	8000b64 <__addsf3>
 8002f16:	4603      	mov	r3, r0
 8002f18:	61bb      	str	r3, [r7, #24]
  for(x=-xmean,pn_ptr=pn_x;x<=xmean;++x,++pn_ptr)
 8002f1a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002f1e:	69f8      	ldr	r0, [r7, #28]
 8002f20:	f7fd fe20 	bl	8000b64 <__addsf3>
 8002f24:	4603      	mov	r3, r0
 8002f26:	61fb      	str	r3, [r7, #28]
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	617b      	str	r3, [r7, #20]
 8002f2e:	68b9      	ldr	r1, [r7, #8]
 8002f30:	69f8      	ldr	r0, [r7, #28]
 8002f32:	f7fe f8c7 	bl	80010c4 <__aeabi_fcmple>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1e1      	bne.n	8002f00 <rf_linear_regression_beta+0x20>
  return beta/sum_x2;
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	69b8      	ldr	r0, [r7, #24]
 8002f40:	f7fd ffcc 	bl	8000edc <__aeabi_fdiv>
 8002f44:	4603      	mov	r3, r0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3720      	adds	r7, #32
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <rf_autocorrelation>:
* \par          Details
*               Compute autocorrelation sequence's n_lag's element for a given series pn_x
*               Robert Fraczkiewicz, 12/21/2017
* \retval       Autocorrelation sum
*/
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b088      	sub	sp, #32
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
  int16_t i, n_temp=n_size-n_lag;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	827b      	strh	r3, [r7, #18]
  float sum=0.0,*pn_ptr;
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	61bb      	str	r3, [r7, #24]
  if(n_temp<=0) return sum;
 8002f6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	dc01      	bgt.n	8002f7a <rf_autocorrelation+0x2c>
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	e02d      	b.n	8002fd6 <rf_autocorrelation+0x88>
  for (i=0,pn_ptr=pn_x; i<n_temp; ++i,++pn_ptr) {
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	83fb      	strh	r3, [r7, #30]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	617b      	str	r3, [r7, #20]
 8002f82:	e017      	b.n	8002fb4 <rf_autocorrelation+0x66>
    sum += (*pn_ptr)*(*(pn_ptr+n_lag));
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	6818      	ldr	r0, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	4413      	add	r3, r2
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4619      	mov	r1, r3
 8002f94:	f7fd feee 	bl	8000d74 <__aeabi_fmul>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	69b8      	ldr	r0, [r7, #24]
 8002f9e:	f7fd fde1 	bl	8000b64 <__addsf3>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	61bb      	str	r3, [r7, #24]
  for (i=0,pn_ptr=pn_x; i<n_temp; ++i,++pn_ptr) {
 8002fa6:	8bfb      	ldrh	r3, [r7, #30]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	83fb      	strh	r3, [r7, #30]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8002fb8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	dbe1      	blt.n	8002f84 <rf_autocorrelation+0x36>
  }
  return sum/n_temp;
 8002fc0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fd fe81 	bl	8000ccc <__aeabi_i2f>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	4619      	mov	r1, r3
 8002fce:	69b8      	ldr	r0, [r7, #24]
 8002fd0:	f7fd ff84 	bl	8000edc <__aeabi_fdiv>
 8002fd4:	4603      	mov	r3, r0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3720      	adds	r7, #32
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <rf_initialize_periodicity_search>:
*               of the autocorrelation at lag=0, then the input signal is insufficiently
*               periodic and probably indicates motion artifacts.
*               Robert Fraczkiewicz, 04/25/2020
* \retval       Average distance between peaks
*/
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b088      	sub	sp, #32
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	603b      	str	r3, [r7, #0]
  int32_t n_lag;
  float aut,aut_right;
  // At this point, *p_last_periodicity = LOWEST_PERIOD. Start walking to the right,
  // two steps at a time, until lag ratio fulfills quality criteria or HIGHEST_PERIOD
  // is reached.
  n_lag=*p_last_periodicity;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	61fb      	str	r3, [r7, #28]
  aut_right=aut=rf_autocorrelation(pn_x, n_size, n_lag);
 8002ff2:	69fa      	ldr	r2, [r7, #28]
 8002ff4:	68b9      	ldr	r1, [r7, #8]
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f7ff ffa9 	bl	8002f4e <rf_autocorrelation>
 8002ffc:	6178      	str	r0, [r7, #20]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	61bb      	str	r3, [r7, #24]
  // Check sanity
  if(aut/aut_lag0 >= min_aut_ratio) {
 8003002:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003004:	6978      	ldr	r0, [r7, #20]
 8003006:	f7fd ff69 	bl	8000edc <__aeabi_fdiv>
 800300a:	4603      	mov	r3, r0
 800300c:	4619      	mov	r1, r3
 800300e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003010:	f7fe f858 	bl	80010c4 <__aeabi_fcmple>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d02b      	beq.n	8003072 <rf_initialize_periodicity_search+0x94>
    // Either quality criterion, min_aut_ratio, is too low, or heart rate is too high.
    // Are we on autocorrelation's downward slope? If yes, continue to a local minimum.
    // If not, continue to the next block.
    do {
      aut=aut_right;
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	617b      	str	r3, [r7, #20]
      n_lag+=2;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3302      	adds	r3, #2
 8003022:	61fb      	str	r3, [r7, #28]
      aut_right=rf_autocorrelation(pn_x, n_size, n_lag);
 8003024:	69fa      	ldr	r2, [r7, #28]
 8003026:	68b9      	ldr	r1, [r7, #8]
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f7ff ff90 	bl	8002f4e <rf_autocorrelation>
 800302e:	61b8      	str	r0, [r7, #24]
    } while(aut_right/aut_lag0 >= min_aut_ratio && aut_right<aut && n_lag<=n_max_distance);
 8003030:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003032:	69b8      	ldr	r0, [r7, #24]
 8003034:	f7fd ff52 	bl	8000edc <__aeabi_fdiv>
 8003038:	4603      	mov	r3, r0
 800303a:	4619      	mov	r1, r3
 800303c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800303e:	f7fe f841 	bl	80010c4 <__aeabi_fcmple>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00a      	beq.n	800305e <rf_initialize_periodicity_search+0x80>
 8003048:	6979      	ldr	r1, [r7, #20]
 800304a:	69b8      	ldr	r0, [r7, #24]
 800304c:	f7fe f830 	bl	80010b0 <__aeabi_fcmplt>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <rf_initialize_periodicity_search+0x80>
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	dddd      	ble.n	800301a <rf_initialize_periodicity_search+0x3c>
    if(n_lag>n_max_distance) {
 800305e:	69fa      	ldr	r2, [r7, #28]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	dd03      	ble.n	800306e <rf_initialize_periodicity_search+0x90>
      // This should never happen, but if does return failure
      *p_last_periodicity=0;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
      return;
 800306c:	e027      	b.n	80030be <rf_initialize_periodicity_search+0xe0>
    }
    aut=aut_right;
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	617b      	str	r3, [r7, #20]
  }
  // Walk to the right.
  do {
    aut=aut_right;
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	617b      	str	r3, [r7, #20]
    n_lag+=2;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3302      	adds	r3, #2
 800307a:	61fb      	str	r3, [r7, #28]
    aut_right=rf_autocorrelation(pn_x, n_size, n_lag);
 800307c:	69fa      	ldr	r2, [r7, #28]
 800307e:	68b9      	ldr	r1, [r7, #8]
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f7ff ff64 	bl	8002f4e <rf_autocorrelation>
 8003086:	61b8      	str	r0, [r7, #24]
  } while(aut_right/aut_lag0 < min_aut_ratio && n_lag<=n_max_distance);
 8003088:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800308a:	69b8      	ldr	r0, [r7, #24]
 800308c:	f7fd ff26 	bl	8000edc <__aeabi_fdiv>
 8003090:	4603      	mov	r3, r0
 8003092:	4619      	mov	r1, r3
 8003094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003096:	f7fe f829 	bl	80010ec <__aeabi_fcmpgt>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <rf_initialize_periodicity_search+0xca>
 80030a0:	69fa      	ldr	r2, [r7, #28]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	dde4      	ble.n	8003072 <rf_initialize_periodicity_search+0x94>
  if(n_lag>n_max_distance) {
 80030a8:	69fa      	ldr	r2, [r7, #28]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	dd03      	ble.n	80030b8 <rf_initialize_periodicity_search+0xda>
    // This should never happen, but if does return failure
    *p_last_periodicity=0;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	e002      	b.n	80030be <rf_initialize_periodicity_search+0xe0>
  } else
    *p_last_periodicity=n_lag;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	601a      	str	r2, [r3, #0]
}
 80030be:	3720      	adds	r7, #32
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <rf_signal_periodicity>:
*               than min_aut_ratio fraction of the autocorrelation at lag=0, then the input
*               signal is insufficiently periodic and probably indicates motion artifacts.
*               Robert Fraczkiewicz, 01/07/2018
* \retval       Average distance between peaks
*/
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08a      	sub	sp, #40	; 0x28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	603b      	str	r3, [r7, #0]
  int32_t n_lag;
  float aut,aut_left,aut_right,aut_save;
  bool left_limit_reached=false;
 80030d2:	2300      	movs	r3, #0
 80030d4:	75fb      	strb	r3, [r7, #23]
  // Start from the last periodicity computing the corresponding autocorrelation
  n_lag=*p_last_periodicity;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	627b      	str	r3, [r7, #36]	; 0x24
  aut_save=aut=rf_autocorrelation(pn_x, n_size, n_lag);
 80030dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030de:	68b9      	ldr	r1, [r7, #8]
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f7ff ff34 	bl	8002f4e <rf_autocorrelation>
 80030e6:	6238      	str	r0, [r7, #32]
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	613b      	str	r3, [r7, #16]
  // Is autocorrelation one lag to the left greater?
  aut_left=aut;
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	61fb      	str	r3, [r7, #28]
  do {
    aut=aut_left;
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	623b      	str	r3, [r7, #32]
    n_lag--;
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	3b01      	subs	r3, #1
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
    aut_left=rf_autocorrelation(pn_x, n_size, n_lag);
 80030fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030fc:	68b9      	ldr	r1, [r7, #8]
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f7ff ff25 	bl	8002f4e <rf_autocorrelation>
 8003104:	61f8      	str	r0, [r7, #28]
  } while(aut_left>aut && n_lag>=n_min_distance);
 8003106:	6a39      	ldr	r1, [r7, #32]
 8003108:	69f8      	ldr	r0, [r7, #28]
 800310a:	f7fd ffef 	bl	80010ec <__aeabi_fcmpgt>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <rf_signal_periodicity+0x58>
 8003114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	dae9      	bge.n	80030f0 <rf_signal_periodicity+0x2c>
  // Restore lag of the highest aut
  if(n_lag<n_min_distance) {
 800311c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	da07      	bge.n	8003134 <rf_signal_periodicity+0x70>
    left_limit_reached=true;
 8003124:	2301      	movs	r3, #1
 8003126:	75fb      	strb	r3, [r7, #23]
    n_lag=*p_last_periodicity;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
    aut=aut_save;
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	623b      	str	r3, [r7, #32]
 8003132:	e002      	b.n	800313a <rf_signal_periodicity+0x76>
  } else n_lag++;
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	3301      	adds	r3, #1
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
  if(n_lag==*p_last_periodicity) {
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003140:	429a      	cmp	r2, r3
 8003142:	d12b      	bne.n	800319c <rf_signal_periodicity+0xd8>
    // Trip to the left made no progress. Walk to the right.
    aut_right=aut;
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	61bb      	str	r3, [r7, #24]
    do {
      aut=aut_right;
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	623b      	str	r3, [r7, #32]
      n_lag++;
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	3301      	adds	r3, #1
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
      aut_right=rf_autocorrelation(pn_x, n_size, n_lag);
 8003152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f7ff fef9 	bl	8002f4e <rf_autocorrelation>
 800315c:	61b8      	str	r0, [r7, #24]
    } while(aut_right>aut && n_lag<=n_max_distance);
 800315e:	6a39      	ldr	r1, [r7, #32]
 8003160:	69b8      	ldr	r0, [r7, #24]
 8003162:	f7fd ffc3 	bl	80010ec <__aeabi_fcmpgt>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <rf_signal_periodicity+0xb0>
 800316c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003170:	429a      	cmp	r2, r3
 8003172:	dde9      	ble.n	8003148 <rf_signal_periodicity+0x84>
    // Restore lag of the highest aut
    if(n_lag>n_max_distance) n_lag=0; // Indicates failure
 8003174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003178:	429a      	cmp	r2, r3
 800317a:	dd02      	ble.n	8003182 <rf_signal_periodicity+0xbe>
 800317c:	2300      	movs	r3, #0
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
 8003180:	e002      	b.n	8003188 <rf_signal_periodicity+0xc4>
    else n_lag--;
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	3b01      	subs	r3, #1
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
    if(n_lag==*p_last_periodicity && left_limit_reached) n_lag=0; // Indicates failure
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800318e:	429a      	cmp	r2, r3
 8003190:	d104      	bne.n	800319c <rf_signal_periodicity+0xd8>
 8003192:	7dfb      	ldrb	r3, [r7, #23]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <rf_signal_periodicity+0xd8>
 8003198:	2300      	movs	r3, #0
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  *ratio=aut/aut_lag0;
 800319c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800319e:	6a38      	ldr	r0, [r7, #32]
 80031a0:	f7fd fe9c 	bl	8000edc <__aeabi_fdiv>
 80031a4:	4603      	mov	r3, r0
 80031a6:	461a      	mov	r2, r3
 80031a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031aa:	601a      	str	r2, [r3, #0]
  if(*ratio < min_aut_ratio) n_lag=0; // Indicates failure
 80031ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4619      	mov	r1, r3
 80031b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80031b4:	f7fd ff9a 	bl	80010ec <__aeabi_fcmpgt>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <rf_signal_periodicity+0xfe>
 80031be:	2300      	movs	r3, #0
 80031c0:	627b      	str	r3, [r7, #36]	; 0x24
  *p_last_periodicity=n_lag;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c6:	601a      	str	r2, [r3, #0]
}
 80031c8:	bf00      	nop
 80031ca:	3728      	adds	r7, #40	; 0x28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <rf_rms>:
* \par          Details
*               Compute root-mean-square variation for a given series pn_x
*               Robert Fraczkiewicz, 12/25/2017
* \retval       RMS value and raw sum of squares
*/
{
 80031d0:	b590      	push	{r4, r7, lr}
 80031d2:	b089      	sub	sp, #36	; 0x24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  int16_t i;
  float r,*pn_ptr;
  (*sumsq)=0.0;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
  for (i=0,pn_ptr=pn_x; i<n_size; ++i,++pn_ptr) {
 80031e4:	2300      	movs	r3, #0
 80031e6:	83fb      	strh	r3, [r7, #30]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	61bb      	str	r3, [r7, #24]
 80031ec:	e018      	b.n	8003220 <rf_rms+0x50>
    r=(*pn_ptr);
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	617b      	str	r3, [r7, #20]
    (*sumsq) += r*r;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681c      	ldr	r4, [r3, #0]
 80031f8:	6979      	ldr	r1, [r7, #20]
 80031fa:	6978      	ldr	r0, [r7, #20]
 80031fc:	f7fd fdba 	bl	8000d74 <__aeabi_fmul>
 8003200:	4603      	mov	r3, r0
 8003202:	4619      	mov	r1, r3
 8003204:	4620      	mov	r0, r4
 8003206:	f7fd fcad 	bl	8000b64 <__addsf3>
 800320a:	4603      	mov	r3, r0
 800320c:	461a      	mov	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	601a      	str	r2, [r3, #0]
  for (i=0,pn_ptr=pn_x; i<n_size; ++i,++pn_ptr) {
 8003212:	8bfb      	ldrh	r3, [r7, #30]
 8003214:	3301      	adds	r3, #1
 8003216:	b29b      	uxth	r3, r3
 8003218:	83fb      	strh	r3, [r7, #30]
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	3304      	adds	r3, #4
 800321e:	61bb      	str	r3, [r7, #24]
 8003220:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	429a      	cmp	r2, r3
 8003228:	dce1      	bgt.n	80031ee <rf_rms+0x1e>
  }
  (*sumsq)/=n_size; // This corresponds to autocorrelation at lag=0
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681c      	ldr	r4, [r3, #0]
 800322e:	68b8      	ldr	r0, [r7, #8]
 8003230:	f7fd fd4c 	bl	8000ccc <__aeabi_i2f>
 8003234:	4603      	mov	r3, r0
 8003236:	4619      	mov	r1, r3
 8003238:	4620      	mov	r0, r4
 800323a:	f7fd fe4f 	bl	8000edc <__aeabi_fdiv>
 800323e:	4603      	mov	r3, r0
 8003240:	461a      	mov	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	601a      	str	r2, [r3, #0]
  return sqrt(*sumsq);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7fd f8e4 	bl	8000418 <__aeabi_f2d>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4610      	mov	r0, r2
 8003256:	4619      	mov	r1, r3
 8003258:	f003 fc0e 	bl	8006a78 <sqrt>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4610      	mov	r0, r2
 8003262:	4619      	mov	r1, r3
 8003264:	f7fd fc28 	bl	8000ab8 <__aeabi_d2f>
 8003268:	4603      	mov	r3, r0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3724      	adds	r7, #36	; 0x24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd90      	pop	{r4, r7, pc}

08003272 <rf_Pcorrelation>:
* \par          Details
*               Compute scalar product between *pn_x and *pn_y vectors
*               Robert Fraczkiewicz, 12/25/2017
* \retval       Correlation product
*/
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b088      	sub	sp, #32
 8003276:	af00      	add	r7, sp, #0
 8003278:	60f8      	str	r0, [r7, #12]
 800327a:	60b9      	str	r1, [r7, #8]
 800327c:	607a      	str	r2, [r7, #4]
  int16_t i;
  float r,*x_ptr,*y_ptr;
  r=0.0;
 800327e:	f04f 0300 	mov.w	r3, #0
 8003282:	61bb      	str	r3, [r7, #24]
  for (i=0,x_ptr=pn_x,y_ptr=pn_y; i<n_size; ++i,++x_ptr,++y_ptr) {
 8003284:	2300      	movs	r3, #0
 8003286:	83fb      	strh	r3, [r7, #30]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	e018      	b.n	80032c4 <rf_Pcorrelation+0x52>
    r+=(*x_ptr)*(*y_ptr);
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4619      	mov	r1, r3
 800329c:	4610      	mov	r0, r2
 800329e:	f7fd fd69 	bl	8000d74 <__aeabi_fmul>
 80032a2:	4603      	mov	r3, r0
 80032a4:	4619      	mov	r1, r3
 80032a6:	69b8      	ldr	r0, [r7, #24]
 80032a8:	f7fd fc5c 	bl	8000b64 <__addsf3>
 80032ac:	4603      	mov	r3, r0
 80032ae:	61bb      	str	r3, [r7, #24]
  for (i=0,x_ptr=pn_x,y_ptr=pn_y; i<n_size; ++i,++x_ptr,++y_ptr) {
 80032b0:	8bfb      	ldrh	r3, [r7, #30]
 80032b2:	3301      	adds	r3, #1
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	83fb      	strh	r3, [r7, #30]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	3304      	adds	r3, #4
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	3304      	adds	r3, #4
 80032c2:	613b      	str	r3, [r7, #16]
 80032c4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	dce1      	bgt.n	8003292 <rf_Pcorrelation+0x20>
  }
  r/=n_size;
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fd fcfc 	bl	8000ccc <__aeabi_i2f>
 80032d4:	4603      	mov	r3, r0
 80032d6:	4619      	mov	r1, r3
 80032d8:	69b8      	ldr	r0, [r7, #24]
 80032da:	f7fd fdff 	bl	8000edc <__aeabi_fdiv>
 80032de:	4603      	mov	r3, r0
 80032e0:	61bb      	str	r3, [r7, #24]
  return r;
 80032e2:	69bb      	ldr	r3, [r7, #24]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3720      	adds	r7, #32
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08a      	sub	sp, #40	; 0x28
 80032f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032f2:	f000 fbb3 	bl	8003a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032f6:	f000 f85d 	bl	80033b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032fa:	f000 f94d 	bl	8003598 <MX_GPIO_Init>
  MX_DMA_Init();
 80032fe:	f000 f925 	bl	800354c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003302:	f000 f8f9 	bl	80034f8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003306:	f000 f89b 	bl	8003440 <MX_I2C1_Init>
  MX_I2C2_Init();
 800330a:	f000 f8c7 	bl	800349c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  dev_trace_init_t trace_init;
  trace_init.mosi.port = GPIO_PA;
 800330e:	2300      	movs	r3, #0
 8003310:	75bb      	strb	r3, [r7, #22]
  trace_init.sck. port = GPIO_PA;
 8003312:	2300      	movs	r3, #0
 8003314:	76bb      	strb	r3, [r7, #26]
  trace_init.nss.port = GPIO_PA;
 8003316:	2300      	movs	r3, #0
 8003318:	77bb      	strb	r3, [r7, #30]
  trace_init.mosi.pin =BB(0, b00000001);
 800331a:	2301      	movs	r3, #1
 800331c:	82bb      	strh	r3, [r7, #20]
  trace_init.sck.pin = BB(0, b00000010);
 800331e:	2302      	movs	r3, #2
 8003320:	833b      	strh	r3, [r7, #24]
  trace_init.nss.pin = BB(0, b00000100);
 8003322:	2304      	movs	r3, #4
 8003324:	83bb      	strh	r3, [r7, #28]
  dev_trace_init(&trace_init);
 8003326:	f107 0314 	add.w	r3, r7, #20
 800332a:	4618      	mov	r0, r3
 800332c:	f7fd ff12 	bl	8001154 <dev_trace_init>

  debug_printf("\r\n\n\n\n******HUMAN HEALTH MONITORING SENSOR******\r\n");
 8003330:	481c      	ldr	r0, [pc, #112]	; (80033a4 <main+0xb8>)
 8003332:	f7fe f961 	bl	80015f8 <debug_printf>

  uint32_t serial_id = 1717;
 8003336:	f240 63b5 	movw	r3, #1717	; 0x6b5
 800333a:	613b      	str	r3, [r7, #16]
  uint32_t temperature = 3755;
 800333c:	f640 63ab 	movw	r3, #3755	; 0xeab
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pressure = 140000;
 8003342:	4b19      	ldr	r3, [pc, #100]	; (80033a8 <main+0xbc>)
 8003344:	60fb      	str	r3, [r7, #12]
  uint32_t heart_rate = 55555;
 8003346:	f64d 1303 	movw	r3, #55555	; 0xd903
 800334a:	60bb      	str	r3, [r7, #8]
  uint32_t saturation = 7777;
 800334c:	f641 6361 	movw	r3, #7777	; 0x1e61
 8003350:	607b      	str	r3, [r7, #4]

  uint32_t last_time = HAL_GetTick();
 8003352:	f000 fbdb 	bl	8003b0c <HAL_GetTick>
 8003356:	6238      	str	r0, [r7, #32]

//  int data[] = {START_MESSAGE, serial_id, temperature, pressure, heart_rate, saturation, END_MESSAGE};
  tx_buffer[0] = START_MESSAGE_MED;
 8003358:	4b14      	ldr	r3, [pc, #80]	; (80033ac <main+0xc0>)
 800335a:	22bb      	movs	r2, #187	; 0xbb
 800335c:	701a      	strb	r2, [r3, #0]
 800335e:	693b      	ldr	r3, [r7, #16]
  memcpy(&tx_buffer[1], &serial_id, 4);
 8003360:	4a12      	ldr	r2, [pc, #72]	; (80033ac <main+0xc0>)
 8003362:	f8c2 3001 	str.w	r3, [r2, #1]
 8003366:	68fb      	ldr	r3, [r7, #12]
//  memcpy(&tx_buffer[5], &temperature, 4);
  memcpy(&tx_buffer[9], &pressure, 4);
 8003368:	4a10      	ldr	r2, [pc, #64]	; (80033ac <main+0xc0>)
 800336a:	f8c2 3009 	str.w	r3, [r2, #9]
 800336e:	68bb      	ldr	r3, [r7, #8]
  memcpy(&tx_buffer[13], &heart_rate, 4);
 8003370:	4a0e      	ldr	r2, [pc, #56]	; (80033ac <main+0xc0>)
 8003372:	f8c2 300d 	str.w	r3, [r2, #13]
 8003376:	687b      	ldr	r3, [r7, #4]
  memcpy(&tx_buffer[17], &saturation, 4);
 8003378:	4a0c      	ldr	r2, [pc, #48]	; (80033ac <main+0xc0>)
 800337a:	f8c2 3011 	str.w	r3, [r2, #17]
  tx_buffer[21] = END_MESSAGE_MED;
 800337e:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <main+0xc0>)
 8003380:	2266      	movs	r2, #102	; 0x66
 8003382:	755a      	strb	r2, [r3, #21]

  samples_buf[0] = START_MESSAGE_FAST;
 8003384:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <main+0xc4>)
 8003386:	22aa      	movs	r2, #170	; 0xaa
 8003388:	701a      	strb	r2, [r3, #0]
 800338a:	693b      	ldr	r3, [r7, #16]
  memcpy(&samples_buf[1], &serial_id, 4);
 800338c:	4a08      	ldr	r2, [pc, #32]	; (80033b0 <main+0xc4>)
 800338e:	f8c2 3001 	str.w	r3, [r2, #1]
  samples_buf[13] = END_MESSAGE_FAST;
 8003392:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <main+0xc4>)
 8003394:	2255      	movs	r2, #85	; 0x55
 8003396:	735a      	strb	r2, [r3, #13]


  max30102_setup();
 8003398:	f7fe ff9a 	bl	80022d0 <max30102_setup>
//		// Run interrupt handler to read FIFO
//		max30102_interrupt_handler(&max30102);
//
//	  }

	  max30102_loop();
 800339c:	f7fe ffde 	bl	800235c <max30102_loop>
 80033a0:	e7fc      	b.n	800339c <main+0xb0>
 80033a2:	bf00      	nop
 80033a4:	08006de4 	.word	0x08006de4
 80033a8:	000222e0 	.word	0x000222e0
 80033ac:	200004b8 	.word	0x200004b8
 80033b0:	20000538 	.word	0x20000538

080033b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b090      	sub	sp, #64	; 0x40
 80033b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033ba:	f107 0318 	add.w	r3, r7, #24
 80033be:	2228      	movs	r2, #40	; 0x28
 80033c0:	2100      	movs	r1, #0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f003 fabe 	bl	8006944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033c8:	1d3b      	adds	r3, r7, #4
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	605a      	str	r2, [r3, #4]
 80033d0:	609a      	str	r2, [r3, #8]
 80033d2:	60da      	str	r2, [r3, #12]
 80033d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033d6:	2301      	movs	r3, #1
 80033d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80033e0:	2300      	movs	r3, #0
 80033e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033e4:	2301      	movs	r3, #1
 80033e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033e8:	2302      	movs	r3, #2
 80033ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80033f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80033f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033f8:	f107 0318 	add.w	r3, r7, #24
 80033fc:	4618      	mov	r0, r3
 80033fe:	f002 f8a3 	bl	8005548 <HAL_RCC_OscConfig>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003408:	f000 f936 	bl	8003678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800340c:	230f      	movs	r3, #15
 800340e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003410:	2302      	movs	r3, #2
 8003412:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003414:	2300      	movs	r3, #0
 8003416:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800341c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	2102      	movs	r1, #2
 8003426:	4618      	mov	r0, r3
 8003428:	f002 fb10 	bl	8005a4c <HAL_RCC_ClockConfig>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003432:	f000 f921 	bl	8003678 <Error_Handler>
  }
}
 8003436:	bf00      	nop
 8003438:	3740      	adds	r7, #64	; 0x40
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003444:	4b12      	ldr	r3, [pc, #72]	; (8003490 <MX_I2C1_Init+0x50>)
 8003446:	4a13      	ldr	r2, [pc, #76]	; (8003494 <MX_I2C1_Init+0x54>)
 8003448:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800344a:	4b11      	ldr	r3, [pc, #68]	; (8003490 <MX_I2C1_Init+0x50>)
 800344c:	4a12      	ldr	r2, [pc, #72]	; (8003498 <MX_I2C1_Init+0x58>)
 800344e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003450:	4b0f      	ldr	r3, [pc, #60]	; (8003490 <MX_I2C1_Init+0x50>)
 8003452:	2200      	movs	r2, #0
 8003454:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003456:	4b0e      	ldr	r3, [pc, #56]	; (8003490 <MX_I2C1_Init+0x50>)
 8003458:	2200      	movs	r2, #0
 800345a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800345c:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <MX_I2C1_Init+0x50>)
 800345e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003462:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003464:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <MX_I2C1_Init+0x50>)
 8003466:	2200      	movs	r2, #0
 8003468:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800346a:	4b09      	ldr	r3, [pc, #36]	; (8003490 <MX_I2C1_Init+0x50>)
 800346c:	2200      	movs	r2, #0
 800346e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003470:	4b07      	ldr	r3, [pc, #28]	; (8003490 <MX_I2C1_Init+0x50>)
 8003472:	2200      	movs	r2, #0
 8003474:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003476:	4b06      	ldr	r3, [pc, #24]	; (8003490 <MX_I2C1_Init+0x50>)
 8003478:	2200      	movs	r2, #0
 800347a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800347c:	4804      	ldr	r0, [pc, #16]	; (8003490 <MX_I2C1_Init+0x50>)
 800347e:	f001 f82f 	bl	80044e0 <HAL_I2C_Init>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003488:	f000 f8f6 	bl	8003678 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800348c:	bf00      	nop
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20000340 	.word	0x20000340
 8003494:	40005400 	.word	0x40005400
 8003498:	000186a0 	.word	0x000186a0

0800349c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80034a0:	4b12      	ldr	r3, [pc, #72]	; (80034ec <MX_I2C2_Init+0x50>)
 80034a2:	4a13      	ldr	r2, [pc, #76]	; (80034f0 <MX_I2C2_Init+0x54>)
 80034a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80034a6:	4b11      	ldr	r3, [pc, #68]	; (80034ec <MX_I2C2_Init+0x50>)
 80034a8:	4a12      	ldr	r2, [pc, #72]	; (80034f4 <MX_I2C2_Init+0x58>)
 80034aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80034ac:	4b0f      	ldr	r3, [pc, #60]	; (80034ec <MX_I2C2_Init+0x50>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80034b2:	4b0e      	ldr	r3, [pc, #56]	; (80034ec <MX_I2C2_Init+0x50>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034b8:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <MX_I2C2_Init+0x50>)
 80034ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034be:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034c0:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <MX_I2C2_Init+0x50>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80034c6:	4b09      	ldr	r3, [pc, #36]	; (80034ec <MX_I2C2_Init+0x50>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034cc:	4b07      	ldr	r3, [pc, #28]	; (80034ec <MX_I2C2_Init+0x50>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034d2:	4b06      	ldr	r3, [pc, #24]	; (80034ec <MX_I2C2_Init+0x50>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80034d8:	4804      	ldr	r0, [pc, #16]	; (80034ec <MX_I2C2_Init+0x50>)
 80034da:	f001 f801 	bl	80044e0 <HAL_I2C_Init>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80034e4:	f000 f8c8 	bl	8003678 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80034e8:	bf00      	nop
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20000394 	.word	0x20000394
 80034f0:	40005800 	.word	0x40005800
 80034f4:	000186a0 	.word	0x000186a0

080034f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80034fc:	4b11      	ldr	r3, [pc, #68]	; (8003544 <MX_USART1_UART_Init+0x4c>)
 80034fe:	4a12      	ldr	r2, [pc, #72]	; (8003548 <MX_USART1_UART_Init+0x50>)
 8003500:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003502:	4b10      	ldr	r3, [pc, #64]	; (8003544 <MX_USART1_UART_Init+0x4c>)
 8003504:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003508:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800350a:	4b0e      	ldr	r3, [pc, #56]	; (8003544 <MX_USART1_UART_Init+0x4c>)
 800350c:	2200      	movs	r2, #0
 800350e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003510:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <MX_USART1_UART_Init+0x4c>)
 8003512:	2200      	movs	r2, #0
 8003514:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003516:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <MX_USART1_UART_Init+0x4c>)
 8003518:	2200      	movs	r2, #0
 800351a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800351c:	4b09      	ldr	r3, [pc, #36]	; (8003544 <MX_USART1_UART_Init+0x4c>)
 800351e:	220c      	movs	r2, #12
 8003520:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003522:	4b08      	ldr	r3, [pc, #32]	; (8003544 <MX_USART1_UART_Init+0x4c>)
 8003524:	2200      	movs	r2, #0
 8003526:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003528:	4b06      	ldr	r3, [pc, #24]	; (8003544 <MX_USART1_UART_Init+0x4c>)
 800352a:	2200      	movs	r2, #0
 800352c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800352e:	4805      	ldr	r0, [pc, #20]	; (8003544 <MX_USART1_UART_Init+0x4c>)
 8003530:	f002 fc1a 	bl	8005d68 <HAL_UART_Init>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800353a:	f000 f89d 	bl	8003678 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800353e:	bf00      	nop
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	200003e8 	.word	0x200003e8
 8003548:	40013800 	.word	0x40013800

0800354c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003552:	4b10      	ldr	r3, [pc, #64]	; (8003594 <MX_DMA_Init+0x48>)
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	4a0f      	ldr	r2, [pc, #60]	; (8003594 <MX_DMA_Init+0x48>)
 8003558:	f043 0301 	orr.w	r3, r3, #1
 800355c:	6153      	str	r3, [r2, #20]
 800355e:	4b0d      	ldr	r3, [pc, #52]	; (8003594 <MX_DMA_Init+0x48>)
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	607b      	str	r3, [r7, #4]
 8003568:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800356a:	2200      	movs	r2, #0
 800356c:	2100      	movs	r1, #0
 800356e:	200e      	movs	r0, #14
 8003570:	f000 fbad 	bl	8003cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003574:	200e      	movs	r0, #14
 8003576:	f000 fbc6 	bl	8003d06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800357a:	2200      	movs	r2, #0
 800357c:	2100      	movs	r1, #0
 800357e:	200f      	movs	r0, #15
 8003580:	f000 fba5 	bl	8003cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003584:	200f      	movs	r0, #15
 8003586:	f000 fbbe 	bl	8003d06 <HAL_NVIC_EnableIRQ>

}
 800358a:	bf00      	nop
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000

08003598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359e:	f107 0310 	add.w	r3, r7, #16
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	605a      	str	r2, [r3, #4]
 80035a8:	609a      	str	r2, [r3, #8]
 80035aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035ac:	4b2e      	ldr	r3, [pc, #184]	; (8003668 <MX_GPIO_Init+0xd0>)
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	4a2d      	ldr	r2, [pc, #180]	; (8003668 <MX_GPIO_Init+0xd0>)
 80035b2:	f043 0310 	orr.w	r3, r3, #16
 80035b6:	6193      	str	r3, [r2, #24]
 80035b8:	4b2b      	ldr	r3, [pc, #172]	; (8003668 <MX_GPIO_Init+0xd0>)
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035c4:	4b28      	ldr	r3, [pc, #160]	; (8003668 <MX_GPIO_Init+0xd0>)
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	4a27      	ldr	r2, [pc, #156]	; (8003668 <MX_GPIO_Init+0xd0>)
 80035ca:	f043 0320 	orr.w	r3, r3, #32
 80035ce:	6193      	str	r3, [r2, #24]
 80035d0:	4b25      	ldr	r3, [pc, #148]	; (8003668 <MX_GPIO_Init+0xd0>)
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035dc:	4b22      	ldr	r3, [pc, #136]	; (8003668 <MX_GPIO_Init+0xd0>)
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	4a21      	ldr	r2, [pc, #132]	; (8003668 <MX_GPIO_Init+0xd0>)
 80035e2:	f043 0308 	orr.w	r3, r3, #8
 80035e6:	6193      	str	r3, [r2, #24]
 80035e8:	4b1f      	ldr	r3, [pc, #124]	; (8003668 <MX_GPIO_Init+0xd0>)
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	607b      	str	r3, [r7, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035f4:	4b1c      	ldr	r3, [pc, #112]	; (8003668 <MX_GPIO_Init+0xd0>)
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	4a1b      	ldr	r2, [pc, #108]	; (8003668 <MX_GPIO_Init+0xd0>)
 80035fa:	f043 0304 	orr.w	r3, r3, #4
 80035fe:	6193      	str	r3, [r2, #24]
 8003600:	4b19      	ldr	r3, [pc, #100]	; (8003668 <MX_GPIO_Init+0xd0>)
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	603b      	str	r3, [r7, #0]
 800360a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800360c:	2200      	movs	r2, #0
 800360e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003612:	4816      	ldr	r0, [pc, #88]	; (800366c <MX_GPIO_Init+0xd4>)
 8003614:	f000 ff2a 	bl	800446c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003618:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800361c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800361e:	2301      	movs	r3, #1
 8003620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003622:	2300      	movs	r3, #0
 8003624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003626:	2302      	movs	r3, #2
 8003628:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800362a:	f107 0310 	add.w	r3, r7, #16
 800362e:	4619      	mov	r1, r3
 8003630:	480e      	ldr	r0, [pc, #56]	; (800366c <MX_GPIO_Init+0xd4>)
 8003632:	f000 fd97 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003636:	2301      	movs	r3, #1
 8003638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800363a:	4b0d      	ldr	r3, [pc, #52]	; (8003670 <MX_GPIO_Init+0xd8>)
 800363c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800363e:	2301      	movs	r3, #1
 8003640:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003642:	f107 0310 	add.w	r3, r7, #16
 8003646:	4619      	mov	r1, r3
 8003648:	480a      	ldr	r0, [pc, #40]	; (8003674 <MX_GPIO_Init+0xdc>)
 800364a:	f000 fd8b 	bl	8004164 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800364e:	2200      	movs	r2, #0
 8003650:	2100      	movs	r1, #0
 8003652:	2006      	movs	r0, #6
 8003654:	f000 fb3b 	bl	8003cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003658:	2006      	movs	r0, #6
 800365a:	f000 fb54 	bl	8003d06 <HAL_NVIC_EnableIRQ>

}
 800365e:	bf00      	nop
 8003660:	3720      	adds	r7, #32
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000
 800366c:	40011000 	.word	0x40011000
 8003670:	10210000 	.word	0x10210000
 8003674:	40010c00 	.word	0x40010c00

08003678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800367c:	b672      	cpsid	i
}
 800367e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003680:	e7fe      	b.n	8003680 <Error_Handler+0x8>
	...

08003684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800368a:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <HAL_MspInit+0x40>)
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	4a0d      	ldr	r2, [pc, #52]	; (80036c4 <HAL_MspInit+0x40>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6193      	str	r3, [r2, #24]
 8003696:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_MspInit+0x40>)
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	607b      	str	r3, [r7, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036a2:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <HAL_MspInit+0x40>)
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	4a07      	ldr	r2, [pc, #28]	; (80036c4 <HAL_MspInit+0x40>)
 80036a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ac:	61d3      	str	r3, [r2, #28]
 80036ae:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_MspInit+0x40>)
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b6:	603b      	str	r3, [r7, #0]
 80036b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr
 80036c4:	40021000 	.word	0x40021000

080036c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08a      	sub	sp, #40	; 0x28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d0:	f107 0318 	add.w	r3, r7, #24
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	605a      	str	r2, [r3, #4]
 80036da:	609a      	str	r2, [r3, #8]
 80036dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a2b      	ldr	r2, [pc, #172]	; (8003790 <HAL_I2C_MspInit+0xc8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d124      	bne.n	8003732 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036e8:	4b2a      	ldr	r3, [pc, #168]	; (8003794 <HAL_I2C_MspInit+0xcc>)
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	4a29      	ldr	r2, [pc, #164]	; (8003794 <HAL_I2C_MspInit+0xcc>)
 80036ee:	f043 0308 	orr.w	r3, r3, #8
 80036f2:	6193      	str	r3, [r2, #24]
 80036f4:	4b27      	ldr	r3, [pc, #156]	; (8003794 <HAL_I2C_MspInit+0xcc>)
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003700:	23c0      	movs	r3, #192	; 0xc0
 8003702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003704:	2312      	movs	r3, #18
 8003706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003708:	2303      	movs	r3, #3
 800370a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800370c:	f107 0318 	add.w	r3, r7, #24
 8003710:	4619      	mov	r1, r3
 8003712:	4821      	ldr	r0, [pc, #132]	; (8003798 <HAL_I2C_MspInit+0xd0>)
 8003714:	f000 fd26 	bl	8004164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003718:	4b1e      	ldr	r3, [pc, #120]	; (8003794 <HAL_I2C_MspInit+0xcc>)
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	4a1d      	ldr	r2, [pc, #116]	; (8003794 <HAL_I2C_MspInit+0xcc>)
 800371e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003722:	61d3      	str	r3, [r2, #28]
 8003724:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <HAL_I2C_MspInit+0xcc>)
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003730:	e029      	b.n	8003786 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a19      	ldr	r2, [pc, #100]	; (800379c <HAL_I2C_MspInit+0xd4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d124      	bne.n	8003786 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800373c:	4b15      	ldr	r3, [pc, #84]	; (8003794 <HAL_I2C_MspInit+0xcc>)
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	4a14      	ldr	r2, [pc, #80]	; (8003794 <HAL_I2C_MspInit+0xcc>)
 8003742:	f043 0308 	orr.w	r3, r3, #8
 8003746:	6193      	str	r3, [r2, #24]
 8003748:	4b12      	ldr	r3, [pc, #72]	; (8003794 <HAL_I2C_MspInit+0xcc>)
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003754:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800375a:	2312      	movs	r3, #18
 800375c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800375e:	2303      	movs	r3, #3
 8003760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003762:	f107 0318 	add.w	r3, r7, #24
 8003766:	4619      	mov	r1, r3
 8003768:	480b      	ldr	r0, [pc, #44]	; (8003798 <HAL_I2C_MspInit+0xd0>)
 800376a:	f000 fcfb 	bl	8004164 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800376e:	4b09      	ldr	r3, [pc, #36]	; (8003794 <HAL_I2C_MspInit+0xcc>)
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	4a08      	ldr	r2, [pc, #32]	; (8003794 <HAL_I2C_MspInit+0xcc>)
 8003774:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003778:	61d3      	str	r3, [r2, #28]
 800377a:	4b06      	ldr	r3, [pc, #24]	; (8003794 <HAL_I2C_MspInit+0xcc>)
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003782:	60bb      	str	r3, [r7, #8]
 8003784:	68bb      	ldr	r3, [r7, #8]
}
 8003786:	bf00      	nop
 8003788:	3728      	adds	r7, #40	; 0x28
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40005400 	.word	0x40005400
 8003794:	40021000 	.word	0x40021000
 8003798:	40010c00 	.word	0x40010c00
 800379c:	40005800 	.word	0x40005800

080037a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a8:	f107 0310 	add.w	r3, r7, #16
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	605a      	str	r2, [r3, #4]
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a47      	ldr	r2, [pc, #284]	; (80038d8 <HAL_UART_MspInit+0x138>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	f040 8086 	bne.w	80038ce <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80037c2:	4b46      	ldr	r3, [pc, #280]	; (80038dc <HAL_UART_MspInit+0x13c>)
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	4a45      	ldr	r2, [pc, #276]	; (80038dc <HAL_UART_MspInit+0x13c>)
 80037c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037cc:	6193      	str	r3, [r2, #24]
 80037ce:	4b43      	ldr	r3, [pc, #268]	; (80038dc <HAL_UART_MspInit+0x13c>)
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037da:	4b40      	ldr	r3, [pc, #256]	; (80038dc <HAL_UART_MspInit+0x13c>)
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	4a3f      	ldr	r2, [pc, #252]	; (80038dc <HAL_UART_MspInit+0x13c>)
 80037e0:	f043 0304 	orr.w	r3, r3, #4
 80037e4:	6193      	str	r3, [r2, #24]
 80037e6:	4b3d      	ldr	r3, [pc, #244]	; (80038dc <HAL_UART_MspInit+0x13c>)
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	60bb      	str	r3, [r7, #8]
 80037f0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80037f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f8:	2302      	movs	r3, #2
 80037fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037fc:	2303      	movs	r3, #3
 80037fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003800:	f107 0310 	add.w	r3, r7, #16
 8003804:	4619      	mov	r1, r3
 8003806:	4836      	ldr	r0, [pc, #216]	; (80038e0 <HAL_UART_MspInit+0x140>)
 8003808:	f000 fcac 	bl	8004164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800380c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003810:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003816:	2300      	movs	r3, #0
 8003818:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800381a:	f107 0310 	add.w	r3, r7, #16
 800381e:	4619      	mov	r1, r3
 8003820:	482f      	ldr	r0, [pc, #188]	; (80038e0 <HAL_UART_MspInit+0x140>)
 8003822:	f000 fc9f 	bl	8004164 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003826:	4b2f      	ldr	r3, [pc, #188]	; (80038e4 <HAL_UART_MspInit+0x144>)
 8003828:	4a2f      	ldr	r2, [pc, #188]	; (80038e8 <HAL_UART_MspInit+0x148>)
 800382a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800382c:	4b2d      	ldr	r3, [pc, #180]	; (80038e4 <HAL_UART_MspInit+0x144>)
 800382e:	2200      	movs	r2, #0
 8003830:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003832:	4b2c      	ldr	r3, [pc, #176]	; (80038e4 <HAL_UART_MspInit+0x144>)
 8003834:	2200      	movs	r2, #0
 8003836:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003838:	4b2a      	ldr	r3, [pc, #168]	; (80038e4 <HAL_UART_MspInit+0x144>)
 800383a:	2280      	movs	r2, #128	; 0x80
 800383c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800383e:	4b29      	ldr	r3, [pc, #164]	; (80038e4 <HAL_UART_MspInit+0x144>)
 8003840:	2200      	movs	r2, #0
 8003842:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003844:	4b27      	ldr	r3, [pc, #156]	; (80038e4 <HAL_UART_MspInit+0x144>)
 8003846:	2200      	movs	r2, #0
 8003848:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800384a:	4b26      	ldr	r3, [pc, #152]	; (80038e4 <HAL_UART_MspInit+0x144>)
 800384c:	2200      	movs	r2, #0
 800384e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003850:	4b24      	ldr	r3, [pc, #144]	; (80038e4 <HAL_UART_MspInit+0x144>)
 8003852:	2200      	movs	r2, #0
 8003854:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003856:	4823      	ldr	r0, [pc, #140]	; (80038e4 <HAL_UART_MspInit+0x144>)
 8003858:	f000 fa70 	bl	8003d3c <HAL_DMA_Init>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8003862:	f7ff ff09 	bl	8003678 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a1e      	ldr	r2, [pc, #120]	; (80038e4 <HAL_UART_MspInit+0x144>)
 800386a:	63da      	str	r2, [r3, #60]	; 0x3c
 800386c:	4a1d      	ldr	r2, [pc, #116]	; (80038e4 <HAL_UART_MspInit+0x144>)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003872:	4b1e      	ldr	r3, [pc, #120]	; (80038ec <HAL_UART_MspInit+0x14c>)
 8003874:	4a1e      	ldr	r2, [pc, #120]	; (80038f0 <HAL_UART_MspInit+0x150>)
 8003876:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003878:	4b1c      	ldr	r3, [pc, #112]	; (80038ec <HAL_UART_MspInit+0x14c>)
 800387a:	2210      	movs	r2, #16
 800387c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800387e:	4b1b      	ldr	r3, [pc, #108]	; (80038ec <HAL_UART_MspInit+0x14c>)
 8003880:	2200      	movs	r2, #0
 8003882:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003884:	4b19      	ldr	r3, [pc, #100]	; (80038ec <HAL_UART_MspInit+0x14c>)
 8003886:	2280      	movs	r2, #128	; 0x80
 8003888:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800388a:	4b18      	ldr	r3, [pc, #96]	; (80038ec <HAL_UART_MspInit+0x14c>)
 800388c:	2200      	movs	r2, #0
 800388e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003890:	4b16      	ldr	r3, [pc, #88]	; (80038ec <HAL_UART_MspInit+0x14c>)
 8003892:	2200      	movs	r2, #0
 8003894:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003896:	4b15      	ldr	r3, [pc, #84]	; (80038ec <HAL_UART_MspInit+0x14c>)
 8003898:	2200      	movs	r2, #0
 800389a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800389c:	4b13      	ldr	r3, [pc, #76]	; (80038ec <HAL_UART_MspInit+0x14c>)
 800389e:	2200      	movs	r2, #0
 80038a0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80038a2:	4812      	ldr	r0, [pc, #72]	; (80038ec <HAL_UART_MspInit+0x14c>)
 80038a4:	f000 fa4a 	bl	8003d3c <HAL_DMA_Init>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80038ae:	f7ff fee3 	bl	8003678 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a0d      	ldr	r2, [pc, #52]	; (80038ec <HAL_UART_MspInit+0x14c>)
 80038b6:	639a      	str	r2, [r3, #56]	; 0x38
 80038b8:	4a0c      	ldr	r2, [pc, #48]	; (80038ec <HAL_UART_MspInit+0x14c>)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80038be:	2200      	movs	r2, #0
 80038c0:	2100      	movs	r1, #0
 80038c2:	2025      	movs	r0, #37	; 0x25
 80038c4:	f000 fa03 	bl	8003cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80038c8:	2025      	movs	r0, #37	; 0x25
 80038ca:	f000 fa1c 	bl	8003d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80038ce:	bf00      	nop
 80038d0:	3720      	adds	r7, #32
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40013800 	.word	0x40013800
 80038dc:	40021000 	.word	0x40021000
 80038e0:	40010800 	.word	0x40010800
 80038e4:	20000430 	.word	0x20000430
 80038e8:	40020058 	.word	0x40020058
 80038ec:	20000474 	.word	0x20000474
 80038f0:	40020044 	.word	0x40020044

080038f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038f8:	e7fe      	b.n	80038f8 <NMI_Handler+0x4>

080038fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038fa:	b480      	push	{r7}
 80038fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038fe:	e7fe      	b.n	80038fe <HardFault_Handler+0x4>

08003900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003904:	e7fe      	b.n	8003904 <MemManage_Handler+0x4>

08003906 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003906:	b480      	push	{r7}
 8003908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800390a:	e7fe      	b.n	800390a <BusFault_Handler+0x4>

0800390c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003910:	e7fe      	b.n	8003910 <UsageFault_Handler+0x4>

08003912 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003912:	b480      	push	{r7}
 8003914:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003916:	bf00      	nop
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr

0800391e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800391e:	b480      	push	{r7}
 8003920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003922:	bf00      	nop
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr

0800392a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800392a:	b480      	push	{r7}
 800392c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800392e:	bf00      	nop
 8003930:	46bd      	mov	sp, r7
 8003932:	bc80      	pop	{r7}
 8003934:	4770      	bx	lr

08003936 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800393a:	f000 f8d5 	bl	8003ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800393e:	bf00      	nop
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	max30102_on_interrupt(&max30102);
 8003948:	4803      	ldr	r0, [pc, #12]	; (8003958 <EXTI0_IRQHandler+0x14>)
 800394a:	f7fe fe54 	bl	80025f6 <max30102_on_interrupt>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800394e:	2001      	movs	r0, #1
 8003950:	f000 fda4 	bl	800449c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003954:	bf00      	nop
 8003956:	bd80      	pop	{r7, pc}
 8003958:	20000238 	.word	0x20000238

0800395c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003960:	4802      	ldr	r0, [pc, #8]	; (800396c <DMA1_Channel4_IRQHandler+0x10>)
 8003962:	f000 faf9 	bl	8003f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003966:	bf00      	nop
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000474 	.word	0x20000474

08003970 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003974:	4802      	ldr	r0, [pc, #8]	; (8003980 <DMA1_Channel5_IRQHandler+0x10>)
 8003976:	f000 faef 	bl	8003f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800397a:	bf00      	nop
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20000430 	.word	0x20000430

08003984 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003988:	4802      	ldr	r0, [pc, #8]	; (8003994 <USART1_IRQHandler+0x10>)
 800398a:	f002 fa3d 	bl	8005e08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800398e:	bf00      	nop
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	200003e8 	.word	0x200003e8

08003998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039a0:	4a14      	ldr	r2, [pc, #80]	; (80039f4 <_sbrk+0x5c>)
 80039a2:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <_sbrk+0x60>)
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039ac:	4b13      	ldr	r3, [pc, #76]	; (80039fc <_sbrk+0x64>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d102      	bne.n	80039ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039b4:	4b11      	ldr	r3, [pc, #68]	; (80039fc <_sbrk+0x64>)
 80039b6:	4a12      	ldr	r2, [pc, #72]	; (8003a00 <_sbrk+0x68>)
 80039b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039ba:	4b10      	ldr	r3, [pc, #64]	; (80039fc <_sbrk+0x64>)
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4413      	add	r3, r2
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d207      	bcs.n	80039d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039c8:	f002 ffd4 	bl	8006974 <__errno>
 80039cc:	4603      	mov	r3, r0
 80039ce:	220c      	movs	r2, #12
 80039d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039d2:	f04f 33ff 	mov.w	r3, #4294967295
 80039d6:	e009      	b.n	80039ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039d8:	4b08      	ldr	r3, [pc, #32]	; (80039fc <_sbrk+0x64>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039de:	4b07      	ldr	r3, [pc, #28]	; (80039fc <_sbrk+0x64>)
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4413      	add	r3, r2
 80039e6:	4a05      	ldr	r2, [pc, #20]	; (80039fc <_sbrk+0x64>)
 80039e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039ea:	68fb      	ldr	r3, [r7, #12]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	20005000 	.word	0x20005000
 80039f8:	00000400 	.word	0x00000400
 80039fc:	20000548 	.word	0x20000548
 8003a00:	20000698 	.word	0x20000698

08003a04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a08:	bf00      	nop
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr

08003a10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a10:	f7ff fff8 	bl	8003a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a14:	480b      	ldr	r0, [pc, #44]	; (8003a44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003a16:	490c      	ldr	r1, [pc, #48]	; (8003a48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003a18:	4a0c      	ldr	r2, [pc, #48]	; (8003a4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8003a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a1c:	e002      	b.n	8003a24 <LoopCopyDataInit>

08003a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a22:	3304      	adds	r3, #4

08003a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a28:	d3f9      	bcc.n	8003a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a2a:	4a09      	ldr	r2, [pc, #36]	; (8003a50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003a2c:	4c09      	ldr	r4, [pc, #36]	; (8003a54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a30:	e001      	b.n	8003a36 <LoopFillZerobss>

08003a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a34:	3204      	adds	r2, #4

08003a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a38:	d3fb      	bcc.n	8003a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a3a:	f002 ffa1 	bl	8006980 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a3e:	f7ff fc55 	bl	80032ec <main>
  bx lr
 8003a42:	4770      	bx	lr
  ldr r0, =_sdata
 8003a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a48:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003a4c:	08006e58 	.word	0x08006e58
  ldr r2, =_sbss
 8003a50:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003a54:	20000698 	.word	0x20000698

08003a58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a58:	e7fe      	b.n	8003a58 <ADC1_2_IRQHandler>
	...

08003a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a60:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <HAL_Init+0x28>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a07      	ldr	r2, [pc, #28]	; (8003a84 <HAL_Init+0x28>)
 8003a66:	f043 0310 	orr.w	r3, r3, #16
 8003a6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a6c:	2003      	movs	r0, #3
 8003a6e:	f000 f923 	bl	8003cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a72:	200f      	movs	r0, #15
 8003a74:	f000 f808 	bl	8003a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a78:	f7ff fe04 	bl	8003684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40022000 	.word	0x40022000

08003a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a90:	4b12      	ldr	r3, [pc, #72]	; (8003adc <HAL_InitTick+0x54>)
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <HAL_InitTick+0x58>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	4619      	mov	r1, r3
 8003a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 f93b 	bl	8003d22 <HAL_SYSTICK_Config>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e00e      	b.n	8003ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b0f      	cmp	r3, #15
 8003aba:	d80a      	bhi.n	8003ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003abc:	2200      	movs	r2, #0
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac4:	f000 f903 	bl	8003cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ac8:	4a06      	ldr	r2, [pc, #24]	; (8003ae4 <HAL_InitTick+0x5c>)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e000      	b.n	8003ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20000004 	.word	0x20000004
 8003ae0:	2000000c 	.word	0x2000000c
 8003ae4:	20000008 	.word	0x20000008

08003ae8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003aec:	4b05      	ldr	r3, [pc, #20]	; (8003b04 <HAL_IncTick+0x1c>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	461a      	mov	r2, r3
 8003af2:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <HAL_IncTick+0x20>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4413      	add	r3, r2
 8003af8:	4a03      	ldr	r2, [pc, #12]	; (8003b08 <HAL_IncTick+0x20>)
 8003afa:	6013      	str	r3, [r2, #0]
}
 8003afc:	bf00      	nop
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr
 8003b04:	2000000c 	.word	0x2000000c
 8003b08:	2000054c 	.word	0x2000054c

08003b0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b10:	4b02      	ldr	r3, [pc, #8]	; (8003b1c <HAL_GetTick+0x10>)
 8003b12:	681b      	ldr	r3, [r3, #0]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bc80      	pop	{r7}
 8003b1a:	4770      	bx	lr
 8003b1c:	2000054c 	.word	0x2000054c

08003b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b30:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <__NVIC_SetPriorityGrouping+0x44>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b52:	4a04      	ldr	r2, [pc, #16]	; (8003b64 <__NVIC_SetPriorityGrouping+0x44>)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	60d3      	str	r3, [r2, #12]
}
 8003b58:	bf00      	nop
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	e000ed00 	.word	0xe000ed00

08003b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b6c:	4b04      	ldr	r3, [pc, #16]	; (8003b80 <__NVIC_GetPriorityGrouping+0x18>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	0a1b      	lsrs	r3, r3, #8
 8003b72:	f003 0307 	and.w	r3, r3, #7
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc80      	pop	{r7}
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	e000ed00 	.word	0xe000ed00

08003b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	db0b      	blt.n	8003bae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	f003 021f 	and.w	r2, r3, #31
 8003b9c:	4906      	ldr	r1, [pc, #24]	; (8003bb8 <__NVIC_EnableIRQ+0x34>)
 8003b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	2001      	movs	r0, #1
 8003ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8003baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bc80      	pop	{r7}
 8003bb6:	4770      	bx	lr
 8003bb8:	e000e100 	.word	0xe000e100

08003bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	6039      	str	r1, [r7, #0]
 8003bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	db0a      	blt.n	8003be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	490c      	ldr	r1, [pc, #48]	; (8003c08 <__NVIC_SetPriority+0x4c>)
 8003bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bda:	0112      	lsls	r2, r2, #4
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	440b      	add	r3, r1
 8003be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003be4:	e00a      	b.n	8003bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	4908      	ldr	r1, [pc, #32]	; (8003c0c <__NVIC_SetPriority+0x50>)
 8003bec:	79fb      	ldrb	r3, [r7, #7]
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	3b04      	subs	r3, #4
 8003bf4:	0112      	lsls	r2, r2, #4
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	761a      	strb	r2, [r3, #24]
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bc80      	pop	{r7}
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	e000e100 	.word	0xe000e100
 8003c0c:	e000ed00 	.word	0xe000ed00

08003c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b089      	sub	sp, #36	; 0x24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f003 0307 	and.w	r3, r3, #7
 8003c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f1c3 0307 	rsb	r3, r3, #7
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	bf28      	it	cs
 8003c2e:	2304      	movcs	r3, #4
 8003c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	3304      	adds	r3, #4
 8003c36:	2b06      	cmp	r3, #6
 8003c38:	d902      	bls.n	8003c40 <NVIC_EncodePriority+0x30>
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	3b03      	subs	r3, #3
 8003c3e:	e000      	b.n	8003c42 <NVIC_EncodePriority+0x32>
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c44:	f04f 32ff 	mov.w	r2, #4294967295
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	43da      	mvns	r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	401a      	ands	r2, r3
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c58:	f04f 31ff 	mov.w	r1, #4294967295
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c62:	43d9      	mvns	r1, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c68:	4313      	orrs	r3, r2
         );
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3724      	adds	r7, #36	; 0x24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr

08003c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c84:	d301      	bcc.n	8003c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c86:	2301      	movs	r3, #1
 8003c88:	e00f      	b.n	8003caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c8a:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <SysTick_Config+0x40>)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c92:	210f      	movs	r1, #15
 8003c94:	f04f 30ff 	mov.w	r0, #4294967295
 8003c98:	f7ff ff90 	bl	8003bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c9c:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <SysTick_Config+0x40>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ca2:	4b04      	ldr	r3, [pc, #16]	; (8003cb4 <SysTick_Config+0x40>)
 8003ca4:	2207      	movs	r2, #7
 8003ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	e000e010 	.word	0xe000e010

08003cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff ff2d 	bl	8003b20 <__NVIC_SetPriorityGrouping>
}
 8003cc6:	bf00      	nop
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b086      	sub	sp, #24
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	607a      	str	r2, [r7, #4]
 8003cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ce0:	f7ff ff42 	bl	8003b68 <__NVIC_GetPriorityGrouping>
 8003ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	68b9      	ldr	r1, [r7, #8]
 8003cea:	6978      	ldr	r0, [r7, #20]
 8003cec:	f7ff ff90 	bl	8003c10 <NVIC_EncodePriority>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff ff5f 	bl	8003bbc <__NVIC_SetPriority>
}
 8003cfe:	bf00      	nop
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff ff35 	bl	8003b84 <__NVIC_EnableIRQ>
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff ffa2 	bl	8003c74 <SysTick_Config>
 8003d30:	4603      	mov	r3, r0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e043      	b.n	8003dda <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	4b22      	ldr	r3, [pc, #136]	; (8003de4 <HAL_DMA_Init+0xa8>)
 8003d5a:	4413      	add	r3, r2
 8003d5c:	4a22      	ldr	r2, [pc, #136]	; (8003de8 <HAL_DMA_Init+0xac>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	091b      	lsrs	r3, r3, #4
 8003d64:	009a      	lsls	r2, r3, #2
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a1f      	ldr	r2, [pc, #124]	; (8003dec <HAL_DMA_Init+0xb0>)
 8003d6e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003d86:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003d8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr
 8003de4:	bffdfff8 	.word	0xbffdfff8
 8003de8:	cccccccd 	.word	0xcccccccd
 8003dec:	40020000 	.word	0x40020000

08003df0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d008      	beq.n	8003e1a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2204      	movs	r2, #4
 8003e0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e020      	b.n	8003e5c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 020e 	bic.w	r2, r2, #14
 8003e28:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0201 	bic.w	r2, r2, #1
 8003e38:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e42:	2101      	movs	r1, #1
 8003e44:	fa01 f202 	lsl.w	r2, r1, r2
 8003e48:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc80      	pop	{r7}
 8003e64:	4770      	bx	lr
	...

08003e68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e70:	2300      	movs	r3, #0
 8003e72:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d005      	beq.n	8003e8c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2204      	movs	r2, #4
 8003e84:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	73fb      	strb	r3, [r7, #15]
 8003e8a:	e051      	b.n	8003f30 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 020e 	bic.w	r2, r2, #14
 8003e9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0201 	bic.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a22      	ldr	r2, [pc, #136]	; (8003f3c <HAL_DMA_Abort_IT+0xd4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d029      	beq.n	8003f0a <HAL_DMA_Abort_IT+0xa2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a21      	ldr	r2, [pc, #132]	; (8003f40 <HAL_DMA_Abort_IT+0xd8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d022      	beq.n	8003f06 <HAL_DMA_Abort_IT+0x9e>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a1f      	ldr	r2, [pc, #124]	; (8003f44 <HAL_DMA_Abort_IT+0xdc>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d01a      	beq.n	8003f00 <HAL_DMA_Abort_IT+0x98>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1e      	ldr	r2, [pc, #120]	; (8003f48 <HAL_DMA_Abort_IT+0xe0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d012      	beq.n	8003efa <HAL_DMA_Abort_IT+0x92>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a1c      	ldr	r2, [pc, #112]	; (8003f4c <HAL_DMA_Abort_IT+0xe4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00a      	beq.n	8003ef4 <HAL_DMA_Abort_IT+0x8c>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1b      	ldr	r2, [pc, #108]	; (8003f50 <HAL_DMA_Abort_IT+0xe8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d102      	bne.n	8003eee <HAL_DMA_Abort_IT+0x86>
 8003ee8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003eec:	e00e      	b.n	8003f0c <HAL_DMA_Abort_IT+0xa4>
 8003eee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ef2:	e00b      	b.n	8003f0c <HAL_DMA_Abort_IT+0xa4>
 8003ef4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ef8:	e008      	b.n	8003f0c <HAL_DMA_Abort_IT+0xa4>
 8003efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003efe:	e005      	b.n	8003f0c <HAL_DMA_Abort_IT+0xa4>
 8003f00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f04:	e002      	b.n	8003f0c <HAL_DMA_Abort_IT+0xa4>
 8003f06:	2310      	movs	r3, #16
 8003f08:	e000      	b.n	8003f0c <HAL_DMA_Abort_IT+0xa4>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	4a11      	ldr	r2, [pc, #68]	; (8003f54 <HAL_DMA_Abort_IT+0xec>)
 8003f0e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	4798      	blx	r3
    } 
  }
  return status;
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40020008 	.word	0x40020008
 8003f40:	4002001c 	.word	0x4002001c
 8003f44:	40020030 	.word	0x40020030
 8003f48:	40020044 	.word	0x40020044
 8003f4c:	40020058 	.word	0x40020058
 8003f50:	4002006c 	.word	0x4002006c
 8003f54:	40020000 	.word	0x40020000

08003f58 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	2204      	movs	r2, #4
 8003f76:	409a      	lsls	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d04f      	beq.n	8004020 <HAL_DMA_IRQHandler+0xc8>
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d04a      	beq.n	8004020 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d107      	bne.n	8003fa8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0204 	bic.w	r2, r2, #4
 8003fa6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a66      	ldr	r2, [pc, #408]	; (8004148 <HAL_DMA_IRQHandler+0x1f0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d029      	beq.n	8004006 <HAL_DMA_IRQHandler+0xae>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a65      	ldr	r2, [pc, #404]	; (800414c <HAL_DMA_IRQHandler+0x1f4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d022      	beq.n	8004002 <HAL_DMA_IRQHandler+0xaa>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a63      	ldr	r2, [pc, #396]	; (8004150 <HAL_DMA_IRQHandler+0x1f8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d01a      	beq.n	8003ffc <HAL_DMA_IRQHandler+0xa4>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a62      	ldr	r2, [pc, #392]	; (8004154 <HAL_DMA_IRQHandler+0x1fc>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d012      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0x9e>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a60      	ldr	r2, [pc, #384]	; (8004158 <HAL_DMA_IRQHandler+0x200>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00a      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x98>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a5f      	ldr	r2, [pc, #380]	; (800415c <HAL_DMA_IRQHandler+0x204>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d102      	bne.n	8003fea <HAL_DMA_IRQHandler+0x92>
 8003fe4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003fe8:	e00e      	b.n	8004008 <HAL_DMA_IRQHandler+0xb0>
 8003fea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003fee:	e00b      	b.n	8004008 <HAL_DMA_IRQHandler+0xb0>
 8003ff0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ff4:	e008      	b.n	8004008 <HAL_DMA_IRQHandler+0xb0>
 8003ff6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ffa:	e005      	b.n	8004008 <HAL_DMA_IRQHandler+0xb0>
 8003ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004000:	e002      	b.n	8004008 <HAL_DMA_IRQHandler+0xb0>
 8004002:	2340      	movs	r3, #64	; 0x40
 8004004:	e000      	b.n	8004008 <HAL_DMA_IRQHandler+0xb0>
 8004006:	2304      	movs	r3, #4
 8004008:	4a55      	ldr	r2, [pc, #340]	; (8004160 <HAL_DMA_IRQHandler+0x208>)
 800400a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 8094 	beq.w	800413e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800401e:	e08e      	b.n	800413e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	2202      	movs	r2, #2
 8004026:	409a      	lsls	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4013      	ands	r3, r2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d056      	beq.n	80040de <HAL_DMA_IRQHandler+0x186>
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d051      	beq.n	80040de <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0320 	and.w	r3, r3, #32
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10b      	bne.n	8004060 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 020a 	bic.w	r2, r2, #10
 8004056:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a38      	ldr	r2, [pc, #224]	; (8004148 <HAL_DMA_IRQHandler+0x1f0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d029      	beq.n	80040be <HAL_DMA_IRQHandler+0x166>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a37      	ldr	r2, [pc, #220]	; (800414c <HAL_DMA_IRQHandler+0x1f4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d022      	beq.n	80040ba <HAL_DMA_IRQHandler+0x162>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a35      	ldr	r2, [pc, #212]	; (8004150 <HAL_DMA_IRQHandler+0x1f8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d01a      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x15c>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a34      	ldr	r2, [pc, #208]	; (8004154 <HAL_DMA_IRQHandler+0x1fc>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d012      	beq.n	80040ae <HAL_DMA_IRQHandler+0x156>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a32      	ldr	r2, [pc, #200]	; (8004158 <HAL_DMA_IRQHandler+0x200>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00a      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x150>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a31      	ldr	r2, [pc, #196]	; (800415c <HAL_DMA_IRQHandler+0x204>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d102      	bne.n	80040a2 <HAL_DMA_IRQHandler+0x14a>
 800409c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80040a0:	e00e      	b.n	80040c0 <HAL_DMA_IRQHandler+0x168>
 80040a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040a6:	e00b      	b.n	80040c0 <HAL_DMA_IRQHandler+0x168>
 80040a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040ac:	e008      	b.n	80040c0 <HAL_DMA_IRQHandler+0x168>
 80040ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040b2:	e005      	b.n	80040c0 <HAL_DMA_IRQHandler+0x168>
 80040b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040b8:	e002      	b.n	80040c0 <HAL_DMA_IRQHandler+0x168>
 80040ba:	2320      	movs	r3, #32
 80040bc:	e000      	b.n	80040c0 <HAL_DMA_IRQHandler+0x168>
 80040be:	2302      	movs	r3, #2
 80040c0:	4a27      	ldr	r2, [pc, #156]	; (8004160 <HAL_DMA_IRQHandler+0x208>)
 80040c2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d034      	beq.n	800413e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80040dc:	e02f      	b.n	800413e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	2208      	movs	r2, #8
 80040e4:	409a      	lsls	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d028      	beq.n	8004140 <HAL_DMA_IRQHandler+0x1e8>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d023      	beq.n	8004140 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 020e 	bic.w	r2, r2, #14
 8004106:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004110:	2101      	movs	r1, #1
 8004112:	fa01 f202 	lsl.w	r2, r1, r2
 8004116:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004132:	2b00      	cmp	r3, #0
 8004134:	d004      	beq.n	8004140 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	4798      	blx	r3
    }
  }
  return;
 800413e:	bf00      	nop
 8004140:	bf00      	nop
}
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40020008 	.word	0x40020008
 800414c:	4002001c 	.word	0x4002001c
 8004150:	40020030 	.word	0x40020030
 8004154:	40020044 	.word	0x40020044
 8004158:	40020058 	.word	0x40020058
 800415c:	4002006c 	.word	0x4002006c
 8004160:	40020000 	.word	0x40020000

08004164 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004164:	b480      	push	{r7}
 8004166:	b08b      	sub	sp, #44	; 0x2c
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800416e:	2300      	movs	r3, #0
 8004170:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004172:	2300      	movs	r3, #0
 8004174:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004176:	e169      	b.n	800444c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004178:	2201      	movs	r2, #1
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	4013      	ands	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	429a      	cmp	r2, r3
 8004192:	f040 8158 	bne.w	8004446 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	4a9a      	ldr	r2, [pc, #616]	; (8004404 <HAL_GPIO_Init+0x2a0>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d05e      	beq.n	800425e <HAL_GPIO_Init+0xfa>
 80041a0:	4a98      	ldr	r2, [pc, #608]	; (8004404 <HAL_GPIO_Init+0x2a0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d875      	bhi.n	8004292 <HAL_GPIO_Init+0x12e>
 80041a6:	4a98      	ldr	r2, [pc, #608]	; (8004408 <HAL_GPIO_Init+0x2a4>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d058      	beq.n	800425e <HAL_GPIO_Init+0xfa>
 80041ac:	4a96      	ldr	r2, [pc, #600]	; (8004408 <HAL_GPIO_Init+0x2a4>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d86f      	bhi.n	8004292 <HAL_GPIO_Init+0x12e>
 80041b2:	4a96      	ldr	r2, [pc, #600]	; (800440c <HAL_GPIO_Init+0x2a8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d052      	beq.n	800425e <HAL_GPIO_Init+0xfa>
 80041b8:	4a94      	ldr	r2, [pc, #592]	; (800440c <HAL_GPIO_Init+0x2a8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d869      	bhi.n	8004292 <HAL_GPIO_Init+0x12e>
 80041be:	4a94      	ldr	r2, [pc, #592]	; (8004410 <HAL_GPIO_Init+0x2ac>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d04c      	beq.n	800425e <HAL_GPIO_Init+0xfa>
 80041c4:	4a92      	ldr	r2, [pc, #584]	; (8004410 <HAL_GPIO_Init+0x2ac>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d863      	bhi.n	8004292 <HAL_GPIO_Init+0x12e>
 80041ca:	4a92      	ldr	r2, [pc, #584]	; (8004414 <HAL_GPIO_Init+0x2b0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d046      	beq.n	800425e <HAL_GPIO_Init+0xfa>
 80041d0:	4a90      	ldr	r2, [pc, #576]	; (8004414 <HAL_GPIO_Init+0x2b0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d85d      	bhi.n	8004292 <HAL_GPIO_Init+0x12e>
 80041d6:	2b12      	cmp	r3, #18
 80041d8:	d82a      	bhi.n	8004230 <HAL_GPIO_Init+0xcc>
 80041da:	2b12      	cmp	r3, #18
 80041dc:	d859      	bhi.n	8004292 <HAL_GPIO_Init+0x12e>
 80041de:	a201      	add	r2, pc, #4	; (adr r2, 80041e4 <HAL_GPIO_Init+0x80>)
 80041e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e4:	0800425f 	.word	0x0800425f
 80041e8:	08004239 	.word	0x08004239
 80041ec:	0800424b 	.word	0x0800424b
 80041f0:	0800428d 	.word	0x0800428d
 80041f4:	08004293 	.word	0x08004293
 80041f8:	08004293 	.word	0x08004293
 80041fc:	08004293 	.word	0x08004293
 8004200:	08004293 	.word	0x08004293
 8004204:	08004293 	.word	0x08004293
 8004208:	08004293 	.word	0x08004293
 800420c:	08004293 	.word	0x08004293
 8004210:	08004293 	.word	0x08004293
 8004214:	08004293 	.word	0x08004293
 8004218:	08004293 	.word	0x08004293
 800421c:	08004293 	.word	0x08004293
 8004220:	08004293 	.word	0x08004293
 8004224:	08004293 	.word	0x08004293
 8004228:	08004241 	.word	0x08004241
 800422c:	08004255 	.word	0x08004255
 8004230:	4a79      	ldr	r2, [pc, #484]	; (8004418 <HAL_GPIO_Init+0x2b4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d013      	beq.n	800425e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004236:	e02c      	b.n	8004292 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	623b      	str	r3, [r7, #32]
          break;
 800423e:	e029      	b.n	8004294 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	3304      	adds	r3, #4
 8004246:	623b      	str	r3, [r7, #32]
          break;
 8004248:	e024      	b.n	8004294 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	3308      	adds	r3, #8
 8004250:	623b      	str	r3, [r7, #32]
          break;
 8004252:	e01f      	b.n	8004294 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	330c      	adds	r3, #12
 800425a:	623b      	str	r3, [r7, #32]
          break;
 800425c:	e01a      	b.n	8004294 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d102      	bne.n	800426c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004266:	2304      	movs	r3, #4
 8004268:	623b      	str	r3, [r7, #32]
          break;
 800426a:	e013      	b.n	8004294 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d105      	bne.n	8004280 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004274:	2308      	movs	r3, #8
 8004276:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69fa      	ldr	r2, [r7, #28]
 800427c:	611a      	str	r2, [r3, #16]
          break;
 800427e:	e009      	b.n	8004294 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004280:	2308      	movs	r3, #8
 8004282:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	615a      	str	r2, [r3, #20]
          break;
 800428a:	e003      	b.n	8004294 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800428c:	2300      	movs	r3, #0
 800428e:	623b      	str	r3, [r7, #32]
          break;
 8004290:	e000      	b.n	8004294 <HAL_GPIO_Init+0x130>
          break;
 8004292:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	2bff      	cmp	r3, #255	; 0xff
 8004298:	d801      	bhi.n	800429e <HAL_GPIO_Init+0x13a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	e001      	b.n	80042a2 <HAL_GPIO_Init+0x13e>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3304      	adds	r3, #4
 80042a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	2bff      	cmp	r3, #255	; 0xff
 80042a8:	d802      	bhi.n	80042b0 <HAL_GPIO_Init+0x14c>
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	e002      	b.n	80042b6 <HAL_GPIO_Init+0x152>
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	3b08      	subs	r3, #8
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	210f      	movs	r1, #15
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	fa01 f303 	lsl.w	r3, r1, r3
 80042c4:	43db      	mvns	r3, r3
 80042c6:	401a      	ands	r2, r3
 80042c8:	6a39      	ldr	r1, [r7, #32]
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	fa01 f303 	lsl.w	r3, r1, r3
 80042d0:	431a      	orrs	r2, r3
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 80b1 	beq.w	8004446 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80042e4:	4b4d      	ldr	r3, [pc, #308]	; (800441c <HAL_GPIO_Init+0x2b8>)
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	4a4c      	ldr	r2, [pc, #304]	; (800441c <HAL_GPIO_Init+0x2b8>)
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	6193      	str	r3, [r2, #24]
 80042f0:	4b4a      	ldr	r3, [pc, #296]	; (800441c <HAL_GPIO_Init+0x2b8>)
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80042fc:	4a48      	ldr	r2, [pc, #288]	; (8004420 <HAL_GPIO_Init+0x2bc>)
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	089b      	lsrs	r3, r3, #2
 8004302:	3302      	adds	r3, #2
 8004304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004308:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	f003 0303 	and.w	r3, r3, #3
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	220f      	movs	r2, #15
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	43db      	mvns	r3, r3
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	4013      	ands	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a40      	ldr	r2, [pc, #256]	; (8004424 <HAL_GPIO_Init+0x2c0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d013      	beq.n	8004350 <HAL_GPIO_Init+0x1ec>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a3f      	ldr	r2, [pc, #252]	; (8004428 <HAL_GPIO_Init+0x2c4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d00d      	beq.n	800434c <HAL_GPIO_Init+0x1e8>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a3e      	ldr	r2, [pc, #248]	; (800442c <HAL_GPIO_Init+0x2c8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d007      	beq.n	8004348 <HAL_GPIO_Init+0x1e4>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a3d      	ldr	r2, [pc, #244]	; (8004430 <HAL_GPIO_Init+0x2cc>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d101      	bne.n	8004344 <HAL_GPIO_Init+0x1e0>
 8004340:	2303      	movs	r3, #3
 8004342:	e006      	b.n	8004352 <HAL_GPIO_Init+0x1ee>
 8004344:	2304      	movs	r3, #4
 8004346:	e004      	b.n	8004352 <HAL_GPIO_Init+0x1ee>
 8004348:	2302      	movs	r3, #2
 800434a:	e002      	b.n	8004352 <HAL_GPIO_Init+0x1ee>
 800434c:	2301      	movs	r3, #1
 800434e:	e000      	b.n	8004352 <HAL_GPIO_Init+0x1ee>
 8004350:	2300      	movs	r3, #0
 8004352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004354:	f002 0203 	and.w	r2, r2, #3
 8004358:	0092      	lsls	r2, r2, #2
 800435a:	4093      	lsls	r3, r2
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	4313      	orrs	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004362:	492f      	ldr	r1, [pc, #188]	; (8004420 <HAL_GPIO_Init+0x2bc>)
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	089b      	lsrs	r3, r3, #2
 8004368:	3302      	adds	r3, #2
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d006      	beq.n	800438a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800437c:	4b2d      	ldr	r3, [pc, #180]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	492c      	ldr	r1, [pc, #176]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	4313      	orrs	r3, r2
 8004386:	608b      	str	r3, [r1, #8]
 8004388:	e006      	b.n	8004398 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800438a:	4b2a      	ldr	r3, [pc, #168]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 800438c:	689a      	ldr	r2, [r3, #8]
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	43db      	mvns	r3, r3
 8004392:	4928      	ldr	r1, [pc, #160]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 8004394:	4013      	ands	r3, r2
 8004396:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d006      	beq.n	80043b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80043a4:	4b23      	ldr	r3, [pc, #140]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	4922      	ldr	r1, [pc, #136]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60cb      	str	r3, [r1, #12]
 80043b0:	e006      	b.n	80043c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80043b2:	4b20      	ldr	r3, [pc, #128]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	43db      	mvns	r3, r3
 80043ba:	491e      	ldr	r1, [pc, #120]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 80043bc:	4013      	ands	r3, r2
 80043be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d006      	beq.n	80043da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80043cc:	4b19      	ldr	r3, [pc, #100]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	4918      	ldr	r1, [pc, #96]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	604b      	str	r3, [r1, #4]
 80043d8:	e006      	b.n	80043e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80043da:	4b16      	ldr	r3, [pc, #88]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	43db      	mvns	r3, r3
 80043e2:	4914      	ldr	r1, [pc, #80]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d021      	beq.n	8004438 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80043f4:	4b0f      	ldr	r3, [pc, #60]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	490e      	ldr	r1, [pc, #56]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	600b      	str	r3, [r1, #0]
 8004400:	e021      	b.n	8004446 <HAL_GPIO_Init+0x2e2>
 8004402:	bf00      	nop
 8004404:	10320000 	.word	0x10320000
 8004408:	10310000 	.word	0x10310000
 800440c:	10220000 	.word	0x10220000
 8004410:	10210000 	.word	0x10210000
 8004414:	10120000 	.word	0x10120000
 8004418:	10110000 	.word	0x10110000
 800441c:	40021000 	.word	0x40021000
 8004420:	40010000 	.word	0x40010000
 8004424:	40010800 	.word	0x40010800
 8004428:	40010c00 	.word	0x40010c00
 800442c:	40011000 	.word	0x40011000
 8004430:	40011400 	.word	0x40011400
 8004434:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004438:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <HAL_GPIO_Init+0x304>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	43db      	mvns	r3, r3
 8004440:	4909      	ldr	r1, [pc, #36]	; (8004468 <HAL_GPIO_Init+0x304>)
 8004442:	4013      	ands	r3, r2
 8004444:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	3301      	adds	r3, #1
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	fa22 f303 	lsr.w	r3, r2, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	f47f ae8e 	bne.w	8004178 <HAL_GPIO_Init+0x14>
  }
}
 800445c:	bf00      	nop
 800445e:	bf00      	nop
 8004460:	372c      	adds	r7, #44	; 0x2c
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr
 8004468:	40010400 	.word	0x40010400

0800446c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	807b      	strh	r3, [r7, #2]
 8004478:	4613      	mov	r3, r2
 800447a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800447c:	787b      	ldrb	r3, [r7, #1]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004482:	887a      	ldrh	r2, [r7, #2]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004488:	e003      	b.n	8004492 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800448a:	887b      	ldrh	r3, [r7, #2]
 800448c:	041a      	lsls	r2, r3, #16
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	611a      	str	r2, [r3, #16]
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr

0800449c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	4603      	mov	r3, r0
 80044a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80044a6:	4b08      	ldr	r3, [pc, #32]	; (80044c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044a8:	695a      	ldr	r2, [r3, #20]
 80044aa:	88fb      	ldrh	r3, [r7, #6]
 80044ac:	4013      	ands	r3, r2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d006      	beq.n	80044c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044b2:	4a05      	ldr	r2, [pc, #20]	; (80044c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044b4:	88fb      	ldrh	r3, [r7, #6]
 80044b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044b8:	88fb      	ldrh	r3, [r7, #6]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 f806 	bl	80044cc <HAL_GPIO_EXTI_Callback>
  }
}
 80044c0:	bf00      	nop
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	40010400 	.word	0x40010400

080044cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	4603      	mov	r3, r0
 80044d4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr

080044e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e12b      	b.n	800474a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d106      	bne.n	800450c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7ff f8de 	bl	80036c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2224      	movs	r2, #36	; 0x24
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0201 	bic.w	r2, r2, #1
 8004522:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004532:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004542:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004544:	f001 fbca 	bl	8005cdc <HAL_RCC_GetPCLK1Freq>
 8004548:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	4a81      	ldr	r2, [pc, #516]	; (8004754 <HAL_I2C_Init+0x274>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d807      	bhi.n	8004564 <HAL_I2C_Init+0x84>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4a80      	ldr	r2, [pc, #512]	; (8004758 <HAL_I2C_Init+0x278>)
 8004558:	4293      	cmp	r3, r2
 800455a:	bf94      	ite	ls
 800455c:	2301      	movls	r3, #1
 800455e:	2300      	movhi	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	e006      	b.n	8004572 <HAL_I2C_Init+0x92>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4a7d      	ldr	r2, [pc, #500]	; (800475c <HAL_I2C_Init+0x27c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	bf94      	ite	ls
 800456c:	2301      	movls	r3, #1
 800456e:	2300      	movhi	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e0e7      	b.n	800474a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4a78      	ldr	r2, [pc, #480]	; (8004760 <HAL_I2C_Init+0x280>)
 800457e:	fba2 2303 	umull	r2, r3, r2, r3
 8004582:	0c9b      	lsrs	r3, r3, #18
 8004584:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	430a      	orrs	r2, r1
 8004598:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	4a6a      	ldr	r2, [pc, #424]	; (8004754 <HAL_I2C_Init+0x274>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d802      	bhi.n	80045b4 <HAL_I2C_Init+0xd4>
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	3301      	adds	r3, #1
 80045b2:	e009      	b.n	80045c8 <HAL_I2C_Init+0xe8>
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045ba:	fb02 f303 	mul.w	r3, r2, r3
 80045be:	4a69      	ldr	r2, [pc, #420]	; (8004764 <HAL_I2C_Init+0x284>)
 80045c0:	fba2 2303 	umull	r2, r3, r2, r3
 80045c4:	099b      	lsrs	r3, r3, #6
 80045c6:	3301      	adds	r3, #1
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6812      	ldr	r2, [r2, #0]
 80045cc:	430b      	orrs	r3, r1
 80045ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	495c      	ldr	r1, [pc, #368]	; (8004754 <HAL_I2C_Init+0x274>)
 80045e4:	428b      	cmp	r3, r1
 80045e6:	d819      	bhi.n	800461c <HAL_I2C_Init+0x13c>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	1e59      	subs	r1, r3, #1
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80045f6:	1c59      	adds	r1, r3, #1
 80045f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045fc:	400b      	ands	r3, r1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <HAL_I2C_Init+0x138>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	1e59      	subs	r1, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004610:	3301      	adds	r3, #1
 8004612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004616:	e051      	b.n	80046bc <HAL_I2C_Init+0x1dc>
 8004618:	2304      	movs	r3, #4
 800461a:	e04f      	b.n	80046bc <HAL_I2C_Init+0x1dc>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d111      	bne.n	8004648 <HAL_I2C_Init+0x168>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	1e58      	subs	r0, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6859      	ldr	r1, [r3, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	440b      	add	r3, r1
 8004632:	fbb0 f3f3 	udiv	r3, r0, r3
 8004636:	3301      	adds	r3, #1
 8004638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800463c:	2b00      	cmp	r3, #0
 800463e:	bf0c      	ite	eq
 8004640:	2301      	moveq	r3, #1
 8004642:	2300      	movne	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	e012      	b.n	800466e <HAL_I2C_Init+0x18e>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	1e58      	subs	r0, r3, #1
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6859      	ldr	r1, [r3, #4]
 8004650:	460b      	mov	r3, r1
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	0099      	lsls	r1, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	fbb0 f3f3 	udiv	r3, r0, r3
 800465e:	3301      	adds	r3, #1
 8004660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004664:	2b00      	cmp	r3, #0
 8004666:	bf0c      	ite	eq
 8004668:	2301      	moveq	r3, #1
 800466a:	2300      	movne	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_I2C_Init+0x196>
 8004672:	2301      	movs	r3, #1
 8004674:	e022      	b.n	80046bc <HAL_I2C_Init+0x1dc>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10e      	bne.n	800469c <HAL_I2C_Init+0x1bc>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	1e58      	subs	r0, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6859      	ldr	r1, [r3, #4]
 8004686:	460b      	mov	r3, r1
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	440b      	add	r3, r1
 800468c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004690:	3301      	adds	r3, #1
 8004692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800469a:	e00f      	b.n	80046bc <HAL_I2C_Init+0x1dc>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	1e58      	subs	r0, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6859      	ldr	r1, [r3, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	0099      	lsls	r1, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80046b2:	3301      	adds	r3, #1
 80046b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046bc:	6879      	ldr	r1, [r7, #4]
 80046be:	6809      	ldr	r1, [r1, #0]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69da      	ldr	r2, [r3, #28]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80046ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6911      	ldr	r1, [r2, #16]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	68d2      	ldr	r2, [r2, #12]
 80046f6:	4311      	orrs	r1, r2
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6812      	ldr	r2, [r2, #0]
 80046fc:	430b      	orrs	r3, r1
 80046fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695a      	ldr	r2, [r3, #20]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0201 	orr.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	000186a0 	.word	0x000186a0
 8004758:	001e847f 	.word	0x001e847f
 800475c:	003d08ff 	.word	0x003d08ff
 8004760:	431bde83 	.word	0x431bde83
 8004764:	10624dd3 	.word	0x10624dd3

08004768 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af02      	add	r7, sp, #8
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	607a      	str	r2, [r7, #4]
 8004772:	461a      	mov	r2, r3
 8004774:	460b      	mov	r3, r1
 8004776:	817b      	strh	r3, [r7, #10]
 8004778:	4613      	mov	r3, r2
 800477a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800477c:	f7ff f9c6 	bl	8003b0c <HAL_GetTick>
 8004780:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b20      	cmp	r3, #32
 800478c:	f040 80e0 	bne.w	8004950 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	2319      	movs	r3, #25
 8004796:	2201      	movs	r2, #1
 8004798:	4970      	ldr	r1, [pc, #448]	; (800495c <HAL_I2C_Master_Transmit+0x1f4>)
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 fc9e 	bl	80050dc <I2C_WaitOnFlagUntilTimeout>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80047a6:	2302      	movs	r3, #2
 80047a8:	e0d3      	b.n	8004952 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_I2C_Master_Transmit+0x50>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e0cc      	b.n	8004952 <HAL_I2C_Master_Transmit+0x1ea>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d007      	beq.n	80047de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f042 0201 	orr.w	r2, r2, #1
 80047dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2221      	movs	r2, #33	; 0x21
 80047f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2210      	movs	r2, #16
 80047fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	893a      	ldrh	r2, [r7, #8]
 800480e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004814:	b29a      	uxth	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4a50      	ldr	r2, [pc, #320]	; (8004960 <HAL_I2C_Master_Transmit+0x1f8>)
 800481e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004820:	8979      	ldrh	r1, [r7, #10]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	6a3a      	ldr	r2, [r7, #32]
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 fb08 	bl	8004e3c <I2C_MasterRequestWrite>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e08d      	b.n	8004952 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004836:	2300      	movs	r3, #0
 8004838:	613b      	str	r3, [r7, #16]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	613b      	str	r3, [r7, #16]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	613b      	str	r3, [r7, #16]
 800484a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800484c:	e066      	b.n	800491c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	6a39      	ldr	r1, [r7, #32]
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 fd5c 	bl	8005310 <I2C_WaitOnTXEFlagUntilTimeout>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00d      	beq.n	800487a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	2b04      	cmp	r3, #4
 8004864:	d107      	bne.n	8004876 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004874:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e06b      	b.n	8004952 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	781a      	ldrb	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004894:	b29b      	uxth	r3, r3
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a2:	3b01      	subs	r3, #1
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d11b      	bne.n	80048f0 <HAL_I2C_Master_Transmit+0x188>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d017      	beq.n	80048f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	781a      	ldrb	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048da:	b29b      	uxth	r3, r3
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29a      	uxth	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	6a39      	ldr	r1, [r7, #32]
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 fd53 	bl	80053a0 <I2C_WaitOnBTFFlagUntilTimeout>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00d      	beq.n	800491c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	2b04      	cmp	r3, #4
 8004906:	d107      	bne.n	8004918 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004916:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e01a      	b.n	8004952 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004920:	2b00      	cmp	r3, #0
 8004922:	d194      	bne.n	800484e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004932:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800494c:	2300      	movs	r3, #0
 800494e:	e000      	b.n	8004952 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004950:	2302      	movs	r3, #2
  }
}
 8004952:	4618      	mov	r0, r3
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	00100002 	.word	0x00100002
 8004960:	ffff0000 	.word	0xffff0000

08004964 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b08c      	sub	sp, #48	; 0x30
 8004968:	af02      	add	r7, sp, #8
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	607a      	str	r2, [r7, #4]
 800496e:	461a      	mov	r2, r3
 8004970:	460b      	mov	r3, r1
 8004972:	817b      	strh	r3, [r7, #10]
 8004974:	4613      	mov	r3, r2
 8004976:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800497c:	f7ff f8c6 	bl	8003b0c <HAL_GetTick>
 8004980:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b20      	cmp	r3, #32
 800498c:	f040 824b 	bne.w	8004e26 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	2319      	movs	r3, #25
 8004996:	2201      	movs	r2, #1
 8004998:	497f      	ldr	r1, [pc, #508]	; (8004b98 <HAL_I2C_Master_Receive+0x234>)
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 fb9e 	bl	80050dc <I2C_WaitOnFlagUntilTimeout>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80049a6:	2302      	movs	r3, #2
 80049a8:	e23e      	b.n	8004e28 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d101      	bne.n	80049b8 <HAL_I2C_Master_Receive+0x54>
 80049b4:	2302      	movs	r3, #2
 80049b6:	e237      	b.n	8004e28 <HAL_I2C_Master_Receive+0x4c4>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d007      	beq.n	80049de <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f042 0201 	orr.w	r2, r2, #1
 80049dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2222      	movs	r2, #34	; 0x22
 80049f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2210      	movs	r2, #16
 80049fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	893a      	ldrh	r2, [r7, #8]
 8004a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	4a5f      	ldr	r2, [pc, #380]	; (8004b9c <HAL_I2C_Master_Receive+0x238>)
 8004a1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a20:	8979      	ldrh	r1, [r7, #10]
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 fa8a 	bl	8004f40 <I2C_MasterRequestRead>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e1f8      	b.n	8004e28 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d113      	bne.n	8004a66 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a3e:	2300      	movs	r3, #0
 8004a40:	61fb      	str	r3, [r7, #28]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	61fb      	str	r3, [r7, #28]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	61fb      	str	r3, [r7, #28]
 8004a52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	e1cc      	b.n	8004e00 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d11e      	bne.n	8004aac <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a7e:	b672      	cpsid	i
}
 8004a80:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a82:	2300      	movs	r3, #0
 8004a84:	61bb      	str	r3, [r7, #24]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	61bb      	str	r3, [r7, #24]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	61bb      	str	r3, [r7, #24]
 8004a96:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aa6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004aa8:	b662      	cpsie	i
}
 8004aaa:	e035      	b.n	8004b18 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d11e      	bne.n	8004af2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ac2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ac4:	b672      	cpsid	i
}
 8004ac6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004aee:	b662      	cpsie	i
}
 8004af0:	e012      	b.n	8004b18 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b02:	2300      	movs	r3, #0
 8004b04:	613b      	str	r3, [r7, #16]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004b18:	e172      	b.n	8004e00 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	f200 811f 	bhi.w	8004d62 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d123      	bne.n	8004b74 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 fc7d 	bl	8005430 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e173      	b.n	8004e28 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	691a      	ldr	r2, [r3, #16]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	1c5a      	adds	r2, r3, #1
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b72:	e145      	b.n	8004e00 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d152      	bne.n	8004c22 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b82:	2200      	movs	r2, #0
 8004b84:	4906      	ldr	r1, [pc, #24]	; (8004ba0 <HAL_I2C_Master_Receive+0x23c>)
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 faa8 	bl	80050dc <I2C_WaitOnFlagUntilTimeout>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d008      	beq.n	8004ba4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e148      	b.n	8004e28 <HAL_I2C_Master_Receive+0x4c4>
 8004b96:	bf00      	nop
 8004b98:	00100002 	.word	0x00100002
 8004b9c:	ffff0000 	.word	0xffff0000
 8004ba0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004ba4:	b672      	cpsid	i
}
 8004ba6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	691a      	ldr	r2, [r3, #16]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	b2d2      	uxtb	r2, r2
 8004bc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	1c5a      	adds	r2, r3, #1
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	3b01      	subs	r3, #1
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004bea:	b662      	cpsie	i
}
 8004bec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	b2d2      	uxtb	r2, r2
 8004bfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c20:	e0ee      	b.n	8004e00 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	2200      	movs	r2, #0
 8004c2a:	4981      	ldr	r1, [pc, #516]	; (8004e30 <HAL_I2C_Master_Receive+0x4cc>)
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 fa55 	bl	80050dc <I2C_WaitOnFlagUntilTimeout>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e0f5      	b.n	8004e28 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c4c:	b672      	cpsid	i
}
 8004c4e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691a      	ldr	r2, [r3, #16]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	b2d2      	uxtb	r2, r2
 8004c5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c82:	4b6c      	ldr	r3, [pc, #432]	; (8004e34 <HAL_I2C_Master_Receive+0x4d0>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	08db      	lsrs	r3, r3, #3
 8004c88:	4a6b      	ldr	r2, [pc, #428]	; (8004e38 <HAL_I2C_Master_Receive+0x4d4>)
 8004c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8e:	0a1a      	lsrs	r2, r3, #8
 8004c90:	4613      	mov	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	00da      	lsls	r2, r3, #3
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004ca2:	6a3b      	ldr	r3, [r7, #32]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d118      	bne.n	8004cda <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	f043 0220 	orr.w	r2, r3, #32
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004cca:	b662      	cpsie	i
}
 8004ccc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e0a6      	b.n	8004e28 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d1d9      	bne.n	8004c9c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691a      	ldr	r2, [r3, #16]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d14:	3b01      	subs	r3, #1
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004d2a:	b662      	cpsie	i
}
 8004d2c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	b2d2      	uxtb	r2, r2
 8004d3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d60:	e04e      	b.n	8004e00 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 fb62 	bl	8005430 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e058      	b.n	8004e28 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	b2d2      	uxtb	r2, r2
 8004d82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	1c5a      	adds	r2, r3, #1
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d92:	3b01      	subs	r3, #1
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	f003 0304 	and.w	r3, r3, #4
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	d124      	bne.n	8004e00 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dba:	2b03      	cmp	r3, #3
 8004dbc:	d107      	bne.n	8004dce <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dcc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	691a      	ldr	r2, [r3, #16]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f47f ae88 	bne.w	8004b1a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e22:	2300      	movs	r3, #0
 8004e24:	e000      	b.n	8004e28 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8004e26:	2302      	movs	r3, #2
  }
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3728      	adds	r7, #40	; 0x28
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	00010004 	.word	0x00010004
 8004e34:	20000004 	.word	0x20000004
 8004e38:	14f8b589 	.word	0x14f8b589

08004e3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b088      	sub	sp, #32
 8004e40:	af02      	add	r7, sp, #8
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	607a      	str	r2, [r7, #4]
 8004e46:	603b      	str	r3, [r7, #0]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d006      	beq.n	8004e66 <I2C_MasterRequestWrite+0x2a>
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d003      	beq.n	8004e66 <I2C_MasterRequestWrite+0x2a>
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e64:	d108      	bne.n	8004e78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	e00b      	b.n	8004e90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7c:	2b12      	cmp	r3, #18
 8004e7e:	d107      	bne.n	8004e90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 f91d 	bl	80050dc <I2C_WaitOnFlagUntilTimeout>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00d      	beq.n	8004ec4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eb6:	d103      	bne.n	8004ec0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ebe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e035      	b.n	8004f30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ecc:	d108      	bne.n	8004ee0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ece:	897b      	ldrh	r3, [r7, #10]
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004edc:	611a      	str	r2, [r3, #16]
 8004ede:	e01b      	b.n	8004f18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ee0:	897b      	ldrh	r3, [r7, #10]
 8004ee2:	11db      	asrs	r3, r3, #7
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	f003 0306 	and.w	r3, r3, #6
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	f063 030f 	orn	r3, r3, #15
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	490e      	ldr	r1, [pc, #56]	; (8004f38 <I2C_MasterRequestWrite+0xfc>)
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f000 f966 	bl	80051d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e010      	b.n	8004f30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f0e:	897b      	ldrh	r3, [r7, #10]
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	4907      	ldr	r1, [pc, #28]	; (8004f3c <I2C_MasterRequestWrite+0x100>)
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 f956 	bl	80051d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e000      	b.n	8004f30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	00010008 	.word	0x00010008
 8004f3c:	00010002 	.word	0x00010002

08004f40 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af02      	add	r7, sp, #8
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	607a      	str	r2, [r7, #4]
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f64:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d006      	beq.n	8004f7a <I2C_MasterRequestRead+0x3a>
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d003      	beq.n	8004f7a <I2C_MasterRequestRead+0x3a>
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f78:	d108      	bne.n	8004f8c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	e00b      	b.n	8004fa4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f90:	2b11      	cmp	r3, #17
 8004f92:	d107      	bne.n	8004fa4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fa2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 f893 	bl	80050dc <I2C_WaitOnFlagUntilTimeout>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00d      	beq.n	8004fd8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fca:	d103      	bne.n	8004fd4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e079      	b.n	80050cc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fe0:	d108      	bne.n	8004ff4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004fe2:	897b      	ldrh	r3, [r7, #10]
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	f043 0301 	orr.w	r3, r3, #1
 8004fea:	b2da      	uxtb	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	611a      	str	r2, [r3, #16]
 8004ff2:	e05f      	b.n	80050b4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ff4:	897b      	ldrh	r3, [r7, #10]
 8004ff6:	11db      	asrs	r3, r3, #7
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	f003 0306 	and.w	r3, r3, #6
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	f063 030f 	orn	r3, r3, #15
 8005004:	b2da      	uxtb	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	4930      	ldr	r1, [pc, #192]	; (80050d4 <I2C_MasterRequestRead+0x194>)
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 f8dc 	bl	80051d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e054      	b.n	80050cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005022:	897b      	ldrh	r3, [r7, #10]
 8005024:	b2da      	uxtb	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	4929      	ldr	r1, [pc, #164]	; (80050d8 <I2C_MasterRequestRead+0x198>)
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 f8cc 	bl	80051d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e044      	b.n	80050cc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005042:	2300      	movs	r3, #0
 8005044:	613b      	str	r3, [r7, #16]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	613b      	str	r3, [r7, #16]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	613b      	str	r3, [r7, #16]
 8005056:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005066:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 f831 	bl	80050dc <I2C_WaitOnFlagUntilTimeout>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00d      	beq.n	800509c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800508e:	d103      	bne.n	8005098 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005096:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e017      	b.n	80050cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800509c:	897b      	ldrh	r3, [r7, #10]
 800509e:	11db      	asrs	r3, r3, #7
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	f003 0306 	and.w	r3, r3, #6
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	f063 030e 	orn	r3, r3, #14
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	4907      	ldr	r1, [pc, #28]	; (80050d8 <I2C_MasterRequestRead+0x198>)
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 f888 	bl	80051d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e000      	b.n	80050cc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3718      	adds	r7, #24
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	00010008 	.word	0x00010008
 80050d8:	00010002 	.word	0x00010002

080050dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	603b      	str	r3, [r7, #0]
 80050e8:	4613      	mov	r3, r2
 80050ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050ec:	e048      	b.n	8005180 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f4:	d044      	beq.n	8005180 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050f6:	f7fe fd09 	bl	8003b0c <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	429a      	cmp	r2, r3
 8005104:	d302      	bcc.n	800510c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d139      	bne.n	8005180 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	0c1b      	lsrs	r3, r3, #16
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b01      	cmp	r3, #1
 8005114:	d10d      	bne.n	8005132 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	43da      	mvns	r2, r3
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	4013      	ands	r3, r2
 8005122:	b29b      	uxth	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	bf0c      	ite	eq
 8005128:	2301      	moveq	r3, #1
 800512a:	2300      	movne	r3, #0
 800512c:	b2db      	uxtb	r3, r3
 800512e:	461a      	mov	r2, r3
 8005130:	e00c      	b.n	800514c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	43da      	mvns	r2, r3
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	4013      	ands	r3, r2
 800513e:	b29b      	uxth	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	bf0c      	ite	eq
 8005144:	2301      	moveq	r3, #1
 8005146:	2300      	movne	r3, #0
 8005148:	b2db      	uxtb	r3, r3
 800514a:	461a      	mov	r2, r3
 800514c:	79fb      	ldrb	r3, [r7, #7]
 800514e:	429a      	cmp	r2, r3
 8005150:	d116      	bne.n	8005180 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2220      	movs	r2, #32
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516c:	f043 0220 	orr.w	r2, r3, #32
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e023      	b.n	80051c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	0c1b      	lsrs	r3, r3, #16
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b01      	cmp	r3, #1
 8005188:	d10d      	bne.n	80051a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	43da      	mvns	r2, r3
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	4013      	ands	r3, r2
 8005196:	b29b      	uxth	r3, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	bf0c      	ite	eq
 800519c:	2301      	moveq	r3, #1
 800519e:	2300      	movne	r3, #0
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	461a      	mov	r2, r3
 80051a4:	e00c      	b.n	80051c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	43da      	mvns	r2, r3
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	4013      	ands	r3, r2
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	bf0c      	ite	eq
 80051b8:	2301      	moveq	r3, #1
 80051ba:	2300      	movne	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	461a      	mov	r2, r3
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d093      	beq.n	80050ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
 80051dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051de:	e071      	b.n	80052c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ee:	d123      	bne.n	8005238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005208:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2220      	movs	r2, #32
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	f043 0204 	orr.w	r2, r3, #4
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e067      	b.n	8005308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523e:	d041      	beq.n	80052c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005240:	f7fe fc64 	bl	8003b0c <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	429a      	cmp	r2, r3
 800524e:	d302      	bcc.n	8005256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d136      	bne.n	80052c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	0c1b      	lsrs	r3, r3, #16
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b01      	cmp	r3, #1
 800525e:	d10c      	bne.n	800527a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	43da      	mvns	r2, r3
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	4013      	ands	r3, r2
 800526c:	b29b      	uxth	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	bf14      	ite	ne
 8005272:	2301      	movne	r3, #1
 8005274:	2300      	moveq	r3, #0
 8005276:	b2db      	uxtb	r3, r3
 8005278:	e00b      	b.n	8005292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	43da      	mvns	r2, r3
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	4013      	ands	r3, r2
 8005286:	b29b      	uxth	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	bf14      	ite	ne
 800528c:	2301      	movne	r3, #1
 800528e:	2300      	moveq	r3, #0
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d016      	beq.n	80052c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2220      	movs	r2, #32
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b0:	f043 0220 	orr.w	r2, r3, #32
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e021      	b.n	8005308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	0c1b      	lsrs	r3, r3, #16
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d10c      	bne.n	80052e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	43da      	mvns	r2, r3
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	4013      	ands	r3, r2
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	bf14      	ite	ne
 80052e0:	2301      	movne	r3, #1
 80052e2:	2300      	moveq	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	e00b      	b.n	8005300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	43da      	mvns	r2, r3
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4013      	ands	r3, r2
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	bf14      	ite	ne
 80052fa:	2301      	movne	r3, #1
 80052fc:	2300      	moveq	r3, #0
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	f47f af6d 	bne.w	80051e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800531c:	e034      	b.n	8005388 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 f8e3 	bl	80054ea <I2C_IsAcknowledgeFailed>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e034      	b.n	8005398 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005334:	d028      	beq.n	8005388 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005336:	f7fe fbe9 	bl	8003b0c <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	429a      	cmp	r2, r3
 8005344:	d302      	bcc.n	800534c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d11d      	bne.n	8005388 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005356:	2b80      	cmp	r3, #128	; 0x80
 8005358:	d016      	beq.n	8005388 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2220      	movs	r2, #32
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005374:	f043 0220 	orr.w	r2, r3, #32
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e007      	b.n	8005398 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005392:	2b80      	cmp	r3, #128	; 0x80
 8005394:	d1c3      	bne.n	800531e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053ac:	e034      	b.n	8005418 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f000 f89b 	bl	80054ea <I2C_IsAcknowledgeFailed>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e034      	b.n	8005428 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c4:	d028      	beq.n	8005418 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c6:	f7fe fba1 	bl	8003b0c <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d302      	bcc.n	80053dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d11d      	bne.n	8005418 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	f003 0304 	and.w	r3, r3, #4
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d016      	beq.n	8005418 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005404:	f043 0220 	orr.w	r2, r3, #32
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e007      	b.n	8005428 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	f003 0304 	and.w	r3, r3, #4
 8005422:	2b04      	cmp	r3, #4
 8005424:	d1c3      	bne.n	80053ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800543c:	e049      	b.n	80054d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	f003 0310 	and.w	r3, r3, #16
 8005448:	2b10      	cmp	r3, #16
 800544a:	d119      	bne.n	8005480 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f06f 0210 	mvn.w	r2, #16
 8005454:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2220      	movs	r2, #32
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e030      	b.n	80054e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005480:	f7fe fb44 	bl	8003b0c <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	429a      	cmp	r2, r3
 800548e:	d302      	bcc.n	8005496 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d11d      	bne.n	80054d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a0:	2b40      	cmp	r3, #64	; 0x40
 80054a2:	d016      	beq.n	80054d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	f043 0220 	orr.w	r2, r3, #32
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e007      	b.n	80054e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054dc:	2b40      	cmp	r3, #64	; 0x40
 80054de:	d1ae      	bne.n	800543e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005500:	d11b      	bne.n	800553a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800550a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2220      	movs	r2, #32
 8005516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	f043 0204 	orr.w	r2, r3, #4
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	bc80      	pop	{r7}
 8005544:	4770      	bx	lr
	...

08005548 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e272      	b.n	8005a40 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 8087 	beq.w	8005676 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005568:	4b92      	ldr	r3, [pc, #584]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f003 030c 	and.w	r3, r3, #12
 8005570:	2b04      	cmp	r3, #4
 8005572:	d00c      	beq.n	800558e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005574:	4b8f      	ldr	r3, [pc, #572]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f003 030c 	and.w	r3, r3, #12
 800557c:	2b08      	cmp	r3, #8
 800557e:	d112      	bne.n	80055a6 <HAL_RCC_OscConfig+0x5e>
 8005580:	4b8c      	ldr	r3, [pc, #560]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800558c:	d10b      	bne.n	80055a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800558e:	4b89      	ldr	r3, [pc, #548]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d06c      	beq.n	8005674 <HAL_RCC_OscConfig+0x12c>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d168      	bne.n	8005674 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e24c      	b.n	8005a40 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ae:	d106      	bne.n	80055be <HAL_RCC_OscConfig+0x76>
 80055b0:	4b80      	ldr	r3, [pc, #512]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a7f      	ldr	r2, [pc, #508]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 80055b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ba:	6013      	str	r3, [r2, #0]
 80055bc:	e02e      	b.n	800561c <HAL_RCC_OscConfig+0xd4>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10c      	bne.n	80055e0 <HAL_RCC_OscConfig+0x98>
 80055c6:	4b7b      	ldr	r3, [pc, #492]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a7a      	ldr	r2, [pc, #488]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 80055cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	4b78      	ldr	r3, [pc, #480]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a77      	ldr	r2, [pc, #476]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 80055d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055dc:	6013      	str	r3, [r2, #0]
 80055de:	e01d      	b.n	800561c <HAL_RCC_OscConfig+0xd4>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055e8:	d10c      	bne.n	8005604 <HAL_RCC_OscConfig+0xbc>
 80055ea:	4b72      	ldr	r3, [pc, #456]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a71      	ldr	r2, [pc, #452]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 80055f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055f4:	6013      	str	r3, [r2, #0]
 80055f6:	4b6f      	ldr	r3, [pc, #444]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a6e      	ldr	r2, [pc, #440]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 80055fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005600:	6013      	str	r3, [r2, #0]
 8005602:	e00b      	b.n	800561c <HAL_RCC_OscConfig+0xd4>
 8005604:	4b6b      	ldr	r3, [pc, #428]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a6a      	ldr	r2, [pc, #424]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 800560a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800560e:	6013      	str	r3, [r2, #0]
 8005610:	4b68      	ldr	r3, [pc, #416]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a67      	ldr	r2, [pc, #412]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 8005616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800561a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d013      	beq.n	800564c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005624:	f7fe fa72 	bl	8003b0c <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800562c:	f7fe fa6e 	bl	8003b0c <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b64      	cmp	r3, #100	; 0x64
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e200      	b.n	8005a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800563e:	4b5d      	ldr	r3, [pc, #372]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d0f0      	beq.n	800562c <HAL_RCC_OscConfig+0xe4>
 800564a:	e014      	b.n	8005676 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800564c:	f7fe fa5e 	bl	8003b0c <HAL_GetTick>
 8005650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005652:	e008      	b.n	8005666 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005654:	f7fe fa5a 	bl	8003b0c <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b64      	cmp	r3, #100	; 0x64
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e1ec      	b.n	8005a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005666:	4b53      	ldr	r3, [pc, #332]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1f0      	bne.n	8005654 <HAL_RCC_OscConfig+0x10c>
 8005672:	e000      	b.n	8005676 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d063      	beq.n	800574a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005682:	4b4c      	ldr	r3, [pc, #304]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f003 030c 	and.w	r3, r3, #12
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00b      	beq.n	80056a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800568e:	4b49      	ldr	r3, [pc, #292]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f003 030c 	and.w	r3, r3, #12
 8005696:	2b08      	cmp	r3, #8
 8005698:	d11c      	bne.n	80056d4 <HAL_RCC_OscConfig+0x18c>
 800569a:	4b46      	ldr	r3, [pc, #280]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d116      	bne.n	80056d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056a6:	4b43      	ldr	r3, [pc, #268]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d005      	beq.n	80056be <HAL_RCC_OscConfig+0x176>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d001      	beq.n	80056be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e1c0      	b.n	8005a40 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056be:	4b3d      	ldr	r3, [pc, #244]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	4939      	ldr	r1, [pc, #228]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056d2:	e03a      	b.n	800574a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d020      	beq.n	800571e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056dc:	4b36      	ldr	r3, [pc, #216]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 80056de:	2201      	movs	r2, #1
 80056e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e2:	f7fe fa13 	bl	8003b0c <HAL_GetTick>
 80056e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056e8:	e008      	b.n	80056fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056ea:	f7fe fa0f 	bl	8003b0c <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d901      	bls.n	80056fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e1a1      	b.n	8005a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056fc:	4b2d      	ldr	r3, [pc, #180]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0f0      	beq.n	80056ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005708:	4b2a      	ldr	r3, [pc, #168]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	00db      	lsls	r3, r3, #3
 8005716:	4927      	ldr	r1, [pc, #156]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 8005718:	4313      	orrs	r3, r2
 800571a:	600b      	str	r3, [r1, #0]
 800571c:	e015      	b.n	800574a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800571e:	4b26      	ldr	r3, [pc, #152]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 8005720:	2200      	movs	r2, #0
 8005722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005724:	f7fe f9f2 	bl	8003b0c <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800572c:	f7fe f9ee 	bl	8003b0c <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e180      	b.n	8005a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800573e:	4b1d      	ldr	r3, [pc, #116]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1f0      	bne.n	800572c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0308 	and.w	r3, r3, #8
 8005752:	2b00      	cmp	r3, #0
 8005754:	d03a      	beq.n	80057cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d019      	beq.n	8005792 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800575e:	4b17      	ldr	r3, [pc, #92]	; (80057bc <HAL_RCC_OscConfig+0x274>)
 8005760:	2201      	movs	r2, #1
 8005762:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005764:	f7fe f9d2 	bl	8003b0c <HAL_GetTick>
 8005768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800576c:	f7fe f9ce 	bl	8003b0c <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e160      	b.n	8005a40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800577e:	4b0d      	ldr	r3, [pc, #52]	; (80057b4 <HAL_RCC_OscConfig+0x26c>)
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0f0      	beq.n	800576c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800578a:	2001      	movs	r0, #1
 800578c:	f000 face 	bl	8005d2c <RCC_Delay>
 8005790:	e01c      	b.n	80057cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005792:	4b0a      	ldr	r3, [pc, #40]	; (80057bc <HAL_RCC_OscConfig+0x274>)
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005798:	f7fe f9b8 	bl	8003b0c <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800579e:	e00f      	b.n	80057c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057a0:	f7fe f9b4 	bl	8003b0c <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d908      	bls.n	80057c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e146      	b.n	8005a40 <HAL_RCC_OscConfig+0x4f8>
 80057b2:	bf00      	nop
 80057b4:	40021000 	.word	0x40021000
 80057b8:	42420000 	.word	0x42420000
 80057bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057c0:	4b92      	ldr	r3, [pc, #584]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1e9      	bne.n	80057a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 80a6 	beq.w	8005926 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057da:	2300      	movs	r3, #0
 80057dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057de:	4b8b      	ldr	r3, [pc, #556]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10d      	bne.n	8005806 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057ea:	4b88      	ldr	r3, [pc, #544]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	4a87      	ldr	r2, [pc, #540]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 80057f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057f4:	61d3      	str	r3, [r2, #28]
 80057f6:	4b85      	ldr	r3, [pc, #532]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057fe:	60bb      	str	r3, [r7, #8]
 8005800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005802:	2301      	movs	r3, #1
 8005804:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005806:	4b82      	ldr	r3, [pc, #520]	; (8005a10 <HAL_RCC_OscConfig+0x4c8>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580e:	2b00      	cmp	r3, #0
 8005810:	d118      	bne.n	8005844 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005812:	4b7f      	ldr	r3, [pc, #508]	; (8005a10 <HAL_RCC_OscConfig+0x4c8>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a7e      	ldr	r2, [pc, #504]	; (8005a10 <HAL_RCC_OscConfig+0x4c8>)
 8005818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800581c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800581e:	f7fe f975 	bl	8003b0c <HAL_GetTick>
 8005822:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005824:	e008      	b.n	8005838 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005826:	f7fe f971 	bl	8003b0c <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b64      	cmp	r3, #100	; 0x64
 8005832:	d901      	bls.n	8005838 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e103      	b.n	8005a40 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005838:	4b75      	ldr	r3, [pc, #468]	; (8005a10 <HAL_RCC_OscConfig+0x4c8>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005840:	2b00      	cmp	r3, #0
 8005842:	d0f0      	beq.n	8005826 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d106      	bne.n	800585a <HAL_RCC_OscConfig+0x312>
 800584c:	4b6f      	ldr	r3, [pc, #444]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	4a6e      	ldr	r2, [pc, #440]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 8005852:	f043 0301 	orr.w	r3, r3, #1
 8005856:	6213      	str	r3, [r2, #32]
 8005858:	e02d      	b.n	80058b6 <HAL_RCC_OscConfig+0x36e>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10c      	bne.n	800587c <HAL_RCC_OscConfig+0x334>
 8005862:	4b6a      	ldr	r3, [pc, #424]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	4a69      	ldr	r2, [pc, #420]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 8005868:	f023 0301 	bic.w	r3, r3, #1
 800586c:	6213      	str	r3, [r2, #32]
 800586e:	4b67      	ldr	r3, [pc, #412]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	4a66      	ldr	r2, [pc, #408]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 8005874:	f023 0304 	bic.w	r3, r3, #4
 8005878:	6213      	str	r3, [r2, #32]
 800587a:	e01c      	b.n	80058b6 <HAL_RCC_OscConfig+0x36e>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	2b05      	cmp	r3, #5
 8005882:	d10c      	bne.n	800589e <HAL_RCC_OscConfig+0x356>
 8005884:	4b61      	ldr	r3, [pc, #388]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	4a60      	ldr	r2, [pc, #384]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 800588a:	f043 0304 	orr.w	r3, r3, #4
 800588e:	6213      	str	r3, [r2, #32]
 8005890:	4b5e      	ldr	r3, [pc, #376]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	4a5d      	ldr	r2, [pc, #372]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 8005896:	f043 0301 	orr.w	r3, r3, #1
 800589a:	6213      	str	r3, [r2, #32]
 800589c:	e00b      	b.n	80058b6 <HAL_RCC_OscConfig+0x36e>
 800589e:	4b5b      	ldr	r3, [pc, #364]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	4a5a      	ldr	r2, [pc, #360]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 80058a4:	f023 0301 	bic.w	r3, r3, #1
 80058a8:	6213      	str	r3, [r2, #32]
 80058aa:	4b58      	ldr	r3, [pc, #352]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	4a57      	ldr	r2, [pc, #348]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 80058b0:	f023 0304 	bic.w	r3, r3, #4
 80058b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d015      	beq.n	80058ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058be:	f7fe f925 	bl	8003b0c <HAL_GetTick>
 80058c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058c4:	e00a      	b.n	80058dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058c6:	f7fe f921 	bl	8003b0c <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d901      	bls.n	80058dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e0b1      	b.n	8005a40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058dc:	4b4b      	ldr	r3, [pc, #300]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0ee      	beq.n	80058c6 <HAL_RCC_OscConfig+0x37e>
 80058e8:	e014      	b.n	8005914 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058ea:	f7fe f90f 	bl	8003b0c <HAL_GetTick>
 80058ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058f0:	e00a      	b.n	8005908 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058f2:	f7fe f90b 	bl	8003b0c <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005900:	4293      	cmp	r3, r2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e09b      	b.n	8005a40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005908:	4b40      	ldr	r3, [pc, #256]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1ee      	bne.n	80058f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005914:	7dfb      	ldrb	r3, [r7, #23]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d105      	bne.n	8005926 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800591a:	4b3c      	ldr	r3, [pc, #240]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	4a3b      	ldr	r2, [pc, #236]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 8005920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005924:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 8087 	beq.w	8005a3e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005930:	4b36      	ldr	r3, [pc, #216]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f003 030c 	and.w	r3, r3, #12
 8005938:	2b08      	cmp	r3, #8
 800593a:	d061      	beq.n	8005a00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	2b02      	cmp	r3, #2
 8005942:	d146      	bne.n	80059d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005944:	4b33      	ldr	r3, [pc, #204]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 8005946:	2200      	movs	r2, #0
 8005948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800594a:	f7fe f8df 	bl	8003b0c <HAL_GetTick>
 800594e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005950:	e008      	b.n	8005964 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005952:	f7fe f8db 	bl	8003b0c <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d901      	bls.n	8005964 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e06d      	b.n	8005a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005964:	4b29      	ldr	r3, [pc, #164]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1f0      	bne.n	8005952 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005978:	d108      	bne.n	800598c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800597a:	4b24      	ldr	r3, [pc, #144]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	4921      	ldr	r1, [pc, #132]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 8005988:	4313      	orrs	r3, r2
 800598a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800598c:	4b1f      	ldr	r3, [pc, #124]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a19      	ldr	r1, [r3, #32]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	430b      	orrs	r3, r1
 800599e:	491b      	ldr	r1, [pc, #108]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059a4:	4b1b      	ldr	r3, [pc, #108]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 80059a6:	2201      	movs	r2, #1
 80059a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059aa:	f7fe f8af 	bl	8003b0c <HAL_GetTick>
 80059ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059b0:	e008      	b.n	80059c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059b2:	f7fe f8ab 	bl	8003b0c <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d901      	bls.n	80059c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e03d      	b.n	8005a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059c4:	4b11      	ldr	r3, [pc, #68]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0f0      	beq.n	80059b2 <HAL_RCC_OscConfig+0x46a>
 80059d0:	e035      	b.n	8005a3e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059d2:	4b10      	ldr	r3, [pc, #64]	; (8005a14 <HAL_RCC_OscConfig+0x4cc>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d8:	f7fe f898 	bl	8003b0c <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059e0:	f7fe f894 	bl	8003b0c <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e026      	b.n	8005a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059f2:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <HAL_RCC_OscConfig+0x4c4>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1f0      	bne.n	80059e0 <HAL_RCC_OscConfig+0x498>
 80059fe:	e01e      	b.n	8005a3e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	69db      	ldr	r3, [r3, #28]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d107      	bne.n	8005a18 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e019      	b.n	8005a40 <HAL_RCC_OscConfig+0x4f8>
 8005a0c:	40021000 	.word	0x40021000
 8005a10:	40007000 	.word	0x40007000
 8005a14:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a18:	4b0b      	ldr	r3, [pc, #44]	; (8005a48 <HAL_RCC_OscConfig+0x500>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d106      	bne.n	8005a3a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d001      	beq.n	8005a3e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e000      	b.n	8005a40 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3718      	adds	r7, #24
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	40021000 	.word	0x40021000

08005a4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d101      	bne.n	8005a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e0d0      	b.n	8005c02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a60:	4b6a      	ldr	r3, [pc, #424]	; (8005c0c <HAL_RCC_ClockConfig+0x1c0>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0307 	and.w	r3, r3, #7
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d910      	bls.n	8005a90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a6e:	4b67      	ldr	r3, [pc, #412]	; (8005c0c <HAL_RCC_ClockConfig+0x1c0>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f023 0207 	bic.w	r2, r3, #7
 8005a76:	4965      	ldr	r1, [pc, #404]	; (8005c0c <HAL_RCC_ClockConfig+0x1c0>)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a7e:	4b63      	ldr	r3, [pc, #396]	; (8005c0c <HAL_RCC_ClockConfig+0x1c0>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0307 	and.w	r3, r3, #7
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d001      	beq.n	8005a90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e0b8      	b.n	8005c02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d020      	beq.n	8005ade <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d005      	beq.n	8005ab4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005aa8:	4b59      	ldr	r3, [pc, #356]	; (8005c10 <HAL_RCC_ClockConfig+0x1c4>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	4a58      	ldr	r2, [pc, #352]	; (8005c10 <HAL_RCC_ClockConfig+0x1c4>)
 8005aae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005ab2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0308 	and.w	r3, r3, #8
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d005      	beq.n	8005acc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ac0:	4b53      	ldr	r3, [pc, #332]	; (8005c10 <HAL_RCC_ClockConfig+0x1c4>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	4a52      	ldr	r2, [pc, #328]	; (8005c10 <HAL_RCC_ClockConfig+0x1c4>)
 8005ac6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005aca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005acc:	4b50      	ldr	r3, [pc, #320]	; (8005c10 <HAL_RCC_ClockConfig+0x1c4>)
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	494d      	ldr	r1, [pc, #308]	; (8005c10 <HAL_RCC_ClockConfig+0x1c4>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d040      	beq.n	8005b6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d107      	bne.n	8005b02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005af2:	4b47      	ldr	r3, [pc, #284]	; (8005c10 <HAL_RCC_ClockConfig+0x1c4>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d115      	bne.n	8005b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e07f      	b.n	8005c02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d107      	bne.n	8005b1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b0a:	4b41      	ldr	r3, [pc, #260]	; (8005c10 <HAL_RCC_ClockConfig+0x1c4>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d109      	bne.n	8005b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e073      	b.n	8005c02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b1a:	4b3d      	ldr	r3, [pc, #244]	; (8005c10 <HAL_RCC_ClockConfig+0x1c4>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e06b      	b.n	8005c02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b2a:	4b39      	ldr	r3, [pc, #228]	; (8005c10 <HAL_RCC_ClockConfig+0x1c4>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f023 0203 	bic.w	r2, r3, #3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	4936      	ldr	r1, [pc, #216]	; (8005c10 <HAL_RCC_ClockConfig+0x1c4>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b3c:	f7fd ffe6 	bl	8003b0c <HAL_GetTick>
 8005b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b42:	e00a      	b.n	8005b5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b44:	f7fd ffe2 	bl	8003b0c <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d901      	bls.n	8005b5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e053      	b.n	8005c02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b5a:	4b2d      	ldr	r3, [pc, #180]	; (8005c10 <HAL_RCC_ClockConfig+0x1c4>)
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f003 020c 	and.w	r2, r3, #12
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d1eb      	bne.n	8005b44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b6c:	4b27      	ldr	r3, [pc, #156]	; (8005c0c <HAL_RCC_ClockConfig+0x1c0>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0307 	and.w	r3, r3, #7
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d210      	bcs.n	8005b9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b7a:	4b24      	ldr	r3, [pc, #144]	; (8005c0c <HAL_RCC_ClockConfig+0x1c0>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f023 0207 	bic.w	r2, r3, #7
 8005b82:	4922      	ldr	r1, [pc, #136]	; (8005c0c <HAL_RCC_ClockConfig+0x1c0>)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b8a:	4b20      	ldr	r3, [pc, #128]	; (8005c0c <HAL_RCC_ClockConfig+0x1c0>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0307 	and.w	r3, r3, #7
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d001      	beq.n	8005b9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e032      	b.n	8005c02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d008      	beq.n	8005bba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ba8:	4b19      	ldr	r3, [pc, #100]	; (8005c10 <HAL_RCC_ClockConfig+0x1c4>)
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	4916      	ldr	r1, [pc, #88]	; (8005c10 <HAL_RCC_ClockConfig+0x1c4>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0308 	and.w	r3, r3, #8
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d009      	beq.n	8005bda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005bc6:	4b12      	ldr	r3, [pc, #72]	; (8005c10 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	490e      	ldr	r1, [pc, #56]	; (8005c10 <HAL_RCC_ClockConfig+0x1c4>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005bda:	f000 f821 	bl	8005c20 <HAL_RCC_GetSysClockFreq>
 8005bde:	4602      	mov	r2, r0
 8005be0:	4b0b      	ldr	r3, [pc, #44]	; (8005c10 <HAL_RCC_ClockConfig+0x1c4>)
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	091b      	lsrs	r3, r3, #4
 8005be6:	f003 030f 	and.w	r3, r3, #15
 8005bea:	490a      	ldr	r1, [pc, #40]	; (8005c14 <HAL_RCC_ClockConfig+0x1c8>)
 8005bec:	5ccb      	ldrb	r3, [r1, r3]
 8005bee:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf2:	4a09      	ldr	r2, [pc, #36]	; (8005c18 <HAL_RCC_ClockConfig+0x1cc>)
 8005bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005bf6:	4b09      	ldr	r3, [pc, #36]	; (8005c1c <HAL_RCC_ClockConfig+0x1d0>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fd ff44 	bl	8003a88 <HAL_InitTick>

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	40022000 	.word	0x40022000
 8005c10:	40021000 	.word	0x40021000
 8005c14:	08006e24 	.word	0x08006e24
 8005c18:	20000004 	.word	0x20000004
 8005c1c:	20000008 	.word	0x20000008

08005c20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c26:	2300      	movs	r3, #0
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60bb      	str	r3, [r7, #8]
 8005c2e:	2300      	movs	r3, #0
 8005c30:	617b      	str	r3, [r7, #20]
 8005c32:	2300      	movs	r3, #0
 8005c34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005c36:	2300      	movs	r3, #0
 8005c38:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005c3a:	4b1e      	ldr	r3, [pc, #120]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f003 030c 	and.w	r3, r3, #12
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	d002      	beq.n	8005c50 <HAL_RCC_GetSysClockFreq+0x30>
 8005c4a:	2b08      	cmp	r3, #8
 8005c4c:	d003      	beq.n	8005c56 <HAL_RCC_GetSysClockFreq+0x36>
 8005c4e:	e027      	b.n	8005ca0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c50:	4b19      	ldr	r3, [pc, #100]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005c52:	613b      	str	r3, [r7, #16]
      break;
 8005c54:	e027      	b.n	8005ca6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	0c9b      	lsrs	r3, r3, #18
 8005c5a:	f003 030f 	and.w	r3, r3, #15
 8005c5e:	4a17      	ldr	r2, [pc, #92]	; (8005cbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8005c60:	5cd3      	ldrb	r3, [r2, r3]
 8005c62:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d010      	beq.n	8005c90 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005c6e:	4b11      	ldr	r3, [pc, #68]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	0c5b      	lsrs	r3, r3, #17
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	4a11      	ldr	r2, [pc, #68]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005c7a:	5cd3      	ldrb	r3, [r2, r3]
 8005c7c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a0d      	ldr	r2, [pc, #52]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005c82:	fb03 f202 	mul.w	r2, r3, r2
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8c:	617b      	str	r3, [r7, #20]
 8005c8e:	e004      	b.n	8005c9a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a0c      	ldr	r2, [pc, #48]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005c94:	fb02 f303 	mul.w	r3, r2, r3
 8005c98:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	613b      	str	r3, [r7, #16]
      break;
 8005c9e:	e002      	b.n	8005ca6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ca0:	4b05      	ldr	r3, [pc, #20]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005ca2:	613b      	str	r3, [r7, #16]
      break;
 8005ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ca6:	693b      	ldr	r3, [r7, #16]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	371c      	adds	r7, #28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bc80      	pop	{r7}
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	40021000 	.word	0x40021000
 8005cb8:	007a1200 	.word	0x007a1200
 8005cbc:	08006e3c 	.word	0x08006e3c
 8005cc0:	08006e4c 	.word	0x08006e4c
 8005cc4:	003d0900 	.word	0x003d0900

08005cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ccc:	4b02      	ldr	r3, [pc, #8]	; (8005cd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005cce:	681b      	ldr	r3, [r3, #0]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bc80      	pop	{r7}
 8005cd6:	4770      	bx	lr
 8005cd8:	20000004 	.word	0x20000004

08005cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ce0:	f7ff fff2 	bl	8005cc8 <HAL_RCC_GetHCLKFreq>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	0a1b      	lsrs	r3, r3, #8
 8005cec:	f003 0307 	and.w	r3, r3, #7
 8005cf0:	4903      	ldr	r1, [pc, #12]	; (8005d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cf2:	5ccb      	ldrb	r3, [r1, r3]
 8005cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	40021000 	.word	0x40021000
 8005d00:	08006e34 	.word	0x08006e34

08005d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d08:	f7ff ffde 	bl	8005cc8 <HAL_RCC_GetHCLKFreq>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	4b05      	ldr	r3, [pc, #20]	; (8005d24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	0adb      	lsrs	r3, r3, #11
 8005d14:	f003 0307 	and.w	r3, r3, #7
 8005d18:	4903      	ldr	r1, [pc, #12]	; (8005d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d1a:	5ccb      	ldrb	r3, [r1, r3]
 8005d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	40021000 	.word	0x40021000
 8005d28:	08006e34 	.word	0x08006e34

08005d2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005d34:	4b0a      	ldr	r3, [pc, #40]	; (8005d60 <RCC_Delay+0x34>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a0a      	ldr	r2, [pc, #40]	; (8005d64 <RCC_Delay+0x38>)
 8005d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3e:	0a5b      	lsrs	r3, r3, #9
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	fb02 f303 	mul.w	r3, r2, r3
 8005d46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005d48:	bf00      	nop
  }
  while (Delay --);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	1e5a      	subs	r2, r3, #1
 8005d4e:	60fa      	str	r2, [r7, #12]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1f9      	bne.n	8005d48 <RCC_Delay+0x1c>
}
 8005d54:	bf00      	nop
 8005d56:	bf00      	nop
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bc80      	pop	{r7}
 8005d5e:	4770      	bx	lr
 8005d60:	20000004 	.word	0x20000004
 8005d64:	10624dd3 	.word	0x10624dd3

08005d68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e042      	b.n	8005e00 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d106      	bne.n	8005d94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7fd fd06 	bl	80037a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2224      	movs	r2, #36	; 0x24
 8005d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005daa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 fc7f 	bl	80066b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	691a      	ldr	r2, [r3, #16]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	695a      	ldr	r2, [r3, #20]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005de0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b0ba      	sub	sp, #232	; 0xe8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3e:	f003 030f 	and.w	r3, r3, #15
 8005e42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005e46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10f      	bne.n	8005e6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e52:	f003 0320 	and.w	r3, r3, #32
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d009      	beq.n	8005e6e <HAL_UART_IRQHandler+0x66>
 8005e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e5e:	f003 0320 	and.w	r3, r3, #32
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 fb63 	bl	8006532 <UART_Receive_IT>
      return;
 8005e6c:	e25b      	b.n	8006326 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f000 80de 	beq.w	8006034 <HAL_UART_IRQHandler+0x22c>
 8005e78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d106      	bne.n	8005e92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e88:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 80d1 	beq.w	8006034 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00b      	beq.n	8005eb6 <HAL_UART_IRQHandler+0xae>
 8005e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d005      	beq.n	8005eb6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eae:	f043 0201 	orr.w	r2, r3, #1
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eba:	f003 0304 	and.w	r3, r3, #4
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00b      	beq.n	8005eda <HAL_UART_IRQHandler+0xd2>
 8005ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d005      	beq.n	8005eda <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed2:	f043 0202 	orr.w	r2, r3, #2
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00b      	beq.n	8005efe <HAL_UART_IRQHandler+0xf6>
 8005ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d005      	beq.n	8005efe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef6:	f043 0204 	orr.w	r2, r3, #4
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f02:	f003 0308 	and.w	r3, r3, #8
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d011      	beq.n	8005f2e <HAL_UART_IRQHandler+0x126>
 8005f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f0e:	f003 0320 	and.w	r3, r3, #32
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d105      	bne.n	8005f22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d005      	beq.n	8005f2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f26:	f043 0208 	orr.w	r2, r3, #8
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f000 81f2 	beq.w	800631c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f3c:	f003 0320 	and.w	r3, r3, #32
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d008      	beq.n	8005f56 <HAL_UART_IRQHandler+0x14e>
 8005f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f48:	f003 0320 	and.w	r3, r3, #32
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d002      	beq.n	8005f56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 faee 	bl	8006532 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	bf14      	ite	ne
 8005f64:	2301      	movne	r3, #1
 8005f66:	2300      	moveq	r3, #0
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d103      	bne.n	8005f82 <HAL_UART_IRQHandler+0x17a>
 8005f7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d04f      	beq.n	8006022 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f9f8 	bl	8006378 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d041      	beq.n	800601a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	3314      	adds	r3, #20
 8005f9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fa4:	e853 3f00 	ldrex	r3, [r3]
 8005fa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005fac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3314      	adds	r3, #20
 8005fbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005fc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005fc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005fce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005fd2:	e841 2300 	strex	r3, r2, [r1]
 8005fd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005fda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1d9      	bne.n	8005f96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d013      	beq.n	8006012 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fee:	4a7e      	ldr	r2, [pc, #504]	; (80061e8 <HAL_UART_IRQHandler+0x3e0>)
 8005ff0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7fd ff36 	bl	8003e68 <HAL_DMA_Abort_IT>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d016      	beq.n	8006030 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800600c:	4610      	mov	r0, r2
 800600e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006010:	e00e      	b.n	8006030 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f99c 	bl	8006350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006018:	e00a      	b.n	8006030 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f998 	bl	8006350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006020:	e006      	b.n	8006030 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f994 	bl	8006350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800602e:	e175      	b.n	800631c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006030:	bf00      	nop
    return;
 8006032:	e173      	b.n	800631c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006038:	2b01      	cmp	r3, #1
 800603a:	f040 814f 	bne.w	80062dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800603e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006042:	f003 0310 	and.w	r3, r3, #16
 8006046:	2b00      	cmp	r3, #0
 8006048:	f000 8148 	beq.w	80062dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800604c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006050:	f003 0310 	and.w	r3, r3, #16
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 8141 	beq.w	80062dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800605a:	2300      	movs	r3, #0
 800605c:	60bb      	str	r3, [r7, #8]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	60bb      	str	r3, [r7, #8]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	60bb      	str	r3, [r7, #8]
 800606e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607a:	2b00      	cmp	r3, #0
 800607c:	f000 80b6 	beq.w	80061ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800608c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 8145 	beq.w	8006320 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800609a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800609e:	429a      	cmp	r2, r3
 80060a0:	f080 813e 	bcs.w	8006320 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	2b20      	cmp	r3, #32
 80060b4:	f000 8088 	beq.w	80061c8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	330c      	adds	r3, #12
 80060be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060c6:	e853 3f00 	ldrex	r3, [r3]
 80060ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80060ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	330c      	adds	r3, #12
 80060e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80060e4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060f4:	e841 2300 	strex	r3, r2, [r1]
 80060f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80060fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1d9      	bne.n	80060b8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3314      	adds	r3, #20
 800610a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800610e:	e853 3f00 	ldrex	r3, [r3]
 8006112:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006114:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006116:	f023 0301 	bic.w	r3, r3, #1
 800611a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3314      	adds	r3, #20
 8006124:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006128:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800612c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006130:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006134:	e841 2300 	strex	r3, r2, [r1]
 8006138:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800613a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1e1      	bne.n	8006104 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3314      	adds	r3, #20
 8006146:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006148:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800614a:	e853 3f00 	ldrex	r3, [r3]
 800614e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006156:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	3314      	adds	r3, #20
 8006160:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006164:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006166:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006168:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800616a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800616c:	e841 2300 	strex	r3, r2, [r1]
 8006170:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006172:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1e3      	bne.n	8006140 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2220      	movs	r2, #32
 800617c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	330c      	adds	r3, #12
 800618c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006198:	f023 0310 	bic.w	r3, r3, #16
 800619c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	330c      	adds	r3, #12
 80061a6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80061aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80061ac:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061b2:	e841 2300 	strex	r3, r2, [r1]
 80061b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1e3      	bne.n	8006186 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fd fe14 	bl	8003df0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	b29b      	uxth	r3, r3
 80061dc:	4619      	mov	r1, r3
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f8bf 	bl	8006362 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061e4:	e09c      	b.n	8006320 <HAL_UART_IRQHandler+0x518>
 80061e6:	bf00      	nop
 80061e8:	0800643d 	.word	0x0800643d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006200:	b29b      	uxth	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 808e 	beq.w	8006324 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006208:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 8089 	beq.w	8006324 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	330c      	adds	r3, #12
 8006218:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621c:	e853 3f00 	ldrex	r3, [r3]
 8006220:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006224:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006228:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	330c      	adds	r3, #12
 8006232:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006236:	647a      	str	r2, [r7, #68]	; 0x44
 8006238:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800623c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800623e:	e841 2300 	strex	r3, r2, [r1]
 8006242:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1e3      	bne.n	8006212 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3314      	adds	r3, #20
 8006250:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	e853 3f00 	ldrex	r3, [r3]
 8006258:	623b      	str	r3, [r7, #32]
   return(result);
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	f023 0301 	bic.w	r3, r3, #1
 8006260:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3314      	adds	r3, #20
 800626a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800626e:	633a      	str	r2, [r7, #48]	; 0x30
 8006270:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006276:	e841 2300 	strex	r3, r2, [r1]
 800627a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800627c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1e3      	bne.n	800624a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2220      	movs	r2, #32
 8006286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	330c      	adds	r3, #12
 8006296:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	e853 3f00 	ldrex	r3, [r3]
 800629e:	60fb      	str	r3, [r7, #12]
   return(result);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f023 0310 	bic.w	r3, r3, #16
 80062a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	330c      	adds	r3, #12
 80062b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80062b4:	61fa      	str	r2, [r7, #28]
 80062b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b8:	69b9      	ldr	r1, [r7, #24]
 80062ba:	69fa      	ldr	r2, [r7, #28]
 80062bc:	e841 2300 	strex	r3, r2, [r1]
 80062c0:	617b      	str	r3, [r7, #20]
   return(result);
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1e3      	bne.n	8006290 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062d2:	4619      	mov	r1, r3
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f844 	bl	8006362 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062da:	e023      	b.n	8006324 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d009      	beq.n	80062fc <HAL_UART_IRQHandler+0x4f4>
 80062e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f8b5 	bl	8006464 <UART_Transmit_IT>
    return;
 80062fa:	e014      	b.n	8006326 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00e      	beq.n	8006326 <HAL_UART_IRQHandler+0x51e>
 8006308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800630c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006310:	2b00      	cmp	r3, #0
 8006312:	d008      	beq.n	8006326 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f8f4 	bl	8006502 <UART_EndTransmit_IT>
    return;
 800631a:	e004      	b.n	8006326 <HAL_UART_IRQHandler+0x51e>
    return;
 800631c:	bf00      	nop
 800631e:	e002      	b.n	8006326 <HAL_UART_IRQHandler+0x51e>
      return;
 8006320:	bf00      	nop
 8006322:	e000      	b.n	8006326 <HAL_UART_IRQHandler+0x51e>
      return;
 8006324:	bf00      	nop
  }
}
 8006326:	37e8      	adds	r7, #232	; 0xe8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	bc80      	pop	{r7}
 800633c:	4770      	bx	lr

0800633e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800633e:	b480      	push	{r7}
 8006340:	b083      	sub	sp, #12
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006346:	bf00      	nop
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	bc80      	pop	{r7}
 800634e:	4770      	bx	lr

08006350 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	bc80      	pop	{r7}
 8006360:	4770      	bx	lr

08006362 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006362:	b480      	push	{r7}
 8006364:	b083      	sub	sp, #12
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	460b      	mov	r3, r1
 800636c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800636e:	bf00      	nop
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	bc80      	pop	{r7}
 8006376:	4770      	bx	lr

08006378 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006378:	b480      	push	{r7}
 800637a:	b095      	sub	sp, #84	; 0x54
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	330c      	adds	r3, #12
 8006386:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800638a:	e853 3f00 	ldrex	r3, [r3]
 800638e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006392:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	330c      	adds	r3, #12
 800639e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063a0:	643a      	str	r2, [r7, #64]	; 0x40
 80063a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063a8:	e841 2300 	strex	r3, r2, [r1]
 80063ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1e5      	bne.n	8006380 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	3314      	adds	r3, #20
 80063ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	e853 3f00 	ldrex	r3, [r3]
 80063c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	f023 0301 	bic.w	r3, r3, #1
 80063ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	3314      	adds	r3, #20
 80063d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063dc:	e841 2300 	strex	r3, r2, [r1]
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1e5      	bne.n	80063b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d119      	bne.n	8006424 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	330c      	adds	r3, #12
 80063f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	e853 3f00 	ldrex	r3, [r3]
 80063fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	f023 0310 	bic.w	r3, r3, #16
 8006406:	647b      	str	r3, [r7, #68]	; 0x44
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	330c      	adds	r3, #12
 800640e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006410:	61ba      	str	r2, [r7, #24]
 8006412:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006414:	6979      	ldr	r1, [r7, #20]
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	e841 2300 	strex	r3, r2, [r1]
 800641c:	613b      	str	r3, [r7, #16]
   return(result);
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1e5      	bne.n	80063f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2220      	movs	r2, #32
 8006428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006432:	bf00      	nop
 8006434:	3754      	adds	r7, #84	; 0x54
 8006436:	46bd      	mov	sp, r7
 8006438:	bc80      	pop	{r7}
 800643a:	4770      	bx	lr

0800643c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006448:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f7ff ff7a 	bl	8006350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800645c:	bf00      	nop
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006472:	b2db      	uxtb	r3, r3
 8006474:	2b21      	cmp	r3, #33	; 0x21
 8006476:	d13e      	bne.n	80064f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006480:	d114      	bne.n	80064ac <UART_Transmit_IT+0x48>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d110      	bne.n	80064ac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	881b      	ldrh	r3, [r3, #0]
 8006494:	461a      	mov	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800649e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	1c9a      	adds	r2, r3, #2
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	621a      	str	r2, [r3, #32]
 80064aa:	e008      	b.n	80064be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	1c59      	adds	r1, r3, #1
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	6211      	str	r1, [r2, #32]
 80064b6:	781a      	ldrb	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	3b01      	subs	r3, #1
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	4619      	mov	r1, r3
 80064cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10f      	bne.n	80064f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68da      	ldr	r2, [r3, #12]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68da      	ldr	r2, [r3, #12]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	e000      	b.n	80064f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064f6:	2302      	movs	r3, #2
  }
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bc80      	pop	{r7}
 8006500:	4770      	bx	lr

08006502 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b082      	sub	sp, #8
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68da      	ldr	r2, [r3, #12]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006518:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2220      	movs	r2, #32
 800651e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7ff ff02 	bl	800632c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b08c      	sub	sp, #48	; 0x30
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b22      	cmp	r3, #34	; 0x22
 8006544:	f040 80ae 	bne.w	80066a4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006550:	d117      	bne.n	8006582 <UART_Receive_IT+0x50>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d113      	bne.n	8006582 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800655a:	2300      	movs	r3, #0
 800655c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006562:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	b29b      	uxth	r3, r3
 800656c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006570:	b29a      	uxth	r2, r3
 8006572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006574:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657a:	1c9a      	adds	r2, r3, #2
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	629a      	str	r2, [r3, #40]	; 0x28
 8006580:	e026      	b.n	80065d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006586:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006588:	2300      	movs	r3, #0
 800658a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006594:	d007      	beq.n	80065a6 <UART_Receive_IT+0x74>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10a      	bne.n	80065b4 <UART_Receive_IT+0x82>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d106      	bne.n	80065b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b0:	701a      	strb	r2, [r3, #0]
 80065b2:	e008      	b.n	80065c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ca:	1c5a      	adds	r2, r3, #1
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	3b01      	subs	r3, #1
 80065d8:	b29b      	uxth	r3, r3
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	4619      	mov	r1, r3
 80065de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d15d      	bne.n	80066a0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68da      	ldr	r2, [r3, #12]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f022 0220 	bic.w	r2, r2, #32
 80065f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68da      	ldr	r2, [r3, #12]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006602:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	695a      	ldr	r2, [r3, #20]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f022 0201 	bic.w	r2, r2, #1
 8006612:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2220      	movs	r2, #32
 8006618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006626:	2b01      	cmp	r3, #1
 8006628:	d135      	bne.n	8006696 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	330c      	adds	r3, #12
 8006636:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	e853 3f00 	ldrex	r3, [r3]
 800663e:	613b      	str	r3, [r7, #16]
   return(result);
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	f023 0310 	bic.w	r3, r3, #16
 8006646:	627b      	str	r3, [r7, #36]	; 0x24
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	330c      	adds	r3, #12
 800664e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006650:	623a      	str	r2, [r7, #32]
 8006652:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006654:	69f9      	ldr	r1, [r7, #28]
 8006656:	6a3a      	ldr	r2, [r7, #32]
 8006658:	e841 2300 	strex	r3, r2, [r1]
 800665c:	61bb      	str	r3, [r7, #24]
   return(result);
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1e5      	bne.n	8006630 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0310 	and.w	r3, r3, #16
 800666e:	2b10      	cmp	r3, #16
 8006670:	d10a      	bne.n	8006688 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006672:	2300      	movs	r3, #0
 8006674:	60fb      	str	r3, [r7, #12]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	60fb      	str	r3, [r7, #12]
 8006686:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800668c:	4619      	mov	r1, r3
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7ff fe67 	bl	8006362 <HAL_UARTEx_RxEventCallback>
 8006694:	e002      	b.n	800669c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7ff fe51 	bl	800633e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	e002      	b.n	80066a6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	e000      	b.n	80066a6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80066a4:	2302      	movs	r3, #2
  }
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3730      	adds	r7, #48	; 0x30
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
	...

080066b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	689a      	ldr	r2, [r3, #8]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	431a      	orrs	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	4313      	orrs	r3, r2
 80066de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80066ea:	f023 030c 	bic.w	r3, r3, #12
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	6812      	ldr	r2, [r2, #0]
 80066f2:	68b9      	ldr	r1, [r7, #8]
 80066f4:	430b      	orrs	r3, r1
 80066f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699a      	ldr	r2, [r3, #24]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a2c      	ldr	r2, [pc, #176]	; (80067c4 <UART_SetConfig+0x114>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d103      	bne.n	8006720 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006718:	f7ff faf4 	bl	8005d04 <HAL_RCC_GetPCLK2Freq>
 800671c:	60f8      	str	r0, [r7, #12]
 800671e:	e002      	b.n	8006726 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006720:	f7ff fadc 	bl	8005cdc <HAL_RCC_GetPCLK1Freq>
 8006724:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	4613      	mov	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	009a      	lsls	r2, r3, #2
 8006730:	441a      	add	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	fbb2 f3f3 	udiv	r3, r2, r3
 800673c:	4a22      	ldr	r2, [pc, #136]	; (80067c8 <UART_SetConfig+0x118>)
 800673e:	fba2 2303 	umull	r2, r3, r2, r3
 8006742:	095b      	lsrs	r3, r3, #5
 8006744:	0119      	lsls	r1, r3, #4
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	4613      	mov	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4413      	add	r3, r2
 800674e:	009a      	lsls	r2, r3, #2
 8006750:	441a      	add	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	fbb2 f2f3 	udiv	r2, r2, r3
 800675c:	4b1a      	ldr	r3, [pc, #104]	; (80067c8 <UART_SetConfig+0x118>)
 800675e:	fba3 0302 	umull	r0, r3, r3, r2
 8006762:	095b      	lsrs	r3, r3, #5
 8006764:	2064      	movs	r0, #100	; 0x64
 8006766:	fb00 f303 	mul.w	r3, r0, r3
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	011b      	lsls	r3, r3, #4
 800676e:	3332      	adds	r3, #50	; 0x32
 8006770:	4a15      	ldr	r2, [pc, #84]	; (80067c8 <UART_SetConfig+0x118>)
 8006772:	fba2 2303 	umull	r2, r3, r2, r3
 8006776:	095b      	lsrs	r3, r3, #5
 8006778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800677c:	4419      	add	r1, r3
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	4613      	mov	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	009a      	lsls	r2, r3, #2
 8006788:	441a      	add	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	fbb2 f2f3 	udiv	r2, r2, r3
 8006794:	4b0c      	ldr	r3, [pc, #48]	; (80067c8 <UART_SetConfig+0x118>)
 8006796:	fba3 0302 	umull	r0, r3, r3, r2
 800679a:	095b      	lsrs	r3, r3, #5
 800679c:	2064      	movs	r0, #100	; 0x64
 800679e:	fb00 f303 	mul.w	r3, r0, r3
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	011b      	lsls	r3, r3, #4
 80067a6:	3332      	adds	r3, #50	; 0x32
 80067a8:	4a07      	ldr	r2, [pc, #28]	; (80067c8 <UART_SetConfig+0x118>)
 80067aa:	fba2 2303 	umull	r2, r3, r2, r3
 80067ae:	095b      	lsrs	r3, r3, #5
 80067b0:	f003 020f 	and.w	r2, r3, #15
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	440a      	add	r2, r1
 80067ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80067bc:	bf00      	nop
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	40013800 	.word	0x40013800
 80067c8:	51eb851f 	.word	0x51eb851f

080067cc <malloc>:
 80067cc:	4b02      	ldr	r3, [pc, #8]	; (80067d8 <malloc+0xc>)
 80067ce:	4601      	mov	r1, r0
 80067d0:	6818      	ldr	r0, [r3, #0]
 80067d2:	f000 b82b 	b.w	800682c <_malloc_r>
 80067d6:	bf00      	nop
 80067d8:	2000005c 	.word	0x2000005c

080067dc <free>:
 80067dc:	4b02      	ldr	r3, [pc, #8]	; (80067e8 <free+0xc>)
 80067de:	4601      	mov	r1, r0
 80067e0:	6818      	ldr	r0, [r3, #0]
 80067e2:	f000 b901 	b.w	80069e8 <_free_r>
 80067e6:	bf00      	nop
 80067e8:	2000005c 	.word	0x2000005c

080067ec <sbrk_aligned>:
 80067ec:	b570      	push	{r4, r5, r6, lr}
 80067ee:	4e0e      	ldr	r6, [pc, #56]	; (8006828 <sbrk_aligned+0x3c>)
 80067f0:	460c      	mov	r4, r1
 80067f2:	6831      	ldr	r1, [r6, #0]
 80067f4:	4605      	mov	r5, r0
 80067f6:	b911      	cbnz	r1, 80067fe <sbrk_aligned+0x12>
 80067f8:	f000 f8ac 	bl	8006954 <_sbrk_r>
 80067fc:	6030      	str	r0, [r6, #0]
 80067fe:	4621      	mov	r1, r4
 8006800:	4628      	mov	r0, r5
 8006802:	f000 f8a7 	bl	8006954 <_sbrk_r>
 8006806:	1c43      	adds	r3, r0, #1
 8006808:	d00a      	beq.n	8006820 <sbrk_aligned+0x34>
 800680a:	1cc4      	adds	r4, r0, #3
 800680c:	f024 0403 	bic.w	r4, r4, #3
 8006810:	42a0      	cmp	r0, r4
 8006812:	d007      	beq.n	8006824 <sbrk_aligned+0x38>
 8006814:	1a21      	subs	r1, r4, r0
 8006816:	4628      	mov	r0, r5
 8006818:	f000 f89c 	bl	8006954 <_sbrk_r>
 800681c:	3001      	adds	r0, #1
 800681e:	d101      	bne.n	8006824 <sbrk_aligned+0x38>
 8006820:	f04f 34ff 	mov.w	r4, #4294967295
 8006824:	4620      	mov	r0, r4
 8006826:	bd70      	pop	{r4, r5, r6, pc}
 8006828:	20000554 	.word	0x20000554

0800682c <_malloc_r>:
 800682c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006830:	1ccd      	adds	r5, r1, #3
 8006832:	f025 0503 	bic.w	r5, r5, #3
 8006836:	3508      	adds	r5, #8
 8006838:	2d0c      	cmp	r5, #12
 800683a:	bf38      	it	cc
 800683c:	250c      	movcc	r5, #12
 800683e:	2d00      	cmp	r5, #0
 8006840:	4607      	mov	r7, r0
 8006842:	db01      	blt.n	8006848 <_malloc_r+0x1c>
 8006844:	42a9      	cmp	r1, r5
 8006846:	d905      	bls.n	8006854 <_malloc_r+0x28>
 8006848:	230c      	movs	r3, #12
 800684a:	2600      	movs	r6, #0
 800684c:	603b      	str	r3, [r7, #0]
 800684e:	4630      	mov	r0, r6
 8006850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006854:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006928 <_malloc_r+0xfc>
 8006858:	f000 f868 	bl	800692c <__malloc_lock>
 800685c:	f8d8 3000 	ldr.w	r3, [r8]
 8006860:	461c      	mov	r4, r3
 8006862:	bb5c      	cbnz	r4, 80068bc <_malloc_r+0x90>
 8006864:	4629      	mov	r1, r5
 8006866:	4638      	mov	r0, r7
 8006868:	f7ff ffc0 	bl	80067ec <sbrk_aligned>
 800686c:	1c43      	adds	r3, r0, #1
 800686e:	4604      	mov	r4, r0
 8006870:	d155      	bne.n	800691e <_malloc_r+0xf2>
 8006872:	f8d8 4000 	ldr.w	r4, [r8]
 8006876:	4626      	mov	r6, r4
 8006878:	2e00      	cmp	r6, #0
 800687a:	d145      	bne.n	8006908 <_malloc_r+0xdc>
 800687c:	2c00      	cmp	r4, #0
 800687e:	d048      	beq.n	8006912 <_malloc_r+0xe6>
 8006880:	6823      	ldr	r3, [r4, #0]
 8006882:	4631      	mov	r1, r6
 8006884:	4638      	mov	r0, r7
 8006886:	eb04 0903 	add.w	r9, r4, r3
 800688a:	f000 f863 	bl	8006954 <_sbrk_r>
 800688e:	4581      	cmp	r9, r0
 8006890:	d13f      	bne.n	8006912 <_malloc_r+0xe6>
 8006892:	6821      	ldr	r1, [r4, #0]
 8006894:	4638      	mov	r0, r7
 8006896:	1a6d      	subs	r5, r5, r1
 8006898:	4629      	mov	r1, r5
 800689a:	f7ff ffa7 	bl	80067ec <sbrk_aligned>
 800689e:	3001      	adds	r0, #1
 80068a0:	d037      	beq.n	8006912 <_malloc_r+0xe6>
 80068a2:	6823      	ldr	r3, [r4, #0]
 80068a4:	442b      	add	r3, r5
 80068a6:	6023      	str	r3, [r4, #0]
 80068a8:	f8d8 3000 	ldr.w	r3, [r8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d038      	beq.n	8006922 <_malloc_r+0xf6>
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	42a2      	cmp	r2, r4
 80068b4:	d12b      	bne.n	800690e <_malloc_r+0xe2>
 80068b6:	2200      	movs	r2, #0
 80068b8:	605a      	str	r2, [r3, #4]
 80068ba:	e00f      	b.n	80068dc <_malloc_r+0xb0>
 80068bc:	6822      	ldr	r2, [r4, #0]
 80068be:	1b52      	subs	r2, r2, r5
 80068c0:	d41f      	bmi.n	8006902 <_malloc_r+0xd6>
 80068c2:	2a0b      	cmp	r2, #11
 80068c4:	d917      	bls.n	80068f6 <_malloc_r+0xca>
 80068c6:	1961      	adds	r1, r4, r5
 80068c8:	42a3      	cmp	r3, r4
 80068ca:	6025      	str	r5, [r4, #0]
 80068cc:	bf18      	it	ne
 80068ce:	6059      	strne	r1, [r3, #4]
 80068d0:	6863      	ldr	r3, [r4, #4]
 80068d2:	bf08      	it	eq
 80068d4:	f8c8 1000 	streq.w	r1, [r8]
 80068d8:	5162      	str	r2, [r4, r5]
 80068da:	604b      	str	r3, [r1, #4]
 80068dc:	4638      	mov	r0, r7
 80068de:	f104 060b 	add.w	r6, r4, #11
 80068e2:	f000 f829 	bl	8006938 <__malloc_unlock>
 80068e6:	f026 0607 	bic.w	r6, r6, #7
 80068ea:	1d23      	adds	r3, r4, #4
 80068ec:	1af2      	subs	r2, r6, r3
 80068ee:	d0ae      	beq.n	800684e <_malloc_r+0x22>
 80068f0:	1b9b      	subs	r3, r3, r6
 80068f2:	50a3      	str	r3, [r4, r2]
 80068f4:	e7ab      	b.n	800684e <_malloc_r+0x22>
 80068f6:	42a3      	cmp	r3, r4
 80068f8:	6862      	ldr	r2, [r4, #4]
 80068fa:	d1dd      	bne.n	80068b8 <_malloc_r+0x8c>
 80068fc:	f8c8 2000 	str.w	r2, [r8]
 8006900:	e7ec      	b.n	80068dc <_malloc_r+0xb0>
 8006902:	4623      	mov	r3, r4
 8006904:	6864      	ldr	r4, [r4, #4]
 8006906:	e7ac      	b.n	8006862 <_malloc_r+0x36>
 8006908:	4634      	mov	r4, r6
 800690a:	6876      	ldr	r6, [r6, #4]
 800690c:	e7b4      	b.n	8006878 <_malloc_r+0x4c>
 800690e:	4613      	mov	r3, r2
 8006910:	e7cc      	b.n	80068ac <_malloc_r+0x80>
 8006912:	230c      	movs	r3, #12
 8006914:	4638      	mov	r0, r7
 8006916:	603b      	str	r3, [r7, #0]
 8006918:	f000 f80e 	bl	8006938 <__malloc_unlock>
 800691c:	e797      	b.n	800684e <_malloc_r+0x22>
 800691e:	6025      	str	r5, [r4, #0]
 8006920:	e7dc      	b.n	80068dc <_malloc_r+0xb0>
 8006922:	605b      	str	r3, [r3, #4]
 8006924:	deff      	udf	#255	; 0xff
 8006926:	bf00      	nop
 8006928:	20000550 	.word	0x20000550

0800692c <__malloc_lock>:
 800692c:	4801      	ldr	r0, [pc, #4]	; (8006934 <__malloc_lock+0x8>)
 800692e:	f000 b84b 	b.w	80069c8 <__retarget_lock_acquire_recursive>
 8006932:	bf00      	nop
 8006934:	20000694 	.word	0x20000694

08006938 <__malloc_unlock>:
 8006938:	4801      	ldr	r0, [pc, #4]	; (8006940 <__malloc_unlock+0x8>)
 800693a:	f000 b846 	b.w	80069ca <__retarget_lock_release_recursive>
 800693e:	bf00      	nop
 8006940:	20000694 	.word	0x20000694

08006944 <memset>:
 8006944:	4603      	mov	r3, r0
 8006946:	4402      	add	r2, r0
 8006948:	4293      	cmp	r3, r2
 800694a:	d100      	bne.n	800694e <memset+0xa>
 800694c:	4770      	bx	lr
 800694e:	f803 1b01 	strb.w	r1, [r3], #1
 8006952:	e7f9      	b.n	8006948 <memset+0x4>

08006954 <_sbrk_r>:
 8006954:	b538      	push	{r3, r4, r5, lr}
 8006956:	2300      	movs	r3, #0
 8006958:	4d05      	ldr	r5, [pc, #20]	; (8006970 <_sbrk_r+0x1c>)
 800695a:	4604      	mov	r4, r0
 800695c:	4608      	mov	r0, r1
 800695e:	602b      	str	r3, [r5, #0]
 8006960:	f7fd f81a 	bl	8003998 <_sbrk>
 8006964:	1c43      	adds	r3, r0, #1
 8006966:	d102      	bne.n	800696e <_sbrk_r+0x1a>
 8006968:	682b      	ldr	r3, [r5, #0]
 800696a:	b103      	cbz	r3, 800696e <_sbrk_r+0x1a>
 800696c:	6023      	str	r3, [r4, #0]
 800696e:	bd38      	pop	{r3, r4, r5, pc}
 8006970:	20000690 	.word	0x20000690

08006974 <__errno>:
 8006974:	4b01      	ldr	r3, [pc, #4]	; (800697c <__errno+0x8>)
 8006976:	6818      	ldr	r0, [r3, #0]
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	2000005c 	.word	0x2000005c

08006980 <__libc_init_array>:
 8006980:	b570      	push	{r4, r5, r6, lr}
 8006982:	2600      	movs	r6, #0
 8006984:	4d0c      	ldr	r5, [pc, #48]	; (80069b8 <__libc_init_array+0x38>)
 8006986:	4c0d      	ldr	r4, [pc, #52]	; (80069bc <__libc_init_array+0x3c>)
 8006988:	1b64      	subs	r4, r4, r5
 800698a:	10a4      	asrs	r4, r4, #2
 800698c:	42a6      	cmp	r6, r4
 800698e:	d109      	bne.n	80069a4 <__libc_init_array+0x24>
 8006990:	f000 f96e 	bl	8006c70 <_init>
 8006994:	2600      	movs	r6, #0
 8006996:	4d0a      	ldr	r5, [pc, #40]	; (80069c0 <__libc_init_array+0x40>)
 8006998:	4c0a      	ldr	r4, [pc, #40]	; (80069c4 <__libc_init_array+0x44>)
 800699a:	1b64      	subs	r4, r4, r5
 800699c:	10a4      	asrs	r4, r4, #2
 800699e:	42a6      	cmp	r6, r4
 80069a0:	d105      	bne.n	80069ae <__libc_init_array+0x2e>
 80069a2:	bd70      	pop	{r4, r5, r6, pc}
 80069a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a8:	4798      	blx	r3
 80069aa:	3601      	adds	r6, #1
 80069ac:	e7ee      	b.n	800698c <__libc_init_array+0xc>
 80069ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80069b2:	4798      	blx	r3
 80069b4:	3601      	adds	r6, #1
 80069b6:	e7f2      	b.n	800699e <__libc_init_array+0x1e>
 80069b8:	08006e50 	.word	0x08006e50
 80069bc:	08006e50 	.word	0x08006e50
 80069c0:	08006e50 	.word	0x08006e50
 80069c4:	08006e54 	.word	0x08006e54

080069c8 <__retarget_lock_acquire_recursive>:
 80069c8:	4770      	bx	lr

080069ca <__retarget_lock_release_recursive>:
 80069ca:	4770      	bx	lr

080069cc <memcpy>:
 80069cc:	440a      	add	r2, r1
 80069ce:	4291      	cmp	r1, r2
 80069d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80069d4:	d100      	bne.n	80069d8 <memcpy+0xc>
 80069d6:	4770      	bx	lr
 80069d8:	b510      	push	{r4, lr}
 80069da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069de:	4291      	cmp	r1, r2
 80069e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069e4:	d1f9      	bne.n	80069da <memcpy+0xe>
 80069e6:	bd10      	pop	{r4, pc}

080069e8 <_free_r>:
 80069e8:	b538      	push	{r3, r4, r5, lr}
 80069ea:	4605      	mov	r5, r0
 80069ec:	2900      	cmp	r1, #0
 80069ee:	d040      	beq.n	8006a72 <_free_r+0x8a>
 80069f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069f4:	1f0c      	subs	r4, r1, #4
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	bfb8      	it	lt
 80069fa:	18e4      	addlt	r4, r4, r3
 80069fc:	f7ff ff96 	bl	800692c <__malloc_lock>
 8006a00:	4a1c      	ldr	r2, [pc, #112]	; (8006a74 <_free_r+0x8c>)
 8006a02:	6813      	ldr	r3, [r2, #0]
 8006a04:	b933      	cbnz	r3, 8006a14 <_free_r+0x2c>
 8006a06:	6063      	str	r3, [r4, #4]
 8006a08:	6014      	str	r4, [r2, #0]
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a10:	f7ff bf92 	b.w	8006938 <__malloc_unlock>
 8006a14:	42a3      	cmp	r3, r4
 8006a16:	d908      	bls.n	8006a2a <_free_r+0x42>
 8006a18:	6820      	ldr	r0, [r4, #0]
 8006a1a:	1821      	adds	r1, r4, r0
 8006a1c:	428b      	cmp	r3, r1
 8006a1e:	bf01      	itttt	eq
 8006a20:	6819      	ldreq	r1, [r3, #0]
 8006a22:	685b      	ldreq	r3, [r3, #4]
 8006a24:	1809      	addeq	r1, r1, r0
 8006a26:	6021      	streq	r1, [r4, #0]
 8006a28:	e7ed      	b.n	8006a06 <_free_r+0x1e>
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	b10b      	cbz	r3, 8006a34 <_free_r+0x4c>
 8006a30:	42a3      	cmp	r3, r4
 8006a32:	d9fa      	bls.n	8006a2a <_free_r+0x42>
 8006a34:	6811      	ldr	r1, [r2, #0]
 8006a36:	1850      	adds	r0, r2, r1
 8006a38:	42a0      	cmp	r0, r4
 8006a3a:	d10b      	bne.n	8006a54 <_free_r+0x6c>
 8006a3c:	6820      	ldr	r0, [r4, #0]
 8006a3e:	4401      	add	r1, r0
 8006a40:	1850      	adds	r0, r2, r1
 8006a42:	4283      	cmp	r3, r0
 8006a44:	6011      	str	r1, [r2, #0]
 8006a46:	d1e0      	bne.n	8006a0a <_free_r+0x22>
 8006a48:	6818      	ldr	r0, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	4408      	add	r0, r1
 8006a4e:	6010      	str	r0, [r2, #0]
 8006a50:	6053      	str	r3, [r2, #4]
 8006a52:	e7da      	b.n	8006a0a <_free_r+0x22>
 8006a54:	d902      	bls.n	8006a5c <_free_r+0x74>
 8006a56:	230c      	movs	r3, #12
 8006a58:	602b      	str	r3, [r5, #0]
 8006a5a:	e7d6      	b.n	8006a0a <_free_r+0x22>
 8006a5c:	6820      	ldr	r0, [r4, #0]
 8006a5e:	1821      	adds	r1, r4, r0
 8006a60:	428b      	cmp	r3, r1
 8006a62:	bf01      	itttt	eq
 8006a64:	6819      	ldreq	r1, [r3, #0]
 8006a66:	685b      	ldreq	r3, [r3, #4]
 8006a68:	1809      	addeq	r1, r1, r0
 8006a6a:	6021      	streq	r1, [r4, #0]
 8006a6c:	6063      	str	r3, [r4, #4]
 8006a6e:	6054      	str	r4, [r2, #4]
 8006a70:	e7cb      	b.n	8006a0a <_free_r+0x22>
 8006a72:	bd38      	pop	{r3, r4, r5, pc}
 8006a74:	20000550 	.word	0x20000550

08006a78 <sqrt>:
 8006a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7a:	4606      	mov	r6, r0
 8006a7c:	460f      	mov	r7, r1
 8006a7e:	f000 f81f 	bl	8006ac0 <__ieee754_sqrt>
 8006a82:	4632      	mov	r2, r6
 8006a84:	4604      	mov	r4, r0
 8006a86:	460d      	mov	r5, r1
 8006a88:	463b      	mov	r3, r7
 8006a8a:	4630      	mov	r0, r6
 8006a8c:	4639      	mov	r1, r7
 8006a8e:	f7f9 ffb5 	bl	80009fc <__aeabi_dcmpun>
 8006a92:	b990      	cbnz	r0, 8006aba <sqrt+0x42>
 8006a94:	2200      	movs	r2, #0
 8006a96:	2300      	movs	r3, #0
 8006a98:	4630      	mov	r0, r6
 8006a9a:	4639      	mov	r1, r7
 8006a9c:	f7f9 ff86 	bl	80009ac <__aeabi_dcmplt>
 8006aa0:	b158      	cbz	r0, 8006aba <sqrt+0x42>
 8006aa2:	f7ff ff67 	bl	8006974 <__errno>
 8006aa6:	2321      	movs	r3, #33	; 0x21
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	6003      	str	r3, [r0, #0]
 8006aac:	2300      	movs	r3, #0
 8006aae:	4610      	mov	r0, r2
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	f7f9 fe33 	bl	800071c <__aeabi_ddiv>
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	460d      	mov	r5, r1
 8006aba:	4620      	mov	r0, r4
 8006abc:	4629      	mov	r1, r5
 8006abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ac0 <__ieee754_sqrt>:
 8006ac0:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8006c64 <__ieee754_sqrt+0x1a4>
 8006ac4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac8:	ea3c 0c01 	bics.w	ip, ip, r1
 8006acc:	460b      	mov	r3, r1
 8006ace:	4606      	mov	r6, r0
 8006ad0:	460d      	mov	r5, r1
 8006ad2:	460a      	mov	r2, r1
 8006ad4:	4604      	mov	r4, r0
 8006ad6:	d10e      	bne.n	8006af6 <__ieee754_sqrt+0x36>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	f7f9 fcf5 	bl	80004c8 <__aeabi_dmul>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	4629      	mov	r1, r5
 8006ae6:	f7f9 fb39 	bl	800015c <__adddf3>
 8006aea:	4606      	mov	r6, r0
 8006aec:	460d      	mov	r5, r1
 8006aee:	4630      	mov	r0, r6
 8006af0:	4629      	mov	r1, r5
 8006af2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af6:	2900      	cmp	r1, #0
 8006af8:	dc0d      	bgt.n	8006b16 <__ieee754_sqrt+0x56>
 8006afa:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006afe:	ea5c 0c00 	orrs.w	ip, ip, r0
 8006b02:	d0f4      	beq.n	8006aee <__ieee754_sqrt+0x2e>
 8006b04:	b139      	cbz	r1, 8006b16 <__ieee754_sqrt+0x56>
 8006b06:	4602      	mov	r2, r0
 8006b08:	f7f9 fb26 	bl	8000158 <__aeabi_dsub>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	460b      	mov	r3, r1
 8006b10:	f7f9 fe04 	bl	800071c <__aeabi_ddiv>
 8006b14:	e7e9      	b.n	8006aea <__ieee754_sqrt+0x2a>
 8006b16:	1512      	asrs	r2, r2, #20
 8006b18:	f000 8089 	beq.w	8006c2e <__ieee754_sqrt+0x16e>
 8006b1c:	2500      	movs	r5, #0
 8006b1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b22:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8006b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b2a:	07d2      	lsls	r2, r2, #31
 8006b2c:	bf5c      	itt	pl
 8006b2e:	005b      	lslpl	r3, r3, #1
 8006b30:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8006b34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006b38:	bf58      	it	pl
 8006b3a:	0064      	lslpl	r4, r4, #1
 8006b3c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8006b40:	0062      	lsls	r2, r4, #1
 8006b42:	2016      	movs	r0, #22
 8006b44:	4629      	mov	r1, r5
 8006b46:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8006b4a:	1076      	asrs	r6, r6, #1
 8006b4c:	190f      	adds	r7, r1, r4
 8006b4e:	429f      	cmp	r7, r3
 8006b50:	bfde      	ittt	le
 8006b52:	1bdb      	suble	r3, r3, r7
 8006b54:	1939      	addle	r1, r7, r4
 8006b56:	192d      	addle	r5, r5, r4
 8006b58:	005b      	lsls	r3, r3, #1
 8006b5a:	3801      	subs	r0, #1
 8006b5c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006b60:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006b64:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006b68:	d1f0      	bne.n	8006b4c <__ieee754_sqrt+0x8c>
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	2720      	movs	r7, #32
 8006b6e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8006b72:	428b      	cmp	r3, r1
 8006b74:	eb0c 0e00 	add.w	lr, ip, r0
 8006b78:	dc02      	bgt.n	8006b80 <__ieee754_sqrt+0xc0>
 8006b7a:	d113      	bne.n	8006ba4 <__ieee754_sqrt+0xe4>
 8006b7c:	4596      	cmp	lr, r2
 8006b7e:	d811      	bhi.n	8006ba4 <__ieee754_sqrt+0xe4>
 8006b80:	f1be 0f00 	cmp.w	lr, #0
 8006b84:	eb0e 000c 	add.w	r0, lr, ip
 8006b88:	da56      	bge.n	8006c38 <__ieee754_sqrt+0x178>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	db54      	blt.n	8006c38 <__ieee754_sqrt+0x178>
 8006b8e:	f101 0801 	add.w	r8, r1, #1
 8006b92:	1a5b      	subs	r3, r3, r1
 8006b94:	4641      	mov	r1, r8
 8006b96:	4596      	cmp	lr, r2
 8006b98:	bf88      	it	hi
 8006b9a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006b9e:	eba2 020e 	sub.w	r2, r2, lr
 8006ba2:	4464      	add	r4, ip
 8006ba4:	005b      	lsls	r3, r3, #1
 8006ba6:	3f01      	subs	r7, #1
 8006ba8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006bac:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006bb0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006bb4:	d1dd      	bne.n	8006b72 <__ieee754_sqrt+0xb2>
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	d01b      	beq.n	8006bf2 <__ieee754_sqrt+0x132>
 8006bba:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8006c68 <__ieee754_sqrt+0x1a8>
 8006bbe:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8006c6c <__ieee754_sqrt+0x1ac>
 8006bc2:	e9da 0100 	ldrd	r0, r1, [sl]
 8006bc6:	e9db 2300 	ldrd	r2, r3, [fp]
 8006bca:	f7f9 fac5 	bl	8000158 <__aeabi_dsub>
 8006bce:	e9da 8900 	ldrd	r8, r9, [sl]
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	4640      	mov	r0, r8
 8006bd8:	4649      	mov	r1, r9
 8006bda:	f7f9 fef1 	bl	80009c0 <__aeabi_dcmple>
 8006bde:	b140      	cbz	r0, 8006bf2 <__ieee754_sqrt+0x132>
 8006be0:	e9da 0100 	ldrd	r0, r1, [sl]
 8006be4:	e9db 2300 	ldrd	r2, r3, [fp]
 8006be8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006bec:	d126      	bne.n	8006c3c <__ieee754_sqrt+0x17c>
 8006bee:	463c      	mov	r4, r7
 8006bf0:	3501      	adds	r5, #1
 8006bf2:	106b      	asrs	r3, r5, #1
 8006bf4:	0864      	lsrs	r4, r4, #1
 8006bf6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006bfa:	07ea      	lsls	r2, r5, #31
 8006bfc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006c00:	bf48      	it	mi
 8006c02:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8006c06:	4620      	mov	r0, r4
 8006c08:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8006c0c:	e76d      	b.n	8006aea <__ieee754_sqrt+0x2a>
 8006c0e:	0ae3      	lsrs	r3, r4, #11
 8006c10:	3915      	subs	r1, #21
 8006c12:	0564      	lsls	r4, r4, #21
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d0fa      	beq.n	8006c0e <__ieee754_sqrt+0x14e>
 8006c18:	02d8      	lsls	r0, r3, #11
 8006c1a:	d50a      	bpl.n	8006c32 <__ieee754_sqrt+0x172>
 8006c1c:	f1c2 0020 	rsb	r0, r2, #32
 8006c20:	fa24 f000 	lsr.w	r0, r4, r0
 8006c24:	1e55      	subs	r5, r2, #1
 8006c26:	4094      	lsls	r4, r2
 8006c28:	4303      	orrs	r3, r0
 8006c2a:	1b4a      	subs	r2, r1, r5
 8006c2c:	e776      	b.n	8006b1c <__ieee754_sqrt+0x5c>
 8006c2e:	4611      	mov	r1, r2
 8006c30:	e7f0      	b.n	8006c14 <__ieee754_sqrt+0x154>
 8006c32:	005b      	lsls	r3, r3, #1
 8006c34:	3201      	adds	r2, #1
 8006c36:	e7ef      	b.n	8006c18 <__ieee754_sqrt+0x158>
 8006c38:	4688      	mov	r8, r1
 8006c3a:	e7aa      	b.n	8006b92 <__ieee754_sqrt+0xd2>
 8006c3c:	f7f9 fa8e 	bl	800015c <__adddf3>
 8006c40:	e9da 8900 	ldrd	r8, r9, [sl]
 8006c44:	4602      	mov	r2, r0
 8006c46:	460b      	mov	r3, r1
 8006c48:	4640      	mov	r0, r8
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	f7f9 feae 	bl	80009ac <__aeabi_dcmplt>
 8006c50:	b120      	cbz	r0, 8006c5c <__ieee754_sqrt+0x19c>
 8006c52:	1ca1      	adds	r1, r4, #2
 8006c54:	bf08      	it	eq
 8006c56:	3501      	addeq	r5, #1
 8006c58:	3402      	adds	r4, #2
 8006c5a:	e7ca      	b.n	8006bf2 <__ieee754_sqrt+0x132>
 8006c5c:	3401      	adds	r4, #1
 8006c5e:	f024 0401 	bic.w	r4, r4, #1
 8006c62:	e7c6      	b.n	8006bf2 <__ieee754_sqrt+0x132>
 8006c64:	7ff00000 	.word	0x7ff00000
 8006c68:	20000060 	.word	0x20000060
 8006c6c:	20000068 	.word	0x20000068

08006c70 <_init>:
 8006c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c72:	bf00      	nop
 8006c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c76:	bc08      	pop	{r3}
 8006c78:	469e      	mov	lr, r3
 8006c7a:	4770      	bx	lr

08006c7c <_fini>:
 8006c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7e:	bf00      	nop
 8006c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c82:	bc08      	pop	{r3}
 8006c84:	469e      	mov	lr, r3
 8006c86:	4770      	bx	lr
